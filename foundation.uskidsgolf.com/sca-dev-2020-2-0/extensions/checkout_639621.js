var extensions = {};

extensions['Saralux.M360_SLXC_Core.2.7.7'] = function(){

function getExtensionAssetsPath(asset){
return 'extensions/Saralux/M360_SLXC_Core/2.7.7/' + asset;
};

define('Saralux.Core.AffiliateDirectory.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function AffiliateDirectorySS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/AffiliateDirectory/SuiteScript2/AffiliateDirectory.Service.ss"
                ), true
            );
        }
    }

    AffiliateDirectorySS2Model.prototype = Object.create(SCModel.prototype);
    AffiliateDirectorySS2Model.prototype.constructor = AffiliateDirectorySS2Model;
 
    return AffiliateDirectorySS2Model;
});

define('Saralux.Core.AffiliateDirectory.View',	[
	'saralux_core_affiliatedirectory.tpl',

    'Saralux.Core.AffiliateDirectory.SS2Model',

	'PageType.Base.View',
    'Utils',
], function (
	saralux_core_affiliatedirectory_tpl,

    AffiliateDirectorySVSS2Model,

	PageTypeBaseView,
    Utils
) {
    'use strict';

    return PageTypeBaseView.PageTypeBaseView.extend({

        template: saralux_core_affiliatedirectory_tpl,

        initialize: function(options) {
            var self = this;
			this.model = new AffiliateDirectorySVSS2Model();        
        },

        beforeShowContent: function beforeShowContent() {
            var self = this;
			this.container = this.options.container;
			this.chapters = [];
            this.regionDetails = null;
            this.isAffiliateSelected = false;
            this.hasChapterDetails = false;
            this.environment_component = this.container.getComponent('Environment');
            this.session = this.environment_component.getSession();

            this.affiliateDirectoryConfig = {
                pageTitle: this.environment_component.getConfig("AffiliateDirectoryPageTitleUserSetting"),
                dropdownLabel: this.environment_component.getConfig("AffiliateDirectoryDropdownLabelUserSetting"),
            };
            if(this.affiliateDirectoryConfig.pageTitle  == undefined)
                this.affiliateDirectoryConfig.pageTitle = 'Chapter Directory';
            if(this.affiliateDirectoryConfig.dropdownLabel  == undefined)
                this.affiliateDirectoryConfig.dropdownLabel = 'Select Chapter';

            this.events = {
                'change [data-change="m360-slxc-affld-select-affiliation"]': 'selectAffiliate',
            }

            return this.model.save({
				action: "GET_AFFILIATED_DIRECTORY_DATA"
			}).done(function(res) {
                if(!res.hasError){
                    self.chapters = res.chapters;
                    for(var i=0; i<self.chapters.length; i++){
                        self.chapters[i].selected = false;
                    }
                }
            });

            return jQuery.Deferred().resolve();
        },

        selectAffiliate: function(e){
            var self = this;
            var affiliate = this.$(e.currentTarget).val();

            this.priceLevels = {
                regular: this.environment_component.getConfig('regularPriceLevel'),
                member: this.environment_component.getConfig('memberPriceLevel')
            };
            
            this.userCurrency = {
				id: this.session.currency.internalid
			};
            if(affiliate >= 0){//&& data exists for the selected option
                this.model.save({
                    action: "GET_CHAPTER_DETAILS",
                    chapterId: affiliate,
                    priceLevels: this.priceLevels,
                    userCurrency: this.userCurrency
                }).done(function(res) {
                    if(!res.hasError){
                        self.isAffiliateSelected = true;
                        self.selectedChapterDetails = res.chapterDetails;
                        self.regionDetails = res.primaryServicePosDetails;
                        if(self.selectedChapterDetails.length > 0){
                            self.hasChapterDetails = true;
                        }else{
                            self.hasChapterDetails = false;
                        }
                        for(var i=0; i<self.chapters.length; i++){
                            if(affiliate == self.chapters[i].id){
                                self.chapters[i].selected = true;
                            }else{
                                self.chapters[i].selected = false;
                            }
                        }
                        self.render();
                    }
                });
                
            }
            else
            this.isAffiliateSelected = false;
        },

        getContext: function () {
            return {
                chapters: this.chapters,
                isAffiliateSelected: !this.isAffiliateSelected,
                selectedChapterDetails: this.selectedChapterDetails,
                hasChapterDetails: this.hasChapterDetails,
                regionDetails : this.regionDetails,
                pageTitle: this.affiliateDirectoryConfig.pageTitle,
                dropdownLabel: this.affiliateDirectoryConfig.dropdownLabel,
                icons: {
                    imgArrow: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-arrow.png')),
                    imgEmptyState: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-emptystate-sidebar.png')),
                }
            }
        }

    });
});

define('Saralux.Core.AffiliateDirectory',   [
	'Saralux.Core.AffiliateDirectory.View'
],   function (
	AffiliateDirectoryView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			var PageType = container.getComponent('PageType');
			if(PageType) {
				PageType.registerPageType({
					name: 'Affiliate_Directory',
					view: AffiliateDirectoryView,
					options: { container: container },
					routes: ['affiliate-directory']
				});
			}
		}
	};
});


define('Saralux.Core.AttemptTest.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function AttemptTestSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/AttemptTest/SuiteScript2/AttemptTest.Service.ss"
                ), true
            );
        }
    }

    AttemptTestSS2Model.prototype = Object.create(SCModel.prototype);
    AttemptTestSS2Model.prototype.constructor = AttemptTestSS2Model;
 
    return AttemptTestSS2Model;
});

define('Saralux.Core.AttemptTest.View',	[
	'saralux_core_attempttest.tpl',

	// 'Saralux.Core.AttemptTest.SS2Model',
	'Saralux.Core.TestsSV.SS2Model',

    
	'PageType.Base.View',
	'Saralux.Core.AttemptTestSV.View',

], function (
	saralux_core_attempttest_tpl,

    // AttemptTestSS2Model,
    TestSVSS2Model,

	PageTypeBaseView,
    AttemptTestSV
) {
    'use strict';

    return PageTypeBaseView.PageTypeBaseView.extend({

        template: saralux_core_attempttest_tpl,

        initialize: function(options) {
            var self = this;
            this.model = new TestSVSS2Model();
            console.log('inside attempt test');
        },

        beforeShowContent: function beforeShowContent() {
            var self = this;
            var param = this.options.routerArguments[0];
            this.testId = null;
            console.log('attempt test params : ', param);

            return this.model.save({
                action: 'get_test_id',
                testRegId: param
            }).then(function (res){
                console.log('get test id res : ', res);
                self.testId = parseInt(res.testId);
                self.childViews = {
                    'AttemptTestSV.View': function() {
                        return new AttemptTestSV({
                            parent: self,
                            container: self.options.container,
                            selectToAttemptTestRegId: parseInt(param),
                            testId: self.testId
                        });
                    }
                } 
            });
        },

        getContext: function () {
            return {
                message: "Sample Page Type Template",
            }
        }

    });
});


define(
	'Saralux.Core.AttemptTest'
,   [
		'Saralux.Core.AttemptTest.View'
	]
,   function (
		AttemptTestView
	)
{
	'use strict';

	return  {
		mountToApp: function mountToApp (container)
		{
			try {
				var pageType = container.getComponent('PageType');
				pageType.registerPageType({
					name: 'Attempt_Test',
					view: AttemptTestView,
					routes: ['launch-test/:id']
				});
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.AttemptTest', ex.toString());
			}
		}
	};
});


define('Saralux.Core.AttemptTestSV.Details.View',	[
	'saralux_core_attempttestsv_details.tpl',

	'Saralux.Core.TestsSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_attempttestsv_details_tpl,
	
	TestsSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function AttemptTestSVDetailsView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
		this.parent = options.parent;
		this.test = null;

		this.model = new TestsSVSS2Model();

		this.template = saralux_core_attempttestsv_details_tpl;

		this.isCompleted = false;

		var data = {
			action : "get_test_details_for_attempt",
			id     : options.testRegId,
			testId : options.testId
		}

		console.log('get test details options : ', data);
		this.isLoading = true;
		this.model.save(data).then(function (res) {
			console.log('test details : ', res);
			if(!res.hasError) {
				self.isCompleted = res.test.isCompleted;
				self.test = res.test;
			}
			
			self.isLoading = false;
			self.render();
		});
	}

	AttemptTestSVDetailsView.prototype = Object.create(SCView.prototype);
	AttemptTestSVDetailsView.prototype.constructor = AttemptTestSVDetailsView;

	AttemptTestSVDetailsView.prototype.getEvents = function () {
		return {
			"click [data-action='start-test-click']": "startTestClick",
			"click [data-action='back-to-test-details-click']": "backToTestDetailsClick",
			"click [data-action='m360-attempt-test-start-test']": "startTest",
			"click [data-action='m360-tests-tandc-checkbox']": "termsAndConditionsCheckboxChanged"
		}
	}

	AttemptTestSVDetailsView.prototype.backToTestDetailsClick = function () {
		jQuery(window).scrollTop(0);
		this.$(".test-info-page").show();
		this.$(".test-tnc-page").hide();
	}

	AttemptTestSVDetailsView.prototype.startTestClick = function () {
		jQuery(window).scrollTop(0);
		this.$(".test-info-page").hide();
		this.$(".test-tnc-page").show();
	}

	AttemptTestSVDetailsView.prototype.termsAndConditionsCheckboxChanged = function () {
		var checkboxVal = this.$('#accept-tnc').prop('checked');
		console.log('checkboxVal : ', checkboxVal);
		if(!checkboxVal){
			this.$('#terms-and-cond-accept-button').prop('disabled',true);
		}
		else{
			this.$('#terms-and-cond-accept-button').prop('disabled',false);
		}
	}
	
	
	AttemptTestSVDetailsView.prototype.startTest = function () {
		this.model.clear({ slient: true });
		this.model.save({
			action: 'mark_cred'
		})
		console.log('details view parent : ', this.parent);
		this.parent.testTitle = this.test.name;
		this.parent.test = this.test;
		this.parent.activeChildView = "AttemptTestSV.StartTest";
		this.parent.render();
	}

	AttemptTestSVDetailsView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			test: this.test,
			isCompleted: this.isCompleted,

			icons: {
				icnTest: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test.png')),
				icnPending: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-submission-pending.png')),
				icnCompleted: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-complete.png'))
			}
		}
	}
	
	return AttemptTestSVDetailsView;

});

define('Saralux.Core.AttemptTestSV.Question.ImageChoice.View',	[
    'saralux_core_attempttestsv_question_imagechoice.tpl',

    'Saralux.Core.TestsSV.SS2Model',

    'Utils',
	'SCView'
], function (
    saralux_core_attempttestsv_question_imagechoice_tpl,
	
    TestsSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ATSVQuestionImageChoiceView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_attempttestsv_question_imagechoice_tpl;

        this.model = new TestsSVSS2Model();

        console.log('image choice view :' , options);
        this.parent = options.parent;
        this.currentQuestionNumber = options.currentQuestionNumber;
        this.question = options.question;
        console.log('question : ', this.question);
        this.totalQuestions = options.totalQuestions;
		this.totalQuestionsByPercentage = options.totalQuestionsByPercentage;
        console.log('tpc ',this.totalQuestionsByPercentage);

        this.questionData = options.questionData;
    }

    ATSVQuestionImageChoiceView.prototype = Object.create(SCView.prototype);
    ATSVQuestionImageChoiceView.prototype.constructor = ATSVQuestionImageChoiceView;

    ATSVQuestionImageChoiceView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-test-save-img-attempt']": "saveAttempt",
            "click [data-action='m360-test-prev-ques']": "previousQuestion", 
        }
    }

    ATSVQuestionImageChoiceView.prototype.previousQuestion = function (e) {
        this.parent.previousQuestion();
    }

    ATSVQuestionImageChoiceView.prototype.saveAttempt = function (e) {
        //fetch data
        var selected = new Array();
        var selectedOptionId = new Array();
        this.$("input[type=checkbox]:checked").each(function () {
            selected.push(this.value);
        });
        console.log('selected : ', selected);
        for (let i = 0; i < selected.length; i++) {
            selectedOptionId.push(this.question.answers[selected[i]].id);
        }
        console.log('selectedOptionId : ',selectedOptionId);
        // var selectedOptionId = this.question.answers[index].id;
        this.parent.saveImageQuestionAttempt(selectedOptionId);
    }

    ATSVQuestionImageChoiceView.prototype.getContext = function () {
        return {
            question: this.question,
            totalQuestions: this.totalQuestions,
            totalQuestionsByPercentage: this.totalQuestionsByPercentage,
            currentQuestionNumber: this.currentQuestionNumber
        }
    }

    return ATSVQuestionImageChoiceView;

});

define('Saralux.Core.AttemptTestSV.Question.LongText.View',	[
    'saralux_core_attempttestsv_question_longtext.tpl',

    'Saralux.Core.TestsSV.SS2Model',

    'Utils',
	'SCView'
], function (
    saralux_core_attempttestsv_question_longtext_tpl,
	
    TestsSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ATSVQuestionLongTextView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_attempttestsv_question_longtext_tpl;

        this.model = new TestsSVSS2Model();

        console.log('long question view :' , options);
        this.parent = options.parent;
        this.currentQuestionNumber = options.currentQuestionNumber;
        this.question = options.question;
        this.totalQuestions = options.totalQuestions;
		this.totalQuestionsByPercentage = options.totalQuestionsByPercentage;
        console.log('tpc ',this.totalQuestionsByPercentage);

        this.questionData = options.questionData;
    }

    ATSVQuestionLongTextView.prototype = Object.create(SCView.prototype);
    ATSVQuestionLongTextView.prototype.constructor = ATSVQuestionLongTextView;

    ATSVQuestionLongTextView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-test-save-lng-ques-attempt']": "saveAttempt",
            "click [data-action='m360-test-prev-ques']": "previousQuestion",

        }
    }

    

    ATSVQuestionLongTextView.prototype.saveAttempt = function () {
        var response = this.$('#long-answer').val();
        console.log('long answer : ', response);
        this.parent.saveLongQuestionAttempt(response);
    }

    ATSVQuestionLongTextView.prototype.previousQuestion = function (e) {
        this.parent.previousQuestion();
    }


    ATSVQuestionLongTextView.prototype.getContext = function () {
        return {
            question: this.question,
            totalQuestions: this.totalQuestions,
            totalQuestionsByPercentage: this.totalQuestionsByPercentage,
            currentQuestionNumber: this.currentQuestionNumber
        }
    }

    return ATSVQuestionLongTextView;

});

define('Saralux.Core.AttemptTestSV.Question.MultipleChoice.View',	[
    'saralux_core_attempttestsv_question_multiplechoice.tpl',

    'Saralux.Core.TestsSV.SS2Model',

    'Utils',
	'SCView'
], function (
    saralux_core_attempttestsv_question_multiplechoice_tpl,
	
    TestsSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';


    var SCView = SCViewModule.SCView;

    function ATSVQuestionMultipleChoiceView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        
        this.template = saralux_core_attempttestsv_question_multiplechoice_tpl;
        
        this.model = new TestsSVSS2Model();

        console.log('mcq view :' , options);
        this.parent = options.parent;
        this.currentQuestionNumber = options.currentQuestionNumber;
        this.question = options.question;
        this.totalQuestions = options.totalQuestions;
		this.totalQuestionsByPercentage = options.totalQuestionsByPercentage;
        console.log('tpc ',this.totalQuestionsByPercentage);
        // this.on("afterViewRender", function() {
        //     this.$(".progress-bar").width(self.totalQuestionsByPercentage)
        // })


    }

    ATSVQuestionMultipleChoiceView.prototype = Object.create(SCView.prototype);
    ATSVQuestionMultipleChoiceView.prototype.constructor = ATSVQuestionMultipleChoiceView;

    ATSVQuestionMultipleChoiceView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-test-save-mcq-attempt']": "saveAttempt",
            "click [data-action='m360-test-prev-ques']": "previousQuestion",
        }
    }

    ATSVQuestionMultipleChoiceView.prototype.previousQuestion = function (e) {
        this.parent.previousQuestion();
    }
    
    ATSVQuestionMultipleChoiceView.prototype.saveAttempt = function (e) {
        //fetch data
        var selected = new Array();
        var selectedOptionId = new Array();
        $("input[type=checkbox]:checked").each(function () {
            selected.push(this.value);
        });
        for (let i = 0; i < selected.length; i++) {
            selectedOptionId.push(this.question.answers[selected[i]].id);
        }
        // var selectedOptionId = this.question.answers[index].id;
        this.parent.saveMcqQuestionAttempt(selectedOptionId);
    }

    ATSVQuestionMultipleChoiceView.prototype.getContext = function () {
        return {
            question: this.question,
            totalQuestions: this.totalQuestions,
            totalQuestionsByPercentage: this.totalQuestionsByPercentage,
            currentQuestionNumber: this.currentQuestionNumber

        }
    }

    return ATSVQuestionMultipleChoiceView;

});

define('Saralux.Core.AttemptTestSV.Question.ShortText.View',	[
    'saralux_core_attempttestsv_question_shorttext.tpl',

    'Saralux.Core.TestsSV.SS2Model',

    'Utils',
	'SCView'
], function (
    saralux_core_attempttestsv_question_shorttext_tpl,
	
    TestsSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ATSVQuestionShortTextView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        
        this.template = saralux_core_attempttestsv_question_shorttext_tpl;

        this.model = new TestsSVSS2Model();


        console.log('long question view :' , options);
        this.parent = options.parent;
        this.currentQuestionNumber = options.currentQuestionNumber;
        this.question = options.question;
        this.totalQuestions = options.totalQuestions;
		this.totalQuestionsByPercentage = options.totalQuestionsByPercentage;
        console.log('tpc ',this.totalQuestionsByPercentage);


        this.questionData = options.questionData;
    }

    ATSVQuestionShortTextView.prototype = Object.create(SCView.prototype);
    ATSVQuestionShortTextView.prototype.constructor = ATSVQuestionShortTextView;

    ATSVQuestionShortTextView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-tst-save-shrt-que-atmpt']": "saveAttempt",
            "click [data-action='m360-test-prev-ques']": "previousQuestion",
        }
    }

    ATSVQuestionShortTextView.prototype.saveAttempt = function () {
        var response = this.$('#short-answer').val();
        console.log('short answer : ', response);
        this.parent.saveShortQuestionAttempt(response);
    }

    ATSVQuestionShortTextView.prototype.previousQuestion = function (e) {
        this.parent.previousQuestion();
    }


    ATSVQuestionShortTextView.prototype.getContext = function () {
        return {
            question: this.question,
            totalQuestions: this.totalQuestions,
            totalQuestionsByPercentage: this.totalQuestionsByPercentage,
            currentQuestionNumber: this.currentQuestionNumber
        }
    }

    return ATSVQuestionShortTextView;

});

define('Saralux.Core.AttemptTestSV.Question.YesNo.View',	[
    'saralux_core_attempttestsv_question_yesno.tpl',

    'Saralux.Core.TestsSV.SS2Model',

    'Utils',
	'SCView'
], function (
    saralux_core_attempttestsv_question_yesno_tpl,
	
    TestsSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ATSVQuestionYesNoView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_attempttestsv_question_yesno_tpl;

        this.model = new TestsSVSS2Model();

        console.log('yes no question view :' , options);
        this.parent = options.parent;
        this.currentQuestionNumber = options.currentQuestionNumber;
        this.question = options.question;
        this.totalQuestions = options.totalQuestions;
		this.totalQuestionsByPercentage = options.totalQuestionsByPercentage;
        console.log('tpc ',this.totalQuestionsByPercentage);

        this.questionData = options.questionData;
    }

    ATSVQuestionYesNoView.prototype = Object.create(SCView.prototype);
    ATSVQuestionYesNoView.prototype.constructor = ATSVQuestionYesNoView;

    ATSVQuestionYesNoView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-test-save-yn-ques-attempt']": "saveAttempt",
            "click [data-action='m360-test-prev-ques']": "previousQuestion",

        }
    }

    ATSVQuestionYesNoView.prototype.saveAttempt = function () {
        var response = this.$("input[type='checkbox']:checked").val()
        console.log('yes no response : ', response);
        this.parent.saveYesNoQuestionAttempt(response);

    }

    ATSVQuestionYesNoView.prototype.previousQuestion = function (e) {
        this.parent.previousQuestion();
    }

   
    ATSVQuestionYesNoView.prototype.getContext = function () {
        return {
            question: this.question,
            totalQuestions: this.totalQuestions,
            totalQuestionsByPercentage: this.totalQuestionsByPercentage,
            currentQuestionNumber: this.currentQuestionNumber
        }
    }

    return ATSVQuestionYesNoView;

});

define('Saralux.Core.AttemptTestSV.StartTest.View',	[
	'saralux_core_attempttestsv_paginated.tpl',

	'Saralux.Core.AttemptTestSV.Question.MultipleChoice.View',
	'Saralux.Core.AttemptTestSV.Question.ImageChoice.View',
	'Saralux.Core.AttemptTestSV.Question.ShortText.View',
	'Saralux.Core.AttemptTestSV.Question.LongText.View',
	'Saralux.Core.AttemptTestSV.Question.YesNo.View',

	'Saralux.Core.TestsSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_attempttestsv_paginated_tpl,

	AttemptTestSVQuestionMultipleChoiceView,
	AttemptTestSVQuestionImageChoiceView,
	AttemptTestSVQuestionShortTextView,
	AttemptTestSVQuestionLongTextView,
	AttemptTestSVQuestionYesNoView,
	
	TestsSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function AttemptTestSVStartTestView(options) {
		console.log('start test options : ', options);
		console.log('in start test view');
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.model = new TestsSVSS2Model();

		this.template = saralux_core_attempttestsv_paginated_tpl;

		this.container = options.container;
		this.m360Context = options.m360Context;

		// console.log('');
		this.testTime = options.test.timeLimit;
		console.log('options.test  : ', options.test);
		this.endScreenHeadline = options.test.endScreenHeadline;
		this.endScreenPassMessage = options.test.endScreenPassMessage;
		this.endScreenFailMessage = options.test.endScreenFailMessage;
		
		var current_time = Date.parse(new Date());
		console.log('this.testTime : ', this.testTime);
		this.deadline = new Date(current_time + parseInt(this.testTime) * 60 * 1000);
		console.log('this.deadline : ', this.deadline);
		this.remainingMinutes = 0;
		this.remainingSeconds = 0;

		this.showTestEndScreen = false;
		this.testId = options.testId;
		this.testTitle = options.testTitle;
		this.questions = [];
		this.currentQuestionCounter = 0;
		this.activeQuestionView = null;
		this.totalQuestionsByPercentage = null;
		this.totalQuestions = null
		this.answeredQuestions = [];
		this.questionsCounterArray = [];
		this.elapsedTime = null;
		this.testTimeUp = false;
		this.totalTimeInSeconds = null;
		this.testRegId = options.testRegId;
		this.isPass = false;
		this.autoScore = false;
		this.percentageScored = null;

		console.log('options in start test : ', options);

		// this.questions = this.getAllQuestions(options.testId);

		var data = {
			action : "get_test_questions",
			id     : this.testId,
			regId  : this.testRegId
		}
		this.isLoading = true;
		this.model.save(data).then(function (res) {
			console.log(res);
			if(!res.hasError) {
				self.questions =  res.questions;
				self.totalQuestions = self.questions.length;
				for (var i = 0; i < self.totalQuestions; i++) {
					self.questionsCounterArray.push({
						questionNumber : i+1,
						answered : false,
						markedForReview : false,
						current : false
					});
				}
				console.log('questionsCounterArray array : ', self.questionsCounterArray);
				self.totalQuestionsByPercentage = parseFloat((self.currentQuestionCounter+1 / self.questions.length) * 100);
				self.totalQuestionsByPercentage = self.totalQuestionsByPercentage.toFixed(2);
				self.startTestTimer();
				self.setNextQuestionActiveView(self.questions[self.currentQuestionCounter].type)
			}
			
			self.isLoading = false;
			self.render();
		});


		this.childViews = {
			'AttemptTestSV.Question.MultipleChoice': function() {
				return new AttemptTestSVQuestionMultipleChoiceView({
					container: this.container,
					m360Context: this.m360Context,
					question: this.questions[this.currentQuestionCounter],
					totalQuestions: this.totalQuestions,
					totalQuestionsByPercentage: this.totalQuestionsByPercentage,
					currentQuestionNumber : parseInt(this.currentQuestionCounter)+1,
					parent: this
				});
			},
			'AttemptTestSV.Question.ShortText': function() {
				return new AttemptTestSVQuestionShortTextView({
					container: this.container,
					m360Context: this.m360Context,
					question: this.questions[this.currentQuestionCounter],
					totalQuestions: this.totalQuestions,
					totalQuestionsByPercentage: this.totalQuestionsByPercentage,
					currentQuestionNumber : parseInt(this.currentQuestionCounter)+1,
					parent: this
				});
			},
			'AttemptTestSV.Question.LongText': function() {
				return new AttemptTestSVQuestionLongTextView({
					container: this.container,
					m360Context: this.m360Context,
					question: this.questions[this.currentQuestionCounter],
					totalQuestions: this.totalQuestions,
					totalQuestionsByPercentage: this.totalQuestionsByPercentage,
					currentQuestionNumber : parseInt(this.currentQuestionCounter)+1,
					parent: this
				});
			},
			'AttemptTestSV.Question.ImageChoice': function() {
				return new AttemptTestSVQuestionImageChoiceView({
					container: this.container,
					m360Context: this.m360Context,
					question: this.questions[this.currentQuestionCounter],
					totalQuestions: this.totalQuestions,
					totalQuestionsByPercentage: this.totalQuestionsByPercentage,
					currentQuestionNumber : parseInt(this.currentQuestionCounter)+1,
					parent: this
				});
			},
			'AttemptTestSV.Question.YesNo': function() {
				return new AttemptTestSVQuestionYesNoView({
					container: this.container,
					m360Context: this.m360Context,
					question: this.questions[this.currentQuestionCounter],
					totalQuestions: this.totalQuestions,
					totalQuestionsByPercentage: this.totalQuestionsByPercentage,
					currentQuestionNumber : parseInt(this.currentQuestionCounter)+1,
					parent: this
				});
			}
		}
	}

	AttemptTestSVStartTestView.prototype = Object.create(SCView.prototype);
	AttemptTestSVStartTestView.prototype.constructor = AttemptTestSVStartTestView;

	AttemptTestSVStartTestView.prototype.getEvents = function () {
		return {
			"click [data-action='m360-test-prev-ques']"        : "previousQuestion",
			"click [data-action='m360-test-save-question']"    : "saveAttempt",
			"click [data-action='m360-test-jump-to-question']" : "jumpToQuestion",
			"click [data-action='m360-test-que-mark-review']"  : "markQuestionForReview",
			"click [data-action='m360-submit-test']"           : "submitTest",
			'focusout [data-focusout="short-long-focusout"]': 'shortLongFocusout',
			'click [data-action="option-click"]': 'optionClick',
		}
	}

	AttemptTestSVStartTestView.prototype.optionClick = function (e) {
		e.stopImmediatePropagation();
		if(!this.$(e.currentTarget).parents(".answer-box").hasClass('multi-true')){
			this.$(e.currentTarget).parents('.answer-box').find(".options").attr('checked', false);
			this.$(e.currentTarget).find(".options").attr('checked', true);
			this.$(e.currentTarget).parents('.answer-box').find(".option-box").removeClass("active-option");
			this.$(e.currentTarget).addClass("active-option");
			this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").hide();
			this.$(e.currentTarget).parents('.answer-box').find(".option-box").css('opacity', '0.7');
		}
		else{
			if(this.$(e.currentTarget).find('.options').is(':checked')) {
				this.$(e.currentTarget).removeClass("active-option");
				this.$(e.currentTarget).find(".options").attr('checked', false);
			}
			else{
				this.$(e.currentTarget).addClass("active-option");
				this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").hide();
				this.$(e.currentTarget).find(".options").attr('checked', true);
			}
		}
	}

	AttemptTestSVStartTestView.prototype.shortLongFocusout = function (e) {
		/*var left = 30 - this.$(e.currentTarget).val().length;*/

		console.log(this.$(e.currentTarget).val().length);

		if (this.$(e.currentTarget).val().length == 0){
			this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").show();
		}
		else{
			this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").hide();
		}

		/*
		if (left < 0) {
			left = 0;
		}
		this.$(e.currentTarget).siblings('.word-counter').find('span').text(left);
		*/
	}

	AttemptTestSVStartTestView.prototype.submitTest = function (e) {
		console.log('in submitTest');
		var self = this;

		var data = {
			action: 'submit_test',
			id: this.testRegId,
			testId: this.testId
		}
		console.log({data});
		this.model.clear({ silent: true });
		this.model.save(data).then(function(res) {
			console.log('submit test response : ', res);
			self.autoScore = res.autoScore;
			if(res.autoScore) {
				self.percentageScored = res.percentageScored;
				if(res.isPass) {
					self.isPass = true;
				}
			}
			self.$("#confirm-modal").modal('hide'); 
			jQuery('.modal-backdrop').remove();
			jQuery(document.body).removeClass("modal-open"); 
			self.showTestEndScreen = true;
			self.render();
		});
	}
	
	AttemptTestSVStartTestView.prototype.markQuestionForReview = function (e) {
		console.log('in markQuestionForReview');
		var questionNumber = parseInt(this.$("#"+e.currentTarget.id).attr('value'));
		this.questionsCounterArray[questionNumber-1].markedForReview = true;
		console.log(this.questionsCounterArray);
	}
	
	AttemptTestSVStartTestView.prototype.startTestTimer = function () {
		var self = this;
		if (this.testTime){
			this.timerIntId = setInterval(function() {
				var remainingTime = self.deadline - Date.parse(new Date());
				var remainingMinutes = Math.floor( (remainingTime/1000/60) % 60 );
				var remainingSeconds = Math.floor( (remainingTime/1000) % 60 );
	
				if((parseInt(remainingMinutes) >= 0) && (parseInt(remainingSeconds) >= 0)) {
					var padRemainingMinutes = remainingMinutes.toString().padStart(2, '0');
					var padRemainingSeconds = remainingSeconds.toString().padStart(2, '0');
		
					var totalRemainingTimeInSeconds = (remainingMinutes*60) + remainingSeconds;
					self.totalTimeInSeconds = parseInt(self.testTime) * 60;  
					var clockRemainingTime = (100 * totalRemainingTimeInSeconds) / self.totalTimeInSeconds;
					self.$('#timer-clock').attr('stroke-dasharray', clockRemainingTime+ ', 100'); 
		
					self.$(".test-timer #countdown").text(padRemainingMinutes+":"+padRemainingSeconds);
		
					console.log({remainingMinutes});
					console.log({remainingSeconds});
		
					if((parseInt(remainingMinutes) == 0) && (parseInt(remainingSeconds) == 0)) {
						clearInterval(self.timerIntId);
						self.testTimeUp = true;
						console.log("SUBMIT TEST NOW");
						self.submitTest();
					}
				}
				else {
					clearInterval(self.timerIntId);
				}
			}, 1000);
		}
	}
	
	AttemptTestSVStartTestView.prototype.jumpToQuestion = function (e) {
		console.log('inside jumpToQuestion');
		var index = parseInt(this.$('#'+e.currentTarget.id).attr('data-index'));
		console.log('index : ', index);
		console.log('selected question : ', this.questions[index]);
		this.questionsCounterArray[this.currentQuestionCounter].current = false;
		this.currentQuestionCounter = index;
		var questionType = this.questions[index].type;
		this.setNextQuestionActiveView(questionType);
		// this.setTestTimer();
		this.render();        
	}

	AttemptTestSVStartTestView.prototype.saveAttempt = function (e) {
		var questionType = this.questions[this.currentQuestionCounter].type;
		console.log('add question in start test : ', this.questions[this.currentQuestionCounter]);
		switch(questionType){
			case "1":
				 this.saveMcqQuestionAttempt()
				 break;
			case "2": 
				 this.saveImageQuestionAttempt()
				 break;
			case "3": 
				 this.saveLongQuestionAttempt()
				 break;
			case "4": 
				 this.saveShortQuestionAttempt()
				 break;
			case "5": 
				 this.saveYesNoQuestionAttempt();
				 break;
		}
	}
		
	AttemptTestSVStartTestView.prototype.getAllQuestions = function (testId) {
		console.log('in getAllQuestions');
		
	}

	AttemptTestSVStartTestView.prototype.setNextQuestionActiveView = function (questionType) {
		this.questionsCounterArray[this.currentQuestionCounter].current = true;
		this.totalQuestionsByPercentage = parseFloat(((this.currentQuestionCounter+1) / this.questions.length) * 100);
		this.totalQuestionsByPercentage = this.totalQuestionsByPercentage.toFixed(2);
		switch(questionType) {
			case "1": 
				console.log('mcq question detected');
				this.activeQuestionView = "AttemptTestSV.Question.MultipleChoice"
				break;
			case "2": 
				this.activeQuestionView = "AttemptTestSV.Question.ImageChoice"
				break;
			case "3": 
				console.log('long question detected');
				this.activeQuestionView = "AttemptTestSV.Question.LongText"
				break;
			case "4": 
				this.activeQuestionView = "AttemptTestSV.Question.ShortText"
				break;
			case "5": 
				this.activeQuestionView = "AttemptTestSV.Question.YesNo"
				break;       
		}
		console.log('current counter : ', this.currentQuestionCounter);
	}
	
	
   
	AttemptTestSVStartTestView.prototype.saveMcqQuestionAttempt = function () {
		console.log('saveMcqQuestionAttempt');
		var self = this;

		// fetch selected options
		var selected = new Array();
		var optionIds = new Array();
		this.$("#active-question-view input[type=checkbox]:checked").each(function () {
			selected.push(this.value);
		});
		for (let i = 0; i < selected.length; i++) {
			optionIds.push(this.questions[this.currentQuestionCounter].answers[selected[i]].id);
		}

		// save attempt
		var data = {
			action           : 'update_mcq_response', 
			responseId       : this.questions[this.currentQuestionCounter].blankResponseId,
			responseOptionId : optionIds
		}

		console.log('data : ',data);

		// this.answeredQuestions.push(data);
		this.model.clear({ silent: true }); 
		this.isLoading = true;
		this.model.save(data).then(function (res) {
			console.log({res});
			if(!res.hasError){
				for (var i = 0; i < self.questions[self.currentQuestionCounter].answers.length; i++) {
					var answer = self.questions[self.currentQuestionCounter].answers[i];
					if(optionIds.indexOf(answer.id) != -1){
						self.questions[self.currentQuestionCounter].answers[i].selected = true;
					}
					else{
						self.questions[self.currentQuestionCounter].answers[i].selected = false;
					}
				}        
				if(self.currentQuestionCounter != self.questions.length - 1){
					self.questionsCounterArray[self.currentQuestionCounter].answered = true;
					self.questionsCounterArray[self.currentQuestionCounter].current = false;
					self.currentQuestionCounter ++;
					self.setNextQuestionActiveView(self.questions[self.currentQuestionCounter].type);
					self.isLoading = false;
					self.render();
				}
				else{
					self.isLoading = false;          
					self.render();
					self.$("#confirm-modal").modal('show');
				}
			}
		});
	}



	AttemptTestSVStartTestView.prototype.saveYesNoQuestionAttempt = function (response) {
		// save attempt
		var self = this;

		var response = this.$("input[type='checkbox']:checked").val()

		var data = {
			action      : 'update_yes_no_question_response', 
			responseId  : this.questions[this.currentQuestionCounter].blankResponseId,
			response    : response
		}

		// this.answeredQuestions.push(data);
		this.isLoading = true;
		this.model.clear({ silent: true }); 
		this.model.save(data).then(function (res) {
			console.log('yes not res : ', res);
			if(!res.hasError){
				for (var i = 0; i < self.questions[self.currentQuestionCounter].answers.length; i++) {
					var answer = self.questions[self.currentQuestionCounter].answers[i];
					if(optionIds.indexOf(answer.id) != -1){
						self.questions[self.currentQuestionCounter].answers[i].selected = true;
					}
					else{
						self.questions[self.currentQuestionCounter].answers[i].selected = false;
					}
				}        
				if(self.currentQuestionCounter != self.questions.length - 1){
					self.questionsCounterArray[self.currentQuestionCounter].answered = true;
					self.questionsCounterArray[self.currentQuestionCounter].current = false;
					self.currentQuestionCounter ++;
					self.setNextQuestionActiveView(self.questions[self.currentQuestionCounter].type);
					self.isLoading = false;
					self.render();
				}
				else{
					self.isLoading = false;          
					self.render();
					self.$("#confirm-modal").modal('show');
				}
			}
		});
	}


	AttemptTestSVStartTestView.prototype.saveImageQuestionAttempt = function () {
		var self = this;
		
		//fetch data
		var selected = new Array();
		var optionIds = new Array();
		this.$("#active-question-view input[type=checkbox]:checked").each(function () {
			selected.push(this.value);
		});
		console.log('selected : ', selected);
		for (let i = 0; i < selected.length; i++) {
			optionIds.push(this.questions[this.currentQuestionCounter].answers[selected[i]].id);
		}

		var data = {
			action           : 'update_image_question_response', 
			responseId       : this.questions[this.currentQuestionCounter].blankResponseId,
			responseOptionId : optionIds
		}

		this.isLoading = true;
		this.model.clear({ silent: true }); 
		this.model.save(data).then(function (response) {

			for (var i = 0; i < self.questions[self.currentQuestionCounter].answers.length; i++) {
				var answer = self.questions[self.currentQuestionCounter].answers[i];
				if(optionIds.indexOf(answer.id) != -1){
					self.questions[self.currentQuestionCounter].answers[i].selected = true;
				}
				else{
					self.questions[self.currentQuestionCounter].answers[i].selected = false;
				}
			}        
			if(self.currentQuestionCounter != self.questions.length - 1){
				self.questionsCounterArray[self.currentQuestionCounter].answered = true;
				self.questionsCounterArray[self.currentQuestionCounter].current = false;
				self.currentQuestionCounter ++;
				self.setNextQuestionActiveView(self.questions[self.currentQuestionCounter].type);
				self.isLoading = false; 
				self.render();
			}
			else{
				self.isLoading = false;          
				self.render();
				self.$("#confirm-modal").modal('show');
			}
		});        
	}

	AttemptTestSVStartTestView.prototype.saveLongQuestionAttempt = function () {
		// save attempt
		var self = this;

		var response = this.$('#active-question-view #long-answer').val();

		var data = {
			action      : 'update_long_question_response', 
			responseId  : this.questions[this.currentQuestionCounter].blankResponseId,
			response    : response
		}

		this.isLoading = true;
		this.model.clear({ silent: true }); 
		this.model.save(data).then(function (res) {
			if(!res.hasError){
				self.questions[self.currentQuestionCounter].response = response;
				console.log('first question after saving  : ', self.questions[self.currentQuestionCounter]);
				if(self.currentQuestionCounter != self.questions.length - 1){
					self.questionsCounterArray[self.currentQuestionCounter].answered = true;
					self.questionsCounterArray[self.currentQuestionCounter].current = false;
					self.currentQuestionCounter ++;
					self.setNextQuestionActiveView(self.questions[self.currentQuestionCounter].type);
					self.isLoading = false;
					self.render();
				}
				else{
					self.isLoading = false;          
					self.render();
					self.$("#confirm-modal").modal('show');
				}
			}
		});
	}

	AttemptTestSVStartTestView.prototype.saveShortQuestionAttempt = function () {
		// save attempt
		var self = this;

		var response = this.$('#active-question-view #short-answer').val();

		var data = {
			action      : 'update_short_question_response', 
			responseId  : this.questions[this.currentQuestionCounter].blankResponseId,
			response    : response
		}
		this.isLoading = true;
		this.model.clear({ silent: true }); 
		this.model.save(data).then(function (res) {
			if(!res.hasError){
				self.questions[self.currentQuestionCounter].response = response;
				console.log('first question after saving  : ', self.questions[self.currentQuestionCounter]);
				if(self.currentQuestionCounter != self.questions.length - 1){
					self.questionsCounterArray[self.currentQuestionCounter].answered = true;
					self.questionsCounterArray[self.currentQuestionCounter].current = false;
					self.currentQuestionCounter ++;
					self.setNextQuestionActiveView(self.questions[self.currentQuestionCounter].type);
					self.isLoading = false;          
					self.render();          
				}
				else{
					self.isLoading = false;          
					self.render();
					self.$("#confirm-modal").modal('show'); 
				}
			}
		});   
	}
	
	// AttemptTestSVStartTestView.prototype.saveMcqQuestionAttempt = function (data) {
	//     // save attempt

	//     this.setNextQuestionActiveView(this.questions[this.currentQuestionCounter].type);
		
	// }

	AttemptTestSVStartTestView.prototype.previousQuestion = function () {
		this.questionsCounterArray[this.currentQuestionCounter].current = false;
		this.currentQuestionCounter --;
		this.setNextQuestionActiveView(this.questions[this.currentQuestionCounter].type);
		this.render();
	}


	AttemptTestSVStartTestView.prototype.getContext = function () {
		return {
			autoScore: this.autoScore,
			isPass: this.isPass,
			message: "Start Test View",
			testTitle: this.testTitle,
			showTestEndScreen: this.showTestEndScreen,
			activeQuestionView: this.activeQuestionView,
			totalQuestionsByPercentage: this.totalQuestionsByPercentage,
			currentQuestionNumber: this.currentQuestionCounter+1,
			totalQuestions : this.questions.length,
			questionsCounterArray : this.questionsCounterArray,
			remainingMinutes: this.remainingMinutes,
			remainingSeconds: this.remainingSeconds,
			testTimeUp: this.testTimeUp,
			isLoading: this.isLoading,
			endScreenHeadline:this.endScreenHeadline,
			endScreenPassMessage:this.endScreenPassMessage,
			endScreenFailMessage:this.endScreenFailMessage,
			percentageScored: this.percentageScored,
			testTime: this.testTime,
			imgTestMedalShade: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-test-medal-shade.png')),
			imgContriLanding1: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
			icons:{
				icnTestComplete: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-complete.png')),
				icnFail: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-fail.png')),
				icnSubmissionPending: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-submission-pending.png')),
				icnTestIncorrect: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-test-incorrect.png')),
				icnTestCorrect: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-test-correct.png')),
				icnTest: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test.png')),
				icnInfo: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-info.png'))
			}			
		}
	}

	return AttemptTestSVStartTestView;

});

define('Saralux.Core.AttemptTestSV.View',	[
	'saralux_core_attempttestsv.tpl',

	'Saralux.Core.AttemptTestSV.Details.View',
	'Saralux.Core.AttemptTestSV.StartTest.View',

	'Saralux.Core.TestsSV.SS2Model',

	'Utils',
	'SCView',
	'jQuery'
], function (
	saralux_core_attempttestsv_tpl,

	AttemptTestSVDetailsView,
	AttemptTestSVStartTestView,
	
	TestsSVSS2Model,

	Utils,
	SCViewModule,
	jQuery
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function AttemptTestSVView(options) {
		console.log('inside AttemptTestSVView');
		SCView.call(this, options);
		jQuery(window).scrollTop(0);

		var self = this;

		this.model = new TestsSVSS2Model();

		this.template = saralux_core_attempttestsv_tpl;
		
		this.container = options.container;
		this.m360Context = options.m360Context;
		this.parent = options.parent;
		this.testRegId = options.selectToAttemptTestRegId;
		this.testId = options.testId;
		this.testTitle = null;
		this.test = null;
		console.log('options in parent view : ', options);
		console.log('AttemptTestSV testId : ', this.testId);
		console.log('AttemptTestSV testRegId : ', this.testRegId);

		this.activeChildView = "AttemptTestSV.Details";

		this.childViews = {
			'AttemptTestSV.Details': function() {
				return new AttemptTestSVDetailsView({
					container: this.container,
					m360Context: this.m360Context,
					parent: this,
					testRegId : this.testRegId,
					testId: this.testId
				});
			},
			'AttemptTestSV.StartTest': function() {
				return new AttemptTestSVStartTestView({
					container: this.container,
					m360Context: this.m360Context,
					parent: this,
					testRegId : this.testRegId,
					testTitle: this.testTitle,
					test: this.test,
					testId: this.testId
				});
			}
		}
	}

	AttemptTestSVView.prototype = Object.create(SCView.prototype);
	AttemptTestSVView.prototype.constructor = AttemptTestSVView;

	AttemptTestSVView.prototype.getEvents = function () {

	}

	AttemptTestSVView.prototype.getContext = function () {
		return {
			activeChildView: this.activeChildView
		}
	}

	return AttemptTestSVView;

});

define('Saralux.Core.AttemptTestSV',   [
	'Saralux.Core.AttemptTestSV.View'
],   function (
	AttemptTestSVView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			
		}
	};
});


define('Saralux.Core.Cart.Content.View',	[
	'saralux_core_cart_content.tpl',

	'Saralux.Core.CommonLibraries.General',

	'Saralux.Core.Cart.Context.Model',
	'Saralux.Core.Cart.SS2Model',

	// 'QuickOrder.View',
	
	'PageType.Base.View',
	'Backbone',
	'SCView',
	'Utils',
	'jQuery'
], function (
	saralux_core_cart_content_tpl,

	CoreCLGeneral,

	CartContextModel,
	CoreCFSS2Model,
	
	// QuickOrderView,

	PageTypeBaseView,
	Backbone,
	SCViewModule,
	Utils,
	jQuery
) {
	'use strict';

	return PageTypeBaseView.PageTypeBaseView.extend({
	
		template: saralux_core_cart_content_tpl,

		initialize: function(options) {
			var self = this;

			this.visitorId = CoreCLGeneral.getCookie('NLVisitorId');

			this.cartContextModel = CartContextModel.getInstance();
			this.CFCartModel = new CoreCFSS2Model();

			this.isLoading = false;

			this.cartData = {
				lines: [],
				summary: null
			};
		},

		beforeShowContent: function beforeShowContent () {
			var self = this;

			this.getBreadcrumbPages = function () {
				return [{
					text: Utils.translate('Shopping Cart')
				}]
			};

			this.events = {
				'click [data-action="m360-slxc-increment-qty"]': 'incrQty',
				'click [data-action="m360-slxc-decrement-qty"]': 'decrQty',
				'keyup [data-change="m360-slxc-update-line-qty"]': 'changeQty',
				'change [data-change="m360-slxc-update-line-qty"]': 'changeQty',
				'click [data-action="m360-slxc-remove-line"]': 'removeLine',
				'click [data-action="m360-slxc-add-promo-code"]': 'addPromoCode',
				'click [data-action="m360-slxc-remove-promo-code"]': 'removePromoCode',
				'click [data-action="m360-slxc-clear-estimate-shipping"]': 'clearEstimateShipping',
				'click [data-action="show-promocode-input-clicked"]': 'showPromocodeInputClicked',
				'click [data-action="quick-add-item-click"]': 'quickAddItemClick',
				'focusout [data-focusout="item-qty-focusout"]': 'itemQtyFocusout',
				'focusout [data-focusout="item-sku-focusout"]': 'itemSkuFocusout',
				'focusout [data-focusout="zipcode-focusout"]': 'zipcodeFocusout',
				'click [data-action="quick-add-click"]': 'quickAddClick',
				'click [data-action="close-box-click"]': 'closeBoxClick',
				'click [data-action="add-zipcode-click"]': 'addZipcodeClick',
				'click [data-action="m360-slxc-clear-cart"]': 'clearCart'
			};

			/* this.childViews = {
				'Quick.Order': function() {
					return new QuickOrderView({
						openQuickOrder: false
					});
				}
			} */
			
			this.container = this.options.container;
			this.cart_component = this.container.getComponent('Cart');
			this.environment_component = this.container.getComponent('Environment');

			this.allowMultiplePromoCodes = this.environment_component.getConfig('promocodes.allowMultiples');
			var sseVal = this.environment_component.getSiteSetting('showshippingestimator');
			this.showShippingEstimator = (sseVal && (sseVal == 'T'))?true:false;

			this.enableCartPOC = this.environment_component.getConfig("enableCartPOC");
			this.defaultImageURL = this.environment_component.getConfig('imageNotAvailable');
			this.priceLevelEnabled = this.environment_component.getConfig('priceLevel.enabled');
			this.defaultPriceLevel = this.environment_component.getConfig('priceLevel.default');
			this.enableClearCart = this.environment_component.getConfig('enableClearCart');

			this.session = this.environment_component.getSession();

			this.visitorId = CoreCLGeneral.getCookie('NLVisitorId');

			// this.enableCartPOC = true; // HARDCODING FOR DEV

			// This code is now common across both cart architectures:
			this.cartContextModel.on("change:cartData", function() {
				self.cartData = {
					lines: [],
					summary: null
				};
				
				var cartData = self.cartContextModel.get('cartData');
				self.cartData.lines = Utils.deepCopy(cartData.lines);
				self.cartData.summary = Utils.deepCopy(cartData.summary);

				self.isLoading = false;

				self.render();
			});

			if(this.enableCartPOC) {
				var cartData = this.cartContextModel.get('cartData');
				if(cartData) {
					this.cartData.lines = cartData.lines?Utils.deepCopy(cartData.lines):[];
					this.cartData.summary = cartData.summary?Utils.deepCopy(cartData.summary):null;
				} else {
					this.isLoading = true;
				}

            	return jQuery.Deferred().resolve();
			} else {
				this.cartData = {
					lines: [],
					summary: null
				};
				
				return this.CFCartModel.save({
					action: "get_lines",
					visitorId: self.visitorId
				}).done(function(res) {
					console.log('res', res);
					if(res.lines) {
						self.cartData.lines = res.lines;
					}
					if(res.summary) {
						self.cartData.summary = res.summary;
					}
				});
			}
		},

		zipcodeFocusout: function (e) {
			if(this.$(this).val() == '') {
				this.$('#zipcode').siblings("p").addClass("err");
			} else {
				this.$('#zipcode').siblings("p").removeClass("err");
			}
		},

		addZipcodeClick: function (e) {
			this.$('#zipcode').trigger('focusout');
    
			if(this.$(".zipcode-input-box").find('.err').length == 0){
				this.$(".zipcode-input-box").hide();
				this.$(".edit-zipcode").show();
				this.$(".zipcode-label").show();
			}
		},

		closeBoxClick: function (e) {
			this.$(".quick-add-box").hide();
    		this.$(".quick-add").show();
		},

		quickAddClick: function (e) {
			this.$(e.currentTarget).hide();
    		this.$(".quick-add-box").show();
		},

		itemSkuFocusout: function (e) {
			if(this.$(e.currentTarget).val() == '') {
        		this.$('#item-sku').siblings("p").addClass("err");
			} else {
				this.$('#item-sku').siblings("p").removeClass("err");
			}
		},

		itemQtyFocusout: function(e) {
			if(this.$(e.currentTarget).val() == 0) {
        		this.$('#item-qty').siblings("p").addClass("err");
			} else {
				this.$('#item-qty').siblings("p").removeClass("err");
			}
		},

		quickAddItemClick: function(e) {
			this.$('#item-sku').trigger('focusout');
    		this.$('#item-qty').trigger('focusout');
		},

		showPromocodeInputClicked: function(e) {
			this.$(e.currentTarget).hide();
    		this.$(".promocode-input-box").show();
		},

		getLines: function() {
			var self = this;

			this.CFCartModel.clear({ silent: true });
			this.CFCartModel.save({
				action: "get_lines",
				visitorId: self.visitorId
			}).done(function(res) {
				// console.log('res', res);
				if(res.lines) {
					self.cartData.lines = res.lines;
				}
				if(res.summary) {
					self.cartData.summary = res.summary;
				}
				self.render();
			});
		},

		incrQty: function(e) {
			var index = jQuery("#"+e.currentTarget.id).attr("data-index");
			var currentQty = jQuery("#line-updated-qty-"+index).val();

			if(!isNaN(currentQty)) {
				var updatedQty = parseInt(currentQty) + 1;
				jQuery("#line-updated-qty-"+index).val(updatedQty);
				if(parseInt(updatedQty) > 0) {
					this.updateLineQty(updatedQty, index);
				}
			}
		},

		decrQty: function(e) {
			var index = jQuery("#"+e.currentTarget.id).attr("data-index");
			var currentQty = jQuery("#line-updated-qty-"+index).val();

			if(!isNaN(currentQty) && currentQty > 1) {
				var updatedQty = parseInt(currentQty) - 1;
				jQuery("#line-updated-qty-"+index).val(updatedQty);
				if(parseInt(updatedQty) > 0) {
					this.updateLineQty(updatedQty, index);
				}
			}
		},

		changeQty: function(e) {
			var self = this;
			
			if(e.type == 'keyup') {
				setTimeout(() => {
					jQuery("#"+e.currentTarget.id).change();
				}, 500);
				return;
			}

			var index = jQuery("#"+e.currentTarget.id).attr("data-index");
			var currentQty = jQuery("#line-updated-qty-"+index).val();

			if(!isNaN(currentQty)) {
				var updatedQty = parseInt(currentQty);
				if(parseInt(updatedQty) > 0) {
					self.updateLineQty(updatedQty, index);
				}
			}
		},

		updateLineQty: function(updatedQty, index) {
			var self = this;

			var thisLine = this.cartData.lines[index];

			var targetLineId = "";
			this.cart_component.getLines().then(function(lines) {
				for(var i = 0; lines && (i < lines.length); i++) {
					if(parseInt(lines[i].item.internalid) == parseInt(thisLine.id)) {
						targetLineId = lines[i].internalid;
						break;
					}
				}

				// console.log('targetLineId', targetLineId);

				if(targetLineId && updatedQty) {
					self.cart_component.updateLine({
						line: {
							internalid: targetLineId,
							quantity: parseInt(updatedQty)
						}
					}).then(function() {
						// console.log("Line updated successfully");
					});
				}
			});
		},

		removeLine: function(e) {
			var self = this;

			var index = this.$(e.currentTarget).attr("data-index");
			var thisLine = this.cartData.lines[index];
			
			this.cart_component.removeLine({
				line_id: thisLine.lineId
			}).then(function() {
				console.log("Line removed successfully");
			});
		},

		addPromoCode: function(e) {
			var self = this;

			var promoCode = this.$("#m360-cart-promocode").val();
			if(promoCode) {
				this.cart_component.addPromotion({ promocode: promoCode }).then(function(res) {
					self.$('#m360-cart-promocode').siblings("p").removeClass("err");
				}, function(res) {
					if(res) {
						self.$('#m360-cart-promocode').siblings("p").addClass("err");
						var errorMessage = res.responseJSON.errorMessage;
						self.$("#m360-promocode-input-error").text(errorMessage);
					}
				});
			} else {
				this.$("#m360-promocode-input-error").text(Utils.translate("Promo Code is required."));
			}
		},
		
		removePromoCode: function(e) {
			var self = this;

			var index = jQuery("#"+e.currentTarget.id).attr('data-index');
			var activePromoCodeId = this.cartData.summary.promotions[index].internalid;

			if(activePromoCodeId) {
				this.cart_component.removePromotion({ promocode_internalid: activePromoCodeId }).then(function(promotion) {
					jQuery('.remove-code').siblings("p").removeClass("err");
				}, function(promotion) {
					jQuery('.remove-code').siblings("p").addClass("err");
					var errorMessage = promotion.responseJSON.errorMessage;
					jQuery("#m360-promocode-remove-error").text(errorMessage);
				});
			}
		},

		clearEstimateShipping: function(e) {
			var self = this;

			this.$(this).hide();
			this.$(".zipcode-label").hide();
			this.$(".zipcode-input-box").show();

			this.cart_component.clearEstimateShipping().then(function(res) {
				// console.log("clearEstimateShipping res", res);
			});
		},
		
		clearCart: function(e) {
			var self = this;

			if(this.enableCartPOC) {
				/* this.cart_component.getLines().then(function(lines, removed) {
					for(var i = 0; i < lines.length; i++) {
						self.cart_component.removeLine({
							line_id: lines[i].internalid
						}).then(function(res) {
							if(i == (lines.length - 1)) {
								location.reload();
							}
						});
					}
				}); */

				jQuery.get("/app/site/backend/emptycart.nl").then(function(res) {
					location.reload();
				});
			} else {
				this.CFCartModel.save({
					action: "clear_cart",
					visitorId: this.visitorId
				}).then(function(res) {
					self.cart_component.getLines().then(function(lines, removed) {
						for(var i = 0; i < lines.length; i++) {
							self.cart_component.removeLine({
								line_id: lines[i].internalid
							}).then(function(res) {
								if(i == (lines.length - 1)) {
									location.reload();
								}
							});
						}
					});
				});
			}
		},

		getContext: function () {
			var itemCount = 0;
			for(var i = 0; this.cartData && (i < this.cartData.lines.length); i++) {
				var thisLine = this.cartData.lines[i];
				itemCount += parseInt(thisLine.quantity);
			}

			var showPromoCodeIPBox = true;
			if(!this.allowMultiplePromoCodes) {
				if(this.cartData && this.cartData.summary && this.cartData.summary.promotions && (this.cartData.summary.promotions.length > 0)) {
					showPromoCodeIPBox = false;
				}
			}

			return {
				isLoading: this.isLoading,
				showPromoCodeIPBox: showPromoCodeIPBox,
				showShippingEstimator: this.showShippingEstimator,

				cartLines: (this.cartData && this.cartData.lines)?this.cartData.lines:[],
				cartSummary: (this.cartData && this.cartData.summary)?this.cartData.summary:null,
				lineCount: (this.cartData && this.cartData.lines)?this.cartData.lines.length:0,
				itemCount: itemCount,

				sampleImage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
				person: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-person.png')),

				enableClearCart: this.enableClearCart,

				icons: {
					delete: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-delete.png')),
					remove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-close-blk.png')),
					err: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-error.png')),
					icnClearBlk: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-clear-blk-xs.png')),
					icnEdit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-edit.png')),
					icnDiscount: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-discount.png'))
				}
			}
		}
	});
});

define('Saralux.Core.Cart.Context.Model', [
	'CoreFunctionality.Singleton',

	'Backbone',
  	'underscore'
],	function(
	Singleton,
	
	Backbone,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		areEventsSubscribed: function areEventsSubscribed() {
			if(this.get('eventsSubscribed')) {
				return this.get('eventsSubscribed');
			} else {
				return false;
			}
		}
	}, Singleton);
});

define('Saralux.Core.Cart.Lines.Content.View',	[
	'saralux_core_cart_lines_content.tpl',
	
	'Backbone',
	'SCView',
	'Utils',
	'jQuery'
], function (
	saralux_core_cart_lines_content_tpl,
	
	Backbone,
	SCViewModule,
	Utils,
	jQuery
) {
    'use strict';

    return Backbone.View.extend({

        template: saralux_core_cart_lines_content_tpl,

        initialize: function(options) {
            jQuery(window).scrollTop(0);
            var self = this;

            this.cartData = options.cartData;
            this.separateShippingLines = options.separateShippingLines;
        },

        getContext: function () {

            return {
                person: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-person.png')),
                
                separateShippingLines: this.separateShippingLines,
                cartLines: this.cartData.lines
            }
        }
    });
});

define('Saralux.Core.Cart.MiniCart.Content.View',	[
	'saralux_core_cart_minicart_content.tpl',

	'Saralux.Core.Cart.Lines.Content.View',

	'Saralux.Core.CommonLibraries.General',
	'Saralux.Core.CommonLibraries.Utilities.Model',

	'Saralux.Core.Cart.Context.Model',
	'Saralux.Core.Cart.SS2Model',
	
	'Backbone',
	'SCView',
	'Utils',
	'jQuery'
], function (
	saralux_core_cart_minicart_content_tpl,

	CartLinesContentView,

	CoreCLGeneral,
	CoreCLUtilitiesModel,

	CartContextModel,
	CoreCFSS2Model,
	
	Backbone,
	SCViewModule,
	Utils,
	jQuery
) {
	'use strict';

	return Backbone.View.extend({

		template: saralux_core_cart_minicart_content_tpl,

		events: {
			"click [data-action='m360-mini-cart-link-click']": "m360MiniCartLinkClick",
			"click [data-action='minicart-closed']": "minicartClosed"
		},

		cartData: {
			lines: [],
			summary: null
		},

		childViews: {
			'Cart.Lines.Content': function() {
				return new CartLinesContentView({
					cartData: this.cartData,
					separateShippingLines: false
				});
			}
		},

		initialize: function(options) {
			jQuery(window).scrollTop(0);
			var self = this;

			this.blockPopup = true;
	
			this.visitorId = CoreCLGeneral.getCookie('NLVisitorId');
	
			this.container = options.container;
			this.cart_component = this.container.getComponent('Cart');
			this.environment_component = this.container.getComponent('Environment');
	
			this.imageSizes = this.environment_component.getSiteSetting("imagesizes");

			this.session = this.environment_component.getSession();
	
			this.coreCLUtils = CoreCLUtilitiesModel.getInstance();
			this.cartContextModel = CartContextModel.getInstance();
			this.CFCartModel = new CoreCFSS2Model();
	
			this.isLoading = false;

			this.enableCartPOC = this.environment_component.getConfig("enableCartPOC");
			// this.enableCartPOC = true; // HARDCODING FOR DEV

			// This code is now common across both cart architectures:
			this.cartContextModel.on("change:cartData", function() {
				self.cartData = {
					lines: [],
					summary: null
				};

				var cartData = self.cartContextModel.get('cartData');
				self.cartData.lines = Utils.deepCopy(cartData.lines);
				self.cartData.summary = Utils.deepCopy(cartData.summary);

				self.render();

				var currentRoute = Backbone.history.fragment;

				if((!self.cartContextModel.get('blockPopup') && self.cartContextModel.get('showPopup') && (currentRoute != "m360-cart")) ||
				self.cartContextModel.get('forcePopup')) {
					self.$("#m360-mini-cart-dropdown").show();
					self.$("#m360-mini-cart-link").attr("data-mode", "open");
					self.cartContextModel.set('forcePopup', false);
				}
			});
			
			if(this.enableCartPOC) {
				var cartData = this.cartContextModel.get('cartData');
				if(cartData) {
					this.cartData.lines = cartData.lines?Utils.deepCopy(cartData.lines):[];
					this.cartData.summary = cartData.summary?Utils.deepCopy(cartData.summary):null;
				}
			} else {
				this.cartData = {
					lines: [],
					summary: null
				};
				
				this.CFCartModel.save({
					action: "get_lines",
					visitorId: self.visitorId
				}).done(function(res) {
					if(res.lines) {
						self.cartData.lines = res.lines;
					}
					if(res.summary) {
						self.cartData.summary = res.summary;
					}
	
					self.render();
	
					var currentRoute = Backbone.history.fragment;
	
					if(self.cartContextModel.get('forcePopup')) {
						self.$("#m360-mini-cart-dropdown").show();
						self.$("#m360-mini-cart-link").attr("data-mode", "open");
						self.cartContextModel.set('forcePopup', false);
					} else if(!self.cartContextModel.get('blockPopup') && !self.blockPopup && self.cartContextModel.get('showPopup') && (currentRoute != "m360-cart")) {
						self.$("#m360-mini-cart-dropdown").show();
						self.$("#m360-mini-cart-link").attr("data-mode", "open");
					}
	
					self.blockPopup = false;
				});
			}
		},

		minicartClosed: function minicartClosed(e) {
			this.$("#m360-mini-cart-dropdown").hide();
			this.$("#m360-mini-cart-link").attr("data-mode", "closed");
			this.$('.overlaybox').hide();
		},

		m360MiniCartLinkClick: function m360MiniCartLinkClick(e) {
			var dataMode = this.$(e.currentTarget).attr("data-mode");
			if(dataMode == "closed") {
				this.$(e.currentTarget).siblings("#m360-mini-cart-dropdown").show();
				this.$(e.currentTarget).attr("data-mode", "open");
				this.$('.overlaybox').show();
			} else {
				this.$(e.currentTarget).siblings("#m360-mini-cart-dropdown").hide();
				this.$(e.currentTarget).attr("data-mode", "closed");
				this.$('.overlaybox').hide();
			}
		},

		getContext: function () {
			var cartLines = (this.cartData && this.cartData.lines)?this.cartData.lines:[];
			var cartSummary = (this.cartData && this.cartData.summary)?this.cartData.summary:null;
			var lineCount = (this.cartData && this.cartData.lines)?this.cartData.lines.length:0;

			var itemCount = 0;
			for(var i = 0; cartLines && (i < cartLines.length); i++) {
				itemCount += parseInt(cartLines[i].quantity);
			}

			return {
				isLoading: this.isLoading,

				sampleImage: this.coreCLUtils.resizeImage(Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')), 'thumbnail'),
				person: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-person.png')),
	
				cartLines: this.cartData.lines,
				cartSummary: this.cartData.summary,
				lineCount: lineCount,
				itemCount: itemCount
			}
		}
	});
});

define('Saralux.Core.Cart.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function CartSVSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/Cart/SuiteScript2/Cart.Service.ss"
                ), true
            );
        }
    }

    CartSVSS2Model.prototype = Object.create(SCModel.prototype);
    CartSVSS2Model.prototype.constructor = CartSVSS2Model;
 
    return CartSVSS2Model;
});

define('Saralux.Core.Cart', [
	'Saralux.Core.Cart.MiniCart.Content.View',
	'Saralux.Core.Cart.Content.View',

	'Saralux.Core.Cart.Context.Model',
	'Saralux.Core.Cart.SS2Model',

	'Saralux.Core.CommonLibraries.General',
	'Saralux.Core.CommonLibraries.Cart',

	'Utils',
	'jQuery'
],   function (
	MiniCartContentView,
	CartContentView,

	CartContextModel,
	CoreCFSS2Model,

	CoreCLGeneral,
	CoreCLCart,

	Utils,
	jQuery
) {
	
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
                var self = this;

                this.container = container;

                this.environment_component = container.getComponent('Environment');
                
                if(this.environment_component) {
                    var isM360CartEnabled = CoreCLGeneral.isM360CartCheckout(this.environment_component);
                    // isM360CartEnabled = true;

                    if(isM360CartEnabled) {
                        this.cart_component = container.getComponent('Cart');

                        // Setup redirection for the M360 Cart flow
                        if(this.cart_component) {
                            this.cart_component.on('beforeShowContent', function(event) {
                                // console.log('this.cart_component beforeShowContent', event);
                                var m360CartURL = self.getM360CartURL(container);
                                Backbone.history.location.assign(m360CartURL);
                            });
                        }

                        this.layout_component = container.getComponent('Layout');
                        // console.log('registering Mini Cart view');
                        if(this.layout_component) {
                            // console.log('registered Mini Cart view');
                            this.layout_component.registerView('Saralux.Core.Cart.MiniCart.Content', function() {
                                return new MiniCartContentView({ container: container });
                            });
                            
                            this.layout_component.addToViewContextDefinition('Header.MiniCart.View', 'isM360CartEnabled', 'boolean', function (context) {
                                return true;
                            });
                            this.layout_component.addToViewContextDefinition('Cart.Confirmation.View', 'isM360CartEnabled', 'boolean', function (context) {
                                return true;
                            });
                        }
        
                        var PageType = container.getComponent('PageType');
                        if(PageType) {
                            PageType.registerPageType({
                                name: 'M360_Cart_Content',
                                view: CartContentView,
                                options: { container: container },
                                routes: ['m360-cart']
                            });
                        }

                        var enableCartPOC = this.environment_component.getConfig("enableCartPOC");
                        // enableCartPOC = true; // HARDCODING FOR DEV

                        if(enableCartPOC) {
                            this.cartContextModel = CartContextModel.getInstance();
			                this.CFCartModel = new CoreCFSS2Model();

			                this.placeholderItemID = this.environment_component.getConfig('placeholderItemID');
                            
                            this.addNewEventHandlers();
                            this.refreshCart();
                        } else {
                            this.addEventHandlers();
                        }
                    } else {
                        this.layout_component = container.getComponent('Layout');
                        if(this.layout_component) {
                            this.layout_component.addToViewContextDefinition('Header.MiniCart.View', 'isM360CartEnabled', 'boolean', function (context) {
                                return false;
                            });
                            this.layout_component.addToViewContextDefinition('Cart.Confirmation.View', 'isM360CartEnabled', 'boolean', function (context) {
                                return false;
                            });
                        }
                    }
                }
			} catch (e) {
				console.error('Error: Saralux.Core.Cart', e.toString());
			}
		},

        refreshCart: function () {
			var self = this;

			jQuery.when(
				this.cart_component.getLines(), 
				this.cart_component.getPromotions(), 
				this.cart_component.getSummary()
			).done(function(
				lines,
				promotions,
				summary
			) {
				self.fetchAndFormatCartData(lines, summary, promotions);
			});
		},

        fetchAndFormatCartData: function (lines, summary, promotions) {
            var self = this;

            this.cartData = {
                lines: [],
                summary: null
            };
			
			if(lines.length > 0) {
				var itemIds = [];
				for(var i = 0; i < lines.length; i++) {
                    // if(parseInt(lines[i].item.internalid) != self.placeholderItemID) {
					    itemIds.push(lines[i].item.internalid);
                    // }
				};

				this.CFCartModel.save({
					action: "get_items_info",
					itemIds: itemIds
				}).done(function(res) {
					if(!res.hasError && res.data) {
						var itemsInfo = (res.data && res.data.itemsInfo)?res.data.itemsInfo:null;
						
						if(itemsInfo) {
							self.cartData.lines = CoreCLCart.formatCartLines(lines, itemsInfo, self.container);
                            self.cartData.summary = CoreCLCart.formatCartSummary(summary, promotions);
                            self.cartContextModel.set('cartData', Utils.deepCopy(self.cartData));
						}
					}
				});
			} else {
				this.cartData.lines = [];
                this.cartData.summary = CoreCLCart.formatCartSummary(summary, promotions);
                this.cartContextModel.set('cartData', Utils.deepCopy(this.cartData));
			}
        },

        itemExists: function(itemId, currentLine) {
            var cartData = this.cartContextModel.get('cartData');
            // console.log('cartData', cartData);

			var exists = false;
			for(var i = 0; cartData && cartData.lines && (i < cartData.lines.length); i++) {
                // if(parseInt(cartData.lines[i].id) == parseInt(itemId)) {
                // console.log('compare-cartData.lines[i].lineId', cartData.lines[i].lineId);
                // console.log('compare-currentLine.internalid', currentLine.internalid);
                if(cartData.lines[i].lineId == currentLine.internalid) {
					exists = true;
                    break;
				}
			}

			return exists;
        },

		addNewEventHandlers: function() {
            var self = this;

            /* this.cart_component.on('beforeAddLine', function(response) {
                console.log('beforeAddLine', response);
                self.cartContextModel.set('refreshCart', true);

                var lineExists = this.lineExists(response.result);
                console.log('lineExists', lineExists);
                if(lineExists) {
                    self.cartContextModel.set('blockPopup', true);
                } else {
                    self.cartContextModel.set('blockPopup', false);
                }
            }); */

            this.cart_component.on('afterAddLine', function(response) {
                // console.log('afterAddLine', response);
                self.cartContextModel.set('showPopup', true);
                self.refreshCart();
            });

            this.cart_component.on('afterUpdateLine', function(response) {
                // console.log('afterUpdateLine', response);
                self.cartContextModel.set('showPopup', false);
                self.refreshCart();
            });

            // For future reference (Ticket 1622, Viraj)
            /* this.cart_component.cancelableOn('beforeRemoveLine', function(response) {
                console.log('beforeRemoveLine', response);

                var lineId = response.line_id;

                var deferred = new jQuery.Deferred();

                self.cart_component.getLines().then(function(lines) {
                    for(var i = 0; i < lines.length; i++) {
                        if(lines[i].internalid == lineId) {
                            var additionalData = CoreCLCart.getAdditionalData(lines[i]);

                            // Check cart validation here
                            if(additionalData) {
                                deferred.resolve();
                            } else {
                                self.layout_component.showMessage({
                                    message: 'You cannot remove this item as there are related items in the cart',
                                    type: 'error',
                                    selector: 'Notifications',
                                    timeout: 5000
                                });

                                deferred.reject();
                            }

                            break;
                        }
                    }
                });

                return deferred;
            }); */

            this.cart_component.on('afterRemoveLine', function(response) {
                // console.log('afterRemoveLine', response);
                self.cartContextModel.set('showPopup', false);
                self.refreshCart();
            });

            this.cart_component.on('afterEstimateShipping', function(response) {
                // console.log('afterEstimateShipping', response);
                self.cartContextModel.set('showPopup', false);
                self.refreshCart();
            });

            this.cart_component.on('afterClearEstimateShipping', function(response) {
                // console.log('afterClearEstimateShipping', response);
                self.cartContextModel.set('showPopup', false);
                self.refreshCart();
            });

            this.cart_component.on('afterAddPromotion', function(response) {
                // console.log('afterAddPromotion', response);
                self.cartContextModel.set('showPopup', false);
                self.refreshCart();
            });

            this.cart_component.on('afterRemovePromotion', function(response) {
                // console.log('afterRemovePromotion', response);
                self.cartContextModel.set('showPopup', false);
                self.refreshCart();
            });

            return true;
        },
        
		lineExists: function(lineId) {
            var found = false;

            this.cart_component.getLines().then(function(res) {
                for(var i = 0; i < lines.length; i++) {
                    if(lines[i].internalid == lineId) {
                        found = true;
                        break;
                    }
                }
            });

            return found;
        },

		addEventHandlers: function() {
			var self = this;

			this.cartContextModel = CartContextModel.getInstance();
			this.CFCartModel = new CoreCFSS2Model();

			this.visitorId = CoreCLGeneral.getCookie('NLVisitorId');

			this.priceLevelEnabled = this.environment_component.getConfig('priceLevel.enabled');
			this.defaultPriceLevel = this.environment_component.getConfig('priceLevel.default');
			this.defaultImageURL = this.environment_component.getConfig('imageNotAvailable');
			this.placeholderItemID = this.environment_component.getConfig('placeholderItemID');

			if(this.cart_component && this.environment_component) {
				this.session = this.environment_component.getSession();
                this.cartContextModel.set('showPopup', true);
                
                // // console.log('adding event handler', 'afterAddLine');
                this.cart_component.on('afterAddLine', function(response) {
                    // console.log('(afterAddLine) Line added', response);
    
                    var currentLine = response.line;
                    var currentItemId = currentLine.item.internalid;

                    if(parseInt(currentItemId) == self.placeholderItemID) {
                        // console.log('Placeholder Item found!');
                        return;
                    }

					var itemExists = self.itemExists(currentItemId, currentLine);
                    // console.log('itemExists', itemExists);

                    if(!itemExists) {
                        var additionalData = null;
                        if(currentLine.options && currentLine.options.length > 0) {
                            for(var i = 0; i < currentLine.options.length; i++) {
                                if(currentLine.options[i].cartOptionId == "custcol_slxc_additional_data") {
                                    additionalData = currentLine.options[i].value.internalid;
                                    additionalData = additionalData?JSON.parse(additionalData):null;
                                    break;
                                }
                            }
                        }
                        // console.log('(afterAddLine) additionalData', additionalData);

                        if(additionalData && additionalData.blockSync) {
                            // console.log('sync blocked');
                            return;
                        }
                        
                        var rate = 0;
                        var cwRate = 0;
                        var amount = 0;
                        var extras = null;
                        var sku = "";
                        var thumbnail = "";
                        
						jQuery.when(self.cart_component.getPromotions(), self.cart_component.getLines(), self.cart_component.getSummary())
                        .done(function (promotions, lines, summary) {
                            // console.log('afterAddLine promotions', promotions);
                            // console.log('afterAddLine lines', lines);
                            // console.log('afterAddLine summary', summary);
        
                            for(var i = 0; i < lines.length; i++) {
                                if(currentItemId == lines[i].item.internalid) {
                                    rate = lines[i].rate;
                                    amount = lines[i].amount;
                                    extras = lines[i].extras;
                                    sku = lines[i].item.itemid;
									if(self.priceLevelEnabled) {
										cwRate = lines[i].item.extras[self.defaultPriceLevel]?lines[i].item.extras[self.defaultPriceLevel]:0;
									}

                                    // console.log('self.defaultImageURL', self.defaultImageURL);
                                    // console.log('lines[i].item.extras.keyMapping_thumbnail.url', lines[i].item.extras.keyMapping_thumbnail.url);

                                    if(self.defaultImageURL != lines[i].item.extras.keyMapping_thumbnail.url) {
                                        thumbnail = lines[i].item.extras.keyMapping_thumbnail.url;
                                    }

                                    break;
                                }
                            }

                            // console.log('afterAddLine rate', rate);
                            // console.log('afterAddLine cwRate', cwRate);

                            var updatedLines = lines;
                            var currentLines = self.cartContextModel.get('cartData')?self.cartContextModel.get('cartData').lines:[];
                            // console.log('afterAddLine updatedLines', updatedLines);
                            // console.log('afterAddLine currentLines', currentLines);

                            var linesToSync = [], linesToForceSync = [];
                            if(additionalData && additionalData.triggerForceSync) {
                                linesToForceSync = self.getLinesToForceSync(updatedLines, currentLine.internalid, additionalData.syncKey);
                            } else {
                                linesToSync = self.getLinesToSync(currentLines, updatedLines, currentItemId);
                            }
                            // console.log('afterAddLine linesToSync', linesToSync);
                            // console.log('afterAddLine linesToForceSync', linesToForceSync);
        
                            self.CFCartModel.clear({ silent: true });
                            self.CFCartModel.save({
                                action: "add_line",
                                visitorId: self.visitorId,
                                line: {
                                    id: response.line.internalid
                                },
                                item: {
                                    id: response.line.item.internalid,
                                    quantity: response.line.quantity,
                                    sku: sku,
                                    thumbnail: thumbnail,
                                    rate: rate,
                                    cwRate: cwRate,
                                    amount: amount,
                                    extras: extras,
                                    options: currentLine.options
                                },
                                currency: self.session.currency.internalid,
                                summary: summary,
                                linesToSync: linesToSync,
                                linesToForceSync: linesToForceSync,
                                promotions: promotions
                            }).done(function(res) {
                                // console.log('afterAddLine res', res);
                                var cartQueue = self.cartContextModel.get('cartQueue');
                                var cartQueueCount = self.cartContextModel.get('cartQueueCount');
                                cartQueueCount = cartQueueCount?cartQueueCount:0;
                                // console.log('(afterAddLine) cartQueue before', cartQueue);

                                var updateCartQueue = false;
                                
                                if(res.hasError) {
                                    for(var i = 0; cartQueue && i < cartQueue.length; i++) {
                                        if(additionalData && (cartQueue[i].uid == additionalData.uid)) {
                                            if(cartQueue[i].updateCartQueue) {
                                                updateCartQueue = true;
                                                cartQueue[i].failure = true;
                                                cartQueue[i].triggerEvent = true;
                                                cartQueue[i].updateCartQueue = false;
                                                cartQueueCount++;
                                                break;
                                            }
                                        }
                                    }
                                    
                                    self.cart_component.removeLine({
                                        line_id: response.line.internalid
                                    }).then(function() {
                                        console.error("Error while adding item to M360 Cart. Line removed from SC Cart");
                                    });
                                } else {
                                    if(additionalData) {
                                        // var targetIndex = null;
                                        for(var i = 0; cartQueue && i < cartQueue.length; i++) {
                                            if(cartQueue[i].uid == additionalData.uid) {
                                                if(cartQueue[i].updateCartQueue) {
                                                    // targetIndex = i;
                                                    if(cartQueueCount>0) cartQueueCount--;
                                                    break;
                                                }
                                            }
                                        }
                                        /* if(!isNaN(targetIndex)) {
                                            cartQueue.splice(targetIndex, 1);
                                        } */
                                    }

                                    self.cartContextModel.set('showPopup', true);
                                    if(res.lines && res.summary) {
                                        self.cartContextModel.set('cartData', {
                                            lines: res.lines,
                                            summary: res.summary
                                        });
                                    }
                                }

                                if(additionalData) {
                                    // console.log('(afterAddLine) updateCartQueue', updateCartQueue);
                                    // console.log('(afterAddLine) cartQueue', cartQueue);
                                    // console.log('(afterAddLine) cartQueueCount', cartQueueCount);
                                    
                                    if(cartQueue) {
                                        // console.log('(afterAddLine) cartQueue after', cartQueue);
                                        self.cartContextModel.set('cartQueue', JSON.parse(JSON.stringify(cartQueue)));
                                        self.cartContextModel.set('cartQueueCount', cartQueueCount);
                                    }
                                }

                            });
                        });
                    } else {
                        jQuery.when(self.cart_component.getPromotions(), self.cart_component.getLines(), self.cart_component.getSummary())
                        .done(function (promotions, lines, summary) {
                            // console.log('else afterAddLine promotions', promotions);
                            // console.log('else afterAddLine lines', lines);
                            // console.log('else afterAddLine summary', summary);

                            var updatedLines = lines;
                            var currentLines = self.cartContextModel.get('cartData').lines;
                            // console.log('else afterAddLine updatedLines', updatedLines);
                            // console.log('else afterAddLine currentLines', currentLines);
                            // var linesToSync = self.getLinesToSync(currentLines, updatedLines, currentItemId); // sync logic modified (5/20)
                            var linesToSync = self.getLinesToSync(currentLines, updatedLines, null, currentItemId);
                            // console.log('else afterAddLine linesToSync', linesToSync);

                            if(linesToSync && linesToSync.length > 0) {
                                self.CFCartModel.clear({ silent: true });
                                self.CFCartModel.save({
                                    action: "add_line",
                                    visitorId: self.visitorId,
                                    line: {
                                        id: response.line.internalid
                                    },
                                    item: null,
                                    currency: self.session.currency.internalid,
                                    summary: summary,
                                    linesToSync: linesToSync,
                                    promotions: promotions
                                }).done(function(res) {
                                    // console.log('afterAddLine res (itemExists)', res);
                                    self.cartContextModel.set('showPopup', true);
                                    if(res.lines && res.summary) {
                                        self.cartContextModel.set('cartData', {
                                            lines: res.lines,
                                            summary: res.summary
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
    
                // // console.log('adding event handler', 'afterUpdateLine');
                this.cart_component.on('afterUpdateLine', function(response) {
                    // console.log('Line updated', response);
                    
                    var currentLine = response.line;
                    var currentItemId = currentLine.item.internalid;
    
                    var rate = 0;
                    var cwRate = 0;
                    var amount = 0;
                    var extras = null;
    
                    jQuery.when(self.cart_component.getPromotions(), self.cart_component.getLines(), self.cart_component.getSummary())
                    .done(function (promotions, lines, summary) {
                        // console.log('afterUpdateLine promotions', promotions);
                        // console.log('afterUpdateLine lines', lines);
                        // console.log('afterUpdateLine summary', summary);
                        
                        for(var i = 0; i < lines.length; i++) {
                            if(currentItemId == lines[i].item.internalid) {
                                rate = lines[i].rate;
                                amount = lines[i].amount;
                                extras = lines[i].extras;
								if(self.priceLevelEnabled) {
									cwRate = lines[i].item.extras[self.defaultPriceLevel]?lines[i].item.extras[self.defaultPriceLevel]:0;
								}
                                break;
                            }
                        }

                        var updatedLines = lines;
                        var currentLines = self.cartContextModel.get('cartData').lines;
                        // console.log('afterUpdateLine updatedLines', updatedLines);
                        // console.log('afterUpdateLine currentLines', currentLines);
                        var linesToSync = self.getLinesToSync(currentLines, updatedLines, currentItemId, null);
                        // console.log('afterUpdateLine linesToSync', linesToSync);
    
                        self.CFCartModel.clear({ silent: true });
                        self.CFCartModel.save({
                            action: "update_line",
                            visitorId: self.visitorId,
                            line: {
                                id: response.line.internalid
                            },
                            item: {
                                id: response.line.item.internalid,
                                quantity: response.line.quantity,
                                rate: rate,
                                cwRate: cwRate,
                                amount: amount,
                                extras: extras
                            },
                            currency: self.session.currency.internalid,
                            summary: summary,
                            linesToSync: linesToSync,
                            promotions: promotions
                        }).done(function(res) {
                            self.cartContextModel.set('showPopup', true);
							if(res.lines && res.summary) {
                                self.cartContextModel.set('cartData', {
                                    lines: res.lines,
                                    summary: res.summary
                                });
                            }
                        });
                    });
                });
    
                // // console.log('adding event handler', 'afterRemoveLine');
                this.cart_component.on('afterRemoveLine', function(response) {
                    // console.log('Line removed', response);
    
                    var lineIdStr = response.line_id;
                    var lineIdArr = lineIdStr.split("item");
                    lineIdStr = lineIdArr[1];
                    lineIdArr = lineIdStr.split("set");
    
                    var itemId = lineIdArr[0];
    
                    jQuery.when(self.cart_component.getPromotions(), self.cart_component.getLines(), self.cart_component.getSummary())
                    .done(function (promotions, lines, summary) {
                        // console.log('afterRemoveLine promotions', promotions);
                        // console.log('afterRemoveLine lines', lines);
                        // console.log('afterRemoveLine summary', summary);

                        var updatedLines = lines;
                        var currentLines = self.cartContextModel.get('cartData').lines;
                        // console.log('afterRemoveLine updatedLines', updatedLines);
                        // console.log('afterRemoveLine currentLines', currentLines);
                        var linesToSync = self.getLinesToSync(currentLines, updatedLines, null, null);
                        // console.log('afterRemoveLine linesToSync', linesToSync);
    
                        self.CFCartModel.clear({ silent: true });
                        self.CFCartModel.save({
                            action: "remove_line",
                            visitorId: self.visitorId,
                            line: {
                                id: response.line_id
                            },
                            item: {
                                id: itemId
                            },
                            currency: self.session.currency.internalid,
                            summary: summary,
                            linesToSync: linesToSync,
                            promotions: promotions
                        }).done(function(res) {
                            // console.log('afterRemoveLine res', res);
							self.cartContextModel.set('showPopup', true);
                            if(res.lines && res.summary) {
                                self.cartContextModel.set('cartData', {
                                    lines: res.lines,
                                    summary: res.summary
                                });
                            }
                        });
                    });
                });

                // // console.log('adding event handler', 'afterEstimateShipping');
                this.cart_component.on('afterEstimateShipping', function(response) {
                    // console.log('afterEstimateShipping', response);

                    jQuery.when(self.cart_component.getSummary())
                    .done(function (summary) {
                        // console.log('summary', summary);
        
                        self.CFCartModel.clear({ silent: true });
                        self.CFCartModel.save({
                            action: "sync_cart",
                            visitorId: self.visitorId,
                            currency: self.session.currency.internalid,
                            summary: summary,
                            updatePromotions: false,
                            forceLinesUpdate: false,
                            forceSummaryUpdate: true
                        }).done(function(res) {
                            self.cartContextModel.set('showPopup', false);
                            if(res.lines && res.summary) {
                                self.cartContextModel.set('cartData', {
                                    lines: res.lines,
                                    summary: res.summary
                                });
                            }
                        });
                    });
                });

                // // console.log('adding event handler', 'afterClearEstimateShipping');
                this.cart_component.on('afterClearEstimateShipping', function(response) {
                    // console.log('afterClearEstimateShipping', response);

                    jQuery.when(self.cart_component.getSummary())
                    .done(function (summary) {
                        // console.log('summary', summary);
        
                        self.CFCartModel.clear({ silent: true });
                        self.CFCartModel.save({
                            action: "sync_cart",
                            visitorId: self.visitorId,
                            currency: self.session.currency.internalid,
                            summary: summary,
                            updatePromotions: false,
                            forceLinesUpdate: false,
                            forceSummaryUpdate: true
                        }).done(function(res) {
                            self.cartContextModel.set('showPopup', false);
                            if(res.lines && res.summary) {
                                self.cartContextModel.set('cartData', {
                                    lines: res.lines,
                                    summary: res.summary
                                });
                            }
                        });
                    });
                });

                // // console.log('adding event handler', 'afterAddPromotion');
                this.cart_component.on('afterAddPromotion', function(response) {
                    // console.log('afterAddPromotion', response);

                    jQuery.when(self.cart_component.getPromotions(), self.cart_component.getLines(), self.cart_component.getSummary())
                    .done(function (promotions, lines, summary) {
                        // console.log('promotions', promotions);
                        // console.log('lines', lines);
                        // console.log('summary', summary);
        
                        var cartLines = [];
                        for(var i = 0; lines && i < lines.length; i++) {
                            var cwRate = lines[i].rate;
                            if(self.priceLevelEnabled) {
                                cwRate = lines[i].item.extras[self.defaultPriceLevel]?lines[i].item.extras[self.defaultPriceLevel]:0;
                            }
                            cartLines.push({
                                line: {
                                    id: lines[i].internalid
                                },
                                item: {
                                    id: lines[i].item.internalid,
                                    sku: lines[i].item.itemid,
                                    quantity: lines[i].quantity,
                                    rate: lines[i].rate,
                                    cwRate: cwRate,
                                    amount: lines[i].amount,
                                    options: lines[i].options,
                                    extras: lines[i].extras
                                }
                            });
                        }
        
                        self.CFCartModel.clear({ silent: true });
                        self.CFCartModel.save({
                            action: "sync_cart",
                            visitorId: self.visitorId,
                            currency: self.session.currency.internalid,
                            promotions: promotions,
                            summary: summary,
                            lines: cartLines,
                            updatePromotions: true,
                            forceLinesUpdate: true,
                            forceSummaryUpdate: true
                        }).done(function(res) {
                            self.cartContextModel.set('showPopup', false);
                            if(res.lines && res.summary) {
                                self.cartContextModel.set('cartData', {
                                    lines: res.lines,
                                    summary: res.summary
                                });
                            }
                        });
                    });
                });

                // // console.log('adding event handler', 'afterRemovePromotion');
                this.cart_component.on('afterRemovePromotion', function(response) {
                    // console.log('afterRemovePromotion', response);

                    jQuery.when(self.cart_component.getPromotions(), self.cart_component.getLines(), self.cart_component.getSummary())
                    .done(function (promotions, lines, summary) {
                        // console.log('promotions', promotions);
                        // console.log('lines', lines);
                        // console.log('summary', summary);
        
                        var cartLines = [];
                        for(var i = 0; lines && i < lines.length; i++) {
                            var cwRate = lines[i].rate;
                            if(self.priceLevelEnabled) {
                                cwRate = lines[i].item.extras[self.defaultPriceLevel]?lines[i].item.extras[self.defaultPriceLevel]:0;
                            }
                            cartLines.push({
                                line: {
                                    id: lines[i].internalid
                                },
                                item: {
                                    id: lines[i].item.internalid,
                                    sku: lines[i].item.itemid,
                                    quantity: lines[i].quantity,
                                    rate: lines[i].rate,
                                    cwRate: cwRate,
                                    amount: lines[i].amount,
                                    options: lines[i].options,
                                    extras: lines[i].extras
                                }
                            });
                        }
        
                        self.CFCartModel.clear({ silent: true });
                        self.CFCartModel.save({
                            action: "sync_cart",
                            visitorId: self.visitorId,
                            currency: self.session.currency.internalid,
                            promotions: promotions,
                            summary: summary,
                            lines: cartLines,
                            updatePromotions: true,
                            forceLinesUpdate: true,
                            forceSummaryUpdate: true
                        }).done(function(res) {
                            self.cartContextModel.set('showPopup', false);
                            if(res.lines && res.summary) {
                                self.cartContextModel.set('cartData', {
                                    lines: res.lines,
                                    summary: res.summary
                                });
                            }
                        });
                    });
                });

                this.cart_component.cancelableOn('beforeRemoveLine', function(context) {
                    // console.log('beforeRemoveLine context', context);

                    var deferred = jQuery.Deferred();

                    if(Utils.isInCheckout()) {
                        return deferred.resolve();
                    } else {
                        var cartData = self.cartContextModel.get("cartData");
    
                        var allowRemoval = true;
    
                        for(var i = 0; cartData && cartData.lines && i < cartData.lines.length; i++) {
                            var thisLine = cartData.lines[i];
    
                            if((thisLine.lineId == context.line_id) &&
                            (thisLine.scOptions && thisLine.scOptions.serviceFee && thisLine.scOptions.serviceFee != "")) {
                                allowRemoval = false;
                                break;
                            }
                        }
    
                        if(allowRemoval) {
                            return deferred.resolve();
                        } else {
                            if(self.layout_component) {
                                self.layout_component.showMessage({
                                    message: Utils.translate("This item cannot be removed."),
                                    type: 'error',
                                    selector: 'Notifications',
					                timeout: 5000
                                });
                            }
                            return deferred.reject();
                        }
                    }
                });

                this.cart_component.cancelableOn('beforeUpdateLine', function(context) {
                    // console.log('beforeUpdateLine context', context);

                    var deferred = jQuery.Deferred();

                    if(Utils.isInCheckout()) {
                        return deferred.resolve();
                    } else {
                        var cartData = self.cartContextModel.get("cartData");
    
                        var allowUpdate = true;
    
                        for(var i = 0; cartData && cartData.lines && i < cartData.lines.length; i++) {
                            var thisLine = cartData.lines[i];
    
                            if((thisLine.id == context.line.item.internalid) &&
                            (thisLine.scOptions && thisLine.scOptions.serviceFee && thisLine.scOptions.serviceFee != "")) {
                                allowUpdate = false;
                                break;
                            }
                        }
    
                        if(allowUpdate) {
                            return deferred.resolve();
                        } else {
                            if(self.layout_component) {
                                self.layout_component.showMessage({
                                    message: Utils.translate("This item cannot be updated."),
                                    type: 'error',
                                    selector: 'Notifications',
					                timeout: 5000
                                });
                            }
                            return deferred.reject();
                        }
                    }
                });

                this.cart_component.cancelableOn('beforeAddPromotion', function(context) {
                    // console.log('beforeAddPromotion context', context);

                    var deferred = jQuery.Deferred();

                    var cartData = self.cartContextModel.get("cartData");
    
                    var allowAdd = true;

                    for(var i = 0; cartData && cartData.lines && i < cartData.lines.length; i++) {
                        var thisLine = cartData.lines[i];

                        if((thisLine.scOptions && thisLine.scOptions.serviceFee && thisLine.scOptions.serviceFee == "InstallmentPlan")) {
                            allowAdd = false;
                            break;
                        }
                    }

                    if(allowAdd) {
                        return deferred.resolve();
                    } else {
                        if(self.layout_component) {
                            self.layout_component.showMessage({
                                message: "<strong>"+Utils.translate("Please de-select 'Installment Plan' under payment options in Checkout and try again.")+"</strong>",
                                type: 'error',
                                selector: 'Notifications',
                                timeout: 5000
                            });
                        }
                        return deferred.reject();
                    }
                });
	
				jQuery.when(this.cart_component.getPromotions(), this.cart_component.getLines(), this.cart_component.getSummary())
				.done(function (promotions, lines, summary) {
	
					var cartLines = [];
					for(var i = 0; lines && i < lines.length; i++) {
                        var cwRate = lines[i].rate;
                        if(self.priceLevelEnabled) {
                            cwRate = lines[i].item.extras[self.defaultPriceLevel]?lines[i].item.extras[self.defaultPriceLevel]:0;
                        }
						cartLines.push({
                            line: {
                                id: lines[i].internalid
                            },
							item: {
								id: lines[i].item.internalid,
								quantity: lines[i].quantity,
								rate: lines[i].rate,
                                cwRate: cwRate,
								amount: lines[i].amount,
								options: lines[i].options,
                                extras: lines[i].extras
							}
						});
					}
	
					self.CFCartModel.clear({ silent: true });
					self.CFCartModel.save({
						action: "get_lines",
                        initRequest: true,
						visitorId: self.visitorId,
						currency: self.session.currency.internalid,
						summary: summary,
						promotions: promotions,
						lines: cartLines
					}).done(function(res) {
                        // // console.log('CART INIT', res);
                        self.cartContextModel.set('showPopup', false);
						if(res.lines && res.summary) {
                            self.cartContextModel.set('cartData', {
                                lines: res.lines,
                                summary: res.summary
                            });
                        }
					});
				});
            }
		},

        getLinesToSync: function(currentLines, updatedLines, excludeItemId, includeItemId) {
            try {
                var linesToSync = [];

                for(var i = 0; currentLines && i < currentLines.length; i++) {
                    var thisCLine = currentLines[i];

                    if(excludeItemId && (parseInt(thisCLine.id) == parseInt(excludeItemId))) {
                        // Exclude current item (useful for updateItem scenario, when an item is updated)
                        // This will prevent from force-syncing the updated item - preventing duplicate update requests
                        continue;
                    } else if(!(includeItemId && (parseInt(thisCLine.id) == parseInt(includeItemId)))) {
                        // Include only current item (useful for addItem scenario, when an existing item is added again)
                        // This will prevent from force-syncing the re-added item multiple times - preventing duplicate add requests
                        continue;
                    }

                    if(parseInt(thisCLine.id) == parseInt(self.placeholderItemID)) {
                        continue;
                    }

                    for(var j = 0; updatedLines && j < updatedLines.length; j++) {
                        var thisULine = updatedLines[j];

                        // console.log('thisCLine', thisCLine);
                        // console.log('thisULine', thisULine);

                        // console.log('thisCLine.quantity', thisCLine.quantity);
                        // console.log('thisULine.quantity', thisULine.quantity);

                        // console.log('thisCLine.id', thisCLine.id);
                        // console.log('thisULine.item.internalid', thisULine.item.internalid);

                        // console.log('thisCLine.total', thisCLine.total);
                        // console.log('thisULine.extras.total', thisULine.extras.total);

                        if(parseInt(thisCLine.id) == parseInt(thisULine.item.internalid)) {
                            // if(parseFloat(thisCLine.total) != parseFloat(thisULine.extras.total)) {      // sync logic modified (5/20)
                            if(parseInt(thisCLine.quantity) != parseInt(thisULine.quantity)) {
                                var cwRate = thisULine.rate;
                                if(self.priceLevelEnabled) {
                                    cwRate = thisULine.item.extras[self.defaultPriceLevel]?thisULine.item.extras[self.defaultPriceLevel]:0;
                                }
                                linesToSync.push({
                                    line: {
                                        id: thisULine.internalid,
                                    },
                                    item: {
                                        id: thisULine.item.internalid,
                                        quantity: thisULine.quantity,
                                        rate: thisULine.rate,
                                        cwRate: cwRate,
                                        amount: thisULine.amount,
                                        options: thisULine.options,
                                        extras: thisULine.extras
                                    }
                                });
                            }
                            break;
                        }
                    }
                }

                return linesToSync;
            } catch (e) {
                console.error('exception: linesToSync', e.toString());
                return [];
            }
        },
        
        getLinesToForceSync: function(updatedLines, excludeLineId, syncKey) {
            try {
                var self = this;

                var linesToSync = [];

                for(var i = 0; updatedLines && i < updatedLines.length; i++) {
                    var thisLine = updatedLines[i];

                    /* 
                        When we want to force sync item addition, we apply a numeric 'sync key' to all the items added within a lot.
                        The last item from the lot will have the forceSync trigger set to true, for others it will be false.
                        In this method, we want to only add the items from that particular lot, which we identify using the sync key.
                        The following logic will validate the sync key and only 'force add' those items which are supposed to be.
                    */
                    var syncKeyMatched = false;
                    if(thisLine.options) {
                        for(var j in thisLine.options) {
                            if(thisLine.options[j].cartOptionId == "custcol_slxc_additional_data") {
                                var additionalData = thisLine.options[j].value?thisLine.options[j].value.internalid:null;
                                
                                if(additionalData) {
                                    additionalData = JSON.parse(additionalData);
                                    
                                    if(additionalData.syncKey && (additionalData.syncKey == syncKey)) {
                                        syncKeyMatched = true;
                                    }
                                }
                                
                                break;
                            }
                        }
                    }

                    if(!syncKeyMatched) {
                        continue;
                    }
                    
                    /* 
                        The sync key validation logic should handle our validations for the most part, and not re-add unnecessary lines via the 'force add' logic .
                        The following validations are added just for good measure.
                    */
                    if(parseInt(thisLine.item.internalid) == parseInt(self.placeholderItemID)) {
                        continue;
                    } else if(thisLine.internalid == excludeLineId) {
                        continue;
                    }

                    var cwRate = thisLine.rate;
                    if(self.priceLevelEnabled) {
                        cwRate = thisLine.item.extras[self.defaultPriceLevel]?thisLine.item.extras[self.defaultPriceLevel]:0;
                    }
                    linesToSync.push({
                        line: {
                            id: thisLine.internalid,
                        },
                        item: {
                            id: thisLine.item.internalid,
                            quantity: thisLine.quantity,
                            rate: thisLine.rate,
                            cwRate: cwRate,
                            amount: thisLine.amount,
                            options: thisLine.options,
                            extras: thisLine.extras
                        }
                    });
                }

                return linesToSync;
            } catch (e) {
                console.error('exception: linesToSync', e.toString());
                return [];
            }
        },

        getM360CartURL: function getM360CartURL() {
			var touchpoints = this.environment_component.getSiteSetting("touchpoints");
			// console.log('touchpoints', touchpoints);

			return touchpoints.home+"#m360-cart";
		}
	};
});


define('Saralux.Core.ChaptersSV.Chapter.Accouncements.View', [
	'saralux_core_chapterssv_chapter_announcements.tpl',

	'Saralux.Core.ChaptersSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_chapterssv_chapter_announcements_tpl,

	ChaptersSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ChaptersSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_chapterssv_chapter_announcements_tpl;
		
		this.model = new ChaptersSVSS2Model();

		this.isLoading = true;

		this.chapterAnnouncements = [];

		this.model.save({
			action: "GET_CHAPTER_ANNOUNCEMENTS",
			chapterId: options.chapterId,
			pagination: {
				index: 0,
				pageSize: 1000
			}
		}).then(function(res) {
			console.log('res', res);

			if(!res.hasError && res.chapterAnnouncements) {
				self.chapterAnnouncements = res.chapterAnnouncements
			}

			self.isLoading = false;
			self.render();
		});
    }

    ChaptersSVView.prototype = Object.create(SCView.prototype);
    ChaptersSVView.prototype.constructor = ChaptersSVView;

	ChaptersSVView.prototype.getEvents = function () {
        return {
            'click [data-action="m360-slxc-csvc-view-announcement"]': 'viewAnnouncement'
        }
    }

	ChaptersSVView.prototype.viewAnnouncement = function(e) {
		var index = jQuery("#"+e.currentTarget.id).attr('data-index');
		var thisAnnouncement = this.chapterAnnouncements[index];

		jQuery("#announcement-modal #announcement-title").text(thisAnnouncement.title);
		jQuery("#announcement-modal #announcement-date").text(thisAnnouncement.date);
		jQuery("#announcement-modal #announcement-description").text(thisAnnouncement.description);
		jQuery('#announcement-modal').modal('show');
	}

    ChaptersSVView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            chapterAnnouncements: this.chapterAnnouncements,

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png'))
			}
        }
    }

    return ChaptersSVView;
});

define('Saralux.Core.ChaptersSV.Chapter.Discussion.View', [
	'saralux_core_chapterssv_chapter_discussion.tpl',

	'Saralux.Core.ChaptersSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_chapterssv_chapter_discussion_tpl,

	ChaptersSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ChaptersSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_chapterssv_chapter_discussion_tpl;
		
		this.model = new ChaptersSVSS2Model();

		this.isLoading = true;

		this.chapterDiscussion = [];

		/* this.model.save({
			action: "GET_CHAPTER_DISCUSSION",
			chapterId: options.chapterId
		}).then(function(res) {
			console.log('res', res);

			if(!res.hasError && res.chapterDiscussion) {
				self.chapterDiscussion = res.chapterDiscussion
			}

			self.isLoading = false;
			self.render();
		}); */
    }

    ChaptersSVView.prototype = Object.create(SCView.prototype);
    ChaptersSVView.prototype.constructor = ChaptersSVView;

    ChaptersSVView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            chapterDiscussion: this.chapterDiscussion,

			defaultProfileImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png'))
			}
        }
    }

    return ChaptersSVView;
});

define('Saralux.Core.ChaptersSV.Chapter.Events.View', [
	'saralux_core_chapterssv_chapter_events.tpl',

	'Saralux.Core.ChaptersSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_chapterssv_chapter_events_tpl,

	ChaptersSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ChaptersSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_chapterssv_chapter_events_tpl;

		this.defaultEventImage = options.container.getComponent('Environment').getConfig('defaultEventImage');

		this.model = new ChaptersSVSS2Model();

		this.isLoading = true;

		this.chapterEvents = [];

		this.model.save({
			action: "GET_CHAPTER_EVENTS",
			chapterId: options.chapterId,
			pagination: {
				index: 0,
				pageSize: 1000
			}
		}).then(function(res) {
			console.log('res', res);

			if(!res.hasError && res.chapterEvents) {
				self.chapterEvents = res.chapterEvents
			}

			self.isLoading = false;
			self.render();
		});
    }

    ChaptersSVView.prototype = Object.create(SCView.prototype);
    ChaptersSVView.prototype.constructor = ChaptersSVView;

    ChaptersSVView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            chapterEvents: this.chapterEvents,

            defaultEventImage: this.defaultEventImage,
			defaultEventImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-team.jpg')),

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png'))
			}
        }
    }

    return ChaptersSVView;
});

define('Saralux.Core.ChaptersSV.Chapter.Meetings.View', [
	'saralux_core_chapterssv_chapter_meetings.tpl',

	'Saralux.Core.ChaptersSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_chapterssv_chapter_meetings_tpl,

	ChaptersSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ChaptersSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_chapterssv_chapter_meetings_tpl;
		
		this.model = new ChaptersSVSS2Model();

		this.isLoading = true;

		this.chapterMeetings = [];

		this.model.save({
			action: "GET_CHAPTER_MEETINGS",
			chapterId: options.chapterId,
			pagination: {
				index: 0,
				pageSize: 1000
			}
		}).then(function(res) {
			console.log('res', res);

			if(!res.hasError && res.chapterMeetings) {
				self.chapterMeetings = res.chapterMeetings
			}

			self.isLoading = false;
			self.render();
		});
    }

    ChaptersSVView.prototype = Object.create(SCView.prototype);
    ChaptersSVView.prototype.constructor = ChaptersSVView;

    ChaptersSVView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            chapterMeetings: this.chapterMeetings,

			defaultProfileImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
				clock: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-clock.png')),
				recurring: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-recurring.png')),
				nonRecurring: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-notrecurring.png'))
			}
        }
    }

    return ChaptersSVView;
});

define('Saralux.Core.ChaptersSV.Chapter.Members.View', [
	'saralux_core_chapterssv_chapter_members.tpl',

	'Saralux.Core.ChaptersSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_chapterssv_chapter_members_tpl,

	ChaptersSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ChaptersSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_chapterssv_chapter_members_tpl;
		
		this.model = new ChaptersSVSS2Model();

		this.isLoading = true;

		this.chapterMembers = [];

		this.model.save({
			action: "GET_CHAPTER_MEMBERS",
			chapterId: options.chapterId,
			pagination: {
				index: 0,
				pageSize: 1000
			}
		}).then(function(res) {
			console.log('res', res);

			if(!res.hasError && res.chapterMembers) {
				self.chapterMembers = res.chapterMembers
			}

			self.isLoading = false;
			self.render();
		});
    }

    ChaptersSVView.prototype = Object.create(SCView.prototype);
    ChaptersSVView.prototype.constructor = ChaptersSVView;

    ChaptersSVView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            chapterMembers: this.chapterMembers,

			defaultProfileImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
				message: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-message.png'))
			}
        }
    }

    return ChaptersSVView;
});

define('Saralux.Core.ChaptersSV.Chapter.Messages.View', [
	'saralux_core_chapterssv_chapter_messages.tpl',

	'Saralux.Core.ChaptersSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_chapterssv_chapter_messages_tpl,

	ChaptersSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ChaptersSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_chapterssv_chapter_messages_tpl;
		
		this.model = new ChaptersSVSS2Model();

		this.isLoading = true;

		this.chapterMessages = [];

		/* this.model.save({
			action: "GET_CHAPTER_DISCUSSION",
			chapterId: options.chapterId
		}).then(function(res) {
			console.log('res', res);

			if(!res.hasError && res.chapterMessages) {
				self.chapterMessages = res.chapterMessages
			}

			self.isLoading = false;
			self.render();
		}); */
    }

    ChaptersSVView.prototype = Object.create(SCView.prototype);
    ChaptersSVView.prototype.constructor = ChaptersSVView;

    ChaptersSVView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            chapterMessages: this.chapterMessages,

			defaultProfileImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png'))
			}
        }
    }

    return ChaptersSVView;
});

define('Saralux.Core.ChaptersSV.Chapter.View', [
	'saralux_core_chapterssv_chapter.tpl',

	'Saralux.Core.ChaptersSV.Chapter.Accouncements.View',
	'Saralux.Core.ChaptersSV.Chapter.Discussion.View',
	'Saralux.Core.ChaptersSV.Chapter.Members.View',
	'Saralux.Core.ChaptersSV.Chapter.Events.View',
	'Saralux.Core.ChaptersSV.Chapter.Meetings.View',
	'Saralux.Core.ChaptersSV.Chapter.Messages.View',

	'Saralux.Core.ChaptersSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_chapterssv_chapter_tpl,

	CSVCAccouncementsView,
	CSVCDiscussionView,
	CSVCMembersView,
	CSVCEventsView,
	CSVCMeetingsView,
	CSVCMessagesView,

	ChaptersSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

	var SCView = SCViewModule.SCView;
	
	function ChaptersSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.template = saralux_core_chapterssv_chapter_tpl;
		
		this.model = new ChaptersSVSS2Model();

		this.isLoading = true;

		this.chapterDetails = null;
		this.chapterId = null;

		this.model.save({
			action: "GET_CHAPTER_DETAILS"
		}).then(function(res) {
			console.log('res', res);

			if(!res.hasError && res.chapterDetails) {
				self.chapterDetails = res.chapterDetails;
				self.chapterId = res.chapterDetails.id;

				self.childViews = {
					'Chapter.Announcements': function () {
						return new CSVCAccouncementsView({
							chapterId: self.chapterId,
							container: self.container
						});
					},
					'Chapter.Discussion': function () {
						return new CSVCDiscussionView({
							chapterId: self.chapterId,
							container: self.container
						});
					},
					'Chapter.Members': function () {
						return new CSVCMembersView({
							chapterId: self.chapterId,
							container: self.container
						});
					},
					'Chapter.Events': function () {
						return new CSVCEventsView({
							chapterId: self.chapterId,
							container: self.container
						});
					},
					'Chapter.Meetings': function () {
						return new CSVCMeetingsView({
							chapterId: self.chapterId,
							container: self.container
						});
					}, 
					'Chapter.Messages': function () {
						return new CSVCMessagesView({
							chapterId: self.chapterId,
							container: self.container
						});
					}
				}
			}

			self.isLoading = false;
			self.render();
		});
	}

	ChaptersSVView.prototype = Object.create(SCView.prototype);
	ChaptersSVView.prototype.constructor = ChaptersSVView;
	
	ChaptersSVView.prototype.getEvents = function () {
		return {
			"click [data-action='tab-click']": "tabClick",
			"click [data-action='to-direct-tab']": "toClickedTab",
		}
	}

	ChaptersSVView.prototype.toClickedTab = function (e) {
		if (this.$(e.currentTarget).hasClass('to-members-tab')) {	
			this.$(".members-tab").click();
		}
		else if (this.$(e.currentTarget).hasClass('to-meetings-tab')) {
			this.$(".meetings-tab").click();			
		}
		else if (this.$(e.currentTarget).hasClass('to-events-tab')) {
			this.$(".events-tab").click();
		}

    document.getElementById('chapterssv-chapter-tab-header').scrollIntoView({
      behavior: "smooth"
    });
	}

	ChaptersSVView.prototype.tabClick = function (e) {
		this.$(".tab-header .tabs").removeClass("active");
    this.$(".tab-header .tabs div").remove();
    this.$(e.currentTarget).append("<div></div>");
    this.$(e.currentTarget).addClass("active");
    this.$(".tab-body").hide();

    var tabName = this.$(e.currentTarget).attr("tab-name");
    this.$("."+tabName).show();
	}

	ChaptersSVView.prototype.getContext = function () {
		return {
				isLoading: this.isLoading,
				chapterDetails: this.chapterDetails,
			
			defaultProfileImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),
			
			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
				icnMobile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-mobile.png')),
				icnEmailAddress: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-emai-address.png')),
				icnMessage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-message.png')),
				profileEmpty: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/profile-empty.png')),
				profileMembersEmpty: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/profile-members-empty.png')),
				imgMeetingsStat: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-meetings-stat.png')),
				imgEventstat: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-eventsstat.png')),
				icnAnnouncementsActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-announcements-active.png')),
				icnAnnouncementsInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-announcements-inactive.png')),
				icnDiscussionActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-discussion-active.png')),
				icnDiscussionInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-discussion-inactive.png')),
				icnMembersActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-members-active.png')),
				icnMembersInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-members-inactive.png')),
				icnEventsActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-events-active.png')),
				icnEventsInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-events-inactive.png')),
				icnMeetingsActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-meetings-active.png')),
				icnMeetingsInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-meetings-inactive.png')),
				icnMessageActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-messages-active.png')),
				icnMessageInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-messages-inactive.png'))
			}
		}
	}

	return ChaptersSVView;
});

define('Saralux.Core.ChaptersSV.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function ChaptersSVSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/ChaptersSV/SuiteScript2/ChaptersSV.Service.ss"
                ), true
            );
        }
    }

    ChaptersSVSS2Model.prototype = Object.create(SCModel.prototype);
    ChaptersSVSS2Model.prototype.constructor = ChaptersSVSS2Model;
 
    return ChaptersSVSS2Model;
});

/* define("Saralux.Core.ChaptersSV.SS2Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelModule,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/ChaptersSV/SuiteScript2/ChaptersSV.Service.ss"
            ),
            true
        )
	});
}); */

define('Saralux.Core.ChaptersSV',   [
	'Saralux.Core.ChaptersSV.Chapter.View'
],   function (
	ChaptersSVChapterView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout'); // Extensibility API Component (in this case 'Layout')

				if(layout) {
					layout.registerView('SLXC0010', function() {
						return new ChaptersSVChapterView({ container: container });
					});

					// registerView will get a view-id in the 1st param
					// and it will get a view instance in the 2nd param via an anon func
					// whenever we specify this view-id in our templates, it will show this view
					// ex: <div data-view='SLXC0010'></div>
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.ChaptersSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.Checkout.Context.Model', [
	'CoreFunctionality.Singleton',

	'Backbone',
  	'underscore'
],	function(
	Singleton,
	
	Backbone,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		areEventsSubscribed: function areEventsSubscribed() {
			if(this.get('eventsSubscribed')) {
				return this.get('eventsSubscribed');
			} else {
				return false;
			}
		}
	}, Singleton);
});

define('Saralux.Core.Checkout.Module.BillingAddress.View',	[
	'saralux_core_checkout_mdl_billingaddress.tpl',

    'Saralux.Core.Forms.Address.View',

	'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.Utilities.Model',
    'Saralux.Core.CommonLibraries.CAPI.Model',

    'Saralux.Core.Checkout.Context.Model',
    'Saralux.Core.Checkout.SS2Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_billingaddress_tpl,

    FormsAddressView,

	CoreCLGeneral,
    CoreCLUtilitiesModel,
    CoreCLCAPIModel,

    CheckoutContextModel,
    CheckoutSS2Model,

	Utils,
	jQuery,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function CheckoutMdlBillingAddressView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_checkout_mdl_billingaddress_tpl;

        this.parent = options.parent;
        this.container = options.container;
        
        this.shippingRequired = options.shippingRequired;
        this.customerInfo = options.customerInfo;

        this.countries = options.countries;
        this.allStates = options.states;
        this.states = [];

		this.cart_component = this.container.getComponent('Cart');
		this.user_profile = this.container.getComponent('UserProfile');

        this.coreCLUtils = CoreCLUtilitiesModel.getInstance();

        this.checkoutContextModel = CheckoutContextModel.getInstance();
        this.checkoutSS2Model = new CheckoutSS2Model();
        this.coreCLCAPIModel = new CoreCLCAPIModel();

        this.userAddresses = [];
        this.targetAddressId = null;

        this.checkoutContextModel.on('change:shippingAddress', function() {
            // console.log('CheckoutMdlBillingAddressView: checkoutContextModel changed | shippingAddress', self.checkoutContextModel.get('shippingAddress'));

            var isSameAsShippingAddress = self.$("#mdl-ba-same-as-shipping-address").prop('checked');
            // console.log('isSameAsShippingAddress', isSameAsShippingAddress);

            if(isSameAsShippingAddress) {
                var shippingAddress = self.checkoutContextModel.get('shippingAddress');

                if(shippingAddress && shippingAddress.isExisting) {
                    var index = self.presetBillingAddress(shippingAddress);
    
                    // console.log('index', index);
        
                    self.isLoading = false;
                    self.render();
    
                    self.$("#radio-button-select-addr-"+index).click();
                }
            }
        });

        this.isLoading = true;

        this.checkoutSS2Model.clear({ silent: true });
        this.checkoutSS2Model.save({
            action: "get_addresses"
        }).then(function(res) {
            // console.log('res', res);
            if(!res.hasError) {
                if(res.addresses) {
                    self.userAddresses = res.addresses;
                } else {
                    self.userAddresses = [];
                }

                var preselectIndex = -1;
                for(var i = 0; i < self.userAddresses.length; i++) {
                    if(self.userAddresses[i].defaultbilling) {
                        // self.checkoutContextModel.set('billingAddress', self.userAddresses[i]);
                        preselectIndex = i;
                        break;
                    }
                }

                self.childViews = {
                    'Saralux.Forms.Address': function() {
                        return new FormsAddressView({
                            container: options.container,
                            countries: self.countries,
                            allStates: self.allStates,
                            states: self.states,
                            customerInfo: self.customerInfo,
                            calculateShippingEstimate: false,
                            firstAddress: (self.userAddresses && (self.userAddresses.length > 0))?false:true
                        });
                    }
                }
    
                self.isLoading = false;
                self.render();
                
                if(self.userAddresses.length == 0) {
                    self.setCountryAndStateDropdowns(null, "#first-address");
                }
                if(preselectIndex > -1) {
                    self.$("#radio-button-select-addr-"+preselectIndex).click();
                }

                self.checkoutContextModel.on("change:userAddresses", function() {
                    // console.log('CheckoutMdlBillingAddressView CHANGE TRIGGERED | checkoutContextModel:userAddresses');

                    var origin = self.checkoutContextModel.get('userAddressesChangeOrigin');
                    // console.log('CheckoutMdlBillingAddressView | origin', self.checkoutContextModel.get('userAddressesChangeOrigin'));
                    if(origin == "shipping-address") {
                        // console.log('CheckoutMdlBillingAddressView | Updating userAddresses', self.checkoutContextModel.get('userAddresses'));

                        var userAddresses = self.checkoutContextModel.get('userAddresses');
                        self.userAddresses = Utils.deepCopy(userAddresses);
    
                        self.render();
                    }
                });
            } else {
                self.isLoading = false;
                self.render();
            }
        });
    }

    CheckoutMdlBillingAddressView.prototype = Object.create(SCView.prototype);
    CheckoutMdlBillingAddressView.prototype.constructor = CheckoutMdlBillingAddressView;

    CheckoutMdlBillingAddressView.prototype.getEvents = function () {
        return {
            'click [data-action="m360-slxc-cmdl-ba-select-address"]': 'selectAddress',
            'click [data-action="m360-slxc-cmdl-ba-init-add-address"]': 'initAddAddress',
            'click [data-action="m360-slxc-cmdl-ba-add-address"]': 'addAddress',
            'click [data-action="m360-slxc-cmdl-ba-init-edit-address"]': 'initEditAddress',
            'click [data-action="m360-slxc-cmdl-ba-edit-address"]': 'editAddress',
            'click [data-action="m360-slxc-cmdl-ba-remove-address"]': 'removeAddress',
            'change input[id="mdl-ba-same-as-shipping-address"]': 'sameAsShippingAddress'
        }
    }

    CheckoutMdlBillingAddressView.prototype.presetBillingAddress = function(shippingAddress) {
        var index = -1;

        for(var i = 0; i < this.userAddresses.length; i++) {
            if(parseInt(this.userAddresses[i].internalid) == parseInt(shippingAddress.internalid)) {
                index = i;
                break;
            }
        }

        if(index == -1) {
            this.userAddresses.push(shippingAddress);
            index = (this.userAddresses.length - 1);
        }

        return index;
    }

    CheckoutMdlBillingAddressView.prototype.selectAddress = function(e) {
        var self = this;

        this.$(".address-box .radio-button span").text(Utils.translate('Select'));
        this.$("#"+e.currentTarget.id).find("span").text(Utils.translate('Selected'));
        this.$(".address-box").removeClass('selected-addr');
        this.$("#"+e.currentTarget.id).parent(".address-box").addClass('selected-addr');
        this.$(".address-box .checkout-form-default-address").prop("checked", false);
        this.$("#"+e.currentTarget.id).find(".checkout-form-default-address").prop("checked", true);
        this.$("#"+e.currentTarget.id).parents(".step-view").find(".collapsable-box").addClass("completed");

        var index = this.$("#"+e.currentTarget.id).attr('data-index');
        var selectedAddress = Utils.deepCopy(this.userAddresses[index]);
        // console.log('billingAddress selectedAddress', selectedAddress);

        // this.checkoutContextModel.set('billingAddress', selectedAddress);

        var addressData = {
            internalid: selectedAddress.internalid,
            defaultbilling: true
        };

        this.checkoutSS2Model.clear({ silent: true });
        this.checkoutSS2Model.save({
            action: "mark_address_as_default",
            addressData: addressData
        }).then(function(res) {
            // console.log('mark_address_as_default res', res);
            if(!res.hasError) {
                self.userAddresses = res.addresses;

                self.checkoutContextModel.set('userAddressesChangeOrigin', "billing-address");
                self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));

                self.checkoutContextModel.set('billingAddress', selectedAddress);
    
                self.isLoading = false;
                self.render();
                
                if(self.userAddresses.length == 0) {
                    self.setCountryAndStateDropdowns(null, "#first-address");
                }
            }
        });
    }

    CheckoutMdlBillingAddressView.prototype.initAddAddress = function(e) {
        this.$("#address-form-subview").find(".global-error-msg").hide();
        
        this.$("#new-address #forms-address-full-name").val("");
        this.$("#new-address #forms-address-company").val("");
        this.$("#new-address #forms-address-phone").val("");
        this.$("#new-address #forms-address-address-1").val("");
        this.$("#new-address #forms-address-address-2").val("");
        this.$("#new-address #forms-address-city").val("");
        this.$("#new-address #forms-address-zip").val("");
        this.$("#new-address #forms-address-is-residential-address").prop("checked", false);

        this.setCountryAndStateDropdowns(null, "#new-address");

        this.$("#new-address #new-address-save").attr('data-action', 'm360-slxc-cmdl-ba-add-address');

        this.$("#new-address").modal('show');
    }

    CheckoutMdlBillingAddressView.prototype.addAddress = function(e) {
        var self = this;

        this.$("#forms-address-full-name").trigger("focusout");
        this.$("#forms-address-phone").trigger("focusout");
        this.$("#forms-address-address-1").trigger("focusout");
        this.$("#forms-address-city").trigger("focusout");
        this.$("#forms-address-zip").trigger("focusout");

        // this.$('#forms-address-country').trigger("change");
        // this.$('#forms-address-state').trigger("change");

        if(this.$("#forms-address-state").val() == "select" || this.$("#forms-address-state").val() == null) {
			this.$("#forms-address-state").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-state").siblings("p").removeClass("err");
		}
        if(this.$("#forms-address-countrye").val() == "select" || this.$("#forms-address-countrye").val() == null) {
			this.$("#forms-address-countrye").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-countrye").siblings("p").removeClass("err");
		}

        if(this.$("#address-form-subview").find('.err').length != 0){
			this.$("#address-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#address-form-subview").find(".global-error-msg").hide();

            var parentId = "#first-address";
            var dataMode = this.$("#"+e.currentTarget.id).attr("data-mode");
            if(dataMode == 'add-first') {
                parentId = "#first-address";
            } else {
                parentId = "#new-address";
            }

            var addressData = {
                fullname: this.$(parentId+" #forms-address-full-name").val(),
                company: this.$(parentId+" #forms-address-company").val(),
                phone: this.$(parentId+" #forms-address-phone").val(),
                addr1: this.$(parentId+" #forms-address-address-1").val(),
                addr2: this.$(parentId+" #forms-address-address-2").val(),
                city: this.$(parentId+" #forms-address-city").val(),
                zip: this.$(parentId+" #forms-address-zip").val(),
                state: this.$(parentId+" #forms-address-state").val(),
                country: this.$(parentId+" #forms-address-country").val(),
                countryText: this.$(parentId+" #forms-address-country option:checked").text(),
                isresidential: this.$(parentId+" #forms-address-is-residential-address").prop("checked"),
                defaultshipping: false,
                defaultbilling: true
            }

            // console.log('addressData', addressData);

            // console.log('dataMode*', dataMode);
            if(dataMode == "add-more") {
                jQuery("#new-address").modal('hide');
                jQuery('.modal-backdrop').remove();
                jQuery(document.body).removeClass("modal-open");
            }
            this.isLoading = true;
            this.render();

            this.checkoutSS2Model.clear({ silent: true });
            this.checkoutSS2Model.save({
                action: "add_address",
                addressData: addressData
            }).then(function(res) {
                // console.log('res', res);
                if(!res.hasError) {
                    addressData.lineId = res.lineNumber;
                    addressData.internalid = res.internalId;

                    self.userAddresses = res.addresses;

                    self.checkoutContextModel.set('userAddressesChangeOrigin', "billing-address");
                    self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));

                    self.checkoutContextModel.set('billingAddress', addressData);
        
                    self.isLoading = false;
                    self.render();
                    
                    if(self.userAddresses.length == 0) {
                        self.setCountryAndStateDropdowns(null, "#first-address");
                    }
                }
            });
        }
    }

    CheckoutMdlBillingAddressView.prototype.initEditAddress = function(e) {
        var index = this.$("#"+e.currentTarget.id).attr('data-index');
        var targetAddress = this.userAddresses[index];
        this.targetAddressId = targetAddress.internalid;
        // console.log('targetAddressId', this.targetAddressId);
        // console.log('targetAddress', targetAddress);

        this.$("#address-form-subview").find(".global-error-msg").hide();

        this.$("#new-address #forms-address-full-name").val(targetAddress.fullname);
        this.$("#new-address #forms-address-company").val(targetAddress.company);
        this.$("#new-address #forms-address-phone").val(targetAddress.phone);
        this.$("#new-address #forms-address-address-1").val(targetAddress.addr1);
        this.$("#new-address #forms-address-address-2").val(targetAddress.addr2);
        this.$("#new-address #forms-address-city").val(targetAddress.city);
        this.$("#new-address #forms-address-zip").val(targetAddress.zip);

        if(targetAddress.isresidential) {
            this.$("#new-address #forms-address-is-residential-address").prop("checked", true);
        } else {
            this.$("#new-address #forms-address-is-residential-address").prop("checked", false);
        }
        
        this.$("#new-address #new-address-save").attr('data-action', 'm360-slxc-cmdl-ba-edit-address');

        this.setCountryAndStateDropdowns(targetAddress, "#new-address");

        this.$("#new-address").modal('show');
    }

    CheckoutMdlBillingAddressView.prototype.editAddress = function(e) {
        var self = this;

        // console.log('this.targetAddressId', this.targetAddressId);

        if(!this.targetAddressId) {
            return;
        }

        this.$("#forms-address-full-name").trigger("focusout");
        this.$("#forms-address-phone").trigger("focusout");
        this.$("#forms-address-address-1").trigger("focusout");
        this.$("#forms-address-city").trigger("focusout");
        this.$("#forms-address-zip").trigger("focusout");
        
        // console.log('before trigger');
        // this.$('#forms-address-country').trigger("change");
        // this.$('#forms-address-state').trigger("change");

        if(this.$("#forms-address-state").val() == "select" || this.$("#forms-address-state").val() == null) {
			this.$("#forms-address-state").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-state").siblings("p").removeClass("err");
		}
        if(this.$("#forms-address-countrye").val() == "select" || this.$("#forms-address-countrye").val() == null) {
			this.$("#forms-address-countrye").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-countrye").siblings("p").removeClass("err");
		}

        // console.log('after trigger');

        if(this.$("#address-form-subview").find('.err').length != 0){
			this.$("#address-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#address-form-subview").find(".global-error-msg").hide();

            var addressData = {
                internalid: this.targetAddressId,
                fullname: this.$("#new-address #forms-address-full-name").val(),
                company: this.$("#new-address #forms-address-company").val(),
                phone: this.$("#new-address #forms-address-phone").val(),
                addr1: this.$("#new-address #forms-address-address-1").val(),
                addr2: this.$("#new-address #forms-address-address-2").val(),
                city: this.$("#new-address #forms-address-city").val(),
                zip: this.$("#new-address #forms-address-zip").val(),
                state: this.$("#new-address #forms-address-state").val(),
                country: this.$("#new-address #forms-address-country").val(),
                countryText: this.$("#new-address #forms-address-country option:checked").text(),
                isresidential: this.$("#new-address #forms-address-is-residential-address").prop("checked")
                // defaultshipping: false,
                // defaultbilling: true
            }

            // console.log('addressData', addressData);

            jQuery("#new-address").modal('hide');
            jQuery('.modal-backdrop').remove();
            jQuery(document.body).removeClass("modal-open");
            this.isLoading = true;
            this.render();

            this.checkoutSS2Model.clear({ silent: true });
            this.checkoutSS2Model.save({
                action: "edit_address",
                addressData: addressData
            }).then(function(res) {
                // console.log('res', res);
                if(!res.hasError) {
                    addressData.lineId = res.lineNumber;
                    // addressData.internalid = res.internalId;

                    self.userAddresses = res.addresses;

                    self.checkoutContextModel.set('userAddressesChangeOrigin', "billing-address");
                    self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));
                    
                    self.checkoutContextModel.set('billingAddress', addressData);
        
                    self.isLoading = false;
                    self.render();
                    
                    if(self.userAddresses.length == 0) {
                        self.setCountryAndStateDropdowns(null, "#first-address");
                    }
                }
            });
        }
    }

    CheckoutMdlBillingAddressView.prototype.sameAsShippingAddress = function(e) {
        var isChecked = this.$("#"+e.currentTarget.id).prop('checked');
        // console.log('isChecked', isChecked);

        if(isChecked) {
            this.$("#checkout-mdl-billing-address .saved-addresses").hide();
            this.$("#checkout-mdl-billing-address .info-form").hide();
            var shippingAddress = Utils.deepCopy(this.checkoutContextModel.get('shippingAddress'));
            if(shippingAddress) {
                shippingAddress.defaultbilling = true;
                this.checkoutContextModel.set('billingAddress', shippingAddress);
            }
        } else {
            if(this.userAddresses.length > 0) {
                this.$("#checkout-mdl-billing-address .saved-addresses").show();
                this.$("#checkout-mdl-billing-address .info-form").hide();
                
                var preselectIndex = -1;
                for(var i = 0; i < this.userAddresses.length; i++) {
                    if(this.userAddresses[i].defaultbilling) {
                        preselectIndex = i;
                        break;
                    }
                }

                if(preselectIndex > -1) {
                    this.$("#radio-button-select-addr-"+preselectIndex).click();
                }
            } else {
                this.$("#checkout-mdl-billing-address .saved-addresses").hide();
                this.$("#checkout-mdl-billing-address .info-form").show();
                this.checkoutContextModel.set('billingAddress', null);
            }
        }
    }

    CheckoutMdlBillingAddressView.prototype.removeAddress = function(e) {
        var self = this;

        var index = this.$("#"+e.currentTarget.id).attr('data-index');
        var targetAddress = this.userAddresses[index];
        // console.log('removeAddress targetAddress', targetAddress);

        if(!targetAddress.internalid) {
            return;
        }

        if(this.$("#address-form-subview").find('.err').length != 0) {
			this.$("#address-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#address-form-subview").find(".global-error-msg").hide();

            this.isLoading = true;
            this.render();

            var addressData = {
                internalid: targetAddress.internalid
            };

            this.checkoutSS2Model.clear({ silent: true });
            this.checkoutSS2Model.save({
                action: "remove_address",
                addressData: addressData
            }).then(function(res) {
                // console.log('remove_address res', res);
                if(!res.hasError) {
                    self.userAddresses = res.addresses;

                    self.checkoutContextModel.set('userAddressesChangeOrigin', "billing-address");
                    self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));
        
                    self.isLoading = false;
                    self.render();
                    
                    if(self.userAddresses.length == 0) {
                        self.setCountryAndStateDropdowns(null, "#first-address");
                    }
                }
            });
        }
    }

    CheckoutMdlBillingAddressView.prototype.setCountryAndStateDropdowns = function(thisAddress, parentId) {
        // console.log('thisAddress', thisAddress);
        // console.log('parentId', parentId);

        if(thisAddress) {
            // Generate countries select list
            var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
            for(var i = 0; i < this.countries.length; i++) {
                countriesHtml = countriesHtml + "<option value='" + this.countries[i].code +"'";
                if(this.countries[i].code == thisAddress.country) {
                    this.countries[i].selected = true;
                    countriesHtml = countriesHtml +" selected";
                } else {
                    this.countries[i].selected = false;
                }
                countriesHtml = countriesHtml +">" + this.countries[i].name + "</option>";
            }
            this.$(parentId+" #forms-address-country").html(countriesHtml);

            // Generate states select list
            for(var i = 0; i < this.allStates.length; i++) {
                // // console.log("thisAddress.country: " + thisAddress.country);
                
                if(this.allStates[i].countrycode == thisAddress.country) {
                    this.states = this.allStates[i].states;
                    
                    if(this.states.length > 0) {
                        // var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
                        var statesHtml = "";
                        for(var j = 0; j < this.states.length; j++) {
                            statesHtml = statesHtml + "<option value='" + this.states[j].code +"'";
                            if(this.states[j].code == thisAddress.state) {
                                this.states[j].selected = true;
                                statesHtml = statesHtml +" selected";
                            } else {
                                this.states[j].selected = false;
                            }
                            statesHtml = statesHtml +">" + this.states[j].name + "</option>";
                        }
                        this.$(parentId+" #forms-address-state").parent().html(
                            "<select name='forms-address-state' id='forms-address-state' class='form-control' required style='padding: 7px;'></select>" +
                            "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
                        );
                        this.$(parentId+" #forms-address-state").html(statesHtml);
                    } else {
                        this.$(parentId+" #forms-address-state").parent().html(
                            "<input type='text' placeholder='"+Utils.translate('Enter State name')+"' name='forms-address-state' id='forms-address-state' class='form-control' required />" +
                            "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
                        );
                    }

                    break;
                }
            }
        } else {
            var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
            for(var i = 0; i < this.countries.length; i++) {
                this.countries[i].selected = false;
                countriesHtml = countriesHtml + "<option value='" + this.countries[i].code + "'>" + this.countries[i].name + "</option>";
            }
            this.$(parentId+" #forms-address-country").html(countriesHtml);

            this.$(parentId+" #forms-address-state").parent().html(
                "<select name='forms-address-state' id='forms-address-state' class='form-control' required data-test='1' style='padding: 7px;'></select>" +
                "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
            );
            var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
            this.$(parentId+" #forms-address-state").html(statesHtml);
        }

        // console.log('countries', this.countries);
        // console.log('states', this.states);
    }

    CheckoutMdlBillingAddressView.prototype.getContext = function () {
			return {
				isLoading: this.isLoading,
				shippingRequired: this.shippingRequired,
				userAddresses: this.userAddresses,
				icons: {
					edit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-edit-black-sm.png')),
					remove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-close-blk-sm.png')),
					icnSecure: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-secure.png'))
				}
			}
    }

    return CheckoutMdlBillingAddressView;
});

define('Saralux.Core.Checkout.Module.Cart.View',	[
	'saralux_core_checkout_mdl_cart.tpl',

	'Saralux.Core.Cart.Lines.Content.View',

	'Saralux.Core.CommonLibraries.General',

	'Saralux.Core.Cart.Context.Model',
	'Saralux.Core.Cart.SS2Model',

	'Saralux.Core.Checkout.Context.Model',
	
	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_cart_tpl,

	CartLinesContentView,

	CoreCLGeneral,

	CartContextModel,
	CoreCFSS2Model,

	CheckoutContextModel,
	
	Utils,
	jQuery,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function CheckoutMdlCartView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;

		this.template = saralux_core_checkout_mdl_cart_tpl;

		// console.log('CheckoutMdlCartView options', options);

		this.container = options.container;
		this.parent = options.parent;
		this.shippingRequired = options.shippingRequired;

		this.cart_component = this.container.getComponent('Cart');
		this.environment_component = this.container.getComponent('Environment');

		this.enableCartPOC = this.environment_component.getConfig("enableCartPOC");
		// this.enableCartPOC = true; // HARDCODING FOR DEV

		this.visitorId = CoreCLGeneral.getCookie('NLVisitorId');

		this.cartContextModel = CartContextModel.getInstance();
		this.CFCartModel = new CoreCFSS2Model();

		this.checkoutContextModel = CheckoutContextModel.getInstance();

		this.isLoading = false;

		// this.cartData = Utils.deepCopy(options.cartData);
		this.cartData = Utils.deepCopy(self.cartContextModel.get('cartData'));
		this.formatCartLines(this.cartData.lines);
		this.cartData.summary = this.cartData.summary;
		this.checkoutData = Utils.deepCopy(this.cartData.summary);
		this.checkoutContextModel.set('checkoutData', this.checkoutData);
		this.checkoutContextModel.set('recalculateSummary', false);

		this.checkoutContextModel.on("change:recalculateSummary", function() {
			// console.log('CHANGE EVENT TRIGGERED | checkoutContextModel - recalculateSummary');
			var recalculateSummary = self.checkoutContextModel.get('recalculateSummary');

			if(recalculateSummary) {
				self.checkoutContextModel.set('recalculateSummary', false);

				var giftCertificateTotal = self.checkoutData.giftCertificateTotal;
				var giftCertificates = self.checkoutData.giftCertificates;
				var promotions = self.checkoutData.promotions;
				var shippingCost = self.checkoutData.shippingCost;
				var handlingCost = self.checkoutData.handlingCost;

				// console.log('checkoutData-pre', self.checkoutData);
				self.checkoutData = Utils.deepCopy(self.checkoutContextModel.get('checkoutData'));
				// console.log('checkoutData-post', self.checkoutData);

				self.checkoutData.giftCertificateTotal = giftCertificateTotal;
				self.checkoutData.giftCertificates = giftCertificates;
				self.checkoutData.promotions = promotions;
				self.checkoutData.shippingCost = shippingCost;
				self.checkoutData.handlingCost = handlingCost;

				self.recalculateSummary();
				self.render();
			}
		});

		this.checkoutContextModel.on("change:shippingMethod", function() {
			// console.log('MODEL CHANGED (shippingMethod) | Checkout.Module.Cart', self.checkoutContextModel.get('shippingMethod'));
			self.setShippingData(true);
		});
		
		this.checkoutContextModel.on("change:paymentMethodGC", function() {
			// console.log('MODEL CHANGED (paymentMethodGC) | Checkout.Module.Cart', self.checkoutContextModel.get('paymentMethodGC'));
			self.setGiftCertificateData(true);
		});

		this.childViews = {
            'Cart.Lines.Content': function() {
                return new CartLinesContentView({
                    cartData: this.cartData,
					separateShippingLines: true
                });
            }
        }

		// Use this event handler to update the checkout summary and lines info on demand
		this.cartContextModel.on("change:cartData", function() {
			// console.log('MODEL CHANGED | Content', self.cartContextModel.get('cartData'));
			
			var cartData = self.cartContextModel.get('cartData');

			var updatePage = false;

			if(cartData && cartData.summary) {
				var summary = Utils.deepCopy(cartData.summary);
				
				self.checkoutData.promotions = summary.promotions;
				self.checkoutData.discountTotal = summary.discountTotal;
				self.checkoutData.subtotal = summary.subtotal;
	
				self.recalculateSummary();
				
				updatePage = true;
			}

			if(cartData && cartData.lines) {
				self.cartData.lines = Utils.deepCopy(cartData.lines);
				self.formatCartLines(self.cartData.lines);

				updatePage = true;
			}

			if(updatePage) {
				self.render();
			}
		});
	}

	CheckoutMdlCartView.prototype = Object.create(SCView.prototype);
	CheckoutMdlCartView.prototype.constructor = CheckoutMdlCartView;

	CheckoutMdlCartView.prototype.getEvents = function() {
		return {
			'click [data-action="m360-slxc-remove-gift-certificate"]': 'removeGiftCertificate',
			'click [data-action="m360-slxc-remove-promo-code"]': 'removePromoCode'
		}
	}

	CheckoutMdlCartView.prototype.setShippingData = function(recalc) {
		var shippingMethod = this.checkoutContextModel.get('shippingMethod');

		if(this.checkoutData && shippingMethod) {
			this.checkoutData.shippingCost = shippingMethod.rate || 0.00;

			if(recalc) {
				this.recalculateSummary();
				this.render();
			}
		}
	}
	CheckoutMdlCartView.prototype.setGiftCertificateData = function(recalc) {
		var paymentMethodGC = this.checkoutContextModel.get('paymentMethodGC');

		if(this.checkoutData && paymentMethodGC) {
			var giftCertificateTotal = 0.00;
			var giftCertificates = [];
			for(var i = 0; i < paymentMethodGC.length; i++) {
				giftCertificateTotal += paymentMethodGC[i].amountApplied;
				giftCertificates.push(paymentMethodGC[i]);
			}

			this.checkoutData.giftCertificateTotal = giftCertificateTotal;
			this.checkoutData.giftCertificates = giftCertificates;

			if(recalc) {
				this.recalculateSummary();
				this.render();
			}
		}
	}

	CheckoutMdlCartView.prototype.formatCartLines = function (lines) {
		var shippable = [], nonShippable = [];

		for(var i = 0; lines && i < lines.length; i++) {
			var thisLine = lines[i];

			// TODO: remove this condition once development is completed
			if(this.enableCartPOC) {
				if(thisLine.isFulfillable) {
					shippable.push(thisLine);
				} else {
					nonShippable.push(thisLine);
				}
			} else {
				if(thisLine.isFulfillable !== undefined) {
					if(thisLine.isFulfillable) {
						shippable.push(thisLine);
					} else {
						nonShippable.push(thisLine);
					}
				} else {
					shippable.push(thisLine);
				}
			}

		}

		this.cartData.lines.shippable = shippable;
		this.cartData.lines.nonShippable = nonShippable;
	}

	CheckoutMdlCartView.prototype.recalculateSummary = function () {
		if(this.checkoutData) {
			this.checkoutData.total = this.checkoutData.subtotal + this.checkoutData.shippingCost + this.checkoutData.taxTotal + this.checkoutData.handlingCost;
			
			if(this.checkoutData.discountTotal) {
				this.checkoutData.total -= this.checkoutData.discountTotal;
			}
	
			if(this.checkoutData.giftCertificateTotal) {
				this.checkoutData.total -= this.checkoutData.giftCertificateTotal;
			}
			
			this.checkoutContextModel.set('checkoutData', this.checkoutData);
			// console.log('this.checkoutData', this.checkoutData);
		}
	}

	CheckoutMdlCartView.prototype.removeGiftCertificate = function(e) {
		var index = this.$(e.currentTarget).attr('data-index');
		// console.log('index', index);

		this.parent.$("#remove-gift-certificate-"+index).click();
	}

	CheckoutMdlCartView.prototype.removePromoCode = function(e) {
		var self = this;

		var index = this.$(e.currentTarget).attr('data-index');
		var activePromoCodeId = this.cartData.summary.promotions[index].internalid;

		if(activePromoCodeId) {
			this.cart_component.removePromotion({ promocode_internalid: activePromoCodeId }).then(function(promotion) {
				// console.log("res", promotion);
				// location.reload();
				// jQuery('.remove-code').siblings("p").removeClass("err");
				/* jQuery("#m360-cart-active-promocode").attr('data-promo-id', '');
				jQuery("#m360-cart-active-promocode").text();
				jQuery(".promocode-applied-box").hide();
				jQuery(".show-promocode-input").show(); */
			}, function(promotion) {
				console.log('error', promotion);
				// self.parent.render();
				// jQuery('.remove-code').siblings("p").addClass("err");
				// var errorMessage = promotion.responseJSON.errorMessage;
				// jQuery("#m360-promocode-remove-error").text(errorMessage);
			});
		}
	}

	CheckoutMdlCartView.prototype.getContext = function () {
		var emptyCartLines = {
			shippable: [],
			nonShippable: []
		};
		
		var cartLines = (this.cartData && this.cartData.lines)?this.cartData.lines:emptyCartLines;
		var cartSummary = (this.cartData && this.cartData.summary)?this.cartData.summary:null;
		var lineCount = (this.cartData && this.cartData.lines)?this.cartData.lines.length:0;

		var itemCount = 0;
		for(var i = 0; cartLines && (i < cartLines.shippable.length); i++) {
			var thisLine = cartLines.shippable[i];
			itemCount += parseInt(thisLine.quantity);
		}
		for(var i = 0; cartLines && (i < cartLines.nonShippable.length); i++) {
			var thisLine = cartLines.nonShippable[i];
			itemCount += parseInt(thisLine.quantity);
		}
		
		var showDivider = false;

		if(this.checkoutData && ((this.checkoutData.promotions && this.checkoutData.promotions.length > 0) || 
			(this.checkoutData.giftCertificates && this.checkoutData.giftCertificates.length > 0))) {
			showDivider = true;
		}

		return {
			cartLines: cartLines,
			cartSummary: cartSummary,
			lineCount: lineCount,
			itemCount: itemCount,
			showDivider: showDivider,

			checkoutData: this.checkoutData,
			
			shippingRequired: this.shippingRequired,

			sampleImage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
			person: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-person.png')),

			icons: {
				delete: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-delete.png')),
				remove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-close-blk.png')),
				err: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-error.png'))
			}
		}
	}

	return CheckoutMdlCartView;
});

define('Saralux.Core.Checkout.Module.Empty.View',	[
	'saralux_core_checkout_empty.tpl',

	'Saralux.Core.Checkout.Context.Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_empty_tpl,

	CheckoutContextModel,

	Utils,
	jQuery,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function CheckoutEmptyView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;

		this.template = saralux_core_checkout_empty_tpl;

		this.container = options.container;

		this.checkoutContextModel = CheckoutContextModel.getInstance();

	}

	CheckoutEmptyView.prototype = Object.create(SCView.prototype);
	CheckoutEmptyView.prototype.constructor = CheckoutEmptyView;

	CheckoutEmptyView.prototype.getEvents = function() {
        return {
        }
    }

	CheckoutEmptyView.prototype.getContext = function () {
		return {
			allowInvoice: this.allowInvoice,

			emptyState: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-empty-cart.png')),
		}
	}

	return CheckoutEmptyView;
});

define('Saralux.Core.Checkout.Module.OrderReview.View',	[
	'saralux_core_checkout_mdl_orderreview.tpl',

    'Saralux.Core.Cart.Lines.Content.View',

    'Saralux.Core.Checkout.Context.Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_orderreview_tpl,

    CartLinesContentView,

    CheckoutContextModel,

	Utils,
	jQuery,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function CheckoutMdlOrderReviewView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;
        
        this.template = saralux_core_checkout_mdl_orderreview_tpl;
		
        this.container = options.container;
        this.singlePager = options.singlePager;
        this.paymentTerms = options.paymentTerms;
        this.shippingRequired = options.shippingRequired;
        this.failedLines = options.failedLines;

        this.checkoutContextModel = CheckoutContextModel.getInstance();

        this.paymentRequired = true;

        this.isLoading = false;

        this.childViews = {
            'Cart.Lines.Content': function() {
                return new CartLinesContentView({
                    cartData: {
                        lines: this.failedLines
                    },
                    separateShippingLines: false
                });
            }
        }
    }

    CheckoutMdlOrderReviewView.prototype = Object.create(SCView.prototype);
    CheckoutMdlOrderReviewView.prototype.constructor = CheckoutMdlOrderReviewView;

    CheckoutMdlOrderReviewView.prototype.getContext = function () {
			// console.log('CheckoutMdlOrderReviewView shippingAddress', this.checkoutContextModel.get('shippingAddress'));
			// console.log('CheckoutMdlOrderReviewView shippingMethod', this.checkoutContextModel.get('shippingMethod'));
			// console.log('CheckoutMdlOrderReviewView billingAddress', this.checkoutContextModel.get('billingAddress'));
			// console.log('CheckoutMdlOrderReviewView payViaInvoice', this.checkoutContextModel.get('payViaInvoice'));
			// console.log('CheckoutMdlOrderReviewView paymentMethodCC', this.checkoutContextModel.get('paymentMethodCC'));
			// console.log('CheckoutMdlOrderReviewView paymentMethodGC', this.checkoutContextModel.get('paymentMethodGC'));

			var checkoutData = this.checkoutContextModel.get('checkoutData');
			// console.log('CheckoutMdlOrderReviewView checkoutData', checkoutData);
			if(checkoutData && (checkoutData.total > 0)) {
				this.paymentRequired = true;
			} else {
				this.paymentRequired = false;
			}

			return {
				failedLines: this.failedLines,
				failedLinesCount: this.failedLines.length,
				isFLCountGT1: (this.failedLines.length > 1),

				singlePager: this.singlePager,
				paymentTerms: this.paymentTerms,
				shippingRequired: this.shippingRequired,
				paymentRequired: this.paymentRequired,
				shippingAddress: this.checkoutContextModel.get('shippingAddress'),
				shippingMethod: this.checkoutContextModel.get('shippingMethod'),
				billingAddress: this.checkoutContextModel.get('billingAddress'),
				payViaInvoice: this.checkoutContextModel.get('payViaInvoice'),
				paymentMethodCC: this.checkoutContextModel.get('paymentMethodCC'),
				paymentMethodGC: this.checkoutContextModel.get('paymentMethodGC'),
				paymentMethodIP: this.checkoutContextModel.get('paymentMethodIP'),
				person: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-person.png')),
				imgDetailsReceivedAlert: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received-alert.png')),
				defaultThumbnail: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-test-thumbnail.png')),
				icons:{
					icnReview: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-review.png')),
					icnEditBlackSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-edit-black-sm.png')),
					icnHome: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-home.png')),
					icnPerson: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-person.png'))
				}
				// paymentMethodInvoice: this.checkoutContextModel.get('paymentMethodInvoice')
			}
    }

    return CheckoutMdlOrderReviewView;
});

define('Saralux.Core.Checkout.Module.PaymentMethod.CC.View',	[
	'saralux_core_checkout_mdl_paymentmethod_cc.tpl',

	'Saralux.Core.Forms.CreditCard.View',

	'Saralux.Core.CommonLibraries.General',
	'Saralux.Core.CommonLibraries.CAPI.Model',

	'Saralux.Core.Cart.Context.Model',

	'Saralux.Core.Checkout.Context.Model',
	'Saralux.Core.Checkout.SS2Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_paymentmethod_cc_tpl,

	FormsCreditCardView,

	CoreCLGeneral,
	CoreCLCAPIModel,

	CartContextModel,

	CheckoutContextModel,
	CheckoutSS2Model,

	Utils,
	jQuery,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function CheckoutMdlPaymentMethodCCView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;

		this.template = saralux_core_checkout_mdl_paymentmethod_cc_tpl;

		this.parent = options.parent;
		this.container = options.container;
		this.cart_component = this.container.getComponent('Cart');
		this.user_profile = this.container.getComponent('UserProfile');
		this.environment_component = this.container.getComponent('Environment');
		
		this.checkoutConfig = options.checkoutConfig;
		this.installmentTerms = options.installmentTerms;
		this.IPServiceFeeLineId = options.IPServiceFeeLineId;
		this.customerInfo = options.customerInfo;

		this.cartContextModel = CartContextModel.getInstance();
		this.checkoutContextModel = CheckoutContextModel.getInstance();

		this.creditCardMap = {
			mastercard: this.environment_component.getConfig('pmIdMastercard'),
			visa: this.environment_component.getConfig('pmIdVisa'),
			amex: this.environment_component.getConfig('pmIdAmericanExpress'),
			discover: this.environment_component.getConfig('pmIdDiscover')
		};

		this.checkoutModel = new CheckoutSS2Model();

		this.capiModel = new CoreCLCAPIModel();

		this.creditCards = [];

		this.firstCard = true;

		this.isLoading = true;

		this.capiModel.fetch({
			data: {
				action: "GET_CREDIT_CARDS"
			}
		}).done(function(creditCards) {
			if(creditCards) {
				self.formatCreditCardInfo(creditCards);
			}

			self.childViews = {
				'Saralux.Forms.CreditCard': function() {
					return new FormsCreditCardView({
						container: self.container,
						customerInfo: self.customerInfo,
						firstCard: self.firstCard
					});
				}
			}

			self.isLoading = false;
			self.render();

			if(self.IPServiceFeeLineId) {
				self.$("#enable-payment-plan").prop("checked", true);
				// self.$(".payment-plan-container").show();
				self.setInstallmentOption(self);
			}

			for(var i = 0; i < self.creditCards.length; i++) {
				if(self.creditCards[i].isDefault) {
					self.checkoutContextModel.set('paymentMethodCC', self.creditCards[i]);
					self.$("#credit-card-box-"+i).click();
					break;
				}
			}
		});
		/* jQuery.when(self.cart_component.getPaymentMethods(), self.user_profile.getCreditCards())
		.done(function (paymentMethods, creditCards) {
			self.isLoading = false;
			self.render();
		}); */
	}

	CheckoutMdlPaymentMethodCCView.prototype = Object.create(SCView.prototype);
	CheckoutMdlPaymentMethodCCView.prototype.constructor = CheckoutMdlPaymentMethodCCView;

	CheckoutMdlPaymentMethodCCView.prototype.getEvents = function () {
        return {
            'focusout [data-action="m360-slxc-cmdl-pmtcc-sec-code-change"]': 'validateCardCode',
            'click [data-action="m360-slxc-cmdl-pmtcc-select-creditcard"]': 'selectCreditCard',
            'click [data-action="m360-slxc-cmdl-pmtcc-iadd-creditcard"]': 'initAddCreditCard',
            'click [data-action="m360-slxc-cmdl-pmtcc-add-creditcard"]': 'addCreditCard',
            'click [data-action="m360-slxc-cmdl-pmtcc-iedit-creditcard"]': 'initEditCreditCard',
            'click [data-action="m360-slxc-cmdl-pmtcc-edit-creditcard"]': 'editCreditCard',
            'click [data-action="m360-slxc-cmdl-pmtcc-remove-creditcard"]': 'removeCreditCard',
			'change [data-change="m360-slxc-cmdl-enable-payment-plan"]': 'enablePaymentPlan',
			'change [data-change="m360-slxc-cmdl-select-payment-plan"]': "selectPaymentPlan"
        }
    }

	CheckoutMdlPaymentMethodCCView.prototype.selectPaymentPlan = function (e) {
		var self = this;

		if(this.$(e.currentTarget).val() == '-1') {
			this.$(e.currentTarget).siblings('p').addClass('err');

			this.checkoutContextModel.set("paymentMethodIP", null);
		} else {
			this.$(e.currentTarget).siblings('p').removeClass('err');

			var paymentMethodIP = {
				id: this.$(e.currentTarget).val(),
				text: this.$("#"+e.currentTarget.id+" option:selected").text()
			};

			this.checkoutContextModel.set("paymentMethodIP", paymentMethodIP);
		}

		/* setTimeout(function(){
			if(self.$(e.currentTarget).val() == '-1') {
				self.$(e.currentTarget).siblings('p').addClass('err');
			} else {
			self.$(e.currentTarget).siblings('p').removeClass('err');
			}
		}, 300); */
	}

	CheckoutMdlPaymentMethodCCView.prototype.enablePaymentPlan = function(e) {
		var self = this;

		if(e.originalEvent !== undefined) {
			if(this.$(e.currentTarget).is(":checked")) {
				var giftCertificates = this.checkoutContextModel.get('paymentMethodGC');
				
				var cartData = this.cartContextModel.get('cartData')
				var promotions = cartData.summary.promotions;
	
				if(!(giftCertificates && giftCertificates.length > 0)) {
					this.parent.$("#collapse-gift-certificates").collapse('hide');
				}
	
				if((giftCertificates && giftCertificates.length > 0) ||
				(promotions && promotions.length > 0)) {
					this.$(".payment-plan-container").show();

					this.$("#select-installment-plan-warning").show();
					this.$("#form-field-payment-plan").attr("disabled", true);
	
					this.parent.$("#gift-certificates-selector").removeClass("inactive-box");
					this.parent.$("#gift-certificates-selector-text").removeClass("inactive-text");
					this.parent.$("#img-gc-sel-inactive").hide();
					this.parent.$("#img-gc-sel-active").show();

					this.$("#enable-payment-plan").prop("checked", false);
				} else {
					if(this.checkoutConfig.installmentPlan.processingFee.item) {
						this.cartContextModel.set('blockPopup', true);
		
						this.cart_component.addLine({
							line: {
								quantity: 1,
								item: {
									internalid: this.checkoutConfig.installmentPlan.processingFee.item
								},
								options: [{
									cartOptionId: 'custcol_slxc_additional_data',
									value: {
										internalid: JSON.stringify({
											scOptions: {
												serviceFee: "InstallmentPlan"
											}
										})
									}
								}]
							}
						}).then(function(line) {
							self.IPServiceFeeLineId = line;
			
							self.setInstallmentOption(self);
			
							setTimeout(function(){
								self.cartContextModel.set('blockPopup', false);
							}, 1000);
						});
					} else {
						self.setInstallmentOption(self);
					}
				}
			} else {
				if(this.checkoutConfig.installmentPlan.processingFee.item) {
					this.cartContextModel.set('blockPopup', true);
		
					self.cart_component.removeLine({
						line_id: self.IPServiceFeeLineId
					}).then(function(res) {
						self.unsetInstallmentOption(self);
		
						setTimeout(function(){
							self.cartContextModel.set('blockPopup', false);
						}, 1000);
					});
				} else {
					self.unsetInstallmentOption(self);
				}
			}
		}
	}

	CheckoutMdlPaymentMethodCCView.prototype.setInstallmentOption = function(self) {
		self.$(".payment-plan-container").show();

		self.$("#select-installment-plan-warning").hide();
		self.$("#form-field-payment-plan").attr("disabled", false);

		self.parent.$("#gift-certificates-selector").addClass("inactive-box");
		self.parent.$("#gift-certificates-selector-text").addClass("inactive-text");
		self.parent.$("#img-gc-sel-inactive").show();
		self.parent.$("#img-gc-sel-active").hide();
	}

	CheckoutMdlPaymentMethodCCView.prototype.unsetInstallmentOption = function(self) {
		self.$(".payment-plan-container").hide();
	
		self.parent.$("#gift-certificates-selector").removeClass("inactive-box");
		self.parent.$("#gift-certificates-selector-text").removeClass("inactive-text");
		self.parent.$("#img-gc-sel-inactive").hide();
		self.parent.$("#img-gc-sel-active").show();
	}

	CheckoutMdlPaymentMethodCCView.prototype.validateCardCode = function(e) {
		var index = this.$("#"+e.currentTarget.id).attr('data-index');
		var targetCC = this.creditCards[index];

		if (this.$("#"+e.currentTarget.id).val() == '') {
			this.$('#checkout-form-card-code-error-'+index+' p').addClass("err");
		} else {
			// if (targetCC.cardType == 'American Express') {
			if (parseInt(targetCC.paymentMethod) == parseInt(this.creditCardMap.amex)) {
			  var regex = /^[0-9]{4}$/;
			} else {
			  var regex = /^[0-9]{3}$/;
			}
	  
			if (!regex.test(this.$("#"+e.currentTarget.id).val())) {
			  this.$('#checkout-form-card-code-error-'+index+' p').addClass("err");
			} else {
			  this.$('#checkout-form-card-code-error-'+index+' p').removeClass("err");
			}
		}
	}

	CheckoutMdlPaymentMethodCCView.prototype.selectCreditCard = function(e) {
		var index = this.$(e.currentTarget).attr('data-index');
        var targetCC = this.creditCards[index];

		this.$(".cc-box .radio-button span").text('Select');
		this.$(e.currentTarget).parent().find(".radio-button span").text('Selected');
		this.$(".cc-box").removeClass('selected-card');
		this.$(e.currentTarget).parent().addClass('selected-card');
		this.$(".cc-box .checkout-form-default-card").prop("checked", false);
		this.$(e.currentTarget).parent().find(".checkout-form-default-card").prop("checked", true);
		this.$(e.currentTarget).parent().parents(".step-view").find(".collapsable-box").addClass("completed");

		this.checkoutContextModel.set('paymentMethodCC', targetCC);
	}

	CheckoutMdlPaymentMethodCCView.prototype.initAddCreditCard = function(e) {
        this.targetCC = null;

		this.$("#creditcard-form-subview").find(".global-error-msg").hide();

		this.$("#new-card .modal-title").text(Utils.translate("Add a new card"));

		this.$("#new-card #forms-creditcard-card-number").removeClass("display-none");
        this.$("#new-card #masked-creditcard-card-number").addClass("display-none");
        this.$("#new-card #masked-creditcard-card-number").html("");
        this.$("#new-card #forms-creditcard-card-holders-name").val("");
        this.$("#new-card #forms-creditcard-card-number").val("");
        this.$("#new-card #forms-creditcard-card-exp").val("");
        this.$("#new-card #forms-creditcard-card-default").prop("checked", false);

		this.$("#new-card #forms-creditcard-card-default").prop("disabled", false);
		this.$("#new-card #forms-creditcard-card-number").prop("disabled", false);

		this.$(".payment-method-section-content").show();
		// this.$("#forms-creditcard-card-save-card").parent().show();
        
        this.$("#new-card #new-card-save").attr('data-action', 'm360-slxc-cmdl-pmtcc-add-creditcard');
		this.$("#new-card #new-card-save").attr('disabled', false);

        this.$("#new-card").modal('show');
    }

	CheckoutMdlPaymentMethodCCView.prototype.addCreditCard = function (e) {
		var self = this;

		// this.$("#forms-creditcard-card-code").trigger("focusout");
		this.$("#forms-creditcard-card-holders-name").trigger("focusout");
		this.$("#forms-creditcard-card-exp").trigger("focusout");
		this.$("#forms-creditcard-card-number").trigger("focusout");
		
		if(this.$('.forms-creditcard-payment-method').is(':checked')) { 
			this.$('.forms-creditcard-payment-method-p').removeClass("err");
		} else {
			this.$('.forms-creditcard-payment-method-p').addClass("err");
		}

		if(this.$("#creditcard-form-subview").find('.err').length != 0){
			this.$("#creditcard-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#creditcard-form-subview").find(".global-error-msg").hide();

			var isDisabled = this.$("#new-card #new-card-save").attr('disabled');
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				this.$("#new-card #new-card-save").attr('disabled', true);
				this.$("#new-card #new-card-save").attr('data-action', '');
			}
			
			// var saveCard = this.$('#forms-creditcard-card-save-card').prop('checked');

			var expDate = this.$("#forms-creditcard-card-exp").val();
			expDate = expDate.replace(/\s/g,''); //removing all whitespaces for exp string
			var cardExp = expDate.split('/');

			var isDefault = true;
			if(this.creditCards.length > 0) {
				isDefault = this.$('#forms-creditcard-card-default').prop('checked');
			}

			var cardNumber = this.$("#forms-creditcard-card-number").val();
            cardNumber = cardNumber.replace(/\s/g,''); //removing all whitespaces for cardNumber string

			var data = {
				action: "add_credit_card",
				cardNumber: cardNumber,
				cardName: this.$('#forms-creditcard-card-holders-name').val(),
				paymentMethod: this.$('input[name="forms-creditcard-payment-method"]:checked').val(),
				expiryMonth: cardExp[0],
				expiryYear: cardExp[1],
				isDefault: isDefault
			}

			// if(saveCard) {
				this.checkoutModel.clear({ silent: true });
				this.checkoutModel.save(data).done(function(res) {
					if(!res.hasError) {
						// self.checkoutContextModel.set('paymentMethodCC', data);

						self.capiModel.clear({ silent: true });
						self.capiModel.fetch({
							data: {
								action: "GET_CREDIT_CARDS"
							}
						}).done(function(creditCards) {
							if(creditCards) {
								self.formatCreditCardInfo(creditCards);
							}

							jQuery("#new-card").modal('hide');
							jQuery('.modal-backdrop').remove();
							jQuery(document.body).removeClass("modal-open");

							self.isLoading = false;
							self.render();

							for(var i = 0; i < self.creditCards.length; i++) {
								if(self.creditCards[i].isDefault) {
									self.$("#credit-card-box-"+i).click();
									break;
								}
							}
						});
					} else {
						console.error("error", res.message);
					}
				});
			/* } else {
				this.creditCards.push({
					id: null,
					isDefault: (thisCard.ccdefault == "T"),
					cardName: thisCard.ccname,
					cardNumber: thisCard.ccnumber,
					last4Digits: thisCard.ccnumber.substr(thisCard.ccnumber.length - 4),
					expiryMonth: expiryMonth,
					expiryYear: thisCard.expyear,
					paymentMethod: data.paymentMethod,
					cardType: thisCard.paymentmethod.name,
					cardImage: (cardImgArr && (cardImgArr.length > 0))?cardImgArr[0]:null
				});
			} */
		}
	}

	CheckoutMdlPaymentMethodCCView.prototype.initEditCreditCard = function(e) {
        var index = this.$("#"+e.currentTarget.id).attr('data-index');
        var targetCC = this.creditCards[index];

        this.targetCC = targetCC;

		this.$("#creditcard-form-subview").find(".global-error-msg").hide();

		this.$("#new-card .modal-title").text(Utils.translate("Edit existing card"));

        // this.$("#new-card #forms-creditcard-card-number").val(targetCC.cardNumber);
		this.$("#new-card #forms-creditcard-card-number").addClass("display-none");
        this.$("#new-card #masked-creditcard-card-number").removeClass("display-none");
		var cardImageHTML = "<span class='card-icon'><img src='"+targetCC.cardImage+"'/></span>";
        this.$("#new-card #masked-creditcard-card-number").html(targetCC.maskedCardNumber+cardImageHTML);
        this.$("#new-card #forms-creditcard-card-holders-name").val(targetCC.cardName);
        this.$("#new-card #forms-creditcard-card-exp").val(targetCC.expiryMonth+"/"+targetCC.expiryYear);
		if(targetCC.isDefault) {
			this.$("#new-card #forms-creditcard-card-default").prop("checked", true);
		} else {
			this.$("#new-card #forms-creditcard-card-default").prop("checked", false);
		}

		this.$("#new-card #forms-creditcard-card-number").prop("disabled", true);

		if(this.creditCards.length > 1) {
			this.$("#new-card #forms-creditcard-card-default").prop("disabled", false);
		} else {
			this.$("#new-card #forms-creditcard-card-default").prop("disabled", true);
			this.$("#new-card #forms-creditcard-card-default").prop("checked", true);
		}

		this.$(".payment-method-section-content").hide();
		// this.$("#forms-creditcard-card-save-card").parent().hide();
        
        this.$("#new-card #new-card-save").attr('data-action', 'm360-slxc-cmdl-pmtcc-edit-creditcard');
		this.$("#new-card #new-card-save").attr('disabled', false);

        this.$("#new-card").modal('show');
    }

	CheckoutMdlPaymentMethodCCView.prototype.editCreditCard = function (e) {
		var self = this;

		this.$("#forms-creditcard-card-holders-name").trigger("focusout");
		this.$("#forms-creditcard-card-exp").trigger("focusout");

		if(this.$("#creditcard-form-subview").find('.err').length != 0){
			this.$("#creditcard-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#creditcard-form-subview").find(".global-error-msg").hide();

			var isDisabled = this.$("#new-card #new-card-save").attr('disabled');
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				this.$("#new-card #new-card-save").attr('disabled', true);
				this.$("#new-card #new-card-save").attr('data-action', '');
			}

			var expDate = this.$("#forms-creditcard-card-exp").val();
			expDate = expDate.replace(/\s/g,''); //removing all whitespaces for exp string
			var cardExp = expDate.split('/');

			var isDefault = true;
			if(this.creditCards.length > 1) {
				isDefault = this.$('#forms-creditcard-card-default').prop('checked');
			}

			var cardNumber = this.targetCC.cardNumber;
            cardNumber = cardNumber.replace(/\s/g,''); //removing all whitespaces for cardNumber string

			var data = {
				action: "update_credit_card",
				id: this.targetCC.id,
				cardNumber: cardNumber,
				cardName: this.$('#forms-creditcard-card-holders-name').val(),
				expiryMonth: cardExp[0],
				expiryYear: cardExp[1],
				isDefault: isDefault
			}

			this.checkoutModel.clear({ silent: true });
			this.checkoutModel.save(data).done(function(res) {
				if(!res.hasError) {
					self.checkoutContextModel.set('paymentMethodCC', self.targetCC);

					self.capiModel.clear({ silent: true });
					self.capiModel.fetch({
						data: {
							action: "GET_CREDIT_CARDS"
						}
					}).done(function(creditCards) {
						if(creditCards) {
							self.formatCreditCardInfo(creditCards);
						}

						jQuery("#new-card").modal('hide');
						jQuery('.modal-backdrop').remove();
						jQuery(document.body).removeClass("modal-open");

						self.isLoading = false;
						self.render();

						jQuery(window).scrollTop(self.parent.$(".saralux_core_checkout_mdl_paymentmethod").offset().top);

						for(var i = 0; i < self.creditCards.length; i++) {
							if(self.creditCards[i].isDefault) {
								self.$("#credit-card-box-"+i).click();
								break;
							}
						}
					});
				} else {
					console.error("error", res.message);
				}
			});
		}
	}

	CheckoutMdlPaymentMethodCCView.prototype.removeCreditCard = function (e) {
		var self = this;
		
		var index = this.$("#"+e.currentTarget.id).attr('data-index');
		var activeCard = this.creditCards[index];

		var data = {
			action: "remove_credit_card",
			id: activeCard.id
		};

		this.checkoutModel.clear({ silent: true });
		this.checkoutModel.save(data).done(function(res) {
			if(!res.hasError) {
				self.capiModel.clear({ silent: true });
				self.capiModel.fetch({
					data: {
						action: "GET_CREDIT_CARDS"
					}
				}).done(function(creditCards) {
					if(creditCards) {
						self.formatCreditCardInfo(creditCards);
					}

					jQuery("#new-card").modal('hide');
					jQuery('.modal-backdrop').remove();
					jQuery(document.body).removeClass("modal-open");

					self.isLoading = false;
					self.render();

					for(var i = 0; i < self.creditCards.length; i++) {
						if(self.creditCards[i].isDefault) {
							self.$("#credit-card-box-"+i).click();
							break;
						}
					}
				});
			} else {
				console.error("error", res.message);
			}
		});
	}

	CheckoutMdlPaymentMethodCCView.prototype.formatCreditCardInfo = function (creditCards) {
		this.creditCards = [];

		for(var i = 0; i < creditCards.length; i++) {
			var thisCard = creditCards[i];

			if(thisCard.paymentmethod && thisCard.ccname && thisCard.ccnumber) {

				var cardImgArr = thisCard.paymentmethod.imagesrc;

				var expiryMonth = thisCard.expmonth;
				if(expiryMonth.length != 2) {
					expiryMonth = "0"+expiryMonth;
				}

				var dateObj = new Date();
                var month = dateObj.getUTCMonth() + 1;
                var year = dateObj.getUTCFullYear();

				var isCardExpired = true;
                if(thisCard.expyear > year || (thisCard.expyear ==year && thisCard.expmonth >= month)) {
                    isCardExpired = false;
                }

				var maskedCardNumber = CoreCLGeneral.formatMaskedCreditCardNumber(thisCard.ccnumber);

				var thisCard = {
					id: thisCard.internalid,
					isDefault: (thisCard.ccdefault == "T"),
					cardName: thisCard.ccname,
					cardNumber: thisCard.ccnumber,
					maskedCardNumber: maskedCardNumber,
					last4Digits: thisCard.ccnumber.substr(thisCard.ccnumber.length - 4),
					expiryMonth: expiryMonth,
					expiryYear: thisCard.expyear,
					paymentMethod: thisCard.paymentmethod.internalid,
					cardType: thisCard.paymentmethod.name,
					cardImage: (cardImgArr && (cardImgArr.length > 0))?cardImgArr[0]:null,
					isCardExpired: isCardExpired
				};

				/* if(thisCard.isDefault) {
					this.checkoutContextModel.set("paymentMethodCC", thisCard);
				} */

				this.creditCards.push(thisCard);
			}
		}

		if(this.creditCards && this.creditCards.length > 0) {
			this.firstCard = false;
		} else {
			this.firstCard = true;
		}
	}

	CheckoutMdlPaymentMethodCCView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			
			creditCards: this.creditCards,
			checkoutConfig: this.checkoutConfig,
			installmentTerms: this.installmentTerms,

			icons: {
				chip: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sim.png')),
				chipColored: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-sim-colored.png')),
				default: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-correct-sm.png')),
				remove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-close-blk-sm.png')),
				edit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-edit-black-sm.png')),
				cardTip: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-cardtip.png')),
				cardTipVisa: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-debit-card-visacvv.png')),
				cardTipAE: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-debit-card-amexcvv.png')),
				icnInfo: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-info.png')),
				icnWarning: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-warning.png'))
			}
		}
	}

	return CheckoutMdlPaymentMethodCCView;
});

define('Saralux.Core.Checkout.Module.PaymentMethod.GC.View',	[
	'saralux_core_checkout_mdl_paymentmethod_gc.tpl',

	'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.Utilities.Model',
    'Saralux.Core.CommonLibraries.CAPI.Model',

	'Saralux.Core.Cart.Context.Model',

	'Saralux.Core.Checkout.Context.Model',
	'Saralux.Core.Checkout.SS2Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_paymentmethod_gc_tpl,

	CoreCLGeneral,
    CoreCLUtilitiesModel,
    CoreCLCAPIModel,

	CartContextModel,

	CheckoutContextModel,
	CheckoutSS2Model,

	Utils,
	jQuery,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function CheckoutMdlPaymentMethodGCView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;
		
		this.template = saralux_core_checkout_mdl_paymentmethod_gc_tpl;

		this.container = options.container;
		this.parent = options.parent;
		this.cart_component = this.container.getComponent('Cart');
		this.user_profile = this.container.getComponent('UserProfile');

		this.checkoutContextModel = CheckoutContextModel.getInstance();
		this.cartContextModel = CartContextModel.getInstance();

        this.checkoutSS2Model = new CheckoutSS2Model();
        this.coreCLCAPIModel = new CoreCLCAPIModel();

		this.giftCertificates = [];
		this.activeGiftCertificates = [];
		this.showGCSelector = true;

		this.isLoading = false;

		this.checkoutSS2Model.clear({ silent: true });
        this.checkoutSS2Model.save({
            action: "get_gift_certificates"
        }).then(function(res) {
            // console.log('giftCertificates res', res);
            if(!res.hasError) {
                if(res.giftCertificates) {
                    self.giftCertificates = res.giftCertificates;
                } else {
                    self.giftCertificates = [];
                }
            }

			self.isLoading = false;
			self.render();

			self.updateRemainingAmount();
        });
	}

	CheckoutMdlPaymentMethodGCView.prototype = Object.create(SCView.prototype);
	CheckoutMdlPaymentMethodGCView.prototype.constructor = CheckoutMdlPaymentMethodGCView;

	CheckoutMdlPaymentMethodGCView.prototype.getEvents = function() {
        return {
            'change [data-change="m360-slxc-cmdl-pmtgc-select-giftcertificate"]': 'selectGiftCertificate',
            'click [data-action="m360-slxc-cmdl-pmtgc-remove-giftcertificate"]': 'removeGiftCertificate'
        }
    }

	CheckoutMdlPaymentMethodGCView.prototype.selectGiftCertificate = function(e) {
		var index = jQuery("#certificates-list").val();
        var targetGC = Utils.deepCopy(this.giftCertificates[index]);
		targetGC.originalIndex = index;
		// console.log('targetGC', targetGC);
		
		var cartData = this.cartContextModel.get('cartData');
		// console.log('cartData', cartData);

		var pendingCartAmount = parseFloat(cartData.summary.total);
		if(cartData.summary.shippingCost) {
			pendingCartAmount -= parseFloat(cartData.summary.shippingCost);
		}

		var shippingTotal = this.checkoutContextModel.get('shippingMethod');
		if(shippingTotal && shippingTotal.rate) {
			pendingCartAmount += parseFloat(shippingTotal.rate);
		}
		for(var i = 0; i < this.activeGiftCertificates.length; i++) {
			pendingCartAmount -= parseFloat(this.activeGiftCertificates[i].amountApplied);
		}

		// console.log('pendingCartAmount', pendingCartAmount);

		if(pendingCartAmount > 0) {
			if(pendingCartAmount > targetGC.amountRemaining) {
				targetGC.amountApplied = parseFloat(targetGC.amountRemaining);
				targetGC.amountRemaining = 0.00;
			} else {
				targetGC.amountApplied = parseFloat(pendingCartAmount);
				targetGC.amountRemaining = parseFloat(targetGC.amountRemaining - targetGC.amountApplied);
			}
			this.giftCertificates[index].show = false;
	
			this.activeGiftCertificates.push(targetGC);
		}

		var pendingCartAmount = parseFloat(cartData.summary.total);
		if(cartData.summary.shippingCost) {
			pendingCartAmount -= parseFloat(cartData.summary.shippingCost);
		}
		if(shippingTotal && shippingTotal.rate) {
			pendingCartAmount += parseFloat(shippingTotal.rate);
		}

		for(var i = 0; i < this.activeGiftCertificates.length; i++) {
			pendingCartAmount -= parseFloat(this.activeGiftCertificates[i].amountApplied);
		}

		if(pendingCartAmount > 0) {
			this.showGCSelector = true;
		} else {
			this.showGCSelector = false;
		}

		this.checkoutContextModel.set('paymentMethodGC', Utils.deepCopy(this.activeGiftCertificates));
		
		this.render();

		this.updateRemainingAmount();

		/* this.cart_component.addPayment({
			payment_method: {
				type: "giftcertificate",
				giftcertificate: {
					code: targetGC.code
				}
			}
		}).then(function(res) {
			// console.log('addPayment res', res);
		}); */
	}

	CheckoutMdlPaymentMethodGCView.prototype.removeGiftCertificate = function(e) {
		var index = jQuery("#"+e.currentTarget.id).attr('data-index');
		var thisGC = this.activeGiftCertificates[index];

		this.giftCertificates[thisGC.originalIndex].show = true;

		this.activeGiftCertificates.splice(index, 1);

		this.showGCSelector = true;

		this.checkoutContextModel.set('paymentMethodGC', Utils.deepCopy(this.activeGiftCertificates));
		
		this.render();

		this.updateRemainingAmount();
	}

	CheckoutMdlPaymentMethodGCView.prototype.updateRemainingAmount = function(e) {
		var totalGCAmount = 0.00;
		for(var i = 0; i < this.giftCertificates.length; i++) {
			totalGCAmount += parseFloat(this.giftCertificates[i].amountRemaining);
		}

		var totalGCAppliedAmount = 0.00;
		for(var i = 0; i < this.activeGiftCertificates.length; i++) {
			totalGCAppliedAmount += parseFloat(this.activeGiftCertificates[i].amountApplied);
		}

		var totalGCRemainingAmount = parseFloat(totalGCAmount) - parseFloat(totalGCAppliedAmount);
		this.parent.$("#gift-certificate-amount").text(Utils.formatCurrency(totalGCRemainingAmount));
	}

	CheckoutMdlPaymentMethodGCView.prototype.getContext = function() {
		return {
			isLoading: this.isLoading,
			showGCSelector: this.showGCSelector,

			giftCertificates: this.giftCertificates,
			activeGiftCertificates: this.activeGiftCertificates,

			icons: {
				remove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-close-blk.png'))
			}
		}
	}

	return CheckoutMdlPaymentMethodGCView;
});

define('Saralux.Core.Checkout.Module.PaymentMethod.View',	[
	'saralux_core_checkout_mdl_paymentmethod.tpl',

	'Saralux.Core.Checkout.Module.PaymentMethod.CC.View',
	'Saralux.Core.Checkout.Module.PaymentMethod.GC.View',

	'Saralux.Core.Checkout.Context.Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_paymentmethod_tpl,

	CheckoutMdlPaymentMethodCCView,
	CheckoutMdlPaymentMethodGCView,

	CheckoutContextModel,

	Utils,
	jQuery,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function CheckoutMdlPaymentMethodView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;

		this.template = saralux_core_checkout_mdl_paymentmethod_tpl;

		this.container = options.container;
		this.checkoutConfig = options.checkoutConfig;
		this.installmentTerms = options.installmentTerms;
		this.IPServiceFeeLineId = options.IPServiceFeeLineId;
		this.balance = options.balance;
		this.paymentTerms = options.paymentTerms;
		this.allowInvoice = options.allowInvoice;
		this.customerInfo = options.customerInfo;

		// console.log('balance', this.balance);
		// console.log('paymentTerms', this.paymentTerms);
		// console.log('allowInvoice', this.allowInvoice);

		this.environment_component = this.container.getComponent('Environment');
		this.checkoutContextModel = CheckoutContextModel.getInstance();

		this.checkoutContextModel.on("change:paymentMethodGC", function() {
            // console.log('MODEL CHANGED (paymentMethodGC) | Checkout.Module.PaymentMethod', self.checkoutContextModel.get('paymentMethodGC'));

			var checkoutData = self.checkoutContextModel.get('checkoutData');
			// console.log('checkoutData.total', checkoutData.total);
			if(checkoutData.total > 0) {
				self.$("#pm-title").show();
				self.$(".tabsBlock").show();
				self.$(".tabsBlock1").show();
			} else {
				self.$("#pm-title").hide();
				self.$(".tabsBlock").hide();
				self.$(".tab-body").hide();
			}
        });
		
		this.childViews = {
			'Saralux.Checkout.Module.PaymentMethod.CC': function() {
				return new CheckoutMdlPaymentMethodCCView({
					container: this.container,
					checkoutConfig: this.checkoutConfig,
					installmentTerms: this.installmentTerms,
					IPServiceFeeLineId: this.IPServiceFeeLineId,
					customerInfo: this.customerInfo,
					parent: this
				});
			},
			'Saralux.Checkout.Module.PaymentMethod.GC': function() {
				return new CheckoutMdlPaymentMethodGCView({
					container: this.container,
					checkoutConfig: this.checkoutConfig,
					parent: this
				});
			}
		}
	}

	CheckoutMdlPaymentMethodView.prototype = Object.create(SCView.prototype);
	CheckoutMdlPaymentMethodView.prototype.constructor = CheckoutMdlPaymentMethodView;

	CheckoutMdlPaymentMethodView.prototype.getEvents = function() {
        return {
            'click [data-action="m360-slxc-cmdl-pmt-pay-via-invoice"]': 'payViaInvoice',
            'click [data-action="m360-slxc-cmdl-pmt-pay-via-card"]': 'payViaCard',
            'click [data-action="m360-slxc-cmdl-pmt-toggle-gc-modal"]': 'toggleGCModal'
        }
    }

	CheckoutMdlPaymentMethodView.prototype.payViaInvoice = function (e) {
		this.checkoutContextModel.set('payViaInvoice', true);
		this.checkoutContextModel.set('paymentMethodCC', null);
		this.$('.global-error-msg').hide();
		this.$("#payment-section-creditcard").find("p").removeClass('err');

		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		this.changeTab(clickedtab);
	}

	CheckoutMdlPaymentMethodView.prototype.payViaCard = function (e) {
		this.checkoutContextModel.set('payViaInvoice', false);
		this.$('.global-error-msg').hide();
		this.$("#payment-section-creditcard").find("p").removeClass('err');

		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		this.changeTab(clickedtab);
	}

	CheckoutMdlPaymentMethodView.prototype.changeTab = function (clickedtab) {
		this.$(".tabsBlock").removeClass("active");
		this.$(".tab-body").hide();
		this.$("." + clickedtab).show();
		if (clickedtab == 'tabsBlock1' ) {
			this.$("#tab1").addClass("active");
		} else {
			this.$("#tab2").addClass("active");
		}
	}
	
	CheckoutMdlPaymentMethodView.prototype.toggleGCModal = function (e) {
		if(!(this.$("#enable-payment-plan") && this.$("#enable-payment-plan").is(":checked"))) {
			this.$("#collapse-gift-certificates").collapse('toggle');
		}
	}

	CheckoutMdlPaymentMethodView.prototype.getContext = function () {
		var safeAndSecureDocLableText = this.environment_component.getConfig('safeAndSecureShoppingLabelText');
		var safeAndSecureDocLinkText = this.environment_component.getConfig('safeAndSecureShoppingLinkText');
		var safeAndSecureDocLink = this.environment_component.getConfig('safeAndSecureShoppingDoc');

		return {
			allowInvoice: this.allowInvoice,
			balance: this.balance,
			paymentTerms: this.paymentTerms,
			safeAndSecureDocLableText: safeAndSecureDocLableText,
			safeAndSecureDocLinkText: safeAndSecureDocLinkText,
			safeAndSecureDocLink: safeAndSecureDocLink,
			icons:{
				icnWallet: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-wallet.png')),
				icn4Wallet: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-wallet.png')),
				icnCreditActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-credit-active.png')),
				icnCreditInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-credit-inactive.png')),
				icnInvoiceActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-invoice-active.png')),
				icnInvoiceInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-invoice-inactive.png')),
				icnSecure: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-secure.png'))
			}
		}
	}

	return CheckoutMdlPaymentMethodView;
});

define('Saralux.Core.Checkout.Module.ShippingAddress.View',	[
	'saralux_core_checkout_mdl_shippingaddress.tpl',

    'Saralux.Core.Forms.Address.View',

	'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.Utilities.Model',
    'Saralux.Core.CommonLibraries.CAPI.Model',

    'Saralux.Core.Checkout.Context.Model',
    'Saralux.Core.Checkout.SS2Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_shippingaddress_tpl,

    FormsAddressView,

	CoreCLGeneral,
    CoreCLUtilitiesModel,
    CoreCLCAPIModel,

    CheckoutContextModel,
    CheckoutSS2Model,

	Utils,
	jQuery,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function CheckoutMdlShippingAddressView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_checkout_mdl_shippingaddress_tpl;

        this.parent = options.parent;
        this.container = options.container;
        this.customerInfo = options.customerInfo;

        this.countries = options.countries;
        this.allStates = options.states;
        this.states = [];

		this.cart_component = this.container.getComponent('Cart');
		this.user_profile = this.container.getComponent('UserProfile');

        this.coreCLUtils = CoreCLUtilitiesModel.getInstance();

        this.checkoutContextModel = CheckoutContextModel.getInstance();
        this.checkoutSS2Model = new CheckoutSS2Model();
        this.coreCLCAPIModel = new CoreCLCAPIModel();

        this.userAddresses = [];
        this.targetAddressId = null;

        this.isLoading = true;

        this.checkoutSS2Model.clear({ silent: true });
        this.checkoutSS2Model.save({
            action: "get_addresses"
        }).then(function(res) {
            // console.log('res', res);
            if(!res.hasError) {
                if(res.addresses) {
                    self.userAddresses = res.addresses;
                } else {
                    self.userAddresses = [];
                }

                var preselectIndex = -1;
                for(var i = 0; i < self.userAddresses.length; i++) {
                    if(self.userAddresses[i].defaultshipping) {
                        self.checkoutContextModel.set('shippingAddress', self.userAddresses[i]);
                        // preselectIndex = i;
                        break;
                    }
                }

                self.childViews = {
                    'Saralux.Forms.Address': function() {
                        return new FormsAddressView({
                            container: options.container,
                            countries: self.countries,
                            allStates: self.allStates,
                            states: self.states,
                            customerInfo: self.customerInfo,
                            calculateShippingEstimate: (self.userAddresses && (self.userAddresses.length > 0))?false:true,
                            firstAddress: (self.userAddresses && (self.userAddresses.length > 0))?false:true
                        });
                    }
                }
    
                self.isLoading = false;
                self.render();
                
                if(self.userAddresses.length == 0) {
                    self.setCountryAndStateDropdowns(null, "#first-address");
                }
                // if(preselectIndex > -1) {
                //     self.$("#radio-button-select-addr-"+preselectIndex).click();
                // }

                self.checkoutContextModel.on("change:userAddresses", function() {
                    // console.log('CheckoutMdlShippingAddressView CHANGE TRIGGERED | checkoutContextModel:userAddresses');

                    var origin = self.checkoutContextModel.get('userAddressesChangeOrigin');
                    // console.log('CheckoutMdlShippingAddressView | origin', self.checkoutContextModel.get('userAddressesChangeOrigin'));
                    if(origin == "billing-address") {
                        // console.log('CheckoutMdlShippingAddressView | Updating userAddresses', self.checkoutContextModel.get('userAddresses'));

                        self.userAddresses = Utils.deepCopy(self.checkoutContextModel.get('userAddresses'));

                        var shippingAddress = self.checkoutContextModel.get('shippingAddress');
                        // console.log('shippingAddress', shippingAddress);

                        var reEstimateShipping = false;
                        var updatedZip = "", updatedCountry = "";

                        if(shippingAddress) {
                            for(var i = 0; i < self.userAddresses.length; i++) {
                                if(parseInt(self.userAddresses[i].internalid) == parseInt(shippingAddress.internalid)) {
                                    // console.log('self.userAddresses[i]', self.userAddresses[i]);
                                    
                                    if((shippingAddress.zip != self.userAddresses[i].zip) || 
                                    (shippingAddress.country != self.userAddresses[i].country)) {
                                        // console.log('self.userAddresses[i]', self.userAddresses[i]);
                                        updatedZip = self.userAddresses[i].zip;
                                        updatedCountry = self.userAddresses[i].country;
                                        reEstimateShipping = true;
                                        self.checkoutContextModel.set('shippingAddress', Utils.deepCopy(self.userAddresses[i]));
                                    } else {
                                        if(!((shippingAddress.fullname == self.userAddresses[i].fullname) &&
                                        (shippingAddress.company == self.userAddresses[i].company) &&
                                        (shippingAddress.phone == self.userAddresses[i].phone) &&
                                        (shippingAddress.addr1 == self.userAddresses[i].addr1) &&
                                        (shippingAddress.addr2 == self.userAddresses[i].addr2) &&
                                        (shippingAddress.city == self.userAddresses[i].city) &&
                                        (shippingAddress.zip == self.userAddresses[i].zip) &&
                                        (shippingAddress.state == self.userAddresses[i].state) &&
                                        (shippingAddress.country == self.userAddresses[i].country))) {
                                            self.checkoutContextModel.set('shippingAddress', Utils.deepCopy(self.userAddresses[i]));
                                        }
                                    }
                                    
                                    break;
                                }
                            }
                        }
                        
                        // console.log('reEstimateShipping', reEstimateShipping);
                        // console.log('updatedZip', updatedZip);
                        // console.log('updatedCountry', updatedCountry);
                        
                        if(reEstimateShipping && updatedZip && updatedCountry) {
                            self.cart_component.estimateShipping({
                                address: {
                                    zip: updatedZip,
                                    country: updatedCountry
                                }
                            }).done(function(res) {
                                self.cart_component.getShipMethod().then(function(shipmethod) {
                                    if(shipmethod.internalid) {
                                        self.checkoutContextModel.set('shippingMethod', shipmethod);
                                    } else {
                                        self.checkoutContextModel.set('shippingMethod', null);
                                    }

                                    self.isLoading = false;
                                    self.render();
                                });
                            });
                        } else {
                            self.render();
                        }
                    }
                });
            } else {
                self.isLoading = false;
                self.render();
            }
        });
    }

    CheckoutMdlShippingAddressView.prototype = Object.create(SCView.prototype);
    CheckoutMdlShippingAddressView.prototype.constructor = CheckoutMdlShippingAddressView;
    
    CheckoutMdlShippingAddressView.prototype.getEvents = function () {
        return {
            'click [data-action="m360-slxc-cmdl-sa-select-address"]': 'selectAddress',
            'click [data-action="m360-slxc-cmdl-sa-init-add-address"]': 'initAddAddress',
            'click [data-action="m360-slxc-cmdl-sa-add-address"]': 'addAddress',
            'click [data-action="m360-slxc-cmdl-sa-init-edit-address"]': 'initEditAddress',
            'click [data-action="m360-slxc-cmdl-sa-edit-address"]': 'editAddress',
            'click [data-action="m360-slxc-cmdl-sa-remove-address"]': 'removeAddress'
        }
    }

    CheckoutMdlShippingAddressView.prototype.selectAddress = function(e) {
        var self = this;

        this.$("#address-form-subview").find(".global-error-msg").hide();
        this.$(".global-error-msg").hide();

        this.$(".address-box .radio-button span").text(Utils.translate('Select'));
        this.$("#"+e.currentTarget.id).find("span").text(Utils.translate('Selected'));
        this.$(".address-box").removeClass('selected-addr');
        this.$("#"+e.currentTarget.id).parent(".address-box").addClass('selected-addr');
        this.$(".address-box .checkout-form-default-address").prop("checked", false);
        this.$("#"+e.currentTarget.id).find(".checkout-form-default-address").prop("checked", true);
        this.$("#"+e.currentTarget.id).parents(".step-view").find(".collapsable-box").addClass("completed");

        var index = this.$("#"+e.currentTarget.id).attr('data-index');
        var selectedAddress = Utils.deepCopy(this.userAddresses[index]);
        // console.log('shippingAddress selectedAddress', selectedAddress);

        selectedAddress.isExisting = true;

        var addressData = {
            internalid: selectedAddress.internalid,
            defaultshipping: true
        };

        this.checkoutSS2Model.clear({ silent: true });
        this.checkoutSS2Model.save({
            action: "mark_address_as_default",
            addressData: addressData
        }).then(function(res) {
            // console.log('mark_address_as_default res', res);
            if(!res.hasError) {
                self.userAddresses = res.addresses;

                self.checkoutContextModel.set('userAddressesChangeOrigin', "shipping-address");
                self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));

                self.cart_component.estimateShipping({
                    address: {
                        zip: selectedAddress.zip,
                        country: selectedAddress.country
                    }
                }).done(function(res) {
                    // console.log('estimateShipping done', res);
                    self.checkoutContextModel.set('shippingAddress', selectedAddress);

                    self.cart_component.getShipMethod().then(function(shipmethod) {
                        // console.log('getShipMethod done', shipmethod);
                        if(shipmethod.internalid) {
                            self.checkoutContextModel.set('shippingMethod', shipmethod);
                        } else {
                            self.checkoutContextModel.set('shippingMethod', null);
                        }

                        self.isLoading = false;
                        self.render();
                    });
                });
                
                if(self.userAddresses.length == 0) {
                    self.setCountryAndStateDropdowns(null, "#first-address");
                }
            }
        });
    }

    CheckoutMdlShippingAddressView.prototype.initAddAddress = function(e) {
        this.$("#address-form-subview").find(".global-error-msg").hide();

        this.$("#new-address #forms-address-full-name").val("");
        this.$("#new-address #forms-address-company").val("");
        this.$("#new-address #forms-address-phone").val("");
        this.$("#new-address #forms-address-address-1").val("");
        this.$("#new-address #forms-address-address-2").val("");
        this.$("#new-address #forms-address-city").val("");
        this.$("#new-address #forms-address-zip").val("");
        this.$("#new-address #forms-address-is-residential-address").prop("checked", false);

        this.setCountryAndStateDropdowns(null, "#new-address");

        this.$("#new-address #new-address-save").attr('data-action', 'm360-slxc-cmdl-sa-add-address');

        this.$("#new-address").modal('show');
    }

    CheckoutMdlShippingAddressView.prototype.addAddress = function(e) {
        var self = this;

        this.$("#forms-address-full-name").trigger("focusout");
        this.$("#forms-address-phone").trigger("focusout");
        this.$("#forms-address-address-1").trigger("focusout");
        this.$("#forms-address-city").trigger("focusout");
        this.$("#forms-address-zip").trigger("focusout");

        // this.$('#forms-address-country').trigger("change");
        // this.$('#forms-address-state').trigger("change");
        
        if(this.$("#forms-address-state").val() == "select" || this.$("#forms-address-state").val() == null) {
			this.$("#forms-address-state").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-state").siblings("p").removeClass("err");
		}
        if(this.$("#forms-address-countrye").val() == "select" || this.$("#forms-address-countrye").val() == null) {
			this.$("#forms-address-countrye").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-countrye").siblings("p").removeClass("err");
		}

        if(this.$("#address-form-subview").find('.err').length != 0){
			this.$("#address-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#address-form-subview").find(".global-error-msg").hide();

            var parentId = "#first-address";
            var dataMode = this.$("#"+e.currentTarget.id).attr("data-mode");
            if(dataMode == 'add-first') {
                parentId = "#first-address";
            } else {
                parentId = "#new-address";
            }

            var addressData = {
                fullname: this.$(parentId+" #forms-address-full-name").val(),
                company: this.$(parentId+" #forms-address-company").val(),
                phone: this.$(parentId+" #forms-address-phone").val(),
                addr1: this.$(parentId+" #forms-address-address-1").val(),
                addr2: this.$(parentId+" #forms-address-address-2").val(),
                city: this.$(parentId+" #forms-address-city").val(),
                zip: this.$(parentId+" #forms-address-zip").val(),
                state: this.$(parentId+" #forms-address-state").val(),
                country: this.$(parentId+" #forms-address-country").val(),
                countryText: this.$(parentId+" #forms-address-country option:checked").text(),
                isresidential: this.$(parentId+" #forms-address-is-residential-address").prop("checked"),
                defaultshipping: true,
                defaultbilling: false
            }

            // console.log('addressData', addressData);

            // console.log('dataMode*', dataMode);
            if(dataMode == "add-more") {
                jQuery("#new-address").modal('hide');
                jQuery('.modal-backdrop').remove();
                jQuery(document.body).removeClass("modal-open");
            }
            this.isLoading = true;
            this.render();

            this.checkoutSS2Model.clear({ silent: true });
            this.checkoutSS2Model.save({
                action: "add_address",
                addressData: addressData
            }).then(function(res) {
                // console.log('res', res);
                if(!res.hasError) {
                    addressData.lineId = res.lineNumber;
                    addressData.internalid = res.internalId;
                    
                    self.userAddresses = res.addresses;

                    self.checkoutContextModel.set('userAddressesChangeOrigin', "shipping-address");
                    self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));

                    self.cart_component.estimateShipping({
                        address: {
                            zip: addressData.zip,
                            country: addressData.country
                        }
                    }).done(function(res) {
                        // console.log('estimateShipping done', res);
                        self.checkoutContextModel.set('shippingAddress', addressData);
                        self.cart_component.getShipMethod().then(function(shipmethod) {
                            // console.log('getShipMethod done', shipmethod);
                            if(shipmethod.internalid) {
                                self.checkoutContextModel.set('shippingMethod', shipmethod);
                            } else {
                                self.checkoutContextModel.set('shippingMethod', null);
                            }

                            self.isLoading = false;
                            self.render();
                        });
                    });
                    
                    if(self.userAddresses.length == 0) {
                        self.setCountryAndStateDropdowns(null, "#first-address");
                    }
                }
            });
        }
    }

    CheckoutMdlShippingAddressView.prototype.initEditAddress = function(e) {
        var index = this.$("#"+e.currentTarget.id).attr('data-index');
        var targetAddress = this.userAddresses[index];
        this.targetAddressId = targetAddress.internalid;
        // console.log('targetAddressId', this.targetAddressId);
        // console.log('targetAddress', targetAddress);

        this.$("#address-form-subview").find(".global-error-msg").hide();

        this.$("#new-address #forms-address-full-name").val(targetAddress.fullname);
        this.$("#new-address #forms-address-company").val(targetAddress.company);
        this.$("#new-address #forms-address-phone").val(targetAddress.phone);
        this.$("#new-address #forms-address-address-1").val(targetAddress.addr1);
        this.$("#new-address #forms-address-address-2").val(targetAddress.addr2);
        this.$("#new-address #forms-address-city").val(targetAddress.city);
        this.$("#new-address #forms-address-zip").val(targetAddress.zip);

        if(targetAddress.isresidential) {
            this.$("#new-address #forms-address-is-residential-address").prop("checked", true);
        } else {
            this.$("#new-address #forms-address-is-residential-address").prop("checked", false);
        }
        
        this.$("#new-address #new-address-save").attr('data-action', 'm360-slxc-cmdl-sa-edit-address');

        this.setCountryAndStateDropdowns(targetAddress, "#new-address");

        this.$("#new-address").modal('show');
    }

    CheckoutMdlShippingAddressView.prototype.editAddress = function(e) {
        var self = this;

        // console.log('this.targetAddressId', this.targetAddressId);

        if(!this.targetAddressId) {
            return;
        }

        this.$("#forms-address-full-name").trigger("focusout");
        this.$("#forms-address-phone").trigger("focusout");
        this.$("#forms-address-address-1").trigger("focusout");
        this.$("#forms-address-city").trigger("focusout");
        this.$("#forms-address-zip").trigger("focusout");

        // this.$('#forms-address-country').trigger("change");
        // this.$('#forms-address-state').trigger("change");

        if(this.$("#forms-address-state").val() == "select" || this.$("#forms-address-state").val() == null) {
			this.$("#forms-address-state").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-state").siblings("p").removeClass("err");
		}
        if(this.$("#forms-address-countrye").val() == "select" || this.$("#forms-address-countrye").val() == null) {
			this.$("#forms-address-countrye").siblings("p").addClass("err");
		} else {
			this.$("#forms-address-countrye").siblings("p").removeClass("err");
		}

        if(this.$("#address-form-subview").find('.err').length != 0){
			this.$("#address-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#address-form-subview").find(".global-error-msg").hide();

            var addressData = {
                internalid: this.targetAddressId,
                fullname: this.$("#new-address #forms-address-full-name").val(),
                company: this.$("#new-address #forms-address-company").val(),
                phone: this.$("#new-address #forms-address-phone").val(),
                addr1: this.$("#new-address #forms-address-address-1").val(),
                addr2: this.$("#new-address #forms-address-address-2").val(),
                city: this.$("#new-address #forms-address-city").val(),
                zip: this.$("#new-address #forms-address-zip").val(),
                state: this.$("#new-address #forms-address-state").val(),
                country: this.$("#new-address #forms-address-country").val(),
                countryText: this.$("#new-address #forms-address-country option:checked").text(),
                isresidential: this.$("#new-address #forms-address-is-residential-address").prop("checked")
                // defaultshipping: true,
                // defaultbilling: false
            }

            // console.log('addressData', addressData);

            jQuery("#new-address").modal('hide');
            jQuery('.modal-backdrop').remove();
            jQuery(document.body).removeClass("modal-open");
            this.isLoading = true;
            this.render();

            this.checkoutSS2Model.clear({ silent: true });
            this.checkoutSS2Model.save({
                action: "edit_address",
                addressData: addressData
            }).then(function(res) {
                // console.log('edit_address res', res);
                if(!res.hasError) {
                    addressData.lineId = res.lineNumber;
                    // addressData.internalid = res.internalId;

                    self.userAddresses = res.addresses;

                    self.checkoutContextModel.set('userAddressesChangeOrigin', "shipping-address");
                    self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));

                    self.cart_component.estimateShipping({
                        address: {
                            zip: addressData.zip,
                            country: addressData.country
                        }
                    }).done(function(res) {
                        // console.log('estimateShipping done', res);
                        self.checkoutContextModel.set('shippingAddress', addressData);
                        self.cart_component.getShipMethod().then(function(shipmethod) {
                            // console.log('getShipMethod done', shipmethod);
                            if(shipmethod.internalid) {
                                self.checkoutContextModel.set('shippingMethod', shipmethod);
                            } else {
                                self.checkoutContextModel.set('shippingMethod', null);
                            }

                            self.isLoading = false;
                            self.render();
                        });
                    });
                    
                    if(self.userAddresses.length == 0) {
                        self.setCountryAndStateDropdowns(null, "#first-address");
                    }
                }
            });
        }
    }

    CheckoutMdlShippingAddressView.prototype.removeAddress = function(e) {
        var self = this;

        var index = this.$("#"+e.currentTarget.id).attr('data-index');
        var targetAddress = this.userAddresses[index];
        // console.log('removeAddress targetAddress', targetAddress);

        if(!targetAddress.internalid) {
            return;
        }

        if(this.$("#address-form-subview").find('.err').length != 0) {
			this.$("#address-form-subview").find(".global-error-msg").show();
		} else {
			this.$("#address-form-subview").find(".global-error-msg").hide();

            this.isLoading = true;
            this.render();

            var addressData = {
                internalid: targetAddress.internalid
            };

            this.checkoutSS2Model.clear({ silent: true });
            this.checkoutSS2Model.save({
                action: "remove_address",
                addressData: addressData
            }).then(function(res) {
                // console.log('remove_address res', res);
                if(!res.hasError) {
                    self.userAddresses = res.addresses;

                    self.checkoutContextModel.set('userAddressesChangeOrigin', "shipping-address");
                    self.checkoutContextModel.set('userAddresses', Utils.deepCopy(self.userAddresses));
        
                    self.isLoading = false;
                    self.render();
                    
                    if(self.userAddresses.length == 0) {
                        self.setCountryAndStateDropdowns(null, "#first-address");
                    }
                }
            });
        }
    }
    
    CheckoutMdlShippingAddressView.prototype.setCountryAndStateDropdowns = function(thisAddress, parentId) {
        // console.log('setCountryAndStateDropdowns thisAddress', thisAddress);
        // console.log('setCountryAndStateDropdowns parentId', parentId);

        if(thisAddress) {
            // Generate countries select list
            var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
            for(var i = 0; i < this.countries.length; i++) {
                countriesHtml = countriesHtml + "<option value='" + this.countries[i].code +"'";
                if(this.countries[i].code == thisAddress.country) {
                    this.countries[i].selected = true;
                    countriesHtml = countriesHtml +" selected";
                } else {
                    this.countries[i].selected = false;
                }
                countriesHtml = countriesHtml +">" + this.countries[i].name + "</option>";
            }
            this.$(parentId+" #forms-address-country").html(countriesHtml);

            // Generate states select list
            for(var i = 0; i < this.allStates.length; i++) {
                // // console.log("thisAddress.country: " + thisAddress.country);
                
                if(this.allStates[i].countrycode == thisAddress.country) {
                    this.states = this.allStates[i].states;
                    
                    if(this.states.length > 0) {
                        // var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
                        var statesHtml = "";
                        for(var j = 0; j < this.states.length; j++) {
                            statesHtml = statesHtml + "<option value='" + this.states[j].code +"'";
                            if(this.states[j].code == thisAddress.state) {
                                this.states[j].selected = true;
                                statesHtml = statesHtml +" selected";
                            } else {
                                this.states[j].selected = false;
                            }
                            statesHtml = statesHtml +">" + this.states[j].name + "</option>";
                        }
                        this.$(parentId+" #forms-address-state").parent().html(
                            "<select name='forms-address-state' id='forms-address-state' class='form-control' required style='padding: 7px;'></select>" +
                            "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
                        );
                        this.$(parentId+" #forms-address-state").html(statesHtml);
                    } else {
                        this.$(parentId+" #forms-address-state").parent().html(
                            "<input type='text' placeholder='"+Utils.translate('Enter State name')+"' name='forms-address-state' id='forms-address-state' class='form-control' required />" +
                            "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
                        );
                    }

                    break;
                }
            }
        } else {
            var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
            for(var i = 0; i < this.countries.length; i++) {
                this.countries[i].selected = false;
                countriesHtml = countriesHtml + "<option value='" + this.countries[i].code + "'>" + this.countries[i].name + "</option>";
            }
            this.$(parentId+" #forms-address-country").html(countriesHtml);

            this.$(parentId+" #forms-address-state").parent().html(
                "<select name='forms-address-state' id='forms-address-state' class='form-control' required data-test='1' style='padding: 7px;'></select>" +
                "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
            );
            var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
            this.$(parentId+" #forms-address-state").html(statesHtml);
        }

        // console.log('countries', this.countries);
        // console.log('states', this.states);
    }

    CheckoutMdlShippingAddressView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,

            countries: this.countries,
            states: this.states,

            userAddresses: this.userAddresses,

            icons: {
                edit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-edit-black-sm.png')),
                remove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-close-blk-sm.png'))
            }
        }
    }

    return CheckoutMdlShippingAddressView;
});

define('Saralux.Core.Checkout.Module.ShippingMethod.View',	[
	'saralux_core_checkout_mdl_shippingmethod.tpl',

    'Saralux.Core.Checkout.Context.Model',

	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_checkout_mdl_shippingmethod_tpl,

    CheckoutContextModel,

	Utils,
	jQuery,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function CheckoutMdlShippingMethodView(options) {
		SCView.call(this, options);
		// jQuery(window).scrollTop(0);
		var self = this;
        
        this.template = saralux_core_checkout_mdl_shippingmethod_tpl;
		
        this.container = options.container;
		this.cart_component = this.container.getComponent('Cart');
		this.user_profile = this.container.getComponent('UserProfile');

        this.checkoutContextModel = CheckoutContextModel.getInstance();

        this.shippingMethods = [];

        this.checkoutContextModel.on('change:shippingMethod', function() {
            // console.log('CheckoutMdlShippingMethodView: checkoutContextModel changed | shippingMethod', self.checkoutContextModel.get('shippingMethod'));

            self.cart_component.getShipMethods().then(function(shipmethods) {
                self.shippingMethods = Utils.deepCopy(shipmethods);
                for(var i = 0; i < self.shippingMethods.length; i++) {
                    self.shippingMethods[i].selected = false;
                }

                var shippingMethod = self.checkoutContextModel.get('shippingMethod');
                if(shippingMethod) {
                    self.presetShippingMethod(shippingMethod.internalid);
                }

                self.isLoading = false;
                self.render();
            });
        });

        this.isLoading = true;
        jQuery.when(self.cart_component.getShipMethods(), self.cart_component.getShipMethod())
        .done(function (shipmethods, shipmethod) {
            // console.log('shipmethod', shipmethod);
            // console.log('shipmethods', shipmethods);

            self.shippingMethods = Utils.deepCopy(shipmethods);
            for(var i = 0; i < self.shippingMethods.length; i++) {
                self.shippingMethods[i].selected = false;
            }

            if(shipmethod && shipmethod.internalid) {
                self.checkoutContextModel.set('shippingMethod', shipmethod);
            } else {
                self.checkoutContextModel.set('shippingMethod', null);
            }

            self.isLoading = false;
            self.render();
        });
    }

    CheckoutMdlShippingMethodView.prototype = Object.create(SCView.prototype);
    CheckoutMdlShippingMethodView.prototype.constructor = CheckoutMdlShippingMethodView;

    CheckoutMdlShippingMethodView.prototype.getEvents = function () {
        return {
            'click [data-action="m360-slxc-cmdl-sm-set-ship-method"]': 'setShippingMethod'
        }
    }

    CheckoutMdlShippingMethodView.prototype.setShippingMethod = function(e) {
        var index = jQuery(".delivery-methods input[name='checkout-form-delivery-methods']:checked").val();
        // console.log('index', index);
        
        var selectedShipMethod = this.shippingMethods[index];
        // console.log('selectedShipMethod', selectedShipMethod);

        this.checkoutContextModel.set('shippingMethod', selectedShipMethod);

        // Conditional: execute if version >= 21.1
        /* this.cart_component.setShipMethod({ship_method: {internalid: selectedShipMethod.internalid}}).then(function() {
            this.cart_component.showMessage({
                message: 'Shipping method of the order was updated.',
                type: 'info'
            })
        }); */
    }

    CheckoutMdlShippingMethodView.prototype.presetShippingMethod = function(internalid) {
        // console.log('presetShippingMethod internalid', internalid);
        for(var i = 0; i < this.shippingMethods.length; i++) {
            if(parseInt(this.shippingMethods[i].internalid) === parseInt(internalid)) {
                this.shippingMethods[i].selected = true;
            } else {
                this.shippingMethods[i].selected = false;
            }
        }
        // console.log('presetShippingMethod this.shippingMethods', this.shippingMethods);
    }

    CheckoutMdlShippingMethodView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,

            shippingMethods: this.shippingMethods
        }
    }

    return CheckoutMdlShippingMethodView;
});

define('Saralux.Core.Checkout.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function CheckoutSVSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/Checkout/SuiteScript2/Checkout.Service.ss"
                ), true
            );
        }
    }

    CheckoutSVSS2Model.prototype = Object.create(SCModel.prototype);
    CheckoutSVSS2Model.prototype.constructor = CheckoutSVSS2Model;
 
    return CheckoutSVSS2Model;
});

define('Saralux.Core.Checkout.View',	[
	'saralux_core_checkout_accordion.tpl',
	'saralux_core_checkout_single_pager.tpl',
	'saralux_core_checkout_tabbed.tpl',
	'saralux_core_checkout_empty.tpl',

	'Saralux.Core.Cart.Context.Model',
	'Saralux.Core.Checkout.Context.Model',

	'Saralux.Core.Checkout.Module.Cart.View',
	'Saralux.Core.Checkout.Module.ShippingAddress.View',
	'Saralux.Core.Checkout.Module.ShippingMethod.View',
	'Saralux.Core.Checkout.Module.PaymentMethod.View',
	'Saralux.Core.Checkout.Module.BillingAddress.View',
	'Saralux.Core.Checkout.Module.OrderReview.View',

	'Saralux.Core.CommonLibraries.General',
	'Saralux.Core.CommonLibraries.CAPI.Model',
	'Saralux.Core.CommonLibraries.Cart',

	'Saralux.Core.Cart.SS2Model',
	'Saralux.Core.Checkout.SS2Model',

	'Saralux.Core.ExternalLibraries.CryptoJS',

	'PageType.Base.View',
	'Backbone',
	'Utils',
	'jQuery'
], function (
	saralux_core_checkout_accordion_tpl,
	saralux_core_checkout_single_pager_tpl,
	saralux_core_checkout_tabbed_tpl,
	saralux_core_checkout_empty_tpl,

	CartContextModel,
	CheckoutContextModel,

	CheckoutModuleCartView,
	CheckoutModuleShippingAddressView,
	CheckoutModuleShippingMethodView,
	CheckoutModulePaymentMethodView,
	CheckoutModuleBillingAddressView,
	CheckoutModuleOrderReviewView,

	CoreCLGeneral,
	CoreCLCAPIModel,
	CoreCLCart,

	CartSS2Model,
	CheckoutSS2Model,

	CryptoJS,

	PageTypeBaseView,
	Backbone,
	Utils,
	jQuery
) {
	'use strict';
	
	return PageTypeBaseView.PageTypeBaseView.extend({

		template: saralux_core_checkout_single_pager_tpl,

		initialize: function (options) {
			var self = this;

			this.visitorId = CoreCLGeneral.getCookie('NLVisitorId');

			this.checkoutContextModel = CheckoutContextModel.getInstance();
			this.cartContextModel = CartContextModel.getInstance();

			this.cartModel = new CartSS2Model();

			this.coreCLCAPIModel = new CoreCLCAPIModel();

			this.checkoutModel = new CheckoutSS2Model();

			this.userEmail = "";

			this.customerProfile = null;

			this.isLoading = false;

			this.shippingRequired = true;
			this.paymentRequired = true;

			this.cartData = {
				lines: [],
				summary: null
			};

			this.installmentTerms = [];
			this.IPServiceFeeLineId = null;

			this.failedLines = [];
		},

		beforeShowContent: function beforeShowContent () {
			var self = this;

			this.environment_component = this.options.container.getComponent('Environment');
			this.userprofile_component = this.options.container.getComponent('UserProfile');
			this.cart_component = this.options.container.getComponent('Cart');

			this.enableCartPOC = this.environment_component.getConfig("enableCartPOC");
			// this.enableCartPOC = true; // HARDCODING FOR DEV

			this.session = this.environment_component.getSession();

			this.checkoutPageLayout = this.environment_component.getConfig('m360CheckoutPageLayout');

			this.checkoutConfig = {
				installmentPlan: {
					enable: false,
					titleText: this.environment_component.getConfig('IPTitleText')?this.environment_component.getConfig('IPTitleText'):Utils.translate("Installment Plan"),
					checkboxText: this.environment_component.getConfig('IPCheckboxText')?this.environment_component.getConfig('IPCheckboxText'):Utils.translate("Get on an Installment Plan"),
					tooltipText: this.environment_component.getConfig('IPTooltipText')?this.environment_component.getConfig('IPTooltipText'):Utils.translate("A credit card payment plan is a feature that can help you to pay for purchases on your credit card over a fixed period."),
					processingFee: {
						titleText: this.environment_component.getConfig('IPPFTitleText')?this.environment_component.getConfig('IPPFTitleText'):Utils.translate("Processing Fees"),
						amount: 0.00,
						item: null
					}
				}
			}
			this.events = {
				"click [data-action='m360-slxc-co-next-step']": "nextStep",
				"click [data-action='m360-slxc-co-prev-step']": "prevStep",
				"click [data-action='m360-slxc-co-review-order']": "gotoReviewOrder",
				"click [data-action='m360-slxc-co-cancel-review-order']": "cancelReviewOrder",
				'click [data-action="m360-slxc-co-submit-order"]': 'validateAndSubmitOrder',
				"change [data-change='accordion-radio-change']": "accordionRadioChange"
			};

			if(this.checkoutPageLayout) {
				switch(this.checkoutPageLayout) {
					case 'Accordion':
						this.template = saralux_core_checkout_accordion_tpl;
						break;
					case 'Tabbed':
						this.template = saralux_core_checkout_tabbed_tpl;
						break;
					case 'Single Pager':
						this.template = saralux_core_checkout_single_pager_tpl;
						break;
					default:
						this.template = saralux_core_checkout_accordion_tpl;
						break;
				}
			}

			this.visitorId = CoreCLGeneral.getCookie('NLVisitorId');

			return jQuery.when(
				this.userprofile_component.getUserProfile(),
				this.coreCLCAPIModel.fetch(),
				this.refreshCart(this.options.container),
				this.checkoutModel.save({
					action: "get_data",
					visitorId: this.visitorId
				})
			).done(function (
				profile,
				countriesStates,
				refreshCartRes,
				checkoutData
			) {
				self.isLoggedIn = profile.isloggedin;
				self.isRecognized = profile.isrecognized;
				if(self.isLoggedIn && self.isRecognized) {
					self.customerProfile = profile;

					var countries = [];
					var states = [];

					self.userEmail = profile.email;

					if(countriesStates && (countriesStates.length > 0) && countriesStates[0].countries && countriesStates[0].states) {
						countries = countriesStates[0].countries;
						states = countriesStates[0].states;
					}

					if(checkoutData && (checkoutData.length > 0) && !checkoutData[0].hasError) {
						if(!self.enableCartPOC) {
							var cartData = checkoutData[0].cart;
							self.cartData = {
								lines: cartData.lines,
								summary: cartData.summary
							};
						}

						self.shippingRequired = self.checkIfShippingRequired(self.cartData.lines);

						if(checkoutData[0].checkoutConfig) {
							self.checkoutConfig.installmentPlan.enable = checkoutData[0].checkoutConfig.installmentPlan.enable?true:false;
							self.checkoutConfig.installmentPlan.processingFee.amount = Utils.deepCopy(checkoutData[0].checkoutConfig.installmentPlan.processingFee.amount);
							self.checkoutConfig.installmentPlan.processingFee.item = Utils.deepCopy(checkoutData[0].checkoutConfig.installmentPlan.processingFee.item);
						}

						self.checkoutConfig.installmentPlan.enable = (self.checkoutConfig.installmentPlan.enable && self.checkIfHasIELines(self.cartData.lines));
						if(self.checkoutConfig.installmentPlan.enable) {
							self.IPServiceFeeLineId = self.getServiceFeeLineId(self.cartData.lines, "InstallmentPlan");
							self.installmentTerms = checkoutData[0].ppTerms;
						}

						if(!self.shippingRequired) {
							var removeCost = self.cartData.summary.shippingCost + self.cartData.summary.handlingCost;

							self.cartData.summary.shippingCost = 0.00;
							self.cartData.summary.estShippingCost = 0.00;
							self.cartData.summary.handlingCost = 0.00;

							self.cartData.summary.total -= parseFloat(removeCost);
						}

						if(self.cartData.lines == 0) {
							self.template = saralux_core_checkout_empty_tpl;
						}
					}

					var allowInvoice = false;
					for(var i = 0; profile.customfields && i < profile.customfields.length; i++) {
						if(profile.customfields[i].id == "custentity_slxc_allow_inv_for_online_ord") {
							if(profile.customfields[i].value == true) {
								allowInvoice = true;
							} else {
								allowInvoice = false;
							}
							break;
						}
					}

					self.submodules = {
						orderReview: new CheckoutModuleOrderReviewView({
							container: self.options.container,
							singlePager: (self.checkoutPageLayout == "Single Pager")?true:false,
							paymentTerms: profile.paymentterms,
							shippingRequired: self.shippingRequired,
							failedLines: self.failedLines,
							parent: self
						})
					}

					var name = "";
					if(self.customerProfile.firstname) {
						name = self.customerProfile.firstname;
						if(self.customerProfile.lastname) {
							name += " " + self.customerProfile.lastname;
						}
					} else if(self.customerProfile.lastname) {
						name = self.customerProfile.lastname;
					}

					var customerInfo = {
						name: name, 
						email: self.customerProfile.email,
						phone: (self.customerProfile.phoneinfo && self.customerProfile.phoneinfo.phone)?self.customerProfile.phoneinfo.phone:""
					};

					self.childViews = {
						'Saralux.Checkout.Module.OrderReview': function() {
							return self.submodules.orderReview
						},
						'Saralux.Checkout.Module.Cart': function() {
							return new CheckoutModuleCartView({
								container: self.options.container,
								cartData: self.cartData,
								shippingRequired: self.shippingRequired,
								checkoutConfig: self.checkoutConfig,
								parent: self
							});
						},
						'Saralux.Checkout.Module.ShippingAddress': function() {
							return new CheckoutModuleShippingAddressView({
								container: self.options.container,
								countries: countries,
								states: states,
								checkoutConfig: self.checkoutConfig,
								customerInfo: customerInfo,
								parent: self
							});
						},
						'Saralux.Checkout.Module.ShippingMethod': function() {
							return new CheckoutModuleShippingMethodView({
								container: self.options.container,
								checkoutConfig: self.checkoutConfig,
								parent: self
							});
						},
						'Saralux.Checkout.Module.PaymentMethod': function() {
							return new CheckoutModulePaymentMethodView({
								container: self.options.container,
								allowInvoice: allowInvoice,
								balance: (!isNaN(profile.balance))?-(profile.balance):0.00,
								paymentTerms: profile.paymentterms,
								checkoutConfig: self.checkoutConfig,
								installmentTerms: self.installmentTerms,
								IPServiceFeeLineId: self.IPServiceFeeLineId,
								customerInfo: customerInfo,
								parent: self
							});
						},
						'Saralux.Checkout.Module.BillingAddress': function() {
							return new CheckoutModuleBillingAddressView({
								container: self.options.container,
								shippingRequired: self.shippingRequired,
								countries: countries,
								states: states,
								checkoutConfig: self.checkoutConfig,
								customerInfo: customerInfo,
								parent: self
							});
						}
					}

					if(!Utils.isInCheckout()) {
						var m360CheckoutURL = self.getM360CheckoutURL();
						Backbone.history.location.assign(m360CheckoutURL);
					}
				} else {
					var loginURL = CoreCLGeneral.getLoginURL(self.environment_component);
					Backbone.history.location.assign(loginURL);
				}
			});
		},

		refreshCart: function (container) {
			var self = this;

			if(!this.enableCartPOC) {
				return jQuery.Deferred().resolve();
			}

			this.deferred1 = jQuery.Deferred();
			this.deferred2 = jQuery.Deferred();

			this.deferred1 = jQuery.when(
				this.cart_component.getLines(), 
				this.cart_component.getPromotions(), 
				this.cart_component.getSummary()
			).done(function(
				lines,
				promotions,
				summary
			) {
				self.fetchAndFormatCartSummary(summary, promotions);
				self.fetchAndFormatCartLines(lines, container);

				self.cartContextModel.set('cartData', self.cartData);
			});

			return jQuery.when(this.deferred1, this.deferred2);
		},

		fetchAndFormatCartSummary: function (summary, promotions) {
			this.cartData.summary = CoreCLCart.formatCartSummary(summary, promotions);
		},

		fetchAndFormatCartLines: function (lines, container) {
			var self = this;
			
			if(lines.length > 0) {
				var itemIds = [];
				for(var i = 0; i < lines.length; i++) {
					itemIds.push(lines[i].item.internalid);
				};

				this.cartModel.save({
					action: "get_items_info",
					itemIds: itemIds
				}).done(function(res) {
					if(!res.hasError && res.data) {
						var itemsInfo = (res.data && res.data.itemsInfo)?res.data.itemsInfo:null;
						
						if(itemsInfo) {
							self.cartData.lines = CoreCLCart.formatCartLines(lines, itemsInfo, container);
						}
	
						self.deferred2.resolve();
					}
				});
			} else {
				this.cartData.lines = [];
				this.deferred2.resolve();
			}
		},

		accordionRadioChange: function (e) {
			if(this.$(e.currentTarget).is(':checked')){
				this.$(e.currentTarget).parents(".step-view").find(".collapsable-box").addClass("completed");
			}
		},

		checkIfShippingRequired: function (lines) {
			var shippable = [], nonShippable = [];
	
			for(var i = 0; lines && i < lines.length; i++) {
				var thisLine = lines[i];
	
				if(thisLine.isFulfillable !== undefined) {
					if(thisLine.isFulfillable) {
						shippable.push(thisLine);
					} else {
						nonShippable.push(thisLine);
					}
				} else {
					shippable.push(thisLine);
				}
			}
	
			if(shippable && (shippable.length > 0)) {
				return true;
			} else {
				return false;
			}
		},

		checkIfHasIELines: function (lines) {
			var hasIELines = false;
	
			for(var i = 0; lines && i < lines.length; i++) {
				var thisLine = lines[i];
	
				if(thisLine.installmentEnabled) {
					hasIELines = true;
					break;
				}
			}
	
			return hasIELines;
		},

		getServiceFeeLineId: function (lines, type) {
			var serviceFeeLineId = null;
	
			for(var i = 0; lines && i < lines.length; i++) {
				var thisLine = lines[i];

				if(thisLine.scOptions && thisLine.scOptions.serviceFee && thisLine.scOptions.serviceFee == type) {
					serviceFeeLineId = thisLine.lineId;
					break;
				}
			}
	
			return serviceFeeLineId;
		},

		nextStep: function(e) {
			var nextStep = jQuery("#"+e.currentTarget.id).attr('data-next-step');
			
			var isStepValid = false;

			switch(nextStep) {
				case "step-2":
					var validateSA = this.validateSA();
					isStepValid = validateSA;
					break;
				case "step-3":
					var validateSM = this.validateSM();
					isStepValid = validateSM;
					break;
				case "step-4":
					var validatePM = this.validatePM();
					var validateBA = this.validateBA();
					isStepValid = (validatePM && validateBA);
					break;
				default:
					// console.log('invalid step');
			}

			if(isStepValid) {
				if(this.checkoutPageLayout == "Accordion") {
					this.$(".confirmation-info").hide();
					this.$(".pre-confirm-form").show();
					this.$(".step-view .collapsable-box").addClass("collapsed");
					this.$(".step-view .collapsable-wrapper").removeClass("in");
					this.$("." + nextStep + "-body .collapsable-box").removeClass("collapsed");
					this.$("." + nextStep + "-body .collapsable-wrapper").addClass("in");
					jQuery('html, body').animate({
						scrollTop: $("." + nextStep + "-body").offset().top - 25
					}, 1000);
				} else {
					this.$(".step-view").hide();
					this.$("."+nextStep+"-body").show();
					this.$("."+nextStep).removeClass("process-notstarted");
					this.$("."+nextStep).addClass("in-process");
					this.$("."+nextStep).prevAll().removeClass("in-process");
					this.$("."+nextStep).prevAll().addClass("process-completed");
					this.$("."+nextStep).prevAll().removeClass("process-notstarted");
		
					// jQuery(window).scrollTop(0);
					jQuery('html, body').animate({
						scrollTop: $("." + nextStep + "-body").offset().top - 175
					}, 500);
				}
			}
		},

		prevStep: function(e) {
			var prevStep = this.$("#"+e.currentTarget.id).attr('data-prev-step');
			
			var isStepValid = false;

			switch(prevStep) {
				case "step-1":
					var validateSM = this.validateSM();
					isStepValid = validateSM;
					break;
				case "step-2":
					var validatePM = this.validatePM();
					var validateBA = this.validateBA();
					isStepValid = (validatePM && validateBA);
					break;
				default:
					// console.log('invalid step');
			}

			if(isStepValid) {
				if(this.checkoutPageLayout == "Accordion") {
					this.$(".confirmation-info").hide();
					this.$(".pre-confirm-form").show();
					this.$(".step-view .collapsable-box").addClass("collapsed");
					this.$(".step-view .collapsable-wrapper").removeClass("in");
					this.$("." + prevStep + "-body .collapsable-box").removeClass("collapsed");
					this.$("." + prevStep + "-body .collapsable-wrapper").addClass("in");
					jQuery('html, body').animate({
						scrollTop: $("." + prevStep + "-body").offset().top - 25
					}, 1000);
				} else {
					this.$(".step-view").hide();
					this.$("."+prevStep+"-body").show();
					this.$("."+prevStep).removeClass("process-completed");
					this.$("."+prevStep).addClass("in-process");
					this.$("."+prevStep).nextAll().addClass("process-notstarted");
					this.$("."+prevStep).nextAll().removeClass("in-process");
					this.$("."+prevStep).nextAll().removeClass("process-completed");
		
					jQuery('html, body').animate({
						scrollTop: $("." + prevStep + "-body").offset().top - 175
					}, 500);
				}
			}
		},
		
		gotoReviewOrder: function(e) {
			this.$("#checkout-content-section").find("p").removeClass('err');

			var validateSA = true;
			var validateSM = true;

			if(this.shippingRequired) {
				validateSA = this.validateSA();
				validateSM = this.validateSM();
			}

			var validatePM = this.validatePM();
			var validateBA = this.validateBA();

			if(validateSA && validateSM && validatePM && validateBA) {
				var self = this;

				this.$("#review-error").hide();

				var billingAddress = this.checkoutContextModel.get('billingAddress');
				var shippingAddress = this.checkoutContextModel.get('shippingAddress');

				if(billingAddress.internalid) {

					if(this.shippingRequired) {
						var saData = {
							address_id: shippingAddress.internalid+""
						};
						var baData = {
							address_id: billingAddress.internalid+""
						};

						self.showLoader();

						jQuery.when(this.cart_component.setShipAddress(saData), this.cart_component.setBillAddress(baData))
						.done(function () {
							self.fetchAndUpdateSummary();
						});
					} else {
						var baData = {
							address_id: billingAddress.internalid+""
						};

						self.showLoader();

						jQuery.when(this.cart_component.setBillAddress(baData))
						.done(function () {
							self.fetchAndUpdateSummary();
						});
					}
				} else {
					var sameAsShippingAddress = false;
					
					if(this.shippingRequired) {
						sameAsShippingAddress = this.$("#checkout-mdl-billingaddress #mdl-ba-same-as-shipping-address").prop('checked');
					}

					var addresses = [];

					if(this.shippingRequired && sameAsShippingAddress) {
						addresses.push({
							fullname: this.$("#checkout-mdl-shippingaddress #forms-address-full-name").val(),
							company: this.$("#checkout-mdl-shippingaddress #forms-address-company").val(),
							phone: this.$("#checkout-mdl-shippingaddress #forms-address-phone").val(),
							addr1: this.$("#checkout-mdl-shippingaddress #forms-address-address-1").val(),
							addr2: this.$("#checkout-mdl-shippingaddress #forms-address-address-2").val(),
							city: this.$("#checkout-mdl-shippingaddress #forms-address-city").val(),
							zip: this.$("#checkout-mdl-shippingaddress #forms-address-zip").val(),
							state: this.$("#checkout-mdl-shippingaddress #forms-address-state").val(),
							country: this.$("#checkout-mdl-shippingaddress #forms-address-country").val(),
							countryText: this.$("#checkout-mdl-shippingaddress #forms-address-country option:checked").text(),
							isresidential: this.$("#checkout-mdl-shippingaddress #forms-address-is-residential-address").prop("checked"),
							defaultshipping: true,
							defaultbilling: true
						});
					} else if(this.shippingRequired && !sameAsShippingAddress) {
						var ipShippingAddress = {
							fullname: this.$("#checkout-mdl-shippingaddress #forms-address-full-name").val(),
							company: this.$("#checkout-mdl-shippingaddress #forms-address-company").val(),
							phone: this.$("#checkout-mdl-shippingaddress #forms-address-phone").val(),
							addr1: this.$("#checkout-mdl-shippingaddress #forms-address-address-1").val(),
							addr2: this.$("#checkout-mdl-shippingaddress #forms-address-address-2").val(),
							city: this.$("#checkout-mdl-shippingaddress #forms-address-city").val(),
							zip: this.$("#checkout-mdl-shippingaddress #forms-address-zip").val(),
							state: this.$("#checkout-mdl-shippingaddress #forms-address-state").val(),
							country: this.$("#checkout-mdl-shippingaddress #forms-address-country").val(),
							countryText: this.$("#checkout-mdl-shippingaddress #forms-address-country option:checked").text(),
							isresidential: this.$("#checkout-mdl-shippingaddress #forms-address-is-residential-address").prop("checked"),
							defaultshipping: true,
							defaultbilling: false
						}
						var ipBillingAddress = {
							fullname: this.$("#checkout-mdl-billingaddress #forms-address-full-name").val(),
							company: this.$("#checkout-mdl-billingaddress #forms-address-company").val(),
							phone: this.$("#checkout-mdl-billingaddress #forms-address-phone").val(),
							addr1: this.$("#checkout-mdl-billingaddress #forms-address-address-1").val(),
							addr2: this.$("#checkout-mdl-billingaddress #forms-address-address-2").val(),
							city: this.$("#checkout-mdl-billingaddress #forms-address-city").val(),
							zip: this.$("#checkout-mdl-billingaddress #forms-address-zip").val(),
							state: this.$("#checkout-mdl-billingaddress #forms-address-state").val(),
							country: this.$("#checkout-mdl-billingaddress #forms-address-country").val(),
							countryText: this.$("#checkout-mdl-billingaddress #forms-address-country option:checked").text(),
							isresidential: this.$("#checkout-mdl-billingaddress #forms-address-is-residential-address").prop("checked"),
							defaultshipping: false,
							defaultbilling: true
						}

						if((ipShippingAddress.fullname == ipBillingAddress.fullname) &&
						(ipShippingAddress.company == ipBillingAddress.company) &&
						(ipShippingAddress.phone == ipBillingAddress.phone) &&
						(ipShippingAddress.addr1 == ipBillingAddress.addr1) &&
						(ipShippingAddress.addr2 == ipBillingAddress.addr2) &&
						(ipShippingAddress.city == ipBillingAddress.city) &&
						(ipShippingAddress.zip == ipBillingAddress.zip) &&
						(ipShippingAddress.state == ipBillingAddress.state) &&
						(ipShippingAddress.country == ipBillingAddress.country)) {
							ipShippingAddress.defaultbilling = true;
							addresses.push(ipShippingAddress);
						} else {
							addresses.push(ipShippingAddress);
							addresses.push(ipBillingAddress);
						}
					} else {
						addresses.push({
							fullname: this.$("#checkout-mdl-billingaddress #forms-address-full-name").val(),
							company: this.$("#checkout-mdl-billingaddress #forms-address-company").val(),
							phone: this.$("#checkout-mdl-billingaddress #forms-address-phone").val(),
							addr1: this.$("#checkout-mdl-billingaddress #forms-address-address-1").val(),
							addr2: this.$("#checkout-mdl-billingaddress #forms-address-address-2").val(),
							city: this.$("#checkout-mdl-billingaddress #forms-address-city").val(),
							zip: this.$("#checkout-mdl-billingaddress #forms-address-zip").val(),
							state: this.$("#checkout-mdl-billingaddress #forms-address-state").val(),
							country: this.$("#checkout-mdl-billingaddress #forms-address-country").val(),
							countryText: this.$("#checkout-mdl-billingaddress #forms-address-country option:checked").text(),
							isresidential: this.$("#checkout-mdl-billingaddress #forms-address-is-residential-address").prop("checked"),
							defaultshipping: true,
							defaultbilling: true
						});
					}

					this.checkoutModel.clear({ silent: true });
					this.checkoutModel.save({
						action: "add_addresses",
						addresses: addresses
					}).then(function(res) {
						if(!res.hasError && (res.saInternalId || res.baInternalId)) {
							if(self.shippingRequired) {
								var saData = {
									address_id: res.saInternalId+""
								};
								var baData = {
									address_id: res.baInternalId+""
								};

								self.showLoader();
	
								jQuery.when(self.cart_component.setShipAddress(saData), self.cart_component.setBillAddress(baData))
								.done(function () {
									self.fetchAndUpdateSummary();
									var billingAddress = self.checkoutContextModel.get('billingAddress');
									billingAddress.internalid = baData.address_id;
									var shippingAddress = self.checkoutContextModel.get('shippingAddress');
									shippingAddress.internalid = saData.address_id;
								});
							} else {
								var baData = {
									address_id: res.baInternalId+""
								};

								self.showLoader();
	
								jQuery.when(self.cart_component.setBillAddress(baData))
								.done(function () {
									self.fetchAndUpdateSummary();
									var billingAddress = self.checkoutContextModel.get('billingAddress');
									billingAddress.internalid = baData.address_id;
								});
							}
						} else {
							if(res.message) {
								self.$("#review-error .error-message").text(res.message);
							} else {
								self.$("#review-error .error-message").text(
									Utils.translate("There was an issue while performing this operation. Please contact your administrator.")
								);
							}
							self.$("#review-error").show();
						}
					});
				}
				
			} else {
				this.$("#review-error").show();
			}
		},

		showReviewSection: function showReviewSection() {
			this.submodules.orderReview.render();

			this.$(".loader-container").hide();
							
			switch(this.checkoutPageLayout) {
				case 'Accordion':
					this.$(".pre-confirm-form").hide();
					this.$(".confirmation-info").show();
					break;
				case 'Tabbed':
					this.$(".step-view").hide();
					this.$(".step-4-body").show();
					this.$(".step-4").removeClass("process-notstarted");
					this.$(".step-4").addClass("in-process");
					this.$(".step-4").prevAll().removeClass("in-process");
					this.$(".step-4").prevAll().addClass("process-completed");
					this.$(".step-4").prevAll().removeClass("process-notstarted");
					break;
				case 'Single Pager':
					this.$(".step-view").hide();
					this.$(".step-2-body").show();
					this.$(".step-2").removeClass("process-notstarted");
					this.$(".step-2").addClass("in-process");
					this.$(".step-2").prevAll().removeClass("in-process");
					this.$(".step-2").prevAll().addClass("process-completed");
					this.$(".step-2").prevAll().removeClass("process-notstarted");
					break;
				default:
					this.$(".pre-confirm-form").hide();
					this.$(".confirmation-info").show();
					break;
			}
			jQuery('html, body').animate({
				scrollTop: this.$(".confirmation-info").offset().top - 175
			}, 1000);
		},

		cancelReviewOrder: function cancelReviewOrder(e) {
			var prevStep = jQuery("#"+e.currentTarget.id).attr('data-prev-step');
			
			if(this.checkoutPageLayout == "Accordion") {
				this.$(".step-view .collapsable-box").addClass("collapsed");
				this.$(".step-view .collapsable-wrapper").removeClass("in");
				this.$("." + prevStep + "-body .collapsable-box").removeClass("collapsed");
				this.$("." + prevStep + "-body .collapsable-wrapper").addClass("in");

				jQuery('html, body').animate({
					scrollTop: $("." + prevStep + "-body").offset().top - 25
				}, 1000);
			} else {
				this.$(".step-view").hide();
				this.$("."+prevStep+"-body").show();
				this.$("."+prevStep).removeClass("process-completed");
				this.$("."+prevStep).addClass("in-process");
				this.$("."+prevStep).nextAll().addClass("process-notstarted");
				this.$("."+prevStep).nextAll().removeClass("in-process");
				this.$("."+prevStep).nextAll().removeClass("process-completed");
	
				jQuery('html, body').animate({
					scrollTop: $("." + prevStep + "-body").offset().top - 175
				}, 1000);
			}
		},

		validateSA: function validateSA() {
			var shippingAddress = this.checkoutContextModel.get('shippingAddress');

			this.$("#checkout-mdl-shippingaddress .global-error-msg").hide();
			
			var dataMode = this.$("#checkout-mdl-shippingaddress #address-form-subview").attr('data-mode');
			if(dataMode == "add") {
				this.$("#checkout-mdl-shippingaddress #forms-address-full-name").trigger("focusout");
				this.$("#checkout-mdl-shippingaddress #forms-address-phone").trigger("focusout");
				this.$("#checkout-mdl-shippingaddress #forms-address-address-1").trigger("focusout");
				this.$("#checkout-mdl-shippingaddress #forms-address-city").trigger("focusout");
				this.$('#checkout-mdl-shippingaddress #forms-address-state').trigger("change");

				this.validateZip("#checkout-mdl-shippingaddress #forms-address-zip");
			}

			if(this.$("#checkout-mdl-shippingaddress").find('.err').length != 0) {
				this.$("#checkout-mdl-shippingaddress .global-error-msg").show();
				return false;
			} else {
				if(dataMode == "add") {
					this.captureSA();
					return true;
				} else {
					if(shippingAddress) {
						return true;
					} else {
						this.$("#checkout-mdl-shippingaddress .global-error-msg").show();
						return false;
					}
				}
			}
		},

		validateSM: function validateSM() {
			var shippingMethod = this.checkoutContextModel.get('shippingMethod');

			this.$("#checkout-mdl-shippingmethod .global-error-msg").hide();

			if(this.$("#checkout-mdl-shippingmethod").find('.err').length != 0) {
				this.$("#checkout-mdl-shippingmethod .global-error-msg").show();
				return false;
			} else {
				if(shippingMethod) {
					return true;
				} else {
					this.$("#checkout-mdl-shippingmethod .global-error-msg").show();
					return false;
				}
			}
		},

		validatePM: function validatePM() {
			var payViaInvoice = this.checkoutContextModel.get('payViaInvoice');
			var paymentMethodCC = this.checkoutContextModel.get('paymentMethodCC');
			var paymentMethodGC = this.checkoutContextModel.get('paymentMethodGC');
			var paymentMethodIP = this.checkoutContextModel.get('paymentMethodIP');

			this.$("#checkout-mdl-paymentmethod .global-error-msg").hide();
			
			var checkoutData = this.checkoutContextModel.get('checkoutData');
			
			var paymentRequired = true;
			if(checkoutData) {
				if(checkoutData.total > 0) {
					paymentRequired = true;
				} else {
					paymentRequired = false;
				}
			}

			if(paymentRequired) {
				if(payViaInvoice) {
					return true;
				} else {
					var dataMode = this.$("#checkout-mdl-paymentmethod #creditcard-form-subview").attr('data-mode');
		
					if(dataMode == "add") {
						this.$("#checkout-mdl-paymentmethod #forms-creditcard-card-holders-name").trigger("focusout");
						this.$("#checkout-mdl-paymentmethod #forms-creditcard-card-exp").trigger("focusout");
						this.$("#checkout-mdl-paymentmethod #forms-creditcard-card-number").trigger("focusout");
						this.$("#checkout-mdl-paymentmethod #forms-creditcard-card-code").trigger("focusout");
					} else {
						this.$("#checkout-mdl-paymentmethod .selected-card input[name='checkout-form-card-code']").trigger("focusout");

						var cardExpired = false;
						if(!this.$("#checkout-mdl-paymentmethod .selected-card input[name='checkout-form-default-card']").is(':enabled')) {
							cardExpired = true;
						}
					}

					if(this.$("#checkout-mdl-paymentmethod #enable-payment-plan") && this.$("#checkout-mdl-paymentmethod #enable-payment-plan").is(":checked")) {
						this.$("#checkout-mdl-paymentmethod #form-field-payment-plan").trigger("change");
					}
	
					if(cardExpired || this.$("#checkout-mdl-paymentmethod").find('.err').length != 0) {
						this.$("#checkout-mdl-paymentmethod .global-error-msg").show();
						return false;
					} else {
						if(dataMode == "add") {
							this.captureCC(true);
						} else {
							this.captureCC(false);
						}
						return true;
					}
				}
			} else {
				return true;
			}
		},

		validateBA: function validateBA() {
			var billingAddress = this.checkoutContextModel.get('billingAddress');

			this.$("#checkout-mdl-billingaddress .global-error-msg").hide();

			
			var sameAsShippingAddress = this.$("#checkout-mdl-billingaddress #mdl-ba-same-as-shipping-address").prop('checked');

			// Trigger validation for form fields here
			var dataMode = this.$("#checkout-mdl-billingaddress #address-form-subview").attr('data-mode');
			if(!sameAsShippingAddress && dataMode == "add") {
				this.$("#checkout-mdl-billingaddress #forms-address-full-name").trigger("focusout");
				this.$("#checkout-mdl-billingaddress #forms-address-phone").trigger("focusout");
				this.$("#checkout-mdl-billingaddress #forms-address-address-1").trigger("focusout");
				this.$("#checkout-mdl-billingaddress #forms-address-city").trigger("focusout");
				this.$('#checkout-mdl-billingaddress #forms-address-state').trigger("change");

				this.validateZip("#checkout-mdl-billingaddress #forms-address-zip");
			}

			if(this.$("#checkout-mdl-billingaddress").find('.err').length != 0) {
				this.$("#checkout-mdl-billingaddress .global-error-msg").show();
				return false;
			} else {
				if(dataMode == "add") {
					if(sameAsShippingAddress) {
						this.captureBA(true);
					} else {
						this.captureBA(false);
					}
					return true;
				} else {
					if(billingAddress) {
						return true;
					} else {
						// Add error to Shipping Address section via jQuery, ex:
						this.$("#checkout-mdl-billingaddress .global-error-msg").show();
						return false;
					}
				}
			}
		},

		validateZip: function validateZip(elementId) {
			if(this.$(elementId).val() == '') {
				this.$('#forms-address-zip').siblings("p").addClass("err");
			} else {
				var selectedCountryCode = this.$("#forms-address-country").val();
	
				if(selectedCountryCode == 'US') {
					var regex = /^[0-9]{5}(?:-[0-9]{4})?$/;
	
					if (!regex.test(this.$(elementId).val())) {
						this.$('#forms-address-zip').siblings("p").addClass("err");
					} else {
						this.$('#forms-address-zip').siblings("p").removeClass("err");
					}
				} else {
					this.$('#forms-address-zip').siblings("p").removeClass("err");
				}
			}
		},

		captureSA: function captureSA() {
			var addressData = {
				isExisting: false,
                fullname: this.$("#checkout-mdl-shippingaddress #forms-address-full-name").val(),
                company: this.$("#checkout-mdl-shippingaddress #forms-address-company").val(),
                phone: this.$("#checkout-mdl-shippingaddress #forms-address-phone").val(),
                addr1: this.$("#checkout-mdl-shippingaddress #forms-address-address-1").val(),
                addr2: this.$("#checkout-mdl-shippingaddress #forms-address-address-2").val(),
                city: this.$("#checkout-mdl-shippingaddress #forms-address-city").val(),
                zip: this.$("#checkout-mdl-shippingaddress #forms-address-zip").val(),
                state: this.$("#checkout-mdl-shippingaddress #forms-address-state").val(),
                country: this.$("#checkout-mdl-shippingaddress #forms-address-country").val(),
                countryText: this.$("#checkout-mdl-shippingaddress #forms-address-country option:checked").text(),
                isresidential: this.$("#checkout-mdl-shippingaddress #forms-address-is-residential-address").prop("checked"),
                defaultshipping: true,
                defaultbilling: false
            }

			this.checkoutContextModel.set('shippingAddress', addressData);
		},

		captureBA: function captureBA(sameAsShippingAddress) {
			var addressData;

			if(sameAsShippingAddress) {
				addressData = this.checkoutContextModel.get('shippingAddress');
				addressData.defaultbilling = true;
			} else {
				addressData = {
					isExisting: false,
					fullname: this.$("#checkout-mdl-billingaddress #forms-address-full-name").val(),
					company: this.$("#checkout-mdl-billingaddress #forms-address-company").val(),
					phone: this.$("#checkout-mdl-billingaddress #forms-address-phone").val(),
					addr1: this.$("#checkout-mdl-billingaddress #forms-address-address-1").val(),
					addr2: this.$("#checkout-mdl-billingaddress #forms-address-address-2").val(),
					city: this.$("#checkout-mdl-billingaddress #forms-address-city").val(),
					zip: this.$("#checkout-mdl-billingaddress #forms-address-zip").val(),
					state: this.$("#checkout-mdl-billingaddress #forms-address-state").val(),
					country: this.$("#checkout-mdl-billingaddress #forms-address-country").val(),
					countryText: this.$("#checkout-mdl-billingaddress #forms-address-country option:checked").text(),
					isresidential: this.$("#checkout-mdl-billingaddress #forms-address-is-residential-address").prop("checked"),
					defaultshipping: false,
					defaultbilling: true
				}
			}

			this.checkoutContextModel.set('billingAddress', addressData);
		},

		captureCC: function captureCC(isNew) {
			var cardData = null;

			if(isNew) {
				var expDate = this.$("#checkout-mdl-paymentmethod #forms-creditcard-card-exp").val();
				expDate = expDate.replace(/\s/g,''); //removing all whitespaces for exp string
				var cardExp = expDate.split('/');

				var cardNumber = this.$('#checkout-mdl-paymentmethod #forms-creditcard-card-number').val();
				cardNumber = cardNumber.replace(/\s/g,''); //removing all whitespaces for cardNumber string

				cardData = {
					isExisting: false,
					cardNumber: cardNumber,
					last4Digits: cardNumber.substr(cardNumber.length - 4),
					cardName: this.$('#checkout-mdl-paymentmethod #forms-creditcard-card-holders-name').val(),
					paymentMethod: this.$('#checkout-mdl-paymentmethod input[name="forms-creditcard-payment-method"]:checked').val(),
					cardImage: this.$('#checkout-mdl-paymentmethod input[name="forms-creditcard-payment-method"]:checked').next().attr('src'),
					cardSecCode: this.$("#checkout-mdl-paymentmethod #forms-creditcard-card-code").val(),
					expiryMonth: cardExp[0],
					expiryYear: cardExp[1],
					isDefault: true
				}
			} else {
				cardData = this.checkoutContextModel.get('paymentMethodCC');
				var cardSecCode = this.$("#checkout-mdl-paymentmethod .selected-card input[name='checkout-form-card-code']").val();
				cardData.cardSecCode = cardSecCode;
			}

			var paymentMethods = this.environment_component.getSiteSetting('paymentmethods');

			for(var i = 0; paymentMethods && (i < paymentMethods.length); i++) {
				if(parseInt(paymentMethods[i].internalid) == parseInt(cardData.paymentMethod)) {
					cardData.ccProcessor = paymentMethods[i].merchantid;
					break;
				}
			}

			this.checkoutContextModel.set('paymentMethodCC', cardData);
		},

		validateAndSubmitOrder: function validateAndSubmitOrder(e) {
			var self = this;

			var isDisabled = this.$("#"+e.currentTarget.id).attr("disabled");
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				this.$("#"+e.currentTarget.id).attr("disabled", true);
			}

			this.$("#checkout-content-section").find("p").removeClass('err');
			this.$("#validation-error").hide();

			var cartData = this.cartContextModel.get('cartData');
			var cartLines = cartData.lines;

			var validateLines = [];

			for(var i in cartLines) {
				if(cartLines[i].cartValidation && cartLines[i].cartValidation.type) {
					validateLines.push(cartLines[i]);
				}
			}

			if(validateLines.length > 0) {
				var data = {
					action: "validate_order",
					validateLines: validateLines
				};

				this.checkoutModel.clear({ silent: true });
				this.checkoutModel.save(data).then(function(res) {

					if(res.hasError) {
						self.$("#validation-error .error-message").text(res.message);
						self.$("#validation-error").show();
					} else {
						var processOrder = true;
						self.failedLines = [];
						var failedLinesStr = "";

						if(res.data && res.data.validateLines) {
							var validateLines = res.data.validateLines;
							for(var i = 0; validateLines && i < validateLines.length; i++) {
								var thisLine = validateLines[i];
								var cartValidation = thisLine.cartValidation;
								var lineNo = parseInt(i+1);

								if(cartValidation && cartValidation.response) {
									if(cartValidation.response.failure) {
										processOrder = false;
										self.failedLines.push(thisLine);
										failedLinesStr += "Line #"+lineNo+" failed.";
										if(cartValidation.response.message) {
											failedLinesStr += " Reason: " + cartValidation.response.message;
										}
										failedLinesStr += "<br>";
									}
								}
							}
						}

						if(processOrder) {
							self.submitOrder(e);
						} else {
							self.removeFailedLines();
						}
					}
				});
			} else {
				this.submitOrder(e);
			}
		},

		removeFailedLines: function removeFailedLines() {
			var self = this;

			this.cartContextModel.set('blockPopup', true);

			var linesCount = 0;
			var linesLength = this.failedLines.length;

			for(var i = 0; i < this.failedLines.length; i++) {
				this.cart_component.removeLine({
					line_id: this.failedLines[i].lineId
				}).then(function(res) {

					linesCount++;

					if(linesCount == linesLength) {

						self.cartContextModel.set('blockPopup', false);

						self.submodules.orderReview.failedLines = self.failedLines;
						self.submodules.orderReview.render();
						self.submodules.orderReview.$("#cart-expired").modal('show');
					}
				});
			}
		},

		submitOrder: function submitOrder(e) {
			var self = this;

			/* var isDisabled = this.$("#"+e.currentTarget.id).attr("disabled");
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				// console.log('Note: submit button disabled');
				this.$("#"+e.currentTarget.id).attr("disabled", true);
			} */

			var checkoutData = this.checkoutContextModel.get('checkoutData');
			if(checkoutData && checkoutData.total == 0) {
				this.checkoutContextModel.set('payViaInvoice', true);
			}

			var shippingAddress = null;
			var shippingMethod = null;
			if(this.shippingRequired) {
				shippingAddress = this.checkoutContextModel.get('shippingAddress');
				shippingMethod = this.checkoutContextModel.get('shippingMethod');
			}

			var billingAddress = this.checkoutContextModel.get('billingAddress');
			var payViaInvoice = this.checkoutContextModel.get('payViaInvoice');
			var paymentMethodCC = this.checkoutContextModel.get('paymentMethodCC');
			var paymentMethodGC = this.checkoutContextModel.get('paymentMethodGC');
			var paymentMethodIP = this.checkoutContextModel.get('paymentMethodIP');

			var SADataMode = false;
			var sameAsShippingAddress = false;
			if(this.shippingRequired) {
				SADataMode = this.$("#checkout-mdl-shippingaddress #address-form-subview").attr('data-mode');
				sameAsShippingAddress = this.$("#checkout-mdl-billingaddress #mdl-ba-same-as-shipping-address").prop('checked');
			}
			var BADataMode = this.$("#checkout-mdl-billingaddress #address-form-subview").attr('data-mode');
			var cardDataMode = this.$("#checkout-mdl-paymentmethod #creditcard-form-subview").attr('data-mode');

			var newSA = (SADataMode == "add")?true:false;
			var newBA = (BADataMode == "add")?true:false;
			var newCard = (cardDataMode == "add")?true:false;

			var creditCard = null;
			if(!newCard && !payViaInvoice) {
				creditCard = {
					id: paymentMethodCC.id,
					cardSecCode: paymentMethodCC.cardSecCode
				}
			}

			var cartData = this.cartContextModel.get('cartData');
			var cartSummary = (cartData && cartData.summary)?cartData.summary:null;

			var promotions = [];
			if(cartSummary && cartSummary.promotions) {
				promotions = this.formatPromotions(cartSummary.promotions);
			}
			
			var giftCertificates = [];
			if(paymentMethodGC) {
				giftCertificates = this.formatGiftCertificates(paymentMethodGC);
			}

			var session = this.environment_component.getSession();
			var currency = {
				id: session.currency.internalid,
				code: session.currency.code
			};

			var ipProcessingFee = null;
			if(paymentMethodIP && paymentMethodIP.id) {
				try {
					ipProcessingFee = this.checkoutConfig.installmentPlan.processingFee.amount;
				} catch (e) {
					console.error(e);
				}
			}

			var cartLines = [];
			if(this.enableCartPOC) {
				cartLines = this.formatCartLinesForWebOrder(this.cartData.lines, paymentMethodIP);
			}

			var kgPpiMFQ = CoreCLGeneral.getEncryptionKey();
			
			var encCardDetails = null;
			if(newCard) {
				encCardDetails = CryptoJS.encryptValue(JSON.stringify(paymentMethodCC), kgPpiMFQ);
			} else {
				encCardDetails = CryptoJS.encryptValue(JSON.stringify(creditCard), kgPpiMFQ);
			}

			var data = {
				action: "submit_order",
				hasContact: false,
				addAddress: newSA,
				shippingAddress: this.shippingRequired?shippingAddress.internalid:null,
				billingAddress: billingAddress.internalid,
				sameAsShippingAddress: this.shippingRequired?sameAsShippingAddress:false,
				addCard: newCard,
				paymentMethod: payViaInvoice?null:paymentMethodCC.paymentMethod,
				cardDetails: newCard?encCardDetails:null,
				creditCard: newCard?null:encCardDetails,
				ccProcessor: payViaInvoice?null:paymentMethodCC.ccProcessor,
				payViaInvoice: payViaInvoice?true:false,
				paymentTerms: (this.customerProfile && this.customerProfile.paymentterms && payViaInvoice)?this.customerProfile.paymentterms.internalid:null,
				shippingMethod: this.shippingRequired?shippingMethod:null,
				giftCertificates: giftCertificates,
				promotions: promotions,
				currency: currency,
				installmentTerms: (paymentMethodIP && paymentMethodIP.id)?paymentMethodIP.id:null,
				installmentsProcessingFee: ipProcessingFee,
				enableCartPOC: this.enableCartPOC,
				cartLines: cartLines,
				cardEnc: true
			}

			// console.log('submit data', data);
			// return;

			this.checkoutModel.clear({ silent: true });
			this.checkoutModel.save(data).then(function(res) {
				if(!res.hasError) {
					jQuery.get("/app/site/backend/emptycart.nl", function(data) {
						self.cartContextModel.set('cartData', {
							lines: [],
							summary: null
						});

						self.$("#checkout-content-section").hide();
						self.$("#checkout-confirmed-section").show();

						self.cart_component.getPromotions().then(function(promotions) {
							if(promotions && promotions.length > 0) {
								for(var i = 0; i < promotions.length; i++) {
									self.cart_component.removePromotion({ promocode_internalid: promotions[i].internalid });
								}
							}
						});

						jQuery('html, body').animate({
							scrollTop: $("#checkout-confirmed-section").offset().top - 50
						}, 1000);
					});
				}
			});
		},

		formatCartLinesForWebOrder: function formatCartLinesForWebOrder(cartLines, paymentMethodIP) {
			var formattedCartLines = [];

			for(var i = 0; i < cartLines.length; i++) {
				var thisLine = cartLines[i];

				var additionalData = Utils.deepCopy(thisLine.additionalData);
				if(additionalData && additionalData.webInfo) {
					delete additionalData.webInfo;
				}

				var itemOptions = thisLine.options;
				if(itemOptions) {
					var from = "", to = "", toEmail = "", message = "";

					for(var j = 0; itemOptions && j < itemOptions.length; j++) {
						switch(itemOptions[j].cartOptionId) {
							case "GIFTCERTFROM":
								from = (itemOptions[j].value && itemOptions[j].value.internalid)?itemOptions[j].value.internalid:"";
								break;
							case "GIFTCERTRECIPIENTNAME":
								to = (itemOptions[j].value && itemOptions[j].value.internalid)?itemOptions[j].value.internalid:"";
								break;
							case "GIFTCERTRECIPIENTEMAIL":
								toEmail = (itemOptions[j].value && itemOptions[j].value.internalid)?itemOptions[j].value.internalid:"";
								break;
							case "GIFTCERTMESSAGE":
								message = (itemOptions[j].value && itemOptions[j].value.internalid)?itemOptions[j].value.internalid:"";
								break;
							default:
						}
					}
	
					if(from && to && toEmail) {
						var gcInfo = {
							from: from,
							to: to,
							toEmail: toEmail,
							message: message
						};
	
						if(additionalData) {
							additionalData.gcInfo = gcInfo;
						} else {
							additionalData = {
								gcInfo: gcInfo
							};
						}
					}
				}

				formattedCartLines.push({
					itemId: thisLine.id,
					quantity: thisLine.quantity,
					amount: thisLine.amount,
					rate: thisLine.rate,
					additionalData: additionalData,
					installmentEnabled: (paymentMethodIP && paymentMethodIP.id)?thisLine.installmentEnabled:false,
				});
			}
			
			return formattedCartLines;
		},

		formatAddress: function formatAddress(address, newAddress) {
			var addressee = "", attention = "";
			if(address.company) {
				addressee = address.company;
				attention = address.fullname;
			} else {
				addressee = address.fullname;
			}

			return {
				addressee: addressee,
				attention: attention,
				addr1: address.addr1,
				addr2: address.addr2,
				phone: address.phone,
				country: address.country,
				city: address.city,
				state: address.state,
				zip: address.zip,
				lineId: newAddress?null:address.lineId
			}
		},

		formatPromotions: function formatPromotions(promotions) {
			var formattedPromotions = [];

			for(var i = 0; i < promotions.length; i++) {
				if(promotions[i].isvalid) {
					formattedPromotions.push({
						id: promotions[i].extras.promocodeid,
						code: promotions[i].code,
						type: promotions[i].type
					});
				}
			}

			return formattedPromotions;
		},

		formatGiftCertificates: function formatGiftCertificates(giftCertificates) {
			var formattedGiftCertificates = [];

			for(var i = 0; i < giftCertificates.length; i++) {
				formattedGiftCertificates.push({
					id: giftCertificates[i].id,
					code: giftCertificates[i].code
				});
			}

			return formattedGiftCertificates;
		},

		showLoader: function showLoader() {
			jQuery(window).scrollTop(0);
			switch(this.checkoutPageLayout) {
				case 'Accordion':
					this.$(".pre-confirm-form").hide();
					this.$(".loader-container").show();
					break;
				case 'Tabbed':
					this.$(".step-view").hide();
					this.$(".loader-container").show();
					break;
				case 'Single Pager':
					this.$(".step-view").hide();
					this.$(".loader-container").show();
					break;
				default:
					this.$(".pre-confirm-form").hide();
					this.$(".loader-container").show();
					break;
			}
		},

		fetchAndUpdateSummary: function fetchAndUpdateSummary() {
			var self = this;

			if(this.enableCartPOC) {
				jQuery.when(
					this.refreshCart(this.options.container)
				).done(function (
					refreshCartRes
				) {
					// console.log('refreshCartRes', refreshCartRes);

					self.cartContextModel.set('showPopup', false);

					var checkoutData = self.checkoutContextModel.get('checkoutData');
					checkoutData = Utils.deepCopy(self.cartData.summary);

					if(!self.shippingRequired) {
						var removeCost = checkoutData.shippingCost + checkoutData.handlingCost;

						checkoutData.shippingCost = 0.00;
						checkoutData.estShippingCost = 0.00;
						checkoutData.handlingCost = 0.00;

						checkoutData.total -= parseFloat(removeCost);
					}

					self.checkoutContextModel.set('checkoutData', checkoutData);
					self.checkoutContextModel.set('recalculateSummary', true);

					self.showReviewSection();
				});
			} else {
				this.cart_component.getSummary().then(function(summary) {
					// console.log('fetchAndUpdateSummary summary', summary);
	
					self.cartModel.clear({ silent: true });
					self.cartModel.save({
						action: "sync_cart",
						visitorId: self.visitorId,
						currency: self.session.currency.internalid,
						summary: summary,
						updatePromotions: false,
						forceLinesUpdate: false,
						forceSummaryUpdate: true
					}).done(function(res) {
						// console.log('sync_cart res', res);
	
						self.cartContextModel.set('showPopup', false);
						if(res.lines && res.summary) {
							self.cartContextModel.set('cartData', {
								lines: res.lines,
								summary: res.summary
							});
	
							var checkoutData = self.checkoutContextModel.get('checkoutData');
							checkoutData = Utils.deepCopy(res.summary);
	
							if(!self.shippingRequired) {
								var removeCost = checkoutData.shippingCost + checkoutData.handlingCost;
	
								checkoutData.shippingCost = 0.00;
								checkoutData.estShippingCost = 0.00;
								checkoutData.handlingCost = 0.00;
	
								checkoutData.total -= parseFloat(removeCost);
							}
	
							self.checkoutContextModel.set('checkoutData', checkoutData);
							self.checkoutContextModel.set('recalculateSummary', true);
	
							self.showReviewSection();
						}
					});
				});
			}

		},

		getM360CheckoutURL: function getM360CheckoutURL() {
			var touchpoints = this.environment_component.getSiteSetting("touchpoints");

			var checkoutBaseURL = touchpoints.checkout;
			checkoutBaseURL = checkoutBaseURL.split("?")[0];

			var m360CheckoutURL = checkoutBaseURL+"#m360-checkout";

			return m360CheckoutURL;
		},

		getContext: function getContext() {
			var termsAndConditionsDocLableText = this.environment_component.getConfig('termsAndConditionsLabelText');
			var termsAndConditionsDocLinkText = this.environment_component.getConfig('termsAndConditionsLinkText');
			var termsAndConditionsDocLink = this.environment_component.getConfig('termsAndConditionsDoc');
			this.paymentRequired = (this.cartData && this.cartData.summary && this.cartData.summary.total > 0)?true:false;

			return {
				termsAndConditionsDocLableText: termsAndConditionsDocLableText,
				termsAndConditionsDocLinkText: termsAndConditionsDocLinkText,
				termsAndConditionsDocLink: termsAndConditionsDocLink,
				shippingRequired: this.shippingRequired,
				paymentRequired: this.paymentRequired,
				userEmail: this.userEmail,
				detailsReceived: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received-2.png')),
				icons: {
					icnSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-success.png')),
					icnWhiteTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-white-tick.png')),
					icnEditBlackSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-edit-black-sm.png'))
				}
			};
		}
	});
});


define('Saralux.Core.Checkout',   [
	'Saralux.Core.Checkout.View',

	'Saralux.Core.CommonLibraries.General',

	'Backbone',
	'Utils'
],   function (
	CheckoutView,

	CoreCLGeneral,

	Backbone,
	Utils
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var self = this;

				this.environment_component = container.getComponent('Environment');
				var isM360CartEnabled = CoreCLGeneral.isM360CartCheckout(this.environment_component);
				// isM360CartEnabled = true;

				if(isM360CartEnabled) {
					// Setup redirection for the M360 Checkout flow
					var checkout_component = container.getComponent('Checkout');
					if(checkout_component) {
						checkout_component.on('beforeShowContent', function(event) {
							// console.log('checkout_component beforeShowContent', event);
							// console.log('checkout_component beforeShowContent (Backbone.history.fragment)', Backbone.history.fragment);
							if(Backbone.history.fragment != "m360-checkout") {
								// console.log('Saralux.Core.Checkout.js redirecting...');
								var m360CheckoutURL = self.getM360CheckoutURL(container);
								Backbone.history.location.assign(m360CheckoutURL);
							}
						});
					}
					
					// Setup Redirection
					/* Backbone.history.on('route', function(res) {
						if(Utils.isInCheckout()) {
							// console.log('route changed, in checkout', Backbone.history.fragment);
							if(Backbone.history.fragment != "m360-checkout") {
								var m360CheckoutURL = self.getM360CheckoutURL(container);
								Backbone.history.location.assign(m360CheckoutURL);
							}
						} else {
							// console.log('route changed, in shopping', Backbone.history.fragment);
							if(Backbone.history.fragment == "cart") {
								var m360CartURL = self.getM360CartURL(container);
								Backbone.history.location.assign(m360CartURL);
							}
						}
					}); */
	
					var PageType = container.getComponent('PageType');
					if(PageType) {
						PageType.registerPageType({
							name: 'M360_Checkout_View',
							view: CheckoutView,
							options: { container: container },
							routes: ['m360-checkout']
						});
					}
				}
			} catch (e) {
				console.error('Error: Saralux.Core.Checkout', e.toString());
			}
		},

		getM360CheckoutURL: function getM360CheckoutURL() {
			var touchpoints = this.environment_component.getSiteSetting("touchpoints");
			// console.log('touchpoints', touchpoints);

			var checkoutBaseURL = touchpoints.checkout;
			// // console.log("checkoutBaseURL", checkoutBaseURL);
			checkoutBaseURL = checkoutBaseURL.split("?")[0];
			// // console.log("checkoutBaseURL", checkoutBaseURL);

			var m360CheckoutURL = checkoutBaseURL+"#m360-checkout";
			// // console.log("m360CheckoutURL", m360CheckoutURL);

			return m360CheckoutURL;
		}
	};
});


define("Saralux.Core.CommonLibraries.CAPI.Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelModule,
    Utils
) {
    "use strict";

    return Backbone.Model.extend({
    // return SCModelModule.SCModel.extend({
		urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "services/CommonLibraries.CAPI.Service.ss" // 1.0 service
            )
        )
	});
});

define("Saralux.Core.CommonLibraries.Cart", [
	'jQuery'
], function(
	jQuery
) {
    
    "use strict";

    function formatCartLines(lines, itemsInfo, container) {
        var self = this;

        var environment_component = container.getComponent("Environment");

        var priceLevelEnabled = environment_component.getConfig('priceLevel.enabled');
        var defaultPriceLevel = environment_component.getConfig('priceLevel.default');
        var defaultImageURL = environment_component.getConfig('imageNotAvailable');

        this.placeholderItemID = environment_component.getConfig('placeholderItemID');

        var formattedLines = [];

        for(var i = 0; i < lines.length; i++) {
            var thisLine = lines[i];

            if(parseInt(thisLine.item.internalid) == self.placeholderItemID) {
                continue;
            }

            var additionalData = getAdditionalData(thisLine);
            var options = getFilteredOptions(thisLine.options);

            var allowSTRate = false;

            var itemClass = "";
            if(itemsInfo && itemsInfo[thisLine.item.internalid] && itemsInfo[thisLine.item.internalid].itemClass) {
                itemClass = itemsInfo[thisLine.item.internalid].itemClass;
            }

            switch(itemClass.name) {
                case "Class":
                    if(additionalData && additionalData.webInfo) {
                        additionalData.webInfo.name = additionalData.webInfo.courseTitle;
                    }
                    break;
                case "Credentialing Program":
                    if(additionalData && additionalData.webInfo) {
                        additionalData.webInfo.name = additionalData.webInfo.credProgTitle;
                    }
                    break;
                case "Test":
                    if(additionalData && additionalData.webInfo) {
                        additionalData.webInfo.name = additionalData.webInfo.testTitle;
                    }
                    break;
                case "Chapter Dues":
                    if(additionalData && additionalData.webInfo) {
                        additionalData.webInfo.name = additionalData.webInfo.chapterTitle;
                    }
                    break;
                case "Merchandise":
                    allowSTRate = true;
                    break;
                default:
            }

            var webInfo = null;
            if(additionalData && additionalData.webInfo) {
                webInfo = additionalData.webInfo;
            }

            var thumbnail = null, sku = null;
            try {
                thumbnail = thisLine.item.extras.keyMapping_thumbnail.url;
                sku = thisLine.item.itemid;
            } catch (e) {
                console.error("Could not access thumbnail/sku");
            }

            if(thumbnail && (thumbnail.indexOf("no_image_available") != -1)) {
                if(webInfo && webInfo.thumbnail) {
                    thumbnail = webInfo.thumbnail;
                } else if(itemClass && itemClass.image) {
                    thumbnail = itemClass.image;
                } else {
                    thumbnail = defaultImageURL;
                }
            }

            var cwRate = thisLine.rate;
            try {
                // cwRate = thisLine.item.extras.keyMapping_comparePriceAgainst;
                if(priceLevelEnabled && defaultPriceLevel) {
                    cwRate = thisLine.item.extras[defaultPriceLevel]?thisLine.item.extras[defaultPriceLevel]:thisLine.rate;
                }
            } catch (error) {
                console.error("Could not get CW Rate");
            }

            var discounts = [];
            var discountsInfo = thisLine.extras.discounts_impact;
            if(discountsInfo && discountsInfo.discounts) {
                discounts = discountsInfo.discounts;
            }

            formattedLines.push({
                id: thisLine.item.internalid,
                lineId: thisLine.internalid,
                name: thisLine.item.displayname,
                quantity: thisLine.quantity,
                rate: thisLine.rate,
                cwRate: cwRate,
                amount: thisLine.amount,
                total: thisLine.extras.total,
                isFulfillable: (typeof thisLine.item.extras.isfulfillable === 'boolean')?thisLine.item.extras.isfulfillable:true,
                options: options,
                strikethroughAmount: (thisLine.amount == thisLine.extras.total)?false:true,
                strikethroughRate: allowSTRate?((cwRate == thisLine.rate)?false:true):false,
                discounts: discounts,
                webInfo: {
                    sku: sku,
                    thumbnail: thumbnail
                },
                scOptions: (additionalData && additionalData.scOptions)?additionalData.scOptions:null,
                itemClass: itemClass,
                m360WebInfo: (additionalData && additionalData.webInfo)?additionalData.webInfo:null,
                transactionType: (additionalData && additionalData.transaction_type)?additionalData.transaction_type:null,
                cartValidation: (additionalData && additionalData.cartValidation)?additionalData.cartValidation:null,
                installmentEnabled: (itemsInfo && itemsInfo[thisLine.item.internalid] && itemsInfo[thisLine.item.internalid].installmentEnabled)?itemsInfo[thisLine.item.internalid].installmentEnabled:false,
                enableMemberPricing: (itemsInfo && itemsInfo[thisLine.item.internalid] && itemsInfo[thisLine.item.internalid].enableMemberPricing)?itemsInfo[thisLine.item.internalid].enableMemberPricing:false,
                allowRemoval: (itemsInfo && itemsInfo[thisLine.item.internalid] && itemsInfo[thisLine.item.internalid].allowRemoval)?itemsInfo[thisLine.item.internalid].allowRemoval:false,
                additionalData: additionalData
            });
        }

        return formattedLines;
    }

    function formatCartSummary(summary, promotions, container) {
        var formattedSummary = {
            subtotal: summary.subtotal,
            discountTotal: summary.discounttotal,
            taxTotal: summary.taxtotal,
            estShippingCost: summary.estimatedshipping,
            shippingCost: summary.shippingcost,
            handlingCost: summary.handlingcost,
            total: summary.total,
            subtotalStr: summary.subtotal+"",
            discountTotalStr: summary.discounttotal+"",
            taxTotalStr: summary.taxtotal+"",
            estShippingCostStr: summary.estimatedshipping+"",
            shippingCostStr: summary.shippingcost+"",
            handlingCostStr: summary.handlingcost+"",
            totalStr: summary.total+"",
            defAddrZipCode: "44212", // TODO
            defAddrCountryCode: "US", // TODO
            promotions: promotions
        };

        return formattedSummary;
    }

    function getAdditionalData(line) {
        var additionalData = null;

        if(line.options && line.options.length > 0) {
            for(var i = 0; i < line.options.length; i++) {
                if(line.options[i].cartOptionId == "custcol_slxc_additional_data") {
                    additionalData = (line.options[i].value && line.options[i].value.internalid)?JSON.parse(line.options[i].value.internalid):null;
                }
            }
        }

        return additionalData;
    }

    function getFilteredOptions(originalOptions) {
        var filteredOptions = [];

        for(var i = 0; originalOptions && i < originalOptions.length; i++) {
            if(originalOptions[i].cartOptionId != "custcol_slxc_additional_data") {
                filteredOptions.push(originalOptions[i]);
            }
        }

        return filteredOptions;
    }

    function isInCart(lines, module, id, arr) {
        var isInCart = false;

        if(lines && lines.length > 0) {
            for(var i = 0; i < lines.length; i++) {
                var additionalData = null;

                if(lines[i].scOptions) {
                    additionalData = lines[i];
                } else {
                    additionalData = lines[i].additionalData;
                }

                if(additionalData) {
                    switch(module) {
                        case "class":
                            if(additionalData.transactionType == "Class"){
                                isInCart = isInCartSLXL(id, additionalData);
                            }
                            break;
                        case "credentialing_program":
                            if(additionalData.transactionType == "Credentialing Program") {
                                isInCart = isInCartSLXR(id, additionalData);
                            } 
                            break;
                        case "coaching_package":
                            if(additionalData.transactionType == "Coaching Package") {
                                isInCart = isInCartSLXH("coaching_package", id, additionalData);
                            }
                            break;
                        case "coaching_session": 
                            // Coaching Sessions module has its own mechanism to validate the cart entries
                            // so it does not need to use this method
                            break;
                        case "camp": 
                            // Module development is incomplete (as of 3/27/2023)
                            break;
                        case "membership": 
                            // Membership module has its own mechanism to validate the cart entry
                            // so it does not need to use this method
                            break;
                        case "job_package": 
                            if(additionalData.transactionType == "Job Package") {
                                isInCart = isInCartSLXCC(id, additionalData);
                            }
                            break;
                        default:
                            console.error("Cannot identify module");
                            return false;
                    }
                }

                if(isInCart) {
                    break;
                }
            }
        }

        if(arr) {
            return arr;
        } else {
            return isInCart;
        }
    }

    function isInCartSLXL(id, additionalData) {
        if(additionalData.scOptions && additionalData.scOptions.classId) {
            if(parseInt(additionalData.scOptions.classId) === parseInt(id)) {
                return true;
            }
        }

        return false;
    }

    function isInCartSLXR(id, additionalData) {
        if(additionalData.scOptions && additionalData.scOptions.credProgId) {
            if(parseInt(additionalData.scOptions.credProgId) === parseInt(id)) {
                return true;
            }
        }

        return false;
    }

    function isInCartSLXCC(id, additionalData) {
        if(additionalData.scOptions && additionalData.scOptions.jobPackageId) {
            if(parseInt(additionalData.scOptions.jobPackageId) === parseInt(id)) {
                return true;
            }
        }

        return false;
    }

    function isInCartSLXH(submodule, id, additionalData) {
        if(submodule == "coaching_package") {
            if(additionalData.scOptions && additionalData.scOptions.id) {
                if(parseInt(additionalData.scOptions.id) === parseInt(id)) {
                    return true;
                }
            }
        }

        return false;
    }

    return {
        formatCartLines: formatCartLines,
        formatCartSummary: formatCartSummary,
        getAdditionalData: getAdditionalData,
        isInCart: isInCart
    }
});

define("Saralux.Core.CommonLibraries.General", [
    'Saralux.Core.ExternalLibraries.CryptoJS',

    'Backbone',

	'jQuery'
], function(
    CryptoJS,

    Backbone,

	jQuery
) {
    
    "use strict";

    function isLicenseValid(moduleName, environment_component) {
        try {
            var uHbYvdYsx = 'kin5wtp20a';

            var m360License = environment_component.getConfig('m360License');
            // console.log(moduleName+'::m360License-encr', m360License);

            m360License = JSON.parse(CryptoJS.decryptValue(m360License, uHbYvdYsx));
            // console.log(moduleName+'::m360License-decr', m360License);

            var moduleExists = false;
            for(var i = 0; m360License.modules && i < m360License.modules.length; i++) {
                // console.log('m360License.modules['+i+'].module', m360License.modules[i].module);
                if(m360License.modules[i].module == moduleName) {
                    moduleExists = true;
                }
            }
            // console.log('moduleExists', moduleExists);
            
            // console.log('SC.ENVIRONMENT.companyId', SC.ENVIRONMENT.companyId);
            // console.log('m360License.expiry', m360License.expiry);

            var companyId = SC.ENVIRONMENT.companyId+"";
            companyId = companyId.toLowerCase();
            companyId = companyId.split("_")[0];

            var licAccountId = m360License.account+"";
            licAccountId = licAccountId.toLowerCase();

            // console.log('companyId', companyId);
            // console.log('licAccountId', licAccountId);

            if((companyId == licAccountId)
            && (new Date(m360License.expiry) > new Date())
            && (moduleExists)) {
                return true;
            } else {
                return false;
            }
        } catch (e) {
            console.error('Error: CommonLibraries.General.js isLicenseValid', e.toString());
            return false;
        }
    }

    function getDefaultSubsidiary(subsidiaries) {
        var defaultSubsidiary = (subsidiaries.length > 0)?subsidiaries[0].internalid:1;
        for(var i = 0; i < subsidiaries.length; i++) {
            if(subsidiaries[i].isdefault == "T") {
                defaultSubsidiary = subsidiaries[i].internalid;
                break;
            }
        }
        return defaultSubsidiary;
    }

    function formatPaymentMethods(paymentMethods) {
        for(var i = 0; i < paymentMethods.length; i++) {
            if(paymentMethods[i].imagesrc.length >= 1) {
                paymentMethods[i].primaryImage = paymentMethods[i].imagesrc[0];	
            } else {
                paymentMethods[i].primaryImage = "";	
            }
        }

        return paymentMethods;
    }

    function getLoginURL(environment_component, additionalParams) {
        var login = environment_component.getSiteSetting('touchpoints.login');
        var currentTouchpoint = environment_component.getConfig('currentTouchpoint');
        var originHash = encodeURIComponent(Backbone.history.fragment);
        // console.log('originHash', originHash);
        if(additionalParams) {
            originHash += encodeURIComponent(additionalParams);
            // console.log('originHash+additionalParams', originHash);
        }

        return login + '&origin=' + currentTouchpoint + '&origin_hash=' + originHash;
    }

    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function setCookie(cname, value, minutes) {
        var expires = "";
        if(minutes) {
            var date = new Date();
            date.setTime(date.getTime() + (minutes*60*60*1000)); // TODO: check the conversion value
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = cname + "=" + (value || "")  + expires + "; path=/";
    }

    function deleteCookie(cname) {
        document.cookie = cname +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }

    function isIndividualM360Checkout(environment_component) {
        try {
            var m360CheckoutPreference = environment_component.getConfig('m360CheckoutPreference');

            if(m360CheckoutPreference == "Individual M360 Checkout") {
                return true;
            } else {
                return false;
            }
        } catch (e) {
            console.error('Error: CommonLibraries.General.js isIndividualM360Checkout', e.toString());
            return false;
        }
    }

    function isSCCartCheckout(environment_component) {
        try {
            var m360CheckoutPreference = environment_component.getConfig('m360CheckoutPreference');

            if(m360CheckoutPreference == "Checkout with SC Cart") {
                return true;
            } else {
                return false;
            }
        } catch (e) {
            console.error('Error: CommonLibraries.General.js isSCCartCheckout', e.toString());
            return false;
        }
    }

    function isM360CartCheckout(environment_component) {
        try {
            var m360CheckoutPreference = environment_component.getConfig('m360CheckoutPreference');

            if(m360CheckoutPreference == "Checkout with M360 Cart") {
                return true;
            } else {
                return false;
            }
        } catch (e) {
            console.error('Error: CommonLibraries.General.js isM360CartCheckout', e.toString());
            return false;
        }
    }

    function handleFilterButtonClick (e) {
        jQuery(e.currentTarget).toggleClass("active");

		if(jQuery(e.currentTarget).hasClass('active')){
			jQuery(e.currentTarget).addClass("black-bordered-button");
			jQuery(e.currentTarget).siblings('.filters-data-view').find('.filters-box').show();
		}
		else{
			jQuery(e.currentTarget).removeClass("black-bordered-button");
			jQuery(e.currentTarget).siblings('.filters-data-view').find('.filters-box').hide();
		}
    }

    // Will format a plain text credit card number to a value with grouped digits in the order of 4
    // Example:
    // Input: 4111111111111111
    // Output: 4111 1111 1111 1111
    function getFormattedCreditCardNumber (cardNumber) {
        return Array.from(cardNumber.replaceAll(/\D/g, '').matchAll(/(\d{0,4})(\d{0,4})(\d{0,4})(\d{0,4})/g))[0].slice(1, 5).join(' ').trim();
    }

    // Will convert a plain text credit card number to a simple mask containing stars (*)
    // The last 4 digits will be plain text
    // Example:
    // Input: 4111111111111111
    // Output: ************1111
    function getMaskedCreditCardNumber (cardNumber) {
        return cardNumber.replace(/\d(?=\d{4})/g, "*");
    }

    // Will convert a pre-existing credit card number mask containing stars (*)
    // to a value containing bullet symbols for displaying in HTML content
    function formatMaskedCreditCardNumber (cardNumber) {
        var formattedCardNumber = Array.from(cardNumber.replace(/ /g,'').matchAll(/([0-9*]{0,4})([0-9*]{0,4})([0-9*]{0,4})([0-9*]{0,4})/g))[0].slice(1, 5).join(' ').trim();
        return formattedCardNumber.replaceAll("*", "&#x2022;");
    }

    function getEncryptionKey() {
        return "?D(G+KbPeShVmYq3s6v9y$B&E)H@McQfTjWnZr4u7w!z%C*F-JaNdRgUkXp2s5v8";
    }

    return {
        isLicenseValid: isLicenseValid,
        getDefaultSubsidiary: getDefaultSubsidiary,
        formatPaymentMethods: formatPaymentMethods,
        getLoginURL: getLoginURL,
        getCookie: getCookie,
        setCookie: setCookie,
        deleteCookie: deleteCookie,
        isIndividualM360Checkout: isIndividualM360Checkout,
        isSCCartCheckout: isSCCartCheckout,
        isM360CartCheckout: isM360CartCheckout,
        handleFilterButtonClick: handleFilterButtonClick,

        getFormattedCreditCardNumber: getFormattedCreditCardNumber,
        getMaskedCreditCardNumber: getMaskedCreditCardNumber,
        formatMaskedCreditCardNumber: formatMaskedCreditCardNumber,

        getEncryptionKey: getEncryptionKey
    }
});

define("Saralux.Core.CommonLibraries.Order.SS2Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelComponent,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/CommonLibraries/SuiteScript2/CommonLibraries.Order.Service.ss"
            ),
            true
        )
    });

    /* var SCModel = SCModelComponent.SCModel;

    function MySCModel() {
        SCModel.call(this);

        // Define properties of the model.
        this.urlRoot = Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/CommonLibraries/SuiteScript2/CommonLibraries.Order.Service.ss"
            ),
            true
        );
    }

    MySCModel.prototype = Object.create(SCModel.prototype);

    MySCModel.prototype.constructor = MySCModel;

    // Return the AMD constructor.
    return MySCModel; */
});

define('Saralux.Core.CommonLibraries.Utilities.Model', [
	'CoreFunctionality.Singleton',

	'Utils',
	'Backbone',
  	'underscore'
],	function(
	Singleton,
	
	Utils,
	Backbone,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		resizeImage: function resizeImage(url, size) {
			if(this.get('environment_component')) {
				var imageSizes = this.get('environment_component').getSiteSetting("imagesizes");
				return Utils.resizeImage(imageSizes || [], url, size);
			} else {
				return Utils.resizeImage([], url, size);
			}
		}
	}, Singleton);
});

define('Saralux.Core.CommonLibraries.Base64', [],
    function() {
        
	var Base64 = {
		_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		encode: function(e) {
			var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t
		},
		decode: function(e) {
			var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t
		},
		_utf8_encode: function(e) {
			e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t
		},
		_utf8_decode: function(e) {
			var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t
		}
	};

	function encode(e) {
		return Base64.encode(e);
	};

	function decode(e) {
		return Base64.decode(e);
	};

	function _utf8_encode(e) {
		return Base64._utf8_encode(e);
	};
	
	function _utf8_decode(e) {
		return Base64._utf8_decode(e);
	};

    return {
		encode: encode,
		decode: decode,
		_utf8_encode: _utf8_encode,
		_utf8_decode: _utf8_decode
    };
});

define('Saralux.Core.CommunitiesSV.RedirectToCommunity.View',	[
	'saralux_core_communitiessv_redirecttocommunity.tpl',
	
	'Utils',
	'SCView',
], function (
	saralux_core_communitiessv_redirecttocommunity_tpl,
	
	Utils,
	SCViewModule,
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function CSVRedirectToCommunityView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_communitiessv_redirecttocommunity_tpl;
        
        this.container = options.container;

        this.environment_component = this.container.getComponent('Environment');

		this.cfgCommunities = {
			image: this.environment_component.getConfig("CPRImage")?this.environment_component.getConfig("CPRImage"):Utils.getAbsoluteUrl(getExtensionAssetsPath('img/images-set-1/img-communities.png')),
			message: this.environment_component.getConfig("CPRMessage")?this.environment_component.getConfig("CPRMessage"):Utils.translate("To access communities, you will be taken to an external site."),
			buttonLabel: this.environment_component.getConfig("CPRButtonLabel")?this.environment_component.getConfig("CPRButtonLabel"):Utils.translate("Take me there"),
			redirectLink: this.environment_component.getConfig("CPRRedirectLink")
		}
    }

    CSVRedirectToCommunityView.prototype = Object.create(SCView.prototype);
    CSVRedirectToCommunityView.prototype.constructor = CSVRedirectToCommunityView;

    CSVRedirectToCommunityView.prototype.getEvents = function () {
        return {
            'change [data-toggle="m360-core-csv-rtc-nw-toggle"]': 'nwToggle'
        };
    }

    CSVRedirectToCommunityView.prototype.nwToggle = function (e) {
		var openInANewWindow = this.$(e.currentTarget).is(":checked");
		
		if(openInANewWindow) {
			this.$("#csv-rtc-redirect-link").attr("target", "_blank");
		} else {
			this.$("#csv-rtc-redirect-link").attr("target", "_self");
		}
	}

    CSVRedirectToCommunityView.prototype.getContext = function () {
        return {
            cfgCommunities: this.cfgCommunities
        }
    }

    return CSVRedirectToCommunityView;
});


define('Saralux.Core.CommunitiesSV',   [
	'Saralux.Core.CommunitiesSV.RedirectToCommunity.View'
],   function (
	CommunitiesSVRedirectToCommunityView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout'); // Extensibility API Component (in this case 'Layout')

				if(layout) {
					layout.registerView('SLXC0016', function() {
						return new CommunitiesSVRedirectToCommunityView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.CommunitiesSV', ex.toString());
			}
		}
	};
});


define('CoreFunctionality.HandlebarsHelpers', [
    'Utils',
    'Handlebars'
], function (
    Utils,
    Handlebars
){
    'use strict';

    function registerCustomHandlebarsHelpers() {
        try {
            Handlebars.registerHelper('m360FormatCurrency', function (amount) {
                return Utils.formatCurrency(amount);
            });
            // A handlebars helper 'formatCurrency' already exists
            // Use that one instead of this one
            // This template can be used to create more custom handlebars helpers if required

            Handlebars.registerHelper('m360IfIsFloat', function(val, options) {
                var fnTrue = options.fn, fnFalse = options.inverse;
            
                return isNaN(parseFloat(val))?fnFalse(this):fnTrue(this);
            });

            Handlebars.registerHelper('m360IfIsInteger', function(val, options) {
                var fnTrue = options.fn, fnFalse = options.inverse;
            
                return isNaN(parseInt(val))?fnFalse(this):fnTrue(this);
            });

            return true;
        } catch (e) {
            console.error('Error: CoreFunctionality.HandlebarsHelpers.js registerCustomHandlebarsHelpers', e.toString());
            return false;
        }
    }

    return {
        registerCustomHandlebarsHelpers: registerCustomHandlebarsHelpers
    }
});

define('Saralux.Core.CoreFunctionality.SampleModel.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function SampleModelSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/CoreFunctionality/SuiteScript2/SampleService.Service.ss"
                ), true
            );
        }
    }

    SampleModelSS2Model.prototype = Object.create(SCModel.prototype);
    SampleModelSS2Model.prototype.constructor = SampleModelSS2Model;
 
    return SampleModelSS2Model;
});

define('CoreFunctionality.SamplePageType.View',	[
	'saralux_core_samplepagetype.tpl',

    'Saralux.Core.CoreFunctionality.SampleModel.SS2Model',
	
	'PageType.Base.View',
], function (
	saralux_core_samplepagetype_tpl,

    SampleModelSS2Model,
	
	PageTypeBaseView
) {
    'use strict';

    return PageTypeBaseView.PageTypeBaseView.extend({

        template: saralux_core_samplepagetype_tpl,

        initialize: function(options) {
            var self = this;

            // declare member objects
            this.model = new SampleModelSS2Model();
            this.data = null;
        },

        beforeShowContent: function beforeShowContent() {
            var self = this;

            // Declare events (if any):
            /* this.events = {
                'click [data-action="m360-slxc-sample-event-action"]': 'callMethod'
            }; */

            // Declare child events (if any):
            /* this.childViews = {
                'ChildView.One': function() {
                    return new ChildViewOne({
                        someVar: true
                    });
                }
            } */

            // You can access the container object like this:
            // It has to be also passed on to the page type when it is declared
            // in the Entry JS of the module
            this.container = this.options.container;

            // You can access components of the extensibility API using the container obj
            this.environment_component = this.container.getComponent('Environment');

            // If you have to fetch something from the backend, then you can simply return the promise
            // that is created by the model -> this will be resolved before rendering the view
            // OR
            // You can simply return jQuery.Deferred().resolve() if you don't need to fetch
            // any data from the backend
            var fetchSomethingFromBackend = true;
            if(fetchSomethingFromBackend) {
                return this.model.save({
                    action: "get_data"
                }).done(function(res) {
                    console.log('res', res);
                    if(res.data) {
                        self.data = res.data;
                    }
                });
            } else {
                return jQuery.Deferred().resolve();
            }
        },

        getContext: function () {
            return {
                message: "Sample Page Type Template"
            }
        }

    });
});

define('Saralux.Core.SampleView.View',	[
	'saralux_core_sampleview.tpl',
	
	'SCView'
], function (
	saralux_core_sampleview_tpl,
	
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function SampleViewView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_sampleview_tpl;
        
		// You can access the container object like this:
        // It has to be passed on to this view when it is created
        // or by the parent view (if any)
        this.container = options.container;

        // You can access components of the extensibility API using the container obj
        this.environment_component = this.container.getComponent('Environment');

        // Declare child events (if any):
        /* this.childViews = {
            'ChildView.One': function() {
                return new ChildViewOne({
                    someVar: true
                });
            }
        } */
    }

    SampleViewView.prototype = Object.create(SCView.prototype);
    SampleViewView.prototype.constructor = SampleViewView;

    SampleViewView.prototype.getEvents = function () {
        // Declare events (if any):
        return {
            // 'click [data-action="m360-slxc-sample-event-action"]': 'callMethod'
        };
    }

    SampleViewView.prototype.getContext = function () {
        return {
            message: "Sample View Template"
        }
    }

    return SampleViewView;
});

define('CoreFunctionality.Singleton', function() {

	'use strict';
	
	var Singleton = {
		getInstance: function () {
			var This = this;
			this.instance = this.instance || new This();
			return this.instance;
		}
	};
	
	return Singleton;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.MainProfile.View',	[
	'saralux_core_dm_us_main_profile.tpl',
    
    'Saralux.Core.MyPortal.Context.Model',
    'Saralux.Core.DashboardModulesSV.SS2Model',

    'Utils',
	'SCView'
], function (
	saralux_core_dm_us_main_profile_tpl,
    
    MyPortalContextModel,
    DashboardModulesSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUSCustomProfileView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_dm_us_main_profile_tpl;
        
        this.parent = options.parent;
        this.container = options.container;
		this.backAction = options.backAction;

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.isLoading = true;

        this.environment_component = this.container.getComponent('Environment');

        this.model = new DashboardModulesSVSS2Model();
        this.socialMediaSiteRows = [];
		this.formData = {
			profileImageUrl: "",
			changeProfileImg: false,
			base64: null
		}
        this.getData();
    }

    DMSVUSCustomProfileView.prototype = Object.create(SCView.prototype);
    DMSVUSCustomProfileView.prototype.constructor = DMSVUSCustomProfileView;

    DMSVUSCustomProfileView.prototype.getEvents = function () {
        return {
            'click [data-action="add-row-click"]' : "addRowClick",
			'click [data-action="remove-row-click"]': "removeRowClick",
            'change [data-change="form-field-social"]': 'validateSocialMediaDropdownValue',
			'focusout [data-focusout="profile-link-focusout"]': 'setSocialMediaLink1',

			'focusout [data-focusout="first-name-required-focusout"]': 'setFirstName',
			'focusout [data-focusout="middle-name-required-focusout"]': 'setMiddleName',
			'focusout [data-focusout="last-name-required-focusout"]': 'setLastName',
			'focusout [data-focusout="phone-number-focusout"]': 'setPhoneNumber',
			'focusout [data-focusout="mobile-number-focusout"]': 'setMobileNumber',
			//'focusout [data-focusout="email-focusout"]': 'setEmail',

			'click [data-action="save-profile-data"]': "saveProfileData",
			'click [data-action="remove-profile-image"]': "removeProfileImage",
			'change [data-change="upload-profile-image"]': "uploadProfileImage"
        };
    }

	
	DMSVUSCustomProfileView.prototype.setFirstName = function (e) {
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.profileData.firstName = this.$(e.currentTarget).val();
		}
	},

	DMSVUSCustomProfileView.prototype.setMiddleName = function (e) {
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.profileData.middleName = this.$(e.currentTarget).val();
		}
	},

	DMSVUSCustomProfileView.prototype.setLastName = function (e) {
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.profileData.lastName = this.$(e.currentTarget).val();
		}
	},

	DMSVUSCustomProfileView.prototype.setPhoneNumber = function (e) {
		var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
		if(this.$(e.currentTarget).val() == '' || !regex.test(this.$(e.currentTarget).val()) ) {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} 
		else{
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.profileData.phoneNumber = this.$(e.currentTarget).val();
		}
	},


	DMSVUSCustomProfileView.prototype.setMobileNumber = function (e) {
		var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
		if(this.$(e.currentTarget).val() != '' && !regex.test(this.$(e.currentTarget).val()) ) {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} 
		else{
			this.$(e.currentTarget).siblings("p").removeClass("err");
			if(this.$(e.currentTarget).val() == '')
				this.profileData.mobileNumber = '';
			else
				this.profileData.mobileNumber = this.$(e.currentTarget).val();
		}
	},

	DMSVUSCustomProfileView.prototype.uploadProfileImage = function(e) {
		var self = this;
		var targetPreview = this.$(e.currentTarget).attr('data-target-preview');
		var fieldId = this.$(e.currentTarget).attr('data-field-id');
		var fileType = e.currentTarget.files[0].type;
		var size = parseInt(Math.floor(e.currentTarget.files[0].size / 1000000));
		if(e.currentTarget.files && e.currentTarget.files[0] && (fileType == "image/jpeg" || fileType == "image/jpg") && size <= 5) {
				var reader = new FileReader();
				reader.onload = function(e) {
						var base64 = e.target.result.split('base64,')[1];
						self.$('#'+targetPreview).css('background-image', 'url('+e.target.result +')');
						self.$('#'+fieldId).val(base64);
						self.$('#'+fieldId).attr('data-changed', "true");

						self.formData.base64 = base64;
						self.formData.profileImageUrl = e.target.result;
						self.formData.changeProfileImg = true;

						self.$('#'+targetPreview).hide();
						self.$('#'+targetPreview).fadeIn(500);
						self.render();
				}
                self.$('.remove-avatar').show();
				reader.readAsDataURL(e.currentTarget.files[0]);
		}
	}

	DMSVUSCustomProfileView.prototype.removeProfileImage = function(e) {
		this.formData.changeProfileImg = true;
		this.formData.base64 = null;
		this.formData.profileImageUrl = null;
		this.render();
	}

    DMSVUSCustomProfileView.prototype.addRowClick = function (e) {	
		var self = this;
		var blankFieldFound = false;

		this.$(".dynamic-inputs #social-media-row").find("p").removeClass('err');

		this.$('.dynamic-inputs #social-media-row').each(function () {
			var socialMediaSiteIndex = self.$(this).find('#form-field-social').val();
			var siteLink = self.$(this).find('#form-field-profile-link').val();

			if(socialMediaSiteIndex == 0) {
				blankFieldFound = true;
				self.$(this).find("#form-field-social").siblings("p").addClass('err');
			}
			var regex = /^(https:\/\/|http:\/\/|ftp:\/\/)([a-zA-Z0-9!._\-$/&%#@*])+[^\s]$/;
			if( siteLink.length == 0 || siteLink.length > 999 || !regex.test(siteLink) ) {
				blankFieldFound = true;
				self.$(this).find("#form-field-profile-link").siblings("p").addClass('err');
			}
		});

		if(!blankFieldFound) {
			this.userSelectedSocialMedia.push({
				id: null,
				socialMediaItem: null,
				socialMediaLink: ''
			});

			this.socialMediaItemIndex++;

			this.render();			
		}
	}

	DMSVUSCustomProfileView.prototype.removeRowClick = function (e) {
		var self = this;
		var rowCount = this.$('#social-row-count').val();
		var index = this.$(e.currentTarget).parents(".individual-row").attr('data-index');
		this.$('#social-row-count').val(--rowCount);


		var socialMediaItemId = this.$(e.currentTarget).parents(".individual-row").attr("data-id");


		var i = -1;

		if(socialMediaItemId == null || socialMediaItemId == undefined || (""+socialMediaItemId).length == 0) {
			i = index;
		} else {
			for(i=0;i<this.userSelectedSocialMedia.length;i++) {
				if(this.userSelectedSocialMedia[i].id == socialMediaItemId) {
					break;
				}
			}
		}

		//update the array which saves the social media items
		this.userSelectedSocialMedia.splice(i, 1);
		this.socialMediaItemIndex--;
 
		//without rendering, take out the required div from the UI
		//this.$(e.currentTarget).parents(".individual-row").remove();
		//this.$(e.currentTarget).parent().parent().remove();
		this.render();

		var counter = 1;
		this.$('.dynamic-inputs').children('div').each(function () {
			counter++;
		});

		this.getSocialMediaData();

		this.socialMediaRowCount = rowCount;
	},

    DMSVUSCustomProfileView.prototype.validateSocialMediaDropdownValue = function (e) {
		var currentlySelectedSocialMediaSiteIndex = this.$(e.currentTarget).val();
		var currentlySelectedSocialMediaSiteName = this.socialMediaNameList[currentlySelectedSocialMediaSiteIndex-1];

		for(var i=0; i<this.socialMediaSiteRows.length; i++){
			if(currentlySelectedSocialMediaSiteName && (this.socialMediaSiteRows[i].socialMediaSiteName != undefined && this.socialMediaSiteRows[i].socialMediaSiteName.text == currentlySelectedSocialMediaSiteName.text) && this.socialMediaSiteRows.length > 1){
				this.$(e.currentTarget).val(0);
			}
		}
		this.getSocialMediaData();
		for(var i=0; i<this.socialMediaSiteRows.length; i++){
			var socialMediaItem = null;
			if (this.socialMediaSiteRows[i].socialMediaSiteName == null){
				socialMediaItem = '';
			}else{
				socialMediaItem = this.socialMediaSiteRows[i].socialMediaSiteName.text;
			}
			if (this.userSelectedSocialMedia[i].id == null){
				this.userSelectedSocialMedia[i].socialMediaItem = socialMediaItem;
				this.userSelectedSocialMedia[i].socialMediaLink = this.socialMediaSiteRows[i].siteLink;
			}
		}
	},

	DMSVUSCustomProfileView.prototype.setSocialMediaLink1 = function (e) {
		var self = this;
		var socialMediaLink = this.$(e.currentTarget).val();
		var index = null;
		index = this.$(e.currentTarget).parent().parent().attr('data-index');
		this.getSocialMediaData();
		//this.sponsorshipProfile.userSelectedSocialMedia = [];
		for(var i=0; i<this.socialMediaSiteRows.length; i++){
			var socialMediaItem = null
			if (this.socialMediaSiteRows[i].socialMediaSiteName == null){
				socialMediaItem = '';
			}else{
				socialMediaItem = this.socialMediaSiteRows[i].socialMediaSiteName.text;
			}
			this.userSelectedSocialMedia[i].socialMediaItem = socialMediaItem;
			this.userSelectedSocialMedia[i].socialMediaLink = this.socialMediaSiteRows[i].siteLink;
		}
	},

    DMSVUSCustomProfileView.prototype.getSocialMediaData = function (e) {
		var self = this;
		this.socialMediaSiteRows = [];
		this.$('.dynamic-inputs #social-media-row').each(function () {
			var socialMediaSiteIndex = self.$(this).find('#form-field-social').val();
			var siteLink = self.$(this).find('#form-field-profile-link').val();
			if(socialMediaSiteIndex >= 0) {
				var socialMediaSiteName = self.socialMediaNameList[socialMediaSiteIndex-1];
				self.socialMediaSiteRows.push({
					socialMediaSiteName: socialMediaSiteName,
					siteLink: siteLink
				});
			}
		});
	},

	DMSVUSCustomProfileView.prototype.saveProfileData = function (e) {
		var self = this;
		this.model.clear({ silent: true });
		this.getSocialMediaData();
		this.$(".dashboardmodulessv-user-settings").find('#form-field-first-name').trigger('focusout');
		this.$(".dashboardmodulessv-user-settings").find('#form-field-middle-name').trigger('focusout');
		this.$(".dashboardmodulessv-user-settings").find('#form-field-last-name').trigger('focusout');

		this.$('.dynamic-inputs #social-media-row').each(function () {
			var socialMediaSiteIndex = self.$(this).find('#form-field-social').val();
			var siteLink = self.$(this).find('#form-field-profile-link').val();

			if(socialMediaSiteIndex == 0) {
				self.$(this).find("#form-field-social").siblings("p").addClass('err');
			}else{
				self.$(this).find("#form-field-social").siblings("p").removeClass('err');
			}

			var regex = /^(https:\/\/|http:\/\/|ftp:\/\/)([a-zA-Z0-9!._\-$/&%#@*])+[^\s]$/;

			if(siteLink.length == 0) {
				self.$(this).find("#form-field-profile-link").siblings("p").addClass('err');
			} else {
				//if(!regex.test(siteLink)) 
				if( siteLink.length > 999 || !regex.test(siteLink)) {
					self.$(this).find("#form-field-profile-link").siblings("p").addClass('err');
				} else {
					self.$(this).find("#form-field-profile-link").siblings("p").removeClass("err");
				}
			}
		});

		if(self.$(".dashboardmodulessv-user-settings").find('.err').length != 0) {
			self.$("#global-error-msg").show();
			setTimeout(function() {
				self.$("#global-error-msg").hide();
			}, 2000);
		}else{
			var isDisabled = this.$(e.currentTarget).attr('disabled');
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				this.$(e.currentTarget).text(Utils.translate("Saving..."));
				this.$(e.currentTarget).attr('disabled', true);
			}
			this.model.save({
				action: "UPDATE_MAIN_PROFILE_DATA",
				parentRecordId: this.customerId,
				customerId: this.customerId,
				profileData: this.profileData,
				socialMediaSiteRows: this.socialMediaSiteRows,
				formData: this.formData
			}).done(function(res) {
				if(!res.hasError){
					self.getData();
					self.$("#form-success-msg").show();
					self.$(e.currentTarget).text(Utils.translate("Save"));
					self.$(e.currentTarget).attr('disabled', false);

					setTimeout(function() {
						self.$("#form-success-msg").hide();
					}, 2000);
				}
				else{
					self.$(e.currentTarget).text(Utils.translate("Save"));
					self.$(e.currentTarget).attr('disabled', false);
					self.$("#global-error-msg").show();
					setTimeout(function() {
						self.$("#global-error-msg").hide();
					}, 2000);
				}
			});
		}
	},

    DMSVUSCustomProfileView.prototype.getData = function () {
        var self = this;
        this.model.clear({ silent: true });
        this.model.save({
            action: "GET_MAIN_PROFILE_DATA",
			customerId: this.customerId
        }).done(function(res) {
            if(!res.hasError){
                self.profileData = res.profileData;
                self.socialMediaNameList = res.socialMediaNameList;
                self.userSelectedSocialMedia = res.userSelectedSocialMedia;

				//self.formData.changeProfileImg = true;
				//self.formData.profileImage = base64;
				self.formData.profileImageUrl = self.profileData.profileImage;
				self.render();

                //console.log("this.profileData - ", self.profileData);
                //console.log("self.socialMediaNameList - ", self.socialMediaNameList);
                //console.log("self.userSelectedSocialMedia - ", self.userSelectedSocialMedia);
				self.getSocialMediaData();
                
            }
        });
    }

    DMSVUSCustomProfileView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            profileData: this.profileData,
            socialMediaNameList: this.socialMediaNameList,
            userSelectedSocialMedia: this.userSelectedSocialMedia,
            socialMediaItemIndex: this.socialMediaItemIndex,
			formData: this.formData,
			backAction: this.backAction,

			icons: {
				icnRemoveSocial: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-incorrect-md.png')),
				icnRemovePic: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-sm.png'))
			}
        }
    }
    return DMSVUSCustomProfileView;
});

define('Saralux.Core.DashboardModulesSV.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function DashboardModulesSVSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/DashboardModulesSV/SuiteScript2/DashboardModulesSV.Service.ss"
                ), true
            );
        }
    }

    DashboardModulesSVSS2Model.prototype = Object.create(SCModel.prototype);
    DashboardModulesSVSS2Model.prototype.constructor = DashboardModulesSVSS2Model;
 
    return DashboardModulesSVSS2Model;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.Addresses.View',	[
    'saralux_core_dm_us_addresses.tpl',

    'Saralux.Core.Forms.Address.View',

    'Saralux.Core.MyPortal.Context.Model',

    'Saralux.Core.DashboardModulesSV.SS2Model',

    'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.CAPI.Model',
	
	'Utils',
	'SCView'
], function (
    saralux_core_dm_us_addresses_tpl,

    FormsAddressView,

    MyPortalContextModel,

    DashboardModulesSVSS2Model,

    CoreCLGeneral,
    CoreCLCAPIModel,
	
	Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUserSettingsAddressesView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_dm_us_addresses_tpl;
        
        this.parent = options.parent;
        this.container = options.container;

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.isLoading = true;

        this.environment_component = this.container.getComponent('Environment');

        this.showChildView = false;
        this.activeView = null;

        this.model = new DashboardModulesSVSS2Model();
        this.capiModel = new CoreCLCAPIModel();

        this.customerAddresses = [];

        self.childViews = {
            'Saralux.Forms.Address': function() {
                return new FormsAddressView({
                    container: options.container,
                    countries: self.countries,
                    allStates: self.allStates,
                    states: self.states,
                    customerInfo: self.customerInfo,
                    calculateShippingEstimate: false,
                    firstAddress: (self.userAddresses && (self.userAddresses.length > 0))?false:true
                });
            }
        }

        this.getCustomerAddresses();
    }

    DMSVUserSettingsAddressesView.prototype = Object.create(SCView.prototype);
    DMSVUserSettingsAddressesView.prototype.constructor = DMSVUserSettingsAddressesView;

    DMSVUserSettingsAddressesView.prototype.getEvents = function () {
        // Declare events (if any):
        return {
            'click [data-action="edit-selected-address"]':"editSelectedAddress",
            'click [data-action="add-new-address"]':"addNewAddress",
            'click [data-action="m360-submit-edit-address-form"]':"submitEditAddressForm",
            'click [data-action="m360-remove-address"]':"removeAddress",
        };
    }

    DMSVUserSettingsAddressesView.prototype.editSelectedAddress = function(e){
        var index = null;
		index = this.$(e.currentTarget).attr('data-index');
        this.selectedAddress = this.customerAddresses[index];
        console.log("Inside editSelectedAddress");
        console.log("selected address is - ", this.selectedAddress);

        this.$("#add-new-addr #forms-address-full-name").val(this.selectedAddress.fullname);
        this.$("#add-new-addr #forms-address-company").val(this.selectedAddress.company);
        this.$("#add-new-addr #forms-address-phone").val(this.selectedAddress.phone);

        this.$("#add-new-addr #forms-address-address-1").val(this.selectedAddress.addr1);
        this.$("#add-new-addr #forms-address-address-2").val(this.selectedAddress.addr2);

        this.$("#add-new-addr #forms-address-city").val(this.selectedAddress.city);
        this.$("#add-new-addr #forms-address-zip").val(this.selectedAddress.zip);
        this.$("#add-new-addr #forms-address-is-residential-address").prop("checked", this.selectedAddress.isresidential);

        this.$("#billing-addr").prop("checked", this.selectedAddress.defaultbilling);
        this.$("#shipping-addr").prop("checked", this.selectedAddress.defaultshipping);

        this.setCountryAndStateDropdowns(this.selectedAddress, "#add-new-addr");
        //this.render();
        //self.$("#settings-tab-2").trigger('click');
        this.$("#add-new-addr").modal("show");
        //this.$(".tab2").show();
        //this.$("#add-new-addr").show();
        //this.$("#add-new-addr").trigger('click');
        //this.render();
    }

    DMSVUserSettingsAddressesView.prototype.setCountryAndStateDropdowns = function(thisAddress, parentId) {

        if(thisAddress) {
            // Generate countries select list
            var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
            for(var i = 0; i < this.countries.length; i++) {
                countriesHtml = countriesHtml + "<option value='" + this.countries[i].code +"'";
                if(this.countries[i].code == thisAddress.country) {
                    this.countries[i].selected = true;
                    countriesHtml = countriesHtml +" selected";
                } else {
                    this.countries[i].selected = false;
                }
                countriesHtml = countriesHtml +">" + this.countries[i].name + "</option>";
            }
            this.$(parentId+" #forms-address-country").html(countriesHtml);

            // Generate states select list
            for(var i = 0; i < this.allStates.length; i++) {
                
                if(this.allStates[i].countrycode == thisAddress.country) {
                    this.states = this.allStates[i].states;
                    
                    if(this.states.length > 0) {
                        // var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
                        var statesHtml = "";
                        for(var j = 0; j < this.states.length; j++) {
                            statesHtml = statesHtml + "<option value='" + this.states[j].code +"'";
                            if(this.states[j].code == thisAddress.state) {
                                this.states[j].selected = true;
                                statesHtml = statesHtml +" selected";
                            } else {
                                this.states[j].selected = false;
                            }
                            statesHtml = statesHtml +">" + this.states[j].name + "</option>";
                        }
                        this.$(parentId+" #forms-address-state").parent().html(
                            "<select name='forms-address-state' id='forms-address-state' class='form-control' required style='padding: 7px;'></select>" +
                            "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
                        );
                        this.$(parentId+" #forms-address-state").html(statesHtml);
                    } else {
                        this.$(parentId+" #forms-address-state").parent().html(
                            "<input type='text' placeholder='"+Utils.translate('Enter State name')+"' name='forms-address-state' id='forms-address-state' class='form-control' required />" +
                            "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
                        );
                    }
                    break;
                }
            }
        } else {
            var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
            for(var i = 0; i < this.countries.length; i++) {
                this.countries[i].selected = false;
                countriesHtml = countriesHtml + "<option value='" + this.countries[i].code + "'>" + this.countries[i].name + "</option>";
            }
            this.$(parentId+" #forms-address-country").html(countriesHtml);

            this.$(parentId+" #forms-address-state").parent().html(
                "<select name='forms-address-state' id='forms-address-state' class='form-control' required data-test='1' style='padding: 7px;'></select>" +
                "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
            );
            var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
            this.$(parentId+" #forms-address-state").html(statesHtml);
        }
    }

    DMSVUserSettingsAddressesView.prototype.addNewAddress = function(e){
        this.selectedAddress = null;
        console.log("selectedAddress - ", this.selectedAddress);
        this.$("#add-new-addr #forms-address-full-name").val("");
        this.$("#add-new-addr #forms-address-company").val("");
        this.$("#add-new-addr #forms-address-phone").val("");
        this.$("#add-new-addr #forms-address-address-1").val("");
        this.$("#add-new-addr #forms-address-address-2").val("");
        this.$("#add-new-addr #forms-address-city").val("");
        this.$("#add-new-addr #forms-address-zip").val("");
        this.$("#add-new-addr #forms-address-is-residential-address").prop("checked", false);
        this.$("#billing-addr").prop("checked", false);
        this.$("#shipping-addr").prop("checked", false);

        this.setCountryAndStateDropdowns(this.selectedAddress, "#add-new-addr");

        this.$("#add-new-addr").modal("show");
    }

    DMSVUserSettingsAddressesView.prototype.submitEditAddressForm = function(e){
        var self = this;
        var action = "";
        var tempInternalId = 0;
        if(this.selectedAddress == null){
            action = "add_address";
            tempInternalId = null;
            
        }else{
            action = "edit_address"
            tempInternalId = this.selectedAddress.internalid;
        }
        var addressData = {
            internalid: tempInternalId,
            fullName: this.$("#add-new-addr"+" #forms-address-full-name").val(),
            company: this.$("#add-new-addr"+" #forms-address-company").val(),
            phone: this.$("#add-new-addr"+" #forms-address-phone").val(),
            addr1: this.$("#add-new-addr"+" #forms-address-address-1").val(),
            addr2: this.$("#add-new-addr"+" #forms-address-address-2").val(),
            city: this.$("#add-new-addr"+" #forms-address-city").val(),
            zip: this.$("#add-new-addr"+" #forms-address-zip").val(),
            state: this.$("#add-new-addr"+" #forms-address-state").val(),
            country: this.$("#add-new-addr"+" #forms-address-country").val(),
            countryText: this.$("#add-new-addr"+" #forms-address-country option:checked").text(),
            isresidential: this.$("#add-new-addr"+" #forms-address-is-residential-address").prop("checked"),
            defaultshipping: this.$("#shipping-addr").prop("checked"),
            defaultbilling: this.$("#billing-addr").prop("checked")
        }

        this.$("#addr-form #forms-address-full-name").trigger('focusout');//forms-address-address-1
        this.$("#addr-form #forms-address-phone").trigger('focusout');
        this.$("#addr-form #forms-address-country").trigger('focusout');
        this.$("#addr-form #forms-address-state").trigger('focusout');
        this.$("#addr-form #forms-address-city").trigger('focusout');
        this.$("#addr-form #forms-address-zip").trigger('focusout');
        this.$("#addr-form #forms-address-address-1").trigger('focusout');

        if(this.$(".settings-addresses").find('.err').length != 0) {
		    self.$("#global-error-msg").show();
		 	setTimeout(function() {
		 		self.$("#global-error-msg").hide();
		 	}, 2000);
		}else{
            var isDisabled = this.$(e.currentTarget).attr('disabled');
            if(isDisabled) {
                return;
            } else {
                this.$(e.currentTarget).text(Utils.translate("Submitting..."));
                this.$(e.currentTarget).attr('disabled', true);
            }
            this.model.save({
                action: action,
                addressData: addressData,
                customerId: this.customerId
            }).then(function(res) {
                if(!res.hasError) {
                    self.getCustomerAddresses();
                }
            });
        }
    }

    DMSVUserSettingsAddressesView.prototype.removeAddress = function(e) {
        var self = this;
        var index = this.$(e.currentTarget).attr('data-index');
        var targetAddress = this.customerAddresses[index];

        if(!targetAddress.internalid) {
            return;
        }

        // if(this.$("#address-form-subview").find('.err').length != 0) {
		// 	this.$("#address-form-subview").find(".global-error-msg").show();
		// } else {
			this.$("#address-form-subview").find(".global-error-msg").hide();

            this.isLoading = true;
            //this.render();

            var addressData = {
                internalid: targetAddress.internalid
            };

            this.model.clear({ silent: true });
            this.model.save({
                action: "remove_address",
                addressData: addressData
            }).then(function(res) {
                console.log('remove_address res', res); 
                self.getCustomerAddresses();
            });
        //}
    }

    DMSVUserSettingsAddressesView.prototype.getCustomerAddresses = function (e) {
        var self = this;
        var data = {
            action: "GET_CUSTOMER_ADDRESSES",
            customerId: this.customerId,
        };
        this.model.clear({ silent: true });
        this.model.save(data).done(function(res) {
            if(!res.hasError){
                self.capiModel.fetch().done(function(response){
					self.countries = response.countries;
					self.allStates = response.states;

                    for(var i=0; i<res.addresses.length; i++){
                        var addressToDisplay = res.addresses[i].fullname+", "+res.addresses[i].addr1+", "+
                        res.addresses[i].city+", "+res.addresses[i].state+", "+res.addresses[i].country;

                        res.addresses[i].fullAddress = addressToDisplay;

                        var billingShippingAddress = "";
                        if(res.addresses[i].defaultbilling){
                            billingShippingAddress = billingShippingAddress + "Default Billing ";
                        }
                        if(billingShippingAddress.length > 0 && res.addresses[i].defaultshipping){
                            billingShippingAddress = billingShippingAddress + ", ";
                        }
                        if(res.addresses[i].defaultshipping){
                            billingShippingAddress = billingShippingAddress + "Default Shipping ";
                        }
                        if(res.addresses[i].defaultshipping || res.addresses[i].defaultbilling){
                            billingShippingAddress = billingShippingAddress + "Address";
                        }
                        res.addresses[i].billingShippingAddress = billingShippingAddress;
                    }
                    self.customerAddresses = res.addresses;
                    self.$("#add-new-addr").modal('hide');
                    jQuery('.modal-backdrop').remove();
                    jQuery(document.body).removeClass("modal-open");
                    self.render();
                });
            }
        });
    },

    DMSVUserSettingsAddressesView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,

            selectedAddress: this.selectedAddress,

            defaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.png')),
            imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),

            showChildView: this.showChildView,
            customerAddresses: this.customerAddresses,

            icons: {
                icnDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-default.png')),
                icnEditBlack: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-sm.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-close-sm.png')),
                icnAddNew: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-add-md.png')),
                icnEditSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-edit-sm.png')),
                icnAddMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-add-md.png')),
                icnActions: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-actions.png')),
                icnCurrentAddr: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-current-addr.png')),
                icnPermanentAddr: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-permanent-addr.png'))
            }
        }
    }
    return DMSVUserSettingsAddressesView;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.BankInformation.View',	[
    'saralux_core_dm_us_bank_information.tpl',

    'Saralux.Core.Forms.Address.View',

    'Saralux.Core.MyPortal.Context.Model',

    'Saralux.Core.DashboardModulesSV.SS2Model',

    'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.CAPI.Model',
	
	'Utils',
	'SCView'
], function (
    saralux_core_dm_us_bank_information_tpl,

    FormsAddressView,

    MyPortalContextModel,

    DashboardModulesSVSS2Model,

    CoreCLGeneral,
    CoreCLCAPIModel,
	
	Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUserSettingsBankInformationView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_dm_us_bank_information_tpl;
        
        this.parent = options.parent;
        this.container = options.container;

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.isLoading = true;

        this.environment_component = this.container.getComponent('Environment');

        this.showChildView = false;
        this.activeView = null;

        this.model = new DashboardModulesSVSS2Model();
        this.capiModel = new CoreCLCAPIModel();

        this.customerAddresses = [];
        this.bankAccTypes = [];


        this.getBankInformation(null);
    }

    DMSVUserSettingsBankInformationView.prototype = Object.create(SCView.prototype);
    DMSVUserSettingsBankInformationView.prototype.constructor = DMSVUserSettingsBankInformationView;

    DMSVUserSettingsBankInformationView.prototype.getEvents = function () {
        // Declare events (if any):
        return {
            'focusout [data-focusout="routing-number-required-focusout"]':"verifyRoutingNumber",
            'focusout [data-focusout="account-number-required-focusout"]':"verifyAccountNumber",

            'click [data-action="m360-select-to-edit-bank-information"]':"selectBankInformationToEdit",
            'click [data-action="m360-submit-edit-bank-information-form"]':"submitBankInformationForm",

            'change [data-change="change-account-type"]': 'verifyChangedAccountType',
        };
    }

    DMSVUserSettingsBankInformationView.prototype.verifyChangedAccountType = function(e){
        var accType = this.$("#acc-type").val();
        if(accType == '-1'){
            this.$('#acc-type').siblings("p").addClass("err");
        }else{
            this.$('#acc-type').siblings("p").removeClass("err");
        }
    }

    DMSVUserSettingsBankInformationView.prototype.verifyRoutingNumber = function(e){
        var routingNumber = this.$("#routing-number").val();
        var verifyRoutingNumber = this.$("#reenter-routing-number").val();
        if(routingNumber.length == verifyRoutingNumber.length && routingNumber == verifyRoutingNumber){
            this.$('#reenter-routing-number').siblings("p").removeClass("err");
        }else{
            this.$('#reenter-routing-number').siblings("p").addClass("err");
        }
    }

    DMSVUserSettingsBankInformationView.prototype.verifyAccountNumber = function(e){
        var accNumber = this.$("#acc-number").val();
        var verifyAccNumber = this.$("#reenter-account-number").val();
        
        if(accNumber.length == verifyAccNumber.length && accNumber == verifyAccNumber){
            this.$('#reenter-account-number').siblings("p").removeClass("err");
        }else{
            this.$('#reenter-account-number').siblings("p").addClass("err");
        }
    }

    DMSVUserSettingsBankInformationView.prototype.selectBankInformationToEdit = function(e){
        var index = null;
		index = this.$(e.currentTarget).attr('data-index');
        this.selectedankInformationRecord = this.bankInformation[index];
        for(var i=0; i<this.bankAccTypes.length; i++) {
            if(this.selectedankInformationRecord.accountType == this.bankAccTypes[i].name){
                this.$("#acc-type").val(this.bankAccTypes[i].id);
                break;
            }
        }
        this.$("#bank-name").val(this.selectedankInformationRecord.bankName);
        this.$("#routing-number").val(this.selectedankInformationRecord.routingNumber);
        this.$("#acc-number").val(this.selectedankInformationRecord.accountNumber);
        if(this.selectedankInformationRecord.isPrimary == "1"){
            this.$("#residential-addr").prop('checked', true);
        }else{
            this.$("#residential-addr").prop('checked', false);
        }
    }

    DMSVUserSettingsBankInformationView.prototype.getBankInformation = function(e){
        var self = this;
        if(this.customerId) {
            var paramsToFetchCRMTags = {
                action: "get_bank_information",
                customerId: this.customerId,
                fetchAccTypes: true
            }
            this.model.save(paramsToFetchCRMTags).done(function(res) {
                if(!res.hasError){
                    self.bankInformation = res.bankInformation;
                    self.bankAccTypes = res.bankAccTypes;
                    for(var i=0; i<self.bankInformation.length; i++){
                        if(self.bankInformation[i].isPrimary == "1"){
                            self.bankInformation[i].isPrimaryBankAcc = true;
                        }else{
                            self.bankInformation[i].isPrimaryBankAcc = false;
                        }
                    }
                    self.isLoading = false;
                    self.render();
                }
            });

        }
    }

    DMSVUserSettingsBankInformationView.prototype.submitBankInformationForm = function(e){
        var self = this;
        this.$(".settings-bank-information").find('#reenter-routing-number').trigger('focusout');
        this.$(".settings-bank-information").find('#reenter-account-number').trigger('focusout');
        this.$(".settings-bank-information").find('#acc-type').trigger('focusout');

        if(this.$(".settings-bank-information").find('.err').length != 0) {
			self.$("#global-error-msg").show();
			setTimeout(function() {
				self.$("#global-error-msg").hide();
			}, 2000);
		}else{

            var bankName = this.$("#bank-name").val();
            var accountType = this.$("#acc-type").val();
            for(var i=0; i<this.bankAccTypes.length; i++) {
                if(this.bankAccTypes[i].id == accountType){
                    accountType = this.bankAccTypes[i].name;
                    break;
                }
                    
            }
            var accountNumber = this.$("#acc-number").val();
            var isPrimary = this.$("#residential-addr").prop('checked');
            var routingNumber = this.$("#routing-number").val();
            
            var data = {
                action: "save_bank_information",
                id: this.selectedankInformationRecord.id,
                bankName: bankName,
                accountType: accountType,
                accountNumber: accountNumber,
                isPrimaryAccount: isPrimary,
                routingNumber: routingNumber,
            }
            var isDisabled = this.$(e.currentTarget).attr('disabled');
            if(isDisabled) {
                return;
            } else {
                this.$(e.currentTarget).text(Utils.translate("Submitting..."));
                this.$(e.currentTarget).attr('disabled', true);
            }
            this.model.save(data).done(function(res) {
                if(!res.hasError){
                    self.$("#bank-information").modal('hide');
                    jQuery('.modal-backdrop').remove();
                    jQuery(document.body).removeClass("modal-open");
                    self.getBankInformation();
                    self.render();
                }else{
                    self.$("#global-error-msg").show();
                    setTimeout(function() {
                        self.$("#global-error-msg").hide();
                    }, 2000);
                }
            });
        }
    }

    DMSVUserSettingsBankInformationView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,

            bankInformation: this.bankInformation,
            bankAccTypes: this.bankAccTypes,
            
            defaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.png')),
            imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),

            showChildView: this.showChildView,
            customerAddresses: this.customerAddresses,

            icons: {
                icnProfileSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-settings-main.png')),
                icnSpeakerSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-settings-speaker.png')),
                icnMainSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-settings-main.png')),
                icnDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-default.png')),
                icnEditBlack: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-sm.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-close-sm.png')),
                icnAddNew: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-add-md.png')),
                icnEditSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-edit-sm.png')),
                icnAddMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-add-md.png')),
                icnRemovePic: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-sm.png')),
                icnCamera: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-camera-lg.png')),
                icnRemoveSocial: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-incorrect-md.png')),
                icnEmailSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-email-sm.png')),
                icnPhoneSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-phone-sm.png')),
                icnInfoTooltip: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icon-info-tool-tip.png')),
                icnWarning: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icon-warning-sm.png')),
                icnLink: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-link.png')),
                icnValidated: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icon-task-completed.png')),
                icnDocuments: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-file-md.png')),
                icnDownload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download.png')),
                icnUpload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-upload.png')),
                icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-view.png')),
                icnWarningMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-warning.png')),
                icnRemoveDoc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
                icnDocUploaded: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/group-3.png')),
                icnUploadLg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png')),
                icnUploadSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/img-uploaded-success.png')),
                imgNotifications: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-notifications-link.png')),
                icnActions: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-actions.png'))
            }
        }
    }
    return DMSVUserSettingsBankInformationView;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.CustomProfile.View',	[
	'saralux_core_dm_us_custom_profile.tpl',
    
    'Saralux.Core.MyPortal.Context.Model',
    'Saralux.Core.DashboardModulesSV.SS2Model',

    'Saralux.Core.WebForms.View',
	'Saralux.Core.WebForms.General',

    'Utils',
	'SCView'
], function (
	saralux_core_dm_us_custom_profile_tpl,
    
    MyPortalContextModel,
    DashboardModulesSVSS2Model,

    WebFormsView,
	WebFormsGeneral,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUSCustomProfileView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_dm_us_custom_profile_tpl;
        
        this.parent = options.parent;
        this.container = options.container;
        this.webFormId = options.webFormId;

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.model = new DashboardModulesSVSS2Model();

        this.customerId = this.mpContextModel.get('m360CustomerId');
        
        this.isLoading = true;
        this.isLoggedIn = false;
        this.isRecognized = false;

        this.customerObject = {
			customerId: (this.customerId)?this.customerId:null,
			firstName: '',
			lastName: '',
			email: '',
			addAddress: true,
			editAddress: false,
			sameAsShippingAddress: false,
			billingAddress: {
				label: "Permanent Address",
				country: null,
				addressee: null,
				addr1: null,
				addr2: null,
				city: null,
				state: null,
				zip: null,
                addressType: 2
			},
			shippingAddress: {
				label: "Present Address",
				country: null,
				addressee: null,
				addr1: null,
				addr2: null,
				city: null,
				state: null,
				zip: null,
                addressType: 1
			}
		}

        this.userprofile_component = this.container.getComponent('UserProfile');
        this.webFormObject = null;

        console.log(this.userprofile_component);

        this.userprofile_component.getUserProfile().then(function(profile) {
            self.isLoggedIn = profile.isloggedin;
            self.isRecognized = profile.isrecognized;

            console.log(profile);
            
            if(self.isLoggedIn && self.isRecognized) {
                if(profile) {
                    self.customerObject.firstName = profile.firstname;
                    self.customerObject.lastName = profile.lastname;
                    self.customerObject.email = profile.email;
                    self.customerObject.customerId = profile.internalid;

                    if(profile.addressbook) {
                        for(var i=0;i<profile.addressbook.length;i++) {
                            if(profile.addressbook[i].defaultbilling == 'T') {
                                self.customerObject.billingAddress = profile.addressbook[i];
                                self.customerObject.billingAddress.label = "Permanent Address";
                                break;
                            }
                        }

                        for(var i=0;i<profile.addressbook.length;i++) {
                            if(profile.addressbook[i].defaultshipping == 'T') {
                                self.customerObject.shippingAddress = profile.addressbook[i];
                                self.customerObject.shippingAddress.label = "Present Address";
                                break;
                            }
                        }
                    }
                }   

                console.log(self.customerObject);

                self.childViews = {
                    'UserSettings.CustomProfile.View': function () {
                        self.webFormObject = new WebFormsView({
                            container: self.container,
                            webFormId: self.webFormId,
                            customerObject: self.customerObject,
                            isLoggedIn: true,
                            requiredLoginBox: false,
                            additionalFields: [],
                            orderSource: '',
                            transactionType: '',
                            parent: self
                        });
        
                        return self.webFormObject;
                    }
                };

                self.isLoading = false;
                self.render();
            }
        });
    }

    DMSVUSCustomProfileView.prototype = Object.create(SCView.prototype);
    DMSVUSCustomProfileView.prototype.constructor = DMSVUSCustomProfileView;

    DMSVUSCustomProfileView.prototype.getEvents = function () {
        // Declare events (if any):
        return {
            'click [data-action="saralux-m360-save-web-form-data"]' : "saveWebFormData",
        };
    }

    DMSVUSCustomProfileView.prototype.saveWebFormData = function (e) {
        this.webFormData = WebFormsGeneral.getFormData(this.webFormObject, true);	
        this.dataToPersist = [];
        var data = {
            action: "UPDATE_WEB_FORM_DATA",
            customerId: this.customerId,
            dataToPersist: this.webFormData.fields
        }
        this.model.save(data).done(function(res) {
            if(!res.hasError){
                self.$("#form-success-msg").show();
                self.$(e.currentTarget).text(Utils.translate("Save"));
                self.$(e.currentTarget).attr('disabled', false);

                setTimeout(function() {
                    self.$("#form-success-msg").hide();
                }, 2000);
            }else{
                self.$(e.currentTarget).text(Utils.translate("Save"));
                self.$(e.currentTarget).attr('disabled', false);
                self.$("#global-error-msg").show();
                setTimeout(function() {
                    self.$("#global-error-msg").hide();
                }, 2000);
            }
        });
    }

    DMSVUSCustomProfileView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading
        }
    }
    return DMSVUSCustomProfileView;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.Notifications.View',	[
    'saralux_core_dm_us_notifications.tpl',

    'Saralux.Core.DashboardModulesSV.UserSettings.MainProfile.View',

    'Saralux.Core.MyPortal.Context.Model',

    'Saralux.Core.DashboardModulesSV.SS2Model',

    'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.CAPI.Model',
	
	'Utils',
	'SCView',
    'jQuery'
], function (
    saralux_core_dm_us_notifications_tpl,

    UserSettingsMainProfileView,

    MyPortalContextModel,

    DashboardModulesSVSS2Model,

    CoreCLGeneral,
    CoreCLCAPIModel,
	
	Utils,
	SCViewModule,
    jQuery
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUserSettingsNotificationsView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_dm_us_notifications_tpl;
        
        this.parent = options.parent;
        this.container = options.container;

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.environment_component = this.container.getComponent('Environment');

        this.showChildView = false;
        this.activeView = null;

        this.model = new DashboardModulesSVSS2Model();
        this.capiModel = new CoreCLCAPIModel();
        this.notificationValidationResponse = null;

        self.childViews = {
            'Saralux.UserSettings.MainProfile': function() {
                return new UserSettingsMainProfileView({
                    backAction: 'm360-slxc-dsv-notifications',
                    container: self.container,
                    parent: this
                });
            },
        }

        this.getTextValidationStatus();

        this.notificationsConfig = {
            validateEmail: this.environment_component.getConfig("emailValidationForUserSettings"),
            validateEmailMessage: this.environment_component.getConfig("emailValidationMessageForUserSettings"),
            validateEmailButtonText: this.environment_component.getConfig("emailValidationButtonTextForUserSettings"),

            validatePhoneNumber: this.environment_component.getConfig("phoneValidationForUserSettings"),
            validatePhoneNumberMessage: this.environment_component.getConfig("phoneValidationMessageForUserSettings"),
            validatePhoneNumberButtonText: this.environment_component.getConfig("phoneValidationButtonTextForUserSettings"),
        };
       this.getEmailTextNotificationValues();
    }

    DMSVUserSettingsNotificationsView.prototype = Object.create(SCView.prototype);
    DMSVUserSettingsNotificationsView.prototype.constructor = DMSVUserSettingsNotificationsView;

    DMSVUserSettingsNotificationsView.prototype.getEvents = function () {
        // Declare events (if any):m360-slxc-refresh-notification-status
        return {
            "click [data-action='compact-view']": "compactViewToggle",
            'click [data-action="m360-slxc-dsv-notifications"]': 'backToNotifications',
            'click [data-action="m360-slxc-dsv-user-validation"]': 'userNotificationValidation',
            'click [data-action="m360-slxc-refresh-notification-status"]': 'refreshNotificationStatus'
        };
    }

    DMSVUserSettingsNotificationsView.prototype.getTextValidationStatus = function (e) {
        var self = this;
        var data = {
            action: "get_text_validation_status",
            type: "text",
            customerId: this.customerId,
            isValidationInitiated: true
        };
        this.model.save(data).done(function(res) {
            if(!res.hasError){
                var textValidationStatus = res.textValidationStatus;
                self.setValidationStatusFlag(textValidationStatus);
            }
            self.isLoading = false;
            self.render();
        });
    }

    /*
        Since we need to set the status to Validated/ Not Validated/ Validation Pending thrice,
        1) When user lands on this pafge for the first time
        2) Clicks on refresh button
        3) Starts the validaion from validation pop up
        So to reduce the code redundancy, this method has been introduced.
        This function is getting called from,
        i) userNotificationValidation() - When user starts the validation.
        ii) refreshNotificationStatus() - When user clicks on the refres button.
        iii) getTextValidationStatus() - Which ultimatelt is getting called from the constructor.
    */
    DMSVUserSettingsNotificationsView.prototype.setValidationStatusFlag = function (textValidationStatus) {
        textValidationStatus = parseInt(textValidationStatus);
        if(textValidationStatus == 2){//Validation status has been set to Pending Validation
            this.isValidationInProgress = true;
            this.validated = false;
        }else if(textValidationStatus == 3){//Validation status has been set to Validated
            this.isValidationInProgress = false;
            this.validated = true;
        }else{//Validation status has either been set to Not Validated ot is blank
            this.isValidationInProgress = false;
            this.validated = false;
        }
    }

    DMSVUserSettingsNotificationsView.prototype.getEmailTextNotificationValues = function () {
        var self = this;
        var data = {
            action: "get_email_text_notification_values",
            customerId: this.customerId,
        };
        this.model.clear({ silent: true });
        this.model.save(data).done(function(res) {
            if(!res.hasError){
                self.notificationDetails = res.notificationDetails;
                self.isLoading = false;
                self.render();
            }
        });
    },

    DMSVUserSettingsNotificationsView.prototype.compactViewToggle = function(e) {
        var self = this;
        this.$("#mobile-chckbox").prop('disabled', true);
        this.$("#email-chckbox").prop('disabled', true);

        if(this.$(e.currentTarget).is(":checked")) {
            this.$('.facility-addr').hide();
            this.$('.gray-panel').hide();
            this.notificationStatus = true;
        } else {
            this.$('.facility-addr').show();
            this.$('.gray-panel').show();
            this.notificationStatus = false;
        }
        var action = "";
        if(e.currentTarget.id == "email-chckbox"){
            action = "toggle_email_notification";
        }
        else if(e.currentTarget.id == "mobile-chckbox"){
            action = "toggle_text_notification";
        }
        
        var data = {
            action: action,
            customerId: this.customerId,
            notificationStatus: this.notificationStatus
        };
        this.model.clear({ silent: true });
        this.model.save(data).done(function(res) {
            self.$("#mobile-chckbox").prop('disabled', false);
            self.$("#email-chckbox").prop('disabled', false);
        });
    }

    DMSVUserSettingsNotificationsView.prototype.backToNotifications = function (e) {
        this.showChildView = false;
        this.activeView = null;
		this.render();
	}

    DMSVUserSettingsNotificationsView.prototype.userNotificationValidation = function (e) {
        var self = this;
        var action = "set_text_notification_validation_status";
        var type = "";

        this.model.clear({ silent: true });

        if(e.currentTarget.id == "email-validation-btn"){
            type = "email";
        }else if(e.currentTarget.id == "phone-number-validation-btn"){
            type = "text";
        }

        var data = {
            action: action,
            type: type,
            customerId: this.customerId,
            isValidationInitiated: true
        };
        this.model.save(data).done(function(res) {
            if(!res.hasError){
                var textValidationStatus = res.textValidationStatus;
                self.setValidationStatusFlag(textValidationStatus);
                if(jQuery('#notification-link-phone').modal('hide')){
                    console.log("Inside if");
                    jQuery('.modal-backdrop').remove();
                    self.render();
                }
            }else{
                self.$('#phone-number-validation-btn').siblings("p").addClass("err");
            }
            if(jQuery('#notification-link-phone').modal('hide')){
                jQuery('.modal-backdrop').remove();
                self.render();
            }
        });

	}

    DMSVUserSettingsNotificationsView.prototype.refreshNotificationStatus = function (e) {
        var self = this;
        var action="set_text_notification_validation_status";
        var data = {
            action: action,
            customerId: this.customerId,
            isValidationInitiated: false
        };
        this.model.save(data).done(function(res) {
            if(!res.hasError){
                var textValidationStatus = res.textValidationStatus;
                self.setValidationStatusFlag(textValidationStatus);
                self.render();
            }
        });
	}

    DMSVUserSettingsNotificationsView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            notificationsConfig: this.notificationsConfig,
            notificationDetails: this.notificationDetails,
            notificationValidationResponse: this.notificationValidationResponse,
            validated: this.validated,
            isValidationInProgress: this.isValidationInProgress,

            defaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.png')),
            imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),

            showChildView: this.showChildView,
            activeView: this.activeView,

            icons: {
                icnProfileSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-settings-main.png')),
                icnSpeakerSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-settings-speaker.png')),
                icnMainSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-settings-main.png')),
                icnDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-default.png')),
                icnEditBlack: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-sm.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-close-sm.png')),
                icnAddNew: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-add-md.png')),
                icnEditSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-edit-sm.png')),
                icnAddMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-add-md.png')),
                icnRemovePic: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-sm.png')),
                icnCamera: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-camera-lg.png')),
                icnRemoveSocial: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-incorrect-md.png')),
                icnEmailSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-email-sm.png')),
                icnPhoneSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-phone-sm.png')),
                icnInfoTooltip: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icon-info-tool-tip.png')),
                icnWarning: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icon-warning-sm.png')),
                icnLink: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-link.png')),
                icnValidated: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icon-task-completed.png')),
                icnDocuments: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-file-md.png')),
                icnDownload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download.png')),
                icnUpload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-upload.png')),
                icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-view.png')),
                icnWarningMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-warning.png')),
                icnRemoveDoc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
                icnDocUploaded: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/group-3.png')),
                icnUploadLg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png')),
                icnUploadSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/img-uploaded-success.png')),
                imgNotifications: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-notifications-link.png')),
                icnActions: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-actions.png')),
                icnNotValidatedSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icon-warning-sm.png')),
                icnProgressSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-time-display.png')),
                icnWarningGrey: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-warning-grey.png')),
                icnRefreshSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-refresh-sm.png'))
            }
        }
    }
    return DMSVUserSettingsNotificationsView;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.PaymentMethods.View',	[
    'saralux_core_dm_us_payment_methods.tpl',

    'Saralux.Core.Forms.CreditCard.View',

    'Saralux.Core.MyPortal.Context.Model',

    'Saralux.Core.DashboardModulesSV.SS2Model',

    'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.CAPI.Model',
	
	'Utils',
	'SCView'
], function (
    saralux_core_dm_us_payment_methods_tpl,

    FormsCreditCardView,

    MyPortalContextModel,

    DashboardModulesSVSS2Model,

    CoreCLGeneral,
    CoreCLCAPIModel,
	
	Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUserSettingsPaymentMethodsView(options) {
		SCView.call(this, options);
		var self = this;

        this.template = saralux_core_dm_us_payment_methods_tpl;
        
        this.parent = options.parent;
        this.container = options.container;

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.isLoading = true;

        this.environment_component = this.container.getComponent('Environment');

        this.myCreditCards = [];
        this.activeCard = null;
        this.activeCardIndex = 0;

        this.showChildView = false;
        this.activeView = null;

        this.allowCardRemoval = true;

        this.model = new DashboardModulesSVSS2Model();
        this.capiModel = new CoreCLCAPIModel();

        this.childViews = {
            'Saralux.Forms.CreditCard': function() {
                return new FormsCreditCardView({
                    container: self.container,
                    firstCard: false
                });
            }
        }

        this.loadData();
    }

    DMSVUserSettingsPaymentMethodsView.prototype = Object.create(SCView.prototype);
    DMSVUserSettingsPaymentMethodsView.prototype.constructor = DMSVUserSettingsPaymentMethodsView;

    DMSVUserSettingsPaymentMethodsView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-mp-db-open-ac-modal']" : "openAddCardModal",
            "click [data-action='m360-mp-db-open-ec-modal']" : "openEditCardModal",
            "click [data-action='m360-mp-db-open-rc-modal']" : "openRemoveCardModal",
            "click [data-action='m360-mp-db-update-credit-card']" : "updateCreditCard",
            "click [data-action='m360-mp-db-add-credit-card']" : "addCreditCard",
            "click [data-action='m360-mp-db-remove-credit-card']" : "removeCreditCard",
        };
    }

    DMSVUserSettingsPaymentMethodsView.prototype.loadData = function() {
        var self = this;

        jQuery.when(
            this.capiModel.fetch({
                data: {
                    action: "GET_CREDIT_CARDS"
                }
            }),
            this.model.save({
                action: "ALLOW_CARD_REMOVAL"
            }),
        ).done(function(creditCards, acrResponse) {
            if(creditCards && creditCards.length > 0){
                creditCards = creditCards[0];
            }
            if(acrResponse && acrResponse.length > 0){
                acrResponse = acrResponse[0];
            }
            
			if(creditCards && creditCards.length > 0) {
				self.formatCreditCardInfo(creditCards);
			}

            if(acrResponse.hasError) {
                console.error("acrResponse", acrResponse.message);
            } else {
                self.allowCardRemoval = acrResponse.allowCardRemoval;
            }

            self.isLoading = false;
            self.render();
		});
    }

    DMSVUserSettingsPaymentMethodsView.prototype.formatCreditCardInfo = function(creditCards) {
        this.myCreditCards = [];

        for(var i = 0; i < creditCards.length; i++) {
            var thisCard = creditCards[i];

            if(thisCard.paymentmethod && thisCard.ccname && thisCard.ccnumber) {
                var cardImgArr = thisCard.paymentmethod.imagesrc;

                var expiryMonth = thisCard.expmonth;
                if(expiryMonth.length != 2) {
                    expiryMonth = "0"+expiryMonth;
                }
                var dateObj = new Date();
                var month = dateObj.getUTCMonth() + 1;
                var year = dateObj.getUTCFullYear();
                
                var isCardExpired = true;
                if(thisCard.expyear > year || (thisCard.expyear ==year && thisCard.expmonth >= month)) {
                    isCardExpired = false;
                }

                var maskedCardNumber = CoreCLGeneral.formatMaskedCreditCardNumber(thisCard.ccnumber);
                
                this.myCreditCards.push({
                    id: thisCard.internalid,
                    isDefault: (thisCard.ccdefault == "T"),
                    cardName: thisCard.ccname,
                    cardNumber: thisCard.ccnumber,
                    maskedCardNumber: maskedCardNumber,
                    last4Digits: thisCard.ccnumber.substr(thisCard.ccnumber.length - 4),
                    expiryMonth: expiryMonth,
                    expiryYear: thisCard.expyear,
                    paymentMethod: thisCard.paymentmethod.internalid,
                    cardType: thisCard.paymentmethod.name,
                    cardImage: (cardImgArr && (cardImgArr.length > 0))?cardImgArr[0]:null,
                    isCardExpired: isCardExpired
                });
            }
        }
    }

    DMSVUserSettingsPaymentMethodsView.prototype.openAddCardModal = function(e) {
        this.$('#add-card-modal').find("p").removeClass("err");

        this.$("#add-card-modal #forms-creditcard-card-number").removeClass("display-none");
        this.$("#add-card-modal #masked-creditcard-card-number").addClass("display-none");
        this.$("#add-card-modal #masked-creditcard-card-number").html("");
        this.$("#add-card-modal #forms-creditcard-card-number").val("");
        this.$("#add-card-modal #forms-creditcard-card-holders-name").val("");
        this.$("#add-card-modal #forms-creditcard-card-exp").val("");
        this.$('#add-card-modal #forms-creditcard-card-default').prop('checked', "");

		this.$("#add-card-modal #forms-creditcard-card-number").prop("disabled", false);
        this.$('#add-card-modal #forms-creditcard-card-default').prop('disabled', false);

        // this.$("#add-creditcard-form-card-image").attr("src", this.activeCard.cardImage);

        this.$('#add-card-modal .payment-method-section-content').show();

        if(this.myCreditCards && this.myCreditCards.length === 0) {
            this.$('#add-card-modal #forms-creditcard-card-default').prop('checked', true);
            this.$('#add-card-modal #forms-creditcard-card-default').prop('disabled', true);
        }

        this.$('#add-card-modal').modal('show');
    },

    DMSVUserSettingsPaymentMethodsView.prototype.openEditCardModal = function(e) {
        this.$('#edit-card-modal').find("p").removeClass("err");

        var index = this.$(e.currentTarget).attr('data-index');
        this.activeCardIndex = index;
        this.activeCard = this.myCreditCards[index];

        // this.$("#edit-card-modal #forms-creditcard-card-number").val(this.activeCard.maskedCardNumber);
        this.$("#edit-card-modal #forms-creditcard-card-number").addClass("display-none");
        this.$("#edit-card-modal #masked-creditcard-card-number").removeClass("display-none");
        var cardImageHTML = "<span class='card-icon'><img src='"+this.activeCard.cardImage+"'/></span>";
        this.$("#edit-card-modal #masked-creditcard-card-number").html(this.activeCard.maskedCardNumber+cardImageHTML);
        this.$("#edit-card-modal #forms-creditcard-card-holders-name").val(this.activeCard.cardName);
        this.$("#edit-card-modal #forms-creditcard-card-exp").val(this.activeCard.expiryMonth+"/"+this.activeCard.expiryYear);
        this.$('#edit-card-modal #forms-creditcard-card-default').prop('checked', this.activeCard.isDefault);

        this.$("#edit-card-modal #forms-creditcard-card-number").prop("disabled", true);
        this.$('#edit-card-modal #forms-creditcard-card-default').prop('disabled', false);

        // this.$("#edit-creditcard-form-card-image").attr("src", this.activeCard.cardImage);

        this.$('#edit-card-modal .payment-method-section-content').hide();

        if(this.myCreditCards && this.myCreditCards.length === 1) {
            this.$('#edit-card-modal #forms-creditcard-card-default').prop('checked', true);
            this.$('#edit-card-modal #forms-creditcard-card-default').prop('disabled', true);
        }
        
        this.$('#edit-card-modal').modal('show');
    },

    DMSVUserSettingsPaymentMethodsView.prototype.openRemoveCardModal = function(e) {
        var index = this.$(e.currentTarget).attr('data-index');
        this.activeCardIndex = index;
        this.activeCard = this.myCreditCards[index];

        this.$('#remove-card-modal').modal('show');
    },

    DMSVUserSettingsPaymentMethodsView.prototype.updateCreditCard = function(e) {
        var self = this;

        this.$("#edit-card-modal #forms-creditcard-card-holders-name").trigger("focusout");
		this.$("#edit-card-modal #forms-creditcard-card-exp").trigger("focusout");

		if(this.$("#edit-card-modal").find('.err').length != 0){
			this.$("#edit-card-modal").find(".global-error-msg").show();
		} else {
			this.$("#edit-card-modal").find(".global-error-msg").hide();

            var isDisabled = this.$(e.currentTarget).attr("disabled");
            if(isDisabled) {
                console.error('ERROR: submit button disabled');
                return;
            } else {
                this.$(e.currentTarget).text(Utils.translate("Updating")+"...");
                this.$(e.currentTarget).attr("disabled", true);
            }

            var expDate = this.$("#edit-card-modal #forms-creditcard-card-exp").val();
            expDate = expDate.replace(/\s/g,''); //removing all whitespaces for exp string
            var cardExp = expDate.split('/');

            var markAsDefault = this.$("#edit-card-modal #forms-creditcard-card-default").is(':checked');

            var data = {
                action: "UPDATE_CREDIT_CARD",
                customerId: this.customerId,
                id: this.activeCard.id,
                cardNumber: this.activeCard.cardNumber,
                cardName: this.$("#edit-card-modal #forms-creditcard-card-holders-name").val(),
                paymentMethod: this.activeCard.paymentMethod,
                expiryMonth: cardExp[0],
                expiryYear: cardExp[1],
                isDefault: markAsDefault
            };

            this.model.clear({ silent: true });
            this.model.save(data).done(function(res) {
                if(!res.hasError) {
                    self.capiModel.clear({ silent: true });
                    self.capiModel.fetch({
                        data: {
                            action: "GET_CREDIT_CARDS"
                        }
                    }).done(function(res) {
                        self.$("#edit-card-modal").modal('hide');
                        jQuery('.modal-backdrop').remove();
                        jQuery(document.body).removeClass("modal-open");

                        self.formatCreditCardInfo(res);

                        self.render();
                        jQuery(window).scrollTop(0);
                    });
                } else {
                    console.error("error", res.message);
                }
            });
        }
    }

    DMSVUserSettingsPaymentMethodsView.prototype.addCreditCard = function(e) {
        var self = this;

        this.$("#add-card-modal #forms-creditcard-card-holders-name").trigger("focusout");
		this.$("#add-card-modal #forms-creditcard-card-exp").trigger("focusout");
		this.$("#add-card-modal #forms-creditcard-card-number").trigger("focusout");
		
		if(this.$('#add-card-modal .forms-creditcard-payment-method').is(':checked')) { 
			this.$('#add-card-modal .forms-creditcard-payment-method-p').removeClass("err");
		} else {
			this.$('#add-card-modal .forms-creditcard-payment-method-p').addClass("err");
		}

		if(this.$("#add-card-modal").find('.err').length != 0){
			this.$("#add-card-modal").find(".global-error-msg").show();
		} else {
			this.$("#add-card-modal").find(".global-error-msg").hide();

            var isDisabled = this.$(e.currentTarget).attr("disabled");
            if(isDisabled) {
                console.error('ERROR: submit button disabled');
                return;
            } else {
                this.$(e.currentTarget).text(Utils.translate("Adding")+"...");
                this.$(e.currentTarget).attr("disabled", true);
            }

            var expDate = this.$("#add-card-modal #forms-creditcard-card-exp").val();
            expDate = expDate.replace(/\s/g,''); //removing all whitespaces for exp string
            var cardExp = expDate.split('/');

            var markAsDefault = this.$("#add-card-modal #forms-creditcard-card-default").is(':checked');

            var cardNumber = this.$("#add-card-modal #forms-creditcard-card-number").val();
            cardNumber = cardNumber.replace(/\s/g,''); //removing all whitespaces for cardNumber string

            var data = {
                action: "ADD_CREDIT_CARD",
                customerId: this.customerId,
                cardNumber: cardNumber,
                cardName: this.$("#add-card-modal #forms-creditcard-card-holders-name").val(),
                paymentMethod: this.$('#add-card-modal input[name="forms-creditcard-payment-method"]:checked').val(),
                expiryMonth: cardExp[0],
                expiryYear: cardExp[1],
                isDefault: markAsDefault
            };

            this.model.clear({ silent: true });
            this.model.save(data).done(function(res) {
                if(!res.hasError) {
                    self.capiModel.clear({ silent: true });
                    self.capiModel.fetch({
                        data: {
                            action: "GET_CREDIT_CARDS"
                        }
                    }).done(function(res) {
                        self.$("#add-card-modal").modal('hide');
                        jQuery('.modal-backdrop').remove();
                        jQuery(document.body).removeClass("modal-open");

                        self.formatCreditCardInfo(res);

                        self.render();
                        jQuery(window).scrollTop(0);
                    });
                } else {
                    console.error("error", res.message);
                }
            });
        }
    }

    DMSVUserSettingsPaymentMethodsView.prototype.removeCreditCard = function(e) {
        var self = this;

        var data = {
            action: "REMOVE_CREDIT_CARD",
            customerId: this.customerId,
            id: this.activeCard.id
        };

        this.model.clear({ silent: true });
        this.model.save(data).done(function(res) {
            if(!res.hasError) {
                self.capiModel.clear({ silent: true });
                self.capiModel.fetch({
                    data: {
                        action: "GET_CREDIT_CARDS"
                    }
                }).done(function(res) {
                    self.$("#remove-card-modal").modal('hide');
                    jQuery('.modal-backdrop').remove();
                    jQuery(document.body).removeClass("modal-open");

                    self.formatCreditCardInfo(res);

                    self.render();
                    jQuery(window).scrollTop(0);
                });
            } else {
                console.error("error", res.message);
            }
        });
    }

    DMSVUserSettingsPaymentMethodsView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,

            myCreditCards: this.myCreditCards,
            allowCardRemoval: this.allowCardRemoval,

            icons: {
                icnDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-default.png')),
                icnEditBlack: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-sm.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-close-sm.png'))
            }
        }
    }
    
    return DMSVUserSettingsPaymentMethodsView;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.UpdatePassword.View',	[
    'saralux_core_dm_us_update_password.tpl',

    'Saralux.Core.DashboardModulesSV.SS2Model',

	'Saralux.Core.ExternalLibraries.CryptoJS',

	'Utils',
	'SCView'
], function (
    saralux_core_dm_us_update_password_tpl,

    DashboardModulesSVSS2Model,

    CryptoJS,

	Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUserSettingsUpdatePasswordView(options) {
		SCView.call(this, options);
		var self = this;

        this.template = saralux_core_dm_us_update_password_tpl;
        
        this.parent = options.parent;
        this.container = options.container;

        this.environment_component = this.container.getComponent('Environment');

        this.model = new DashboardModulesSVSS2Model();
    }

    DMSVUserSettingsUpdatePasswordView.prototype = Object.create(SCView.prototype);
    DMSVUserSettingsUpdatePasswordView.prototype.constructor = DMSVUserSettingsUpdatePasswordView;

    DMSVUserSettingsUpdatePasswordView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-mp-db-change-password']" : "changePassword",
            'focusout [data-focusout="m360-mp-empty-validation"]': 'mpEmptyValidation',
            'focusout [data-focusout="m360-mp-pass-validation"]': 'mpPassValidation'
        };
    }

    DMSVUserSettingsUpdatePasswordView.prototype.mpEmptyValidation = function (e) {
        if(this.$(e.currentTarget).val()=='') {  
            this.$(e.currentTarget).siblings("p").addClass("err");
        }  else {
            this.$(e.currentTarget).siblings("p").removeClass("err");
        }
    }

    DMSVUserSettingsUpdatePasswordView.prototype.mpPassValidation = function (e) {
        if(this.$(e.currentTarget).hasClass('new-pass')) {
            this.$(e.currentTarget).siblings("p").removeClass("err");
            if (this.$(e.currentTarget).val() == '') {
                this.$(e.currentTarget).siblings("p.err-1").addClass("err");
            } else {
                // var regex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,12}$/;

                // var regex = new RegExp("^(?=.{8,})"); // contains at least 8 characters
                // var regex = /^[^\s]{8,}$/; // contains at least 8 characters, does not contain spaces
                var regex = /^[^\s].{6,}[^\s]$/; // contains at least 8 characters, does not start or end in a space

                if (!regex.test(this.$(e.currentTarget).val())) {
                    this.$(e.currentTarget).siblings("p.err-2").addClass("err");
                } else {
                    this.$(e.currentTarget).siblings("p").removeClass("err");
                }
            }
        } else {
            this.$(e.currentTarget).siblings("p").removeClass("err");
            if(this.$(e.currentTarget).val()=='') {
                this.$(e.currentTarget).siblings("p.err-1").addClass("err");
            } else if(this.$(e.currentTarget).val() != this.$(".new-pass").val()) {
                this.$(e.currentTarget).siblings("p.err-2").addClass("err");
            } else {
                this.$(e.currentTarget).siblings("p").removeClass("err");
            }
        }
    }

    DMSVUserSettingsUpdatePasswordView.prototype.changePassword = function(e) {
        var self = this;

        var logoutURL = this.environment_component.getSiteSetting('touchpoints.logout');

        var kgPpiMFQ = "gTs^>?b7}@}?cRJwj*,8~qckGUL.jY9!@k^%";

		this.$("#mpd-update-password #password-form-password").trigger("focusout");
		this.$("#mpd-update-password #password-form-re-password").trigger("focusout");

        if(this.$("#mpd-update-password").find('.err').length == 0) {
            this.$("#mpd-update-password .global-error-msg").hide();
            this.$("#mpd-update-password .global-error-msg #error-text").text("");

            var data = {
                currentPassword: this.$("#mpd-update-password #password-form-current-password").val(),
                newPassword: this.$("#mpd-update-password #password-form-password").val()
            };

            this.model.save({
                action: "CHANGE_PASSWORD",
                data: CryptoJS.encryptValue(JSON.stringify(data), kgPpiMFQ)
            }).then(function(res) {
                if(res.hasError) {
                    self.$("#mpd-update-password .global-error-msg").show();
                    self.$("#mpd-update-password .global-error-msg #error-text").text(res.message?res.message:Utils.translate("Please check your inputs and try again!"));
                } else {
                    self.$("#mpd-update-password .global-success-msg").show();

                    setTimeout(function () {
                        window.location.href = logoutURL;
                    }, 1000);
                }
            });
        } else {
            this.$("#mpd-update-password .global-error-msg").show();
            this.$("#mpd-update-password .global-error-msg #error-text").text(Utils.translate("Please check your inputs and try again!"));
        }

    }

    DMSVUserSettingsUpdatePasswordView.prototype.getContext = function () {
        return {
            icons: {
                icnDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-default.png')),
                icnEditBlack: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-sm.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-close-sm.png'))
            }
        }
    }
    
    return DMSVUserSettingsUpdatePasswordView;
});

define('Saralux.Core.DashboardModulesSV.UserSettings.View',	[
	'saralux_core_dm_user_settings.tpl',

    'Saralux.Core.DashboardModulesSV.UserSettings.MainProfile.View',
    'Saralux.Core.DashboardModulesSV.UserSettings.CustomProfile.View',
    'Saralux.Core.DashboardModulesSV.UserSettings.Addresses.View',
    'Saralux.Core.DashboardModulesSV.UserSettings.PaymentMethods.View',
    'Saralux.Core.DashboardModulesSV.UserSettings.BankInformation.View',
    'Saralux.Core.DashboardModulesSV.UserSettings.Notifications.View',
    'Saralux.Core.DashboardModulesSV.UserSettings.UpdatePassword.View',

    'Saralux.Core.MyPortal.Context.Model',

    'Saralux.Core.DashboardModulesSV.SS2Model',

    'Saralux.Core.CommonLibraries.CAPI.Model',

    'jQuery',
	'Utils',
	'SCView'
], function (
	saralux_core_dm_user_settings_tpl,

    UserSettingsMainProfileView,
    UserSettingsCustomProfileView,
    UserSettingsAddressesView,
    UserSettingsPaymentMethodsView,
    UserSettingsBankInformationView,
    DMSVUserSettingsNotificationsView,
    UserSettingsUpdatePasswordView,

    MyPortalContextModel,

    DashboardModulesSVSS2Model,

    CoreCLCAPIModel,
	
    jQuery,
	Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DMSVUserSettingsView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_dm_user_settings_tpl;
        
        this.parent = options.parent;
        this.container = options.container;

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.isLoading = true;
        this.hasAssociatedVendor = false;

        this.environment_component = this.container.getComponent('Environment');

        this.activeTab = 1;

        this.showChildView = false;
        this.activeView = null;

        this.model = new DashboardModulesSVSS2Model();
        this.capiModel = new CoreCLCAPIModel();

        this.documentsToUpload = [];
        this.isDocumentAvailable = false;

        var data = {
            action: "check_associated_vendor_exists",
            customerId: this.customerId
        }
        jQuery.when(this.model.save(data)).done(function(res) {
            if(res && res.length > 0){
                res = res[0];
            }
            
			self.childViews = {
				'Saralux.UserSettings.PaymentMethods': function() {
					return new UserSettingsPaymentMethodsView({
						container: self.container,
						firstCard: false
					});
				},
                'Saralux.UserSettings.MainProfile': function() {
					return new UserSettingsMainProfileView({
						container: self.container,
                        parent: this
					});
				},
                'Saralux.UserSettings.CustomProfile': function() {
					return new UserSettingsCustomProfileView({
						container: self.container,
                        webFormId: self.crmTagWebFormId,
                        parent: this
					});
				},
                'Saralux.UserSettings.Addresses': function() {
					return new UserSettingsAddressesView({
						container: self.container,
                        parent: this
					});
				},
                'Saralux.UserSettings.Notifications': function() {
					return new DMSVUserSettingsNotificationsView({
						container: self.container,
                        parent: this
					});
				},
                'Saralux.UserSettings.UpdatePassword': function() {
					return new UserSettingsUpdatePasswordView({
						container: self.container,
						firstCard: false
					});
				}
			}
            
            self.hasAssociatedVendor = res.isAssociatedVendorPresent;
            if(self.hasAssociatedVendor){
                self.childViews['Saralux.UserSettings.BankInformation'] = function() {
                    return new UserSettingsBankInformationView({
                        container: self.container,
                        parent: self
                    });
                }
            }
            self.isLoading = false;
            self.getCRMTagsList();
            self.getDocumentList(true);
		});
    }

    DMSVUserSettingsView.prototype = Object.create(SCView.prototype);
    DMSVUserSettingsView.prototype.constructor = DMSVUserSettingsView;

    DMSVUserSettingsView.prototype.getEvents = function () {
        return {
            'click [data-action="tabs-click"]': 'tabsClick',
            'click [data-action="switch-click"]': 'switchClick',

            'click [data-action="m360-mp-to-edit-profile"]': 'toEditProfile',
            'click [data-action="m360-mp-to-custom-edit-profile"]': 'toCustomEditProfile',

            'focusout [data-focusout="input-required-focusout"]': "inputRequiredFocusout",
            'focusout [data-focusout="email-focusout"]': 'getUserEnteredEmail',
            'focusout [data-focusout="phone-number-focusout"]': 'getUserEnteredPhoneNumber',
            'focusout [data-focusout="mobile-number-focusout"]': 'getUserEnteredMobileNumber',
            
            'click [data-action="filter-btn-click"]': 'filterBtnClick',
            'click [data-action="overlay-click"]': 'overlayClick',
            'click [data-action="upload-click"]': 'uploadClick',
            
            'change [data-change="file-change"]': "fileChange",
            'click [data-action="remove-image-click"]': "removeImageClick",
            'click [data-action="close-upload-modal"]': "closeUploadModal",
            
            'click [data-action="get-documents"]':"getDocuments",
            'click [data-action="display-selected-Document"]':"displaySelectedDocument",
            'click [data-action="replace-selected-Document"]':"replaceSelectedDocument",
            'click [data-action="rerender-documents-tab"]':"reRenderDocumentsTab",

            'click [data-action="m360-mpdb-back-to-settings"]': "backToSettings"
        };
    }

    DMSVUserSettingsView.prototype.backToSettings = function() {
        this.showChildView = false;
        this.activeView = null;
		this.render();

        this.$("#settings-tab-"+this.activeTab).trigger("click");
    }

    DMSVUserSettingsView.prototype.getCRMTagsList = function(){
        var self = this;
        if(this.customerId) {
            var paramsToFetchCRMTags = {
                action: "GET_CUSTOMER_CRM_TAGS",
                customerId: this.customerId
            }
            this.model.save(paramsToFetchCRMTags).done(function(res) {
                if(!res.hasError){
                    self.crmTagDetails = res.crmTagDetails;
                    var i=0;
                    while(i < self.crmTagDetails.length){
                        if(self.crmTagDetails[i].crmTagWebIcon != null && self.crmTagDetails[i].crmTagWebIcon.length > 0){
                            self.crmTagDetails[i].showWebIcon = true;
                        }else{
                            self.crmTagDetails[i].showWebIcon = false;
                        }
                        i++;
                    }
                }
                self.render();
            });

        }
    }

    DMSVUserSettingsView.prototype.reRenderDocumentsTab = function(e){
        this.getDocumentList(false);
    }

    DMSVUserSettingsView.prototype.displaySelectedDocument = function(e){
        var index = null;
		index = this.$(e.currentTarget).attr('data-index');
        this.selectedDocument = this.documents[index];
        this.$("#view-document #embedded-document").attr("src", this.selectedDocument.url);
        this.$("#view-document").modal("show");
    }

    DMSVUserSettingsView.prototype.replaceSelectedDocument = function(e){
        var index = null;
		index = this.$(e.currentTarget).attr('data-index');
        this.selectedDocument = this.documents[index]; 
    }

    DMSVUserSettingsView.prototype.getDocumentList = function(isLoad){
        var self = this;
        if(this.customerId) {
            var paramsToFetchCustomerFiles = {
                action: "GET_CUSTOMER_UPLOADED_FILES",
                customerId: this.customerId
            }
            this.model.save(paramsToFetchCustomerFiles).done(function(res) {
                if(!res.hasError){
                    if(res.documents.length > 0)
                        self.isDocumentAvailable = false;
                    else
                        self.isDocumentAvailable = true;
                    self.documents = res.documents;
                    for(var i=0; i<self.documents.length; i++){
                        self.documents[i].modified = self.documents[i].modified.split(" ")[0];
                    }
                }
                self.render();
                if(!isLoad)
                    self.$("#settings-tab-6").trigger('click');
            });

        }
    }

    DMSVUserSettingsView.prototype.removeDocument = function (e) {
		var index = this.$(e.currentTarget).attr("data-index");
		this.documentsToUpload = [];
		this.hideUploadDocBox = false;
		
		this.render();
	}

	DMSVUserSettingsView.prototype.uploadDocument = function (e) {
		var self = this;
        this.documentsToUpload = [];
        var uploadedDoc = jQuery('#upload-document')[0].files[0]
		var size = uploadedDoc.size / 1000000;
		var fileInfo = uploadedDoc.name.split(".");
		var fileExtension = fileInfo[fileInfo.length-1];
		this.documentsUploaded = false;
        if(uploadedDoc && fileExtension == "pdf" && size <= 10){
            var reader = new FileReader();
            reader.onloadend = function() {
				self.documentsUploaded = true;
				var name = uploadedDoc.name;
                uploadedDoc = (reader.result).split('base64,')[1];
				
				self.documentsToUpload.push({
					uploadedDoc: uploadedDoc,
					name: name,
					size: size,
					id: null,
					isValid: true
				});
				self.uploadedDocumentCount++;
				var arrayLength = self.documentsToUpload.length - 1;
				if(self.uploadedDocumentCount == 3){
					self.hideUploadDocBox = true;
				}else{
					self.hideUploadDocBox = false;
				}
				//self.render();
				self.$(".documents").find("p").hide();
            }
            reader.readAsDataURL(uploadedDoc);
		}else{
			this.$(".documents").find("p").show();
		}
	}

    DMSVUserSettingsView.prototype.closeUploadModal = function(e) {
        var self = this;
        var data = {
            action: "REPLACE_SELECTED_DOCUMENT",
            customerId: this.customerId,
            selectedDocument: this.selectedDocument,
            documentsToUpload: this.documentsToUpload[0]
        };

        this.model.clear({ silent: true });
        this.model.save(data).done(function(res) {
            if(!res.hasError){
                this.documentsToUpload = [];
                $("#replace-document").modal('hide');
                $('.modal-backdrop').remove();
                $(document.body).removeClass("modal-open");
                $(document.body).css("padding", "0");
        
                setTimeout(function () {
                    self.$('#document-replaced').modal('show');
                }, 500);
                self.$("#document-global-error-msg").hide();
            }else{
                $("#replace-document").modal('hide');
                self.$("#document-global-error-msg").show();
                setTimeout(function() {
                    self.$("#document-global-error-msg").hide();
                }, 3000);
            }
        });
	}

    DMSVUserSettingsView.prototype.uploadClick = function (e) {
        e.stopImmediatePropagation();
        this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
    },

    DMSVUserSettingsView.prototype.removeImageClick = function (e) {
        this.$("#upload-document").val('');
        this.$('.upload-image-box').css({'background-color':'#fafafa', 'border-style':'dashed'});
        this.$('.uploaded-files-box').hide();
        this.$('.upload-image').show();
        this.$('.submit-request').prop("disabled", true);
    },

    DMSVUserSettingsView.prototype.readFileName = function(input,thisObj) {
        if(input.files && input.files[0]) {
            var size = input.files[0].size;
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

            const i = Math.floor(Math.log(size) / Math.log(k));
            var image_size = (size / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];

            var twentyMb = 20 * k;
            var kbSize = (size / k);
            kbSize = ((Math.round(kbSize * 100) / 100));

            if (input.files && input.files[0] && kbSize <= twentyMb) {
                var image_name = input.files[0].name;
                
                this.$('.individual-file-box').find(".f-name").html(image_name);
                
                this.$('.individual-file-box').find(".f-size").html(image_size);

                this.$('.upload-image-box').css({'background-color':'#fff', 'border-style':'solid'});
                this.$('.uploaded-files-box').show();
                this.$('.upload-image').hide();
                this.$('.submit-request').prop("disabled", false);
            }
        }
    },

    DMSVUserSettingsView.prototype.fileChange = function (e) {
        this.readFileName(e.target, this.$(e.currentTarget));
        this.uploadDocument(e);
    },

    // DMSVUserSettingsView.prototype.onHoverProfile = function (e) {
	// 	this.$('.show-on-hover1').toggle();
	// },

    DMSVUserSettingsView.prototype.overlayClick = function (e) {
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".filter-btn").removeClass("activefilter");
	},

	DMSVUserSettingsView.prototype.filterBtnClick = function (e) {
		if(!this.$(e.currentTarget).hasClass("activefilter")){
			this.$(".overlaybox").show();
			this.$(e.currentTarget).siblings(".options-set").show();
			this.$(e.currentTarget).addClass("activefilter");
		}
	},

    DMSVUserSettingsView.prototype.setSocialMediaLink = function (e) {
		var self = this;
		var socialMediaLink = this.$(e.currentTarget).val();
		var index = null;
		index = this.$(e.currentTarget).parent().parent().attr('data-index');
		this.getSocialMediaData();
		for(var i=0; i<this.socialMediaSiteRows.length; i++){
			var socialMediaItem = null
			if (this.socialMediaSiteRows[i].socialMediaSiteName == null){
				socialMediaItem = '';
			}else{
				socialMediaItem = this.socialMediaSiteRows[i].socialMediaSiteName.text;
			}
			this.mainProfile.userSelectedSocialMedia[i].socialMediaItem = socialMediaItem;
			this.mainProfile.userSelectedSocialMedia[i].socialMediaLink = this.socialMediaSiteRows[i].siteLink;
		}
	},

    DMSVUserSettingsView.prototype.getUserEnteredEmail= function (e) {
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
			var charLength = this.$(e.currentTarget).val().length;
			if (!regex.test(this.$(e.currentTarget).val()) || charLength>254) {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		}
	},

	DMSVUserSettingsView.prototype.getUserEnteredPhoneNumber = function (e) {
		var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
		if(this.$(e.currentTarget).val() == '' || !regex.test(this.$(e.currentTarget).val()) ) {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} 
		else{
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	},

	DMSVUserSettingsView.prototype.getUserEnteredMobileNumber = function (e) {
		var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
		if(this.$(e.currentTarget).val() == '' || !regex.test(this.$(e.currentTarget).val()) ) {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} 
		else{
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	},

    DMSVUserSettingsView.prototype.inputRequiredFocusout = function (e) {
		var self = this;
		
		setTimeout(function(){
			if(self.$(e.currentTarget).val() == '') {
				self.$(e.currentTarget).siblings('p').addClass('err');
			} else {
				self.$(e.currentTarget).siblings('p').removeClass('err');
			}
		}, 300);
	}

    DMSVUserSettingsView.prototype.removeRowClick = function (e) {
		var self = this;
		var rowCount = this.$('#social-row-count').val();
		var index = this.$(e.currentTarget).parents(".individual-row").attr('data-index');
		this.$('#social-row-count').val(--rowCount);

		var socialMediaItemId = this.$(e.currentTarget).parents(".individual-row").attr("data-id");

		var i = -1;

		if(socialMediaItemId == null || socialMediaItemId == undefined || (""+socialMediaItemId).length == 0) {
			i = index;
		} else {
			for(i=0;i<this.sponsorshipProfile.userSelectedSocialMedia.length;i++) {
				if(this.sponsorshipProfile.userSelectedSocialMedia[i].id == socialMediaItemId) {
					break;
				}
			}
		}

		//update the array which saves the social media items
		this.sponsorshipProfile.userSelectedSocialMedia.splice(i, 1);
		this.socialMediaItemIndex--;
 
		//without rendering, take out the required div from the UI
		//this.$(e.currentTarget).parents(".individual-row").remove();
		//this.$(e.currentTarget).parent().parent().remove();
		this.render();

		var counter = 1;
		this.$('.dynamic-inputs').children('div').each(function () {
			counter++;
		});

		this.socialMediaRowCount = rowCount;
	}

	DMSVUserSettingsView.prototype.addRowClick = function (e) {	
		var self = this;
		var blankFieldFound = false;

		this.$(".dynamic-inputs #social-media-row").find("p").removeClass('err');

		this.$('.dynamic-inputs #social-media-row').each(function () {
			var socialMediaSiteIndex = self.$(this).find('#form-field-social').val();
			var siteLink = self.$(this).find('#form-field-profile-link').val();

			if(socialMediaSiteIndex == 0) {
				blankFieldFound = true;
				self.$(this).find("#form-field-social").siblings("p").addClass('err');
			}
			var regex = /^(https:\/\/www\.|http:\/\/www\.|ftp:\/\/www\.)([a-zA-Z0-9!._\-$/&%#@*])+[^\s]$/;
			if( siteLink.length == 0 || siteLink.length > 999 || !regex.test(siteLink) ) {
				blankFieldFound = true;
				self.$(this).find("#form-field-profile-link").siblings("p").addClass('err');
			}
		});

		if(!blankFieldFound) {
			this.sponsorshipProfile.userSelectedSocialMedia.push({
				id: null,
				socialMediaItem: null,
				socialMediaLink: ''
			});

			this.socialMediaItemIndex++;

			this.render();	
		}
	}

    DMSVUserSettingsView.prototype.uploadProfileImage = function(e) {
		var self = this;

		var targetPreview = this.$(e.currentTarget).attr('data-target-preview');
		var fieldId = this.$(e.currentTarget).attr('data-field-id');
		var fileType = e.currentTarget.files[0].type;
		var size = parseInt(Math.floor(e.currentTarget.files[0].size / 1000000));
		if(e.currentTarget.files && e.currentTarget.files[0] && (fileType == "image/jpeg" || fileType == "image/jpg") && size <= 5) {
				var reader = new FileReader();
				reader.onload = function(e) {
						var base64 = e.target.result.split('base64,')[1];
						self.$('#'+targetPreview).css('background-image', 'url('+e.target.result +')');
						self.$('#'+fieldId).val(base64);
						self.$('#'+fieldId).attr('data-changed', "true");

						self.formData.changeProfileImg = true;
						self.formData.profileImage = base64;
						self.formData.profileImageUrl = e.target.result;

						self.$('#'+targetPreview).hide();
						self.$('#'+targetPreview).fadeIn(500);
						self.render();
				}
                self.$('.remove-avatar').show();
				reader.readAsDataURL(e.currentTarget.files[0]);
		}
	}

	DMSVUserSettingsView.prototype.removeProfileImage = function(e) {
		this.formData.changeProfileImg = true;
		this.formData.profileImage = null;
		this.formData.profileImageUrl = null;
		this.render();
	}

    DMSVUserSettingsView.prototype.toEditProfile = function (e) {
        this.showChildView = true;
        this.activeView = "Saralux.UserSettings.MainProfile";
		this.render();
	}

    DMSVUserSettingsView.prototype.toCustomEditProfile = function(e) {
		this.showChildView = true;
        this.activeView = "Saralux.UserSettings.CustomProfile";
        var index = this.$(e.currentTarget).attr('data-index');
        this.crmTagWebFormId = this.crmTagDetails[index].crmTagWebForm;
		this.render();
	}

    DMSVUserSettingsView.prototype.tabsClick = function (e) {
        this.$(".tabs").removeClass("active");
        jQuery(e.currentTarget).addClass("active");
        
        this.$(".tab-body").hide();
        var clickedtab = jQuery(e.currentTarget).attr('tab-name');
        this.activeTab = this.$(e.currentTarget).attr('data-tab-id');
        this.$("." + clickedtab).show();

        // if(clickedtab == "tab6"){
        //     this.getDocumentList();
        // }
    }

    DMSVUserSettingsView.prototype.switchClick = function (e) {
        jQuery(e.currentTarget).find('input[type=checkbox]').prop('checked', function () {
            return !this.checked;
        });
    }

    DMSVUserSettingsView.prototype.hoverOnProfile = function (e) {
        alert("hii Hello");
        this.$(".show-on-hover1").toggle();
    }

    DMSVUserSettingsView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            hasAssociatedVendor: this.hasAssociatedVendor,

            mainProfile:this.mainProfile,
            crmTagDetails: this.crmTagDetails,
            documents: this.documents,
            selectedDocument: this.selectedDocument,
            selectedAddress: this.selectedAddress,

            imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),

            showChildView: this.showChildView,
            activeView: this.activeView,
            isDocumentAvailable: this.isDocumentAvailable,

            icons: {
                icnProfileSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-settings-main.png')),
                icnEditSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-edit-sm.png')),
                icnDocuments: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-file-md.png')),
                icnDownload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download.png')),
                icnUpload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-upload.png')),
                icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-view.png')),
                icnWarningMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-warning.png')),
                icnRemoveDoc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
                icnDocUploaded: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/group-3.png')),
                icnUploadLg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png')),
                icnUploadSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/img-uploaded-success.png')),
                icnActions: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-actions.png')),
                icnProfileSM: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-sm.png')),
                icnProfileInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-profile-inactive.png')),
                icnAddressActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-address-active.png')),
                icnAddressInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-address-inactive.png')),
                icnPaymentMethodActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-payment-methods-active.png')),
                icnPaymentMethodInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-payment-methods-inactive.png')),
                icnUpdatePasswordActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-update-password-active.png')),
                icnUpdatePasswordInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-update-password-inactive.png')),
                icnGeneralNotificationActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-general-notifications-active.png')),
                icnGeneralNotificationInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-general-notifications-inactive.png')),
                icnDocumentActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-document-active.png')),
                icnDocumentInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-document-inactive.png')),
                icnBankInfoActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-bank-info-active.png')),
                icnBankInfoInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-bank-info-inactive.png'))
            }
        }
    }
    return DMSVUserSettingsView;
});

define('Saralux.Core.DashboardSV.Model', [
	'Backbone',
	'Utils',
  	'underscore'
],	function(
	Backbone,
	Utils,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(getExtensionAssetsPath('services/DashboardSV.Service.ss'))
	});
});

define('Saralux.Core.DashboardSV.View',	[
	'saralux_core_dashboardsv.tpl',

	'Saralux.Core.DashboardModulesSV.UserSettings.View',

	'Saralux.Core.ExternalLibraries.CryptoJS',
	
	'Saralux.Core.DashboardSV.Model',
	
	'Utils',
	'Backbone',
	'jQuery',
	'underscore'
],	function (
	saralux_core_dashboardsv_tpl,

	DashboardModulesSVUserSettingsView,

	CryptoJS,
	
	DashboardSVModel,
	
	Utils,
	Backbone,
	jQuery,
	_
) {
	
	'use strict';

	return Backbone.View.extend({

		template: saralux_core_dashboardsv_tpl,

		childViews: {
			'DashboardModulesSV.UserSettings': function() {
				return new DashboardModulesSVUserSettingsView({
					parent: this,
					container: this.container
				});
			}
		},

		events: {
			//"click [data-action='m360-mp-db-ep-revert-changes']" : "revertChanges",
			"click [data-action='m360-mp-update-profile']" : "updateMyProfile",
			"click [data-action='m360-db-edit-profile-remove-image']" : "setRemoveImage",
			"change [data-change='m360-evs-sel-country']": "selectCountry",

			"click [data-action='m360-mpdb-to-user-settings']": "toUserSettings",
			"click [data-action='m360-mpdb-to-edit-profile']": "toEditProfile",
			"click [data-action='m360-mpdb-to-dashboard']": "toDashboard",
			
			'focusout [data-focusout="m360-mp-empty-validation"]': 'mpEmptyValidation',
			'focusout [data-focusout="m360-mp-phone-mobile-validation"]': 'mpPhoneMobileValidation',
			"change [data-change='m360-mp-select-validation']": "mpSelectValidation",
			'focusout [data-focusout="m360-mp-zip-validation"]': 'mpZipValidation',
			'click [data-action="m360-mp-submit"]': 'mpSubmit',
			'click [data-action="m360-mp-change-picture"]': 'mpChangePicture',
			"change [data-change='m360-mp-change-picture-change']": "mpChangePictureChange",
			"click [data-action='view-profile']": "viewProfile",
			"click [data-action='view-dashboard']": "viewDashboard",
			'click [data-action="m360-mp-change-password"]': 'mpChangePassword',
			"click [data-action='show-hide-me']": "showHideMe",
			/* 'click [data-action="m360-mp-update-password"]': 'mpUpdatePass', */
			/* 'focusout [data-focusout="m360-mp-pass-validation"]': 'mpPassValidation', */
			'click [data-action="overlay-click"]': 'overlayClick',
			'click [data-action="remove-row"]': 'removeRow',
			'click [data-action="social-media-type"]': 'socialMediaType',
			'click [data-action="add-more-fields"]': 'addMoreFields',
			'click [data-action="social-media-type-options-option"]': 'socialMediaTypeOptionsOption'
		},

		initialize: function (options) {
			var self = this;

			var IhIByvhasYD = 'kin5wtp20a';

			this.options = options;
			this.container = options.container;
			this.m360Context = SC.m360Context;
			// this.states = this.m360Context.states;

			this.userProfile = null;
			this.userprofile_component = this.container.getComponent('UserProfile');
			this.environment_component = this.container.getComponent('Environment');

			this.showOrdersCard = this.environment_component.getConfig("showOrdersCard");

			var currentPermissions = this.m360Context.currentPermissions;
			currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissions, IhIByvhasYD));
			
			this.parentRecordId = currentPermissions.servicePositionForId;
			
			this.customerLicense = {
				membershipStd: false,
				membershipPrm: false,
				eventsStd: false,
				eventsPrm: false,
				learningStd: false,
				learningPrm: false,
				credentialingStd: false,
				credentialingPrm: false,
				customStd: false,
				customPrm: false
			};

			this.initLicense();

			this.myInformation = null;
			this.myLatestOrder = null;
			this.upcomingEvent = null;
			this.upcomingClass = null;
			this.upcomingElection = null;
			this.myMembership = null;
			this.myContributions = null;
			this.myJourney = null;

			//------------ Abhishek's changes
			this.myImage = null;
			//------------

			this.countries = [];
			this.states = [];
			this.allStates = [];

			this.removeImage = false;

			this.model = new DashboardSVModel();

			this.isLoading = true;
			this.isPhoneDevice = Utils.isPhoneDevice();
			this.socialTypeCount = 4;

			this.activeView = null;

			this.model.save({
				action: "init_dashboard",
				customerLicense: this.customerLicense,
				parentId: this.parentRecordId
			}).done(function(res) {
				if(res.hasError) {
					console.error('Error: Dashboard', res.errorMessage);
					self.isLoading = false;
					self.render();
					jQuery(window).scrollTop(0);
				} else {
					self.myInformation = res.cardInformation.myInformation;
					// console.log(self.myInformation);
					self.myImage = (self.myInformation)?self.myInformation.profileImage:null;
					self.myLatestOrder = res.cardInformation.myLatestOrder;
					self.upcomingEvent = res.cardInformation.upcomingEvent;
					self.upcomingClass = res.cardInformation.upcomingClass;
					self.upcomingElection = res.cardInformation.upcomingElection;
					self.myMembership = res.cardInformation.myMembership;
					self.myContributions = res.cardInformation.myContributions;
					self.myJourney = res.cardInformation.myJourney;

					self.countries = res.countries;
					self.allStates = res.states;

					self.userprofile_component.getUserProfile().then(function(res) {
						// console.log('res getUserProfile', res);
						self.userProfile = res;
						self.initCustomerFields();
						self.isLoading = false;
						self.render();

						var hasState = false;
						for(var j = 0; j < self.states.length; j++) {
							if(self.states[j].selected) {
								hasState = true;
								break;
							}
						}

						if(!hasState) {
							self.$("#profile-info-form-country").trigger("change");
						}
						
						jQuery(window).scrollTop(0);
					});
				}
			});
		},

		initLicense: function initLicense() {
			var alskQPWO = 'kin5wtp20a';
			var m360License = this.m360Context.environment_component.getConfig('m360License');
			m360License = JSON.parse(CryptoJS.decryptValue(m360License, alskQPWO));

			for(var i = 0; m360License.modules && i < m360License.modules.length; i++) {
				var thisModule = m360License.modules[i].module.toLowerCase();
				var thisLicenseType = m360License.modules[i].licenseType.toLowerCase();

				if(thisModule.indexOf("events") != -1) {
					if(thisLicenseType.indexOf("premium") != -1) {
						this.customerLicense.eventsStd = true;
						this.customerLicense.eventsPrm = true;
					} else {
						this.customerLicense.eventsStd = true;
					}
				} else if(thisModule.indexOf("membership") != -1) {
					if(thisLicenseType.indexOf("premium") != -1) {
						this.customerLicense.membershipStd = true;
						this.customerLicense.membershipPrm = true;
					} else {
						this.customerLicense.membershipStd = true;
					}
				} else if(thisModule.indexOf("learning") != -1) {
					if(thisLicenseType.indexOf("premium") != -1) {
						this.customerLicense.learningStd = true;
						this.customerLicense.learningPrm = true;
					} else {
						this.customerLicense.learningStd = true;
					}
				} else if(thisModule.indexOf("credentialing") != -1) {
					if(thisLicenseType.indexOf("premium") != -1) {
						this.customerLicense.credentialingStd = true;
						this.customerLicense.credentialingPrm = true;
					} else {
						this.customerLicense.credentialingStd = true;
					}
				} else if(thisModule.indexOf("custom") != -1) {
					if(thisLicenseType.indexOf("premium") != -1) {
						this.customerLicense.customStd = true;
						this.customerLicense.customPrm = true;
					} else {
						this.customerLicense.customStd = true;
					}
				}
			}
			
			return;
		},

		initCustomerFields: function initCustomerFields() {
			var myInformation = this.myInformation;
			
			// this.profile = ProfileModel.getInstance();

			this.customerInfo = {
				id: "",
				profileId: "",
				firstName: "",
				middleName: "",
				lastName: "",
				emailId: "",
				phone: "",
				mobile: "",
				addr1: "",
				addr2: "",
				city: "",
				state: "",
				zip: ""
			};

			// this.customerInfo.id = this.profile.get('internalid');
			// this.customerInfo.email = this.profile.get('email');
			this.customerInfo.id = this.userProfile.internalid;
			this.customerInfo.email = this.userProfile.email;
			this.customerInfo.profileId = myInformation.profileId;
			if(myInformation) {
				this.customerInfo.firstName = myInformation.firstName;
				this.customerInfo.middleName = myInformation.middleName;
				this.customerInfo.lastName = myInformation.lastName;
				this.customerInfo.companyName = myInformation.companyName;
				this.customerInfo.isPerson = myInformation.isPerson;
				this.customerInfo.phone = myInformation.phone;
				this.customerInfo.mobile = myInformation.mobile;

				this.customerInfo.addr1 = myInformation.addr1;
				this.customerInfo.addr2 = myInformation.addr2;
				this.customerInfo.city = myInformation.city;
				this.customerInfo.state = myInformation.state;
				this.customerInfo.zip = myInformation.zip;
				this.customerInfo.country = myInformation.country;
			} else {
				/* this.customerInfo.firstName = this.profile.get('firstname');
				this.customerInfo.middleName = this.profile.get('middlename');
				this.customerInfo.lastName = this.profile.get('lastname');
				this.customerInfo.companyName = this.profile.get('companyname');
				this.customerInfo.isPerson = this.profile.get('isperson');
				this.customerInfo.phone = this.profile.get('phone');
				this.customerInfo.mobile = this.profile.get('mobilephone'); */
				this.customerInfo.firstName = this.userProfile.firstname;
				this.customerInfo.middleName = this.userProfile.middlename;
				this.customerInfo.lastName = this.userProfile.lastname;
				this.customerInfo.companyName = this.userProfile.companyname;
				this.customerInfo.isPerson = (this.userProfile.firstname || this.userProfile.lastname)?true:false;
				this.customerInfo.phone = this.userProfile.phone;
				this.customerInfo.mobile = this.userProfile.mobilephone;
			}

			/*var addressBook = this.profile.get('addressbook');
			for(var i = 0; addressBook && i < addressBook.length; i++) {
				if(addressBook[i].defaultbilling === "T") {
					this.customerInfo.addr1 = addressBook[i].addr1;
					this.customerInfo.addr2 = addressBook[i].addr2;
					this.customerInfo.city = addressBook[i].city;
					this.customerInfo.state = addressBook[i].state;
					this.customerInfo.zip = addressBook[i].zip;
					this.customerInfo.country = addressBook[i].country;
				}
			}*/
			var addressBook = this.userProfile.addressbook;
			for(var i = 0; addressBook && i < addressBook.length; i++) {
				if(addressBook[i].defaultbilling === "T") {
					this.customerInfo.addr1 = addressBook[i].addr1;
					this.customerInfo.addr2 = addressBook[i].addr2;
					this.customerInfo.city = addressBook[i].city;
					this.customerInfo.state = addressBook[i].state;
					this.customerInfo.zip = addressBook[i].zip;
					this.customerInfo.country = addressBook[i].country;
				}
			}
			var defaultCountry = false;
			for(var i = 0; i < this.countries.length; i++) {				
				if(this.countries[i].code == this.customerInfo.country) {
					this.countries[i].selected = true;
					defaultCountry = true;
				} else {
					this.countries[i].selected = false;
				}
			}
			
			 if(!defaultCountry){ //for first login set default as us
				for(var i = 0; i < this.countries.length; i++) {					
					if(this.countries[i].code == "US") {
						this.countries[i].selected = true;						
					} else {
						this.countries[i].selected = false;
					}
				}

			 }

			for(var i=0;i<this.allStates.length;i++) {
				// console.log("this.customerInfo.country: " + this.customerInfo.country);
				if(this.allStates[i].countrycode == this.customerInfo.country) {
					this.states = this.allStates[i].states;
					
					for(var j = 0; j < this.states.length; j++) {
						if(this.states[j].code == this.customerInfo.state) {
							this.states[j].selected = true;
						} else {
							this.states[j].selected = false;
						}
					}

					break;
				}
			}
		},

		selectCountry: function selectCountry(e) {
			var selectedCountryCode = this.$("#profile-info-form-country").val();
			
			this.states = [];
			
			for(var i = 0; i < this.allStates.length; i++) {
				if(this.allStates[i].countrycode == selectedCountryCode) {
					this.states = this.allStates[i].states;
					break;
				}
			}
			
			if(selectedCountryCode != 'select' && this.states.length == 0) {
				this.$(".state-container").html("<input type='text' placeholder='"+Utils.translate('Enter State name')+"' name='profile-info-form-state' id='profile-info-form-state' class='form-control' required />");
			} else {
				this.$(".state-container").html("<select data-val='{{state}}' name='profile-info-form-state' id='profile-info-form-state' class='form-control' require style='padding: 7px;'>");
				var stateOptions = "<option value='select'>"+Utils.translate("Select State")+"</option>";
				for(var i=0;i<this.states.length;i++) {
					stateOptions = stateOptions + "<option value="+this.states[i].code+">" + this.states[i].name + "</option>";
				}

				this.$("#profile-info-form-state").html(stateOptions);
			}
		},
		
		setRemoveImage: function setRemoveImage(e) {
			this.removeImage = true;
			this.$('.profile-image-preview').css('background-image', "url(" + Utils.getAbsoluteUrl(getExtensionAssetsPath("img/default-profile.jpg")) + ")");
		},


		revertChanges: function revertChanges(e) {
			this.render();
			this.$(".profile").show();
			this.$(".dashboard").hide(); 
		},

		updateMyProfile: function updateMyProfile(e) {
			var self = this;

			var profileImage = this.$("#change-profile-image")[0].files[0];

			if(profileImage) {
				var reader = new FileReader();
				reader.onloadend = function() {
					var data = {
						action: "update_profile",
						updateInfo: {
							id: self.customerInfo.id,
							profileId: self.customerInfo.profileId,
							firstName: self.customerInfo.isPerson?self.$("#profile-info-form-first-name").val():"",
							middleName: self.customerInfo.isPerson?self.$("#profile-info-form-middle-name").val():"",
							lastName: self.customerInfo.isPerson?self.$("#profile-info-form-last-name").val():"",
							companyName: self.customerInfo.isPerson?"":self.$("#profile-info-form-company-name").val(),
							isPerson: self.customerInfo.isPerson,
							phone: self.$("#profile-info-form-phone").val(),
							mobile: self.customerInfo.isPerson?self.$("#profile-info-form-mobile").val():"",
							addr1: self.$("#profile-info-address-line-1").val(),
							addr2: self.$("#profile-info-address-line-2").val(),
							city: self.$("#profile-info-form-city").val(),
							state: self.$("#profile-info-form-state").val(),
							country: self.$("#profile-info-form-country").val(),
							zip: self.$("#profile-info-form-zip").val(),
							removeImage: false,
							profileImage: (reader.result).split('base64,')[1]
						}
					};

					self.model.clear({ silent: true });
					self.model.save(data).done(function(res) {
						// console.log('res1', res);
						data = data.updateInfo;

						if(!res.hasError) {
							// console.log('data-saved', data);
							if(self.customerInfo.isPerson) {
								self.myInformation.firstName = data.firstName;
								self.myInformation.middleName = data.middleName;
								self.myInformation.lastName = data.lastName;
								self.myInformation.mobile = data.mobile;
							} else {
								self.myInformation.companyName = data.companyName;
							}
							self.myInformation.phone = data.phone;
							self.myInformation.addr1 = data.addr1;
							self.myInformation.addr2 = data.addr2;
							self.myInformation.city = data.city;
							self.myInformation.state = data.state;
							self.myInformation.zip = data.zip;
							self.myInformation.country = data.country;
							self.myInformation.profileImage = res.newImageURL+"&timestamp="+new Date().getTime();

							window.location.reload();
						} else {
							console.error('data-not-saved', res.errorMessage);
						}
						// self.initCustomerFields();
						// self.render();
						// jQuery(window).scrollTop(0);
					});
				}
				reader.readAsDataURL(profileImage);
			} else {
				var data = {
					action: "update_profile",
					updateInfo: {
						id: this.customerInfo.id,
						profileId: this.customerInfo.profileId,
						firstName: this.customerInfo.isPerson?this.$("#profile-info-form-first-name").val():"",
						middleName: this.customerInfo.isPerson?this.$("#profile-info-form-middle-name").val():"",
						lastName: this.customerInfo.isPerson?this.$("#profile-info-form-last-name").val():"",
						companyName: this.customerInfo.isPerson?"":this.$("#profile-info-form-company-name").val(),
						isPerson: this.customerInfo.isPerson,
						phone: this.$("#profile-info-form-phone").val(),
						mobile: this.customerInfo.isPerson?this.$("#profile-info-form-mobile").val():"",
						addr1: this.$("#profile-info-address-line-1").val(),
						addr2: this.$("#profile-info-address-line-2").val(),
						city: this.$("#profile-info-form-city").val(),
						state: this.$("#profile-info-form-state").val(),
						zip: this.$("#profile-info-form-zip").val(),
						country: self.$("#profile-info-form-country").val(),
						removeImage: this.removeImage,
						profileImage: null
					}
				};

				this.model.clear({ silent: true });
				this.model.save(data).done(function(res) {
					//console.log('res', res);
					data = data.updateInfo;

					if(!res.hasError) {
						// console.log('data-saved', data);
						if(self.customerInfo.isPerson) {
							self.myInformation.firstName = data.firstName;
							self.myInformation.middleName = data.middleName;
							self.myInformation.lastName = data.lastName;
							self.myInformation.mobile = data.mobile;
						} else {
							self.myInformation.companyName = data.companyName;
						}
						self.myInformation.phone = data.phone;
						self.myInformation.addr1 = data.addr1;
						self.myInformation.addr2 = data.addr2;
						self.myInformation.city = data.city;
						self.myInformation.state = data.state;
						self.myInformation.zip = data.zip;
						self.myInformation.country = data.country;
						self.myInformation.profileImage = self.myImage;
						
						window.location.reload();
					} else {
						console.error('data-not-saved', res.errorMessage);
					}
					// self.initCustomerFields();
					// self.render();
					// jQuery(window).scrollTop(0);
				});
			}

			this.removeImage = false;

			// return true;
		},

		toUserSettings: function (e) {
			this.activeView = "DashboardModulesSV.UserSettings";

			this.render();
			jQuery(window).scrollTop(0);
		},

		toEditProfile: function (e) {
			this.activeView = "DashboardModulesSV.EditProfile";

			this.render();
			jQuery(window).scrollTop(0);
		},

		toDashboard: function (e) {
			this.activeView = null;

			this.render();
			jQuery(window).scrollTop(0);
		},

		mpEmptyValidation: function (e) {
			if(this.$("#" + e.currentTarget.id).val()=='') {  
				this.$("#" + e.currentTarget.id).siblings("p").addClass("err");
			} 
			else{
				this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
			}
		},

		mpPhoneMobileValidation: function (e) {
			var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;

			if(!regex.test(this.$("#" + e.currentTarget.id).val()) && this.$("#" + e.currentTarget.id).val()!='') {  
				this.$("#" + e.currentTarget.id).siblings("p").addClass("err");
			} 
			else{
				this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
			}
		},

		mpSelectValidation: function (e) {
			if(this.$("#" + e.currentTarget.id).val()=='select') {  
				this.$("#" + e.currentTarget.id).siblings("p").addClass("err");
			} 
			else{
				this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
			}
		},

		mpZipValidation: function (e) {
			if(this.$("#" + e.currentTarget.id).val()=='') {  
				this.$("#" + e.currentTarget.id).siblings("p").addClass("err");
			} 
			else{
				var selectedCountryCode = this.$("#profile-info-form-country").val();
				if(selectedCountryCode == 'US') {
					var regex = /^[0-9]{5}(?:-[0-9]{4})?$/;

					if (!regex.test(this.$("#" + e.currentTarget.id).val())) {
						this.$("#" + e.currentTarget.id).siblings("p").addClass("err");
					}
					else {
						this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
					}
				}
				else {
					this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
				}
			}
		},

		mpSubmit: function (e) {
			e.preventDefault();

			this.$("#profile-info-form-first-name").trigger("focusout");
			this.$("#profile-info-form-last-name").trigger("focusout");
			this.$("#profile-info-address-line-1").trigger("focusout");
			this.$("#profile-info-form-city").trigger("focusout");
			this.$("#profile-info-form-zip").trigger("focusout");
			this.$('#profile-info-form-state').trigger("change");
				
			if(this.$(".profile").find('.err').length != 0){
				this.$(".profile .global-error-msg").show();
			}
			else{
				this.$(".profile .global-error-msg").hide();
				this.$("#update-profile").trigger("click");
			}
		},

		mpChangePicture: function (e) {
			this.$("#change-profile-image").trigger("click");
		},

		mpChangePictureChange: function (e) {
			this.readURL(this.$("#" + e.currentTarget.id)[0].files);
		},

		readURL: function (input) {
			var self = this;
			console.log(input,input[0]);
			if (input && input[0]) {
				var reader = new FileReader();

				reader.onload = function (e) {
					self.$('.profile-image-preview').css('background-image', "url(" + e.target.result + ")");
				}

				reader.readAsDataURL(input[0]);
			}
		},

		viewProfile: function (e) {
			jQuery(window).scrollTop(0);
			this.$(".profile").show();
			this.$(".dashboard").hide(); 
		},

		viewDashboard: function (e) {
			jQuery(window).scrollTop(0);
			this.$(".profile").hide();
			this.$(".dashboard").show();
		},

		mpChangePassword: function (e) {
			this.$(".change-pass").hide();
  		this.$(".change-pass-form").show();
		},

		showHideMe: function (e) {
			if(this.$(e.currentTarget).hasClass('show-me')) {
				this.$(e.currentTarget).removeClass("show-me");
				this.$(e.currentTarget).addClass("hide-me");
	
				this.$(e.currentTarget).find("i").removeClass("fa-eye-slash");
				this.$(e.currentTarget).find("i").addClass("fa-eye");
				
				this.$(e.currentTarget).siblings("input").prop("type","text");
			}
			else{
				this.$(e.currentTarget).removeClass("hide-me");
				this.$(e.currentTarget).addClass("show-me");
	
				this.$(e.currentTarget).find("i").addClass("fa-eye-slash");
				this.$(e.currentTarget).find("i").removeClass("fa-eye");
	
				this.$(e.currentTarget).siblings("input").prop("type","password");
			}
		},

		/* mpUpdatePass: function (e) {
			if(this.$("#profile-info-form-current-pass").val() != ""){
				this.$("#profile-info-form-current-pass").siblings('p').hide();
			}
			else{
				this.$("#profile-info-form-current-pass").siblings('p').show();
			}

			this.$("#profile-info-form-password").trigger("focusout");
			this.$("#profile-info-form-re-password").trigger("focusout");

			if (this.$(".change-pass-form").find('.err').length == 0) {
				this.$("#submit-update-password").trigger("click");
			}
		}, */

		mpPassValidation: function (e) {
			if (this.$("#" + e.currentTarget.id).hasClass('new-pass')) {
				this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
				if (this.$("#" + e.currentTarget.id).val() == '') {
					this.$("#" + e.currentTarget.id).siblings("p.err-1").addClass("err");
				} else {
					var regex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,12}$/;

					if (!regex.test(this.$("#" + e.currentTarget.id).val())) {
						this.$("#" + e.currentTarget.id).siblings("p.err-2").addClass("err");
					} else {
						this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
					}
				}
			}
			else {
				this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
				if(this.$("#" + e.currentTarget.id).val()=='') {
					this.$("#" + e.currentTarget.id).siblings("p.err-1").addClass("err");
				} else if(this.$("#" + e.currentTarget.id).val() != this.$(".new-pass").val()) {
					this.$("#" + e.currentTarget.id).siblings("p.err-2").addClass("err");
				} else {
					this.$("#" + e.currentTarget.id).siblings("p").removeClass("err");
				}
			}
		},

		overlayClick: function (e) {
			this.$(".overlaybox").hide();
			this.$(".social-media-type i").addClass("fa-angle-down");
			this.$(".social-media-type i").removeClass("fa-angle-up");
			this.$(".social-media-type-options").hide();
		},

		removeRow: function (e) {
			jQuery(e.currentTarget).parents(".social-media-box").remove();
  		this.$(".add-more-fields").prop('disabled', false);
		},

		socialMediaType: function (e) {
			jQuery(e.currentTarget).find("i").removeClass("fa-angle-down");
			jQuery(e.currentTarget).find("i").addClass("fa-angle-up");
			jQuery(e.currentTarget).siblings(".social-media-type-options").show();
			this.$(".overlaybox").show();
		},

		addMoreFields: function (e) {
			var count = $(".social-media-box").length;

			if (this.isPhoneDevice) {
				if(count != this.socialTypeCount){
					this.$('.social-media-more-box').append('<div class="social-media-box">\
							<div class="col-lg-3 col-md-3 col-sm-3 col-xs-3" style="padding: 0 7.5px 0 0;">\
								<div class="form-group">\
									<div class="social-media-type-box">'+this.$('.social-media-more-box .social-media-box').first().find('.social-media-type-box').html()+'</div>\
								</div>\
							</div>\
							<div class="col-lg-9 col-md-9 col-sm-9 col-xs-9" style="padding: 0 0 0 7.5px;">\
								<div class="form-group">'+this.$('.social-media-more-box .social-media-box').first().find(".social-media-link-box").html()+'</div>\
							</div>\
							<div class="clearfix"></div>\
						</div>');
					this.$('.social-media-more-box .social-media-box').last().find(".remove-row").css("display", "block");
					this.$('.social-media-more-box .social-media-box').last().find(".social-media-type-input").val(0);
				}
			}
			else {
				if(count != this.socialTypeCount){
					this.$('.social-media-more-box').append('<div class="social-media-box">\
							<div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 left">\
								<div class="form-group">\
									<div class="social-media-type-box">'+this.$('.social-media-more-box .social-media-box').first().find('.social-media-type-box').html()+'</div>\
								</div>\
							</div>\
							<div class="col-lg-4 col-md-4 col-sm-4 col-xs-12 center">\
								<div class="form-group">'+this.$('.social-media-more-box .social-media-box').first().find(".social-media-link-box").html()+'</div>\
							</div>\
							<div class="clearfix"></div>\
						</div>');
					this.$('.social-media-more-box .social-media-box').last().find(".social-media-type span").text("Select Type");
					this.$('.social-media-more-box .social-media-box').last().find(".social-media-type img").css("display","none");
					this.$('.social-media-more-box .social-media-box').last().find(".remove-row").css("display", "block");
					this.$('.social-media-more-box .social-media-box').last().find(".social-media-type-input").val(0);
				}
			}

			if(count == this.socialTypeCount-1){
				jQuery(e.currentTarget).prop('disabled', true);
			}
		},

		socialMediaTypeOptionsOption: function (e) {
			var self = this;

			if (this.isPhoneDevice) {
				jQuery(e.currentTarget).parents(".social-media-type-box").find(".social-media-type img").attr('src', jQuery(e.currentTarget).find("img").attr('src'));
				jQuery(e.currentTarget).parents(".social-media-type-box").find(".social-media-type img").css('display', 'inline-block');
				jQuery(e.currentTarget).parents(".social-media-type-box").find(".social-media-type-input").val(jQuery(e.currentTarget).attr('value'));

				setTimeout(function () {
					self.$(".social-media-type i").addClass("fa-angle-down");
					self.$(".social-media-type i").removeClass("fa-angle-up");
					self.$(".social-media-type-options").hide();
					self.$(".overlaybox").hide();
				}, 100);
			}
			else {
				jQuery(e.currentTarget).parents(".social-media-type-box").find(".social-media-type span").text(jQuery(e.currentTarget).find("span").text());
				jQuery(e.currentTarget).parents(".social-media-type-box").find(".social-media-type img").attr('src', jQuery(e.currentTarget).find("img").attr('src'));
				jQuery(e.currentTarget).parents(".social-media-type-box").find(".social-media-type img").css('display', 'block');
				jQuery(e.currentTarget).parents(".social-media-type-box").find(".social-media-type-input").val(jQuery(e.currentTarget).attr('value'));

				setTimeout(function () {
					self.$(".social-media-type i").addClass("fa-angle-down");
					self.$(".social-media-type i").removeClass("fa-angle-up");
					self.$(".social-media-type-options").hide();
					self.$(".overlaybox").hide();
				}, 100);
			}
		},

		getContext: function getContext() {
			if(this.myLatestOrder) {
				if((this.myLatestOrder.orderStatus === "Pending Approval") && (this.myLatestOrder.orderStatus === "Pending Fulfillment")) {
					this.$('head').append('<style>.progress-bar:after{width:30% !important;}</style>');
				} else if(this.myLatestOrder.orderStatus === "Pending Billing") {
					this.$('head').append('<style>.progress-bar:after{width:60% !important;}</style>');
				} else if(this.myLatestOrder.orderStatus === "Billed") {
					this.$('head').append('<style>.progress-bar:after{width:90% !important;}</style>');
				} else {
					this.$('head').append('<style>.progress-bar:after{width:10% !important;}</style>');
				}
			}

			if(this.myInformation) {
				this.myInformation.invoicesCountText = "invoice";
				if(this.myInformation.invoicesCount > 1) {
					this.myInformation.invoicesCountText = "invoices";
				}
			}

			return {
				isLoading: this.isLoading,
				isPhoneDevice: this.isPhoneDevice,
				activeView: this.activeView,
				showYourOrders: this.showOrdersCard,

				myInformation: this.myInformation,
				myMembership: this.myMembership,
				upcomingEvent: this.upcomingEvent,
				upcomingClass: this.upcomingClass,
				upcomingElection: this.upcomingElection,
				myContributions: this.myContributions,
				myLatestOrder: this.myLatestOrder,
				myJourney: this.myJourney,

				states: this.states,
				countries: this.countries,
				customerInfo: this.customerInfo,

				customerLicense: this.customerLicense,
				
				// paymentMethods: this.paymentMethods,

				linkPurchaseHistory: Utils.getAbsoluteUrl("my_account.ssp?ext=F#/purchases"),
				defaultProfileImage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.jpg')),
				cardSelectedImage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-select-card.png')),
				noEvents: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-noevents.png')),
				yourOrders: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-yourorders.png')),
				membershipCard: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-membershipcard.png')),
				votingImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-voting.png')),
				emptyCourse: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-courses-empty.png')),
				noBadged: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-nobadges.png')),
				
				icons: {
					defaultCard: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-checked-gray-sm.png')),
					removeCard: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash-black-sm.png')),
					editCard: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-edit-black-sm.png')),
					icnStatusActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-active-sm.png')),
					icnStatusExpired: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-status-expired.png')),
					icnStatusPending: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-status-pending.png')),
					icnSettings: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-settings.png')),
					icnTimeSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-validity.png')),
					icnCalGrn: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-cal-green.png')),
					icnInPerson: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-inperson.png')),
					icnVirtual: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-virtual.png')),
					icnOnDemand: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-ondemand.png')),
					icnContributions: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-contribution.png')),
					group: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-cy-group.png')),
					groupPy: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-py-group.png')),
					camera: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-camera.png')),
					trash: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-trash.png')),
					social: {
						facebook: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-facebook.png')),
						instagram: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-instagram.png')),
						linkedIn: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-linkedin.png')),
						twitter: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-twitter.png')),
					},
					cancel: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-cancel.png')),
					icnContribution: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-contribution.png')),
					icnCyGroup: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-cy-group.png')),
					icnPyGroup: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-py-group.png')),
					icnLegislation: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-legislation.png')),
					icnSenator: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-senator.png')),
					icnProtest: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-protest.png')),
					icnLock: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-lock.png')),
					icnLockBack: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-lock-black.png'))
				}
			};
		}
	});
});

define('Saralux.Core.DashboardSV',   [
	'Saralux.Core.DashboardSV.View',
	'Saralux.Core.AttemptTestSV.StartTest.View',
	'Utils'
],   function (
	DashboardSVView,
	AttemptTestSVStartTestView,
	Utils
) {
	'use strict';

	return  {

		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0001', function() {
						// Uncomment this when done:
						return new DashboardSVView({ container: container });

						// FOR TESTING PURPOSES ONLY
						// Comment this when done:
						/* return new AttemptTestSVStartTestView({
							container: container,
							m360Context: null,
							testId: 229,
							testTitle: "Sample Test",
							test: {
								timeLimit: 10
							}
						}); */
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.DashboardSVView', ex.toString());
			}
		}
	};
});


define('Saralux.Core.DynamicFilter.View', [
    'saralux_core_dynamicfilter.tpl',

    'Saralux.Core.DynamicFilter.SS2Model',

    'SCView',
    'Utils'
], function (
    saralux_core_dynamicfilter_tpl,

    DynamicFilterSS2Model,

    SCViewModule,
    Utils
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function DynamicFilter(options) {
        SCView.call(this, options);
        jQuery(window).scrollTop(0);
        var self = this;

        this.container = options.container;
        this.model = new DynamicFilterSS2Model();
        this.template = saralux_core_dynamicfilter_tpl;
        this.parent = options.parent;
        this.sections = [];
        this.fields = [];
        this.membershipTypeFilter = options.membershipTypeFilter;
        this.filterId = options.filterId;
        this.defaultFilterFlag = false;
        this.isAnyFilterDisabled = false;
        //this.defaultFilters = options.defaultFilters;        
        this.filterCount = 0; 
        this.defaultFilters = options.defaultFilters;
        //console.log('options membership:-',options);
        options.defaultFilters = null;
        ////console.log('options.filterState',options.parent.filterState);
        this.fromClearFilters = false;
        this.isCerified = false;
        //this.membershipRegistrationId = null;
        if (options.parent.filterState) {
            self.fields = options.parent.filterState;
            self.filterCount = options.parent.filterCount; 
            //console.log('this.defaultFilters',this.defaultFilters); 
            this.defaultFilters = null;                        
            //self.render();  
            //console.log('options.filterState');
            setTimeout(function() {
                self.conditionalDisplayField();
            }, 400);
          self.render();
        } else {           
            this.getFilterData();            
        }
    }

    DynamicFilter.prototype = Object.create(SCView.prototype);
    DynamicFilter.prototype.constructor = DynamicFilter;

    DynamicFilter.prototype.getFilterData = function () {
        var self = this;
        var data = {
            action: "get_filter_data",
            membershipTypeFilter:this.membershipTypeFilter,
            filterId: this.filterId
            //filterRecordId: '2'
        };

        //console.log("getFilterData()", data);

        //this.membershipTypeFilter
        this.model.clear({
            silent: true
        });
        this.model.save(data).done(function (res) {
            //console.log('Dynaimc Filters res', res);
            if (!res.hasError) {
                self.sections = res.message.sections;
                self.fields = res.message.fields;  
                ////console.log('self.defaultFilters',self.defaultFilters); 
                if(self.defaultFilters){  //change for isdisabled                   
                    for(var i = 0 ; i < self.fields.length ; i++){                               
                        if( self.defaultFilters.hasOwnProperty(self.fields[i].fieldId) && self.defaultFilters[self.fields[i].fieldId] != ""){//&& (""+filterObj.filters[i].fieldId).length > 0
                            self.fields[i].hasValue = true;
                            for(var j = 0 ; j < self.fields[i].fieldValues.length ;j++ ){                                
                                if(self.fields[i].fieldValues[j].value == self.defaultFilters[self.fields[i].fieldId].value){//self.defaultFilters[self.fields[i].fieldId]
                                    //{field:2}
                                    self.fields[i].fieldValues[j].isChecked = true; 
                                    self.fields[i].isDisabled =     self.defaultFilters[self.fields[i].fieldId].isDisabled                
                                }
                                //dont need below if condition remove after testing 
                                // if(self.fields[i].fieldId == "custrecord_acnm_mt_certification_status" && self.fields[i].fieldValues[j].text == "Certified" &&self.fields[i].fieldValues[j].isChecked ){
                                //     this.isCerified = true;
                                // }
                            }
                        }
                    }
                }                 
            }            
            self.render();           
            self.conditionalDisplayField();
            //console.log('default filters null?',self.defaultFilters);
            if(self.defaultFilters){                
                //self.defaultFilters = null;                              
                self.$("#apply-filters").trigger("click");
                self.renewalLockFields();
            }
            
        });
    }

    DynamicFilter.prototype.conditionalDisplayField = function () {
        var self = this;
        var operator = null;
        var rightOperand = null;
        var fieldId = null;
        var getFieldValue = null;
        var inputTypeText = null;
       
        for (var i = 0; i < this.fields.length; i++) {
            this.$("#"+self.fields[i].fieldId+"-error").hide();

            if (this.fields[i].expression != "") {
                operator = self.fields[i].expression;
                rightOperand = self.fields[i].expressionValue;
                fieldId = self.fields[i].fieldId;
                getFieldValue = self.fields[i].fieldId;
                inputTypeText = self.fields[i].inputTypeText;
                
                if (this.fields[i].inputTypeText === "Checkbox") {
                    getFieldValue += "-parent";
                    getFieldValue += " input[type=checkbox]";
                } else if (this.fields[i].inputTypeText === "Radio Button") {
                    getFieldValue += "-parent";
                    getFieldValue += " input[type=radio]"
                } else if (this.fields[i].inputTypeText === "Dropdown") {//redundant line checke and remove //start trigger
                    getFieldValue += "";
                }
                ////console.log('getFieldValue',getFieldValue);               
                self.$("#" + getFieldValue).change({//
                    "rightOperand": rightOperand,
                    "operator": operator,
                    "fieldId": fieldId,
                    "inputTypeText": inputTypeText
                }, function (e) {
                    var leftOperand; 
                                       
                    if (e.data.inputTypeText === 'Textbox' || e.data.inputTypeText === 'Dropdown') {
                        if ($(this).is('select')) {
                            leftOperand = $(this).find('option:selected').text();
                        } else {
                            leftOperand = $(this).val();
                        }   

                        if(leftOperand != null && leftOperand != undefined &&(""+leftOperand).length > 0 ){
                            var expressionResponse = self.evaluateExpression({
                                leftOperand: leftOperand,
                                rightOperand: e.data.rightOperand,
                                operator: e.data.operator
                            });
    
                            self.updateFieldVisibility({
                                fieldId: e.data.fieldId,
                                expressionResponse: expressionResponse,
                                leftOperand: leftOperand,
                                fieldType:e.data.inputTypeText
                            });
    
                            self.updateFieldMandatoryState({
                                fieldId: e.data.fieldId,
                                expressionResponse: expressionResponse
                            });
                        }
                        
                    } else if (e.data.inputTypeText === 'Checkbox' || e.data.inputTypeText === 'Radio Button') {
                        leftOperand = $(this).val();
                        var checkboxLabel = e.data.fieldId + "-" + leftOperand;
                        var labelType = (e.data.inputTypeText === 'Checkbox')?"checkbox":"radio";
                        leftOperand = $(`label[for="${checkboxLabel}"]`).text();  
                        var flag = false;
                        $("input:"+labelType+"[name=" + e.data.fieldId + "]").each(function () {
                            var intialState = $(this).is(':checked');
                            if(intialState){
                                flag  = true;
                            }
                        })
                        
                        $("input:"+labelType+"[name=" + e.data.fieldId + "]").each(function () {//"input:checkbox[name=" + e.data.fieldId + "]"
                            var checkboxState = $(this).is(':checked');
                            checkboxLabel = e.data.fieldId + "-" + $(this).val();
                            leftOperand = $(`label[for="${checkboxLabel}"]`).text();
                            ////console.log('leftOperand',leftOperand);

                            if(leftOperand != null && leftOperand != undefined &&(""+leftOperand).length > 0 && flag ){
                                var expressionResponse = self.evaluateExpression({
                                    leftOperand: leftOperand,
                                    rightOperand: e.data.rightOperand,
                                    operator: e.data.operator
                                });
                                //if checkbox value exist and and it is selected on ui then expression =response is true else false
                                
                                if (expressionResponse) {
                                    // //console.log({
                                    //     fieldId: e.data.fieldId,
                                    //     expressionResponse: checkboxState,
                                    //     leftOperand: leftOperand,
                                    //     fieldType:e.data.inputTypeText
                                    // });
    
                                    self.updateFieldVisibility({
                                        fieldId: e.data.fieldId,
                                        expressionResponse: checkboxState,
                                        leftOperand: leftOperand,
                                        fieldType:e.data.inputTypeText
                                    });
    
                                    self.updateFieldMandatoryState({
                                        fieldId: e.data.fieldId,
                                        expressionResponse: checkboxState
                                    });
                                }

                            }else{
                                self.intialHideOfFields();
                            }
                            
                            
                        });
                    }                  
                                     
                });
            }
            //intial hiding of all dependent fields 
            var condition1 = this.fields[i].displayIfFalse != "" || this.fields[i].displayIfTrue != "";
            if (condition1&& (!this.fields[i].hasValue) ) {//&& this.fields[i].hasValue
                self.$("#" + this.fields[i].fieldId + "-parent").hide(); 
            }
        }

        for (var i = 0; i < this.fields.length; i++) {
            if (this.fields[i].expression != "") {
                getFieldValue = self.fields[i].fieldId;
                inputTypeText = self.fields[i].inputTypeText;
                
                if (this.fields[i].inputTypeText === "Checkbox") {
                    getFieldValue += "-parent";
                    getFieldValue += " input[type=checkbox]";
                } else if (this.fields[i].inputTypeText === "Radio Button") {
                    getFieldValue += "-parent";
                    getFieldValue += " input[type=radio]"
                } else if (this.fields[i].inputTypeText === "Dropdown") {//redundant line checke and remove //start trigger
                    getFieldValue += "";
                }

                self.$("#" + getFieldValue).trigger('change');
            }
        }
       

    }

    DynamicFilter.prototype.getEvents = function () {
        return {
            "click [data-action='show-hide-me']": "showHideMe",
            'focusout [data-focusout="password-focusout"]': 'passwordFocusout',
            'focusout [data-focusout="confirm-password-focusout"]': 'confirmPasswordFocusout',
            "focus [data-focus='searchable-input-focus']": "searchableInputFocus",
            "click [data-action='m360-slxc-apply-filter']": "applyFilters",
            "click [data-action='m360-slxc-clear-filter']": "clearFilters",
            
        };
    }
    //this not required .. delete after check
    DynamicFilter.prototype.renewalLockFields = function() {
        if(this.isCerified){
            for( i = 0 ; i < this.fields.length ;i++){
                var lockFieldsIds = ["custrecord_acnm_mt_certification_duratio","custrecord_acnm_mt_certification_status"]//,"custrecord_acnm_mt_certification_status"]
                if(lockFieldsIds.indexOf(this.fields[i].fieldId) != -1){// use field type for drop downs
                    $('input[name='+fields[i].fieldId+']').prop('disabled', true);//disable by name and set prpety diaable on this.fields
                }               
            }
        }
                 
    }

    DynamicFilter.prototype.intialHideOfFields = function() {
        for( i = 0 ; i < this.fields.length ;i++){
            var condition1 = this.fields[i].displayIfFalse != "" || this.fields[i].displayIfTrue != "";
            if (condition1&& (!this.fields[i].hasValue) ) {
                self.$("#" + this.fields[i].fieldId + "-parent").hide();
            }
        }            
    }

    DynamicFilter.prototype.restoreFieldMandatoryState = function(options) {
        for(var i=0;i<this.fields.length;i++) {
            this.fields[i].required = false;
        }
    }

    DynamicFilter.prototype.updateFieldMandatoryState = function(options) {
        for(var i=0;i<this.fields.length;i++) {            
            if(this.fields[i].requiredIfTrue == options.fieldId) {//here we are checking specific check box or radio 
                this.fields[i].required = options.expressionResponse;                
            }
            if(this.fields[i].requiredIfFalse == options.fieldId) {
                this.fields[i].required = !options.expressionResponse;
            }
        }
    }

    DynamicFilter.prototype.applyFilters = function () {
        var self = this;
        var arr = [];
        var flag =false;
        var obj = null;
        var fieldId = null;
        var isFieldHidden = false;
        var canProceed = true;        
        this.filterCount = 0;    
        this.defaultFilters = null; 
          

        for (var i = 0; i < this.fields.length; i++) {
            obj = {};
            fieldId = this.fields[i].fieldId;

            obj['fieldId'] = fieldId;
            obj['selectedValues'] = [];
            obj['queryExpression'] = "";
            
            isFieldHidden = self.$("#"+fieldId+"-parent").is(":hidden");//if field is hidden not cosidering for filters
            var isFieldDisabled = self.$("#"+fieldId).is(":disabled");
            //console.log('isdiabled:-',isFieldDisabled);
            flag = false;  
            if(!isFieldHidden){//also consider hasValue of fields for hidding in conditional display 
                this.fields[i].hasValue = false;
                if (this.fields[i].inputTypeText === "Textbox" || this.fields[i].inputTypeText === "Date") {
                    flag = false;
                    if(this.$("#" + fieldId).val().trim()){
                        obj['selectedValues'].push(this.$("#" + fieldId).val().trim());  
                        obj['queryExpression'] = this.fields[i].expressionQuery; 
                        this.filterCount++;                
                    }   
                    if (this.$("#" + fieldId).val()) {
                        this.fields[i].hasValue = true;
                        this.fields[i].persistedValue = this.$("#" + fieldId).val();
                    } else {                        
                        this.fields[i].persistedValue = "";
                    }
                } else if (this.fields[i].inputTypeText === "Checkbox" || this.fields[i].inputTypeText === "Radio Button") {
                    flag = false;
                    this.$("input[name=" + fieldId + "]:checked").each(function () { //:checked                    
                        obj['selectedValues'].push(parseInt(jQuery(this).val()));
                        flag = true;
                    });
                    if(flag){
                        this.filterCount++;
                        obj['queryExpression'] = this.fields[i].expressionQuery;
                    }
                    for (var j = 0; j < this.fields[i].fieldValues.length; j++) {
                        var id = this.fields[i].fieldValues[j].value;
                        this.$("input[name=" + fieldId + "-" + id + "]").val();
                        if (this.$("#" + fieldId + "-" + id).is(":checked")) {
                            this.fields[i].hasValue = true;//if we get atleast one checkbox checke we mark has value 
                            this.fields[i].fieldValues[j].isChecked = true;
                        } else {                            
                            this.fields[i].fieldValues[j].isChecked = false;
                        }
                    }
                } else if (this.fields[i].inputTypeText === "Dropdown") {                   
                    for (var j = 0; j < this.fields[i].fieldValues.length; j++) {
                        var selectedVal = this.$("#" + fieldId).val();
                        if (this.fields[i].fieldValues[j].value === selectedVal) {
                            this.fields[i].fieldValues[j].isChecked = true;
                        } else {
                            this.fields[i].fieldValues[j].isChecked = false;
                        }
                    }
                    if(this.$("#" + fieldId).val() != 0){
                        obj['selectedValues'].push(this.$("#" + fieldId).val());
                        obj['queryExpression'] = this.fields[i].expressionQuery;
                        this.fields[i].hasValue = true;
                        this.filterCount++;
                    }                    
                }
                ////console.log('this.fromClearFilters',this.fromClearFilters);
                if (obj['selectedValues'].length != 0) {
                    arr.push(obj);
                } else {
                    if(this.fields[i].required) {//add this.fromClearFilters to avoid error messages on clear filter click.
                        canProceed = false;
                        this.$("#"+this.fields[i].fieldId+"-error").show();  
                        if(this.isAnyFilterDisabled){
                            return ; 
                        }    
                                      
                    }
                }                
            }else{
                //clearing on hidden filters
                this.fields[i].hasValue = false;
                if (this.fields[i].inputTypeText === "Textbox" || this.fields[i].inputTypeText === "Date") {                     
                    this.fields[i].persistedValue = "";
                } else if (this.fields[i].inputTypeText === "Checkbox" || this.fields[i].inputTypeText === "Radio Button") {                                                                            
                    
                    for (var j = 0; j < this.fields[i].fieldValues.length; j++) {                        
                        this.fields[i].fieldValues[j].isChecked = false;//this is same as for drop down case                         
                    }
                } else if (this.fields[i].inputTypeText === "Dropdown") {                   
                    for (var j = 0; j < this.fields[i].fieldValues.length; j++) {
                        this.fields[i].fieldValues[j].isChecked = false;
                    }
                } 
            }
        }  
        //console.log('canProceed',canProceed);
        //console.log('this.fromClearFilters',this.fromClearFilters);
        if(canProceed || this.fromClearFilters){
            this.filterCount = arr.length ;
            this.parent.filters = arr;       
            this.parent.filterState = this.fields;
            this.parent.filterCount = this.filterCount;        
            try { this.parent.getMembershipTypes( ); } catch(e) {}//Replace this later 
            try { this.parent.getData(); } catch(e) { console.error(e); }
        }
        this.fromClearFilters = false;
    }

    DynamicFilter.prototype.clearFilters = function () {       
        var self = this;
        this.isAnyFilterDisabled = false;
        for (var i = 0; i < this.fields.length; i++) {
            var fieldId = this.fields[i].fieldId;
            if(!this.fields[i].isDisabled){
                if (this.fields[i].inputTypeText === "Textbox" || this.fields[i].inputTypeText === "Date") {
                    if(this.$("#" + fieldId).val().trim()){
                        this.$("#" + fieldId).val('');
                    }
                }else if (this.fields[i].inputTypeText === "Checkbox" || this.fields[i].inputTypeText === "Radio Button"){                
                    this.$("input[name=" + fieldId + "]:checked").each(function () {              
                        jQuery(this).prop('checked', false);                    
                    });
                }else if (this.fields[i].inputTypeText === "Dropdown") {
                    this.$("#" + fieldId).val(0);
                }
            }else{
                this.isAnyFilterDisabled = true;
            }
           
        }
        this.fromClearFilters = true;
        this.applyFilters();
    }

    DynamicFilter.prototype.getContext = function () {
        return {
            isLoading: this.isLoading
        }
    }

    DynamicFilter.prototype.updateFieldVisibility = function (e) {
        var self = this;
        var fieldId = e.fieldId;
        var expressionResponse = e.expressionResponse;
        var leftOperand = e.leftOperand;
        var fieldType = e.fieldType;       

        if (leftOperand === '' || leftOperand.length === 0) { //if no value is present it will reset to the inital condition
            for (var i = 0; i < this.fields.length; i++) {
                if (this.fields[i].displayIfTrue === fieldId || this.fields[i].displayIfFalse === fieldId) {
                    self.$("#" + this.fields[i].fieldId + "-parent").hide();
                }
            }
        } else {
            for (var i = 0; i < this.fields.length; i++) {
                // //console.log('UFV - expressionResponse:-',expressionResponse);
                // //console.log('UFV - leftOperand:-',leftOperand);
                // //console.log('UFV - Field Expression Value:-',this.fields[i].expressionValue);
                var condition = false;
                if((""+this.fields[i].expressionValue).length>0){
                    condition = (this.fields[i].expressionValue === leftOperand);
                } else {
                    condition = true;
                }

                if (expressionResponse) {        

                    if (condition || fieldType ==='Textbox'|| fieldType ==='Dropdown') { //this if condition working need to re check 
                        if (this.fields[i].displayIfTrue === fieldId) {
                            self.$("#" + this.fields[i].fieldId + "-parent").show();
                        } else if (this.fields[i].displayIfFalse === fieldId) {                            
                            self.$("#" + this.fields[i].fieldId + "-parent").hide(); // reset data of hidden filter //when hiding reset its value
                        }
                    }
                } else {
                    if (condition || fieldType ==='Textbox' || fieldType ==='Dropdown') {
                        if (this.fields[i].displayIfFalse === fieldId) {
                            self.$("#" + this.fields[i].fieldId + "-parent").show();                            
                        } else if (this.fields[i].displayIfTrue === fieldId) {
                            self.$("#" + this.fields[i].fieldId + "-parent").hide(); // reset data of hidden filter
                        }
                    }
                }
            }
        }
    }   

    DynamicFilter.prototype.evaluateExpression = function (options) {
        switch (options.operator) {
            case "startswith":
                var string1 = options.leftOperand + "";
                var string2 = options.rightOperand + "";
                return string1.startsWith(string2);
            case "endswith":
                var string1 = options.leftOperand + "";
                var string2 = options.rightOperand + "";
                return string1.endsWith(string2);
            case "contains":
                var string1 = options.leftOperand + "";
                var string2 = options.rightOperand + "";
                return string1.includes(string2);
            case "&gt;":
                if (isNaN(options.rightOperand)) { //means it can be date value
                    if (Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand > options.rightOperand;
                    }
                } else {
                    return options.leftOperand > options.rightOperand;
                }
            case "&lt;":
                if (isNaN(options.rightOperand)) { //means it can be date value
                    if (Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand < options.rightOperand;
                    }
                } else {
                    return options.leftOperand < options.rightOperand;
                }
            case "&gt;=":
                if (isNaN(options.rightOperand)) { //means it can be date value
                    if (Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand >= options.rightOperand;
                    }
                } else {
                    return options.leftOperand >= options.rightOperand;
                }
            case "&lt;=":
                if (isNaN(options.rightOperand)) { //means it is a date value
                    if (Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand <= options.rightOperand;
                    }
                } else {
                    return options.leftOperand <= options.rightOperand;
                }
            case "=":
                if (isNaN(options.rightOperand)) { //means it is a date value
                    if (Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand == options.rightOperand;
                    }
                } else {
                    return options.leftOperand == options.rightOperand;
                }
            case "anyof":
                if (options.rightOperand.length > 0) {
                    var tokens = options.rightOperand.split(",");

                    if (tokens.indexOf(options.leftOperand) !== -1) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            case "noneof":
                if (options.rightOperand.length > 0) {
                    var tokens = options.rightOperand.split(",");

                    if (tokens.indexOf(options.leftOperand) !== -1) {
                        return false;
                    } else {
                        return true;
                    }
                } else {
                    return false;
                }
            default:
                return false;
        }
    }   

    DynamicFilter.prototype.evaluateDateComparison = function (options) {
        var leftOperandDateValue = new Date(options.leftOperand);;
        var rightOperandDateValue = null;

        if (options.rightOperand == "{today}") {
            rightOperandDateValue = new Date();
        } else {
            rightOperandDateValue = new Date(options.rightOperand);
        }

        leftOperandDateValue.setHours(0, 0, 0, 0);
        rightOperandDateValue.setHours(0, 0, 0, 0);

        switch (options.operator) {
            case "&lt;=":
                return leftOperandDateValue <= rightOperandDateValue;
            case "&gt;=":
                return leftOperandDateValue >= rightOperandDateValue;
            case "&lt;":
                return leftOperandDateValue < rightOperandDateValue;
            case "&gt;":
                return leftOperandDateValue > rightOperandDateValue;
            case "=":
                return leftOperandDateValue.getTime() == rightOperandDateValue.getTime();
        }
    }

    DynamicFilter.prototype.getContext = function () {
        return {
            fields: this.fields,
            sections: this.sections,
            filterCount:this.filterCount,
            sortFields:this.sortFields,

            icons: {
                icnDateSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-select-date.png')),
                icnLockSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-lock.png')),
            }
        }
    }

    return DynamicFilter;
});

/**
 * for error fields we have ids as fieldId+-error 
 * for dynamic filters we have fieldId+-parent
 * 
 */

// Model.js
// -----------------------
// @module Case
define("Saralux.Core.DynamicFilter.SS2Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/DynamicFilter/SuiteScript2/DynamicFilter.Service.ss"
            ),
            true
        )
    });
});



define(
	'Saralux.M360_SLXC_Core.DynamicFilter'
,   [
		'Saralux.M360_SLXC_Core.DynamicFilter.View'
	]
,   function (
		DynamicFilterView
	)
{
	'use strict';

	return  {
		mountToApp: function mountToApp (container)
		{
			// using the 'Layout' component we add a new child view inside the 'Header' existing view 
			// (there will be a DOM element with the HTML attribute data-view="Header.Logo")
			// more documentation of the Extensibility API in
			// https://system.netsuite.com/help/helpcenter/en_US/APIs/SuiteCommerce/Extensibility/Frontend/index.html
			
			/** @type {LayoutComponent} */
			var layout = container.getComponent('Layout');
			
			if(layout)
			{
				layout.addChildView('Header.Logo', function() { 
					return new DynamicFilterView({ container: container });
				});
			}

		}
	};
});


/*
	CryptoJS v4.1.1

	[The MIT License (MIT)](http://opensource.org/licenses/MIT)

	Copyright (c) 2009-2013 Jeff Mott  
	Copyright (c) 2013-2016 Evan Vosberg

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
*/
define('Saralux.Core.ExternalLibraries.CryptoJS411', [], function() {

	function CryptoJS() {
		var n,o,s,a,h,t,e,l,r,i,c,f,d,u,p,S,x,b,A,H,z,_,v,g,y,B,w,k,m,C,D,E,R,M,F,P,W,O,I,U=U||function(h){var i;if("undefined"!=typeof window&&window.crypto&&(i=window.crypto),"undefined"!=typeof self&&self.crypto&&(i=self.crypto),!(i=!(i=!(i="undefined"!=typeof globalThis&&globalThis.crypto?globalThis.crypto:i)&&"undefined"!=typeof window&&window.msCrypto?window.msCrypto:i)&&"undefined"!=typeof global&&global.crypto?global.crypto:i)&&"function"==typeof require)try{i=require("crypto")}catch(t){}var r=Object.create||function(t){return e.prototype=t,t=new e,e.prototype=null,t};function e(){}var t={},n=t.lib={},o=n.Base={extend:function(t){var e=r(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),(e.init.prototype=e).$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},l=n.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||c).stringify(this)},concat:function(t){var e=this.words,r=t.words,i=this.sigBytes,n=t.sigBytes;if(this.clamp(),i%4)for(var o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;e[i+o>>>2]|=s<<24-(i+o)%4*8}else for(var c=0;c<n;c+=4)e[i+c>>>2]=r[c>>>2];return this.sigBytes+=n,this},clamp:function(){var t=this.words,e=this.sigBytes;t[e>>>2]&=4294967295<<32-e%4*8,t.length=h.ceil(e/4)},clone:function(){var t=o.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],r=0;r<t;r+=4)e.push(function(){if(i){if("function"==typeof i.getRandomValues)try{return i.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof i.randomBytes)try{return i.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")}());return new l.init(e,t)}}),s=t.enc={},c=s.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i+=2)r[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new l.init(r,e/2)}},a=s.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>2]|=(255&t.charCodeAt(i))<<24-i%4*8;return new l.init(r,e)}},f=s.Utf8={stringify:function(t){try{return decodeURIComponent(escape(a.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return a.parse(unescape(encodeURIComponent(t)))}},d=n.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new l.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=f.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var e,r=this._data,i=r.words,n=r.sigBytes,o=this.blockSize,s=n/(4*o),c=(s=t?h.ceil(s):h.max((0|s)-this._minBufferSize,0))*o,n=h.min(4*c,n);if(c){for(var a=0;a<c;a+=o)this._doProcessBlock(i,a);e=i.splice(0,c),r.sigBytes-=n}return new l.init(e,n)},clone:function(){var t=o.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),u=(n.Hasher=d.extend({cfg:o.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(r){return function(t,e){return new r.init(e).finalize(t)}},_createHmacHelper:function(r){return function(t,e){return new u.HMAC.init(r,e).finalize(t)}}}),t.algo={});return t}(Math);function K(t,e,r){return t&e|~t&r}function X(t,e,r){return t&r|e&~r}function L(t,e){return t<<e|t>>>32-e}function j(t,e,r,i){var n,o=this._iv;o?(n=o.slice(0),this._iv=void 0):n=this._prevBlock,i.encryptBlock(n,0);for(var s=0;s<r;s++)t[e+s]^=n[s]}function T(t){var e,r,i;return 255==(t>>24&255)?(r=t>>8&255,i=255&t,255===(e=t>>16&255)?(e=0,255===r?(r=0,255===i?i=0:++i):++r):++e,t=0,t+=e<<16,t+=r<<8,t+=i):t+=1<<24,t}function N(){for(var t=this._X,e=this._C,r=0;r<8;r++)E[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<E[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<E[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<E[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<E[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<E[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<E[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<E[6]>>>0?1:0)|0,this._b=e[7]>>>0<E[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],n=65535&i,o=i>>>16;R[r]=((n*n>>>17)+n*o>>>15)+o*o^((4294901760&i)*i|0)+((65535&i)*i|0)}t[0]=R[0]+(R[7]<<16|R[7]>>>16)+(R[6]<<16|R[6]>>>16)|0,t[1]=R[1]+(R[0]<<8|R[0]>>>24)+R[7]|0,t[2]=R[2]+(R[1]<<16|R[1]>>>16)+(R[0]<<16|R[0]>>>16)|0,t[3]=R[3]+(R[2]<<8|R[2]>>>24)+R[1]|0,t[4]=R[4]+(R[3]<<16|R[3]>>>16)+(R[2]<<16|R[2]>>>16)|0,t[5]=R[5]+(R[4]<<8|R[4]>>>24)+R[3]|0,t[6]=R[6]+(R[5]<<16|R[5]>>>16)+(R[4]<<16|R[4]>>>16)|0,t[7]=R[7]+(R[6]<<8|R[6]>>>24)+R[5]|0}function q(){for(var t=this._X,e=this._C,r=0;r<8;r++)O[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<O[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<O[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<O[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<O[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<O[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<O[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<O[6]>>>0?1:0)|0,this._b=e[7]>>>0<O[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],n=65535&i,o=i>>>16;I[r]=((n*n>>>17)+n*o>>>15)+o*o^((4294901760&i)*i|0)+((65535&i)*i|0)}t[0]=I[0]+(I[7]<<16|I[7]>>>16)+(I[6]<<16|I[6]>>>16)|0,t[1]=I[1]+(I[0]<<8|I[0]>>>24)+I[7]|0,t[2]=I[2]+(I[1]<<16|I[1]>>>16)+(I[0]<<16|I[0]>>>16)|0,t[3]=I[3]+(I[2]<<8|I[2]>>>24)+I[1]|0,t[4]=I[4]+(I[3]<<16|I[3]>>>16)+(I[2]<<16|I[2]>>>16)|0,t[5]=I[5]+(I[4]<<8|I[4]>>>24)+I[3]|0,t[6]=I[6]+(I[5]<<16|I[5]>>>16)+(I[4]<<16|I[4]>>>16)|0,t[7]=I[7]+(I[6]<<8|I[6]>>>24)+I[5]|0}return F=(M=U).lib,n=F.Base,o=F.WordArray,(M=M.x64={}).Word=n.extend({init:function(t,e){this.high=t,this.low=e}}),M.WordArray=n.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],i=0;i<e;i++){var n=t[i];r.push(n.high),r.push(n.low)}return o.create(r,this.sigBytes)},clone:function(){for(var t=n.clone.call(this),e=t.words=this.words.slice(0),r=e.length,i=0;i<r;i++)e[i]=e[i].clone();return t}}),"function"==typeof ArrayBuffer&&(P=U.lib.WordArray,s=P.init,(P.init=function(t){if((t=(t=t instanceof ArrayBuffer?new Uint8Array(t):t)instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):t)instanceof Uint8Array){for(var e=t.byteLength,r=[],i=0;i<e;i++)r[i>>>2]|=t[i]<<24-i%4*8;s.call(this,r,e)}else s.apply(this,arguments)}).prototype=P),function(){var t=U,n=t.lib.WordArray,t=t.enc;t.Utf16=t.Utf16BE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n+=2){var o=e[n>>>2]>>>16-n%4*8&65535;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>1]|=t.charCodeAt(i)<<16-i%2*16;return n.create(r,2*e)}};function s(t){return t<<8&4278255360|t>>>8&16711935}t.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n+=2){var o=s(e[n>>>2]>>>16-n%4*8&65535);i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>1]|=s(t.charCodeAt(i)<<16-i%2*16);return n.create(r,2*e)}}}(),a=(w=U).lib.WordArray,w.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,i=this._map;t.clamp();for(var n=[],o=0;o<r;o+=3)for(var s=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,c=0;c<4&&o+.75*c<r;c++)n.push(i.charAt(s>>>6*(3-c)&63));var a=i.charAt(64);if(a)for(;n.length%4;)n.push(a);return n.join("")},parse:function(t){var e=t.length,r=this._map;if(!(i=this._reverseMap))for(var i=this._reverseMap=[],n=0;n<r.length;n++)i[r.charCodeAt(n)]=n;var o=r.charAt(64);return!o||-1!==(o=t.indexOf(o))&&(e=o),function(t,e,r){for(var i=[],n=0,o=0;o<e;o++){var s,c;o%4&&(s=r[t.charCodeAt(o-1)]<<o%4*2,c=r[t.charCodeAt(o)]>>>6-o%4*2,c=s|c,i[n>>>2]|=c<<24-n%4*8,n++)}return a.create(i,n)}(t,e,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},h=(F=U).lib.WordArray,F.enc.Base64url={stringify:function(t,e=!0){var r=t.words,i=t.sigBytes,n=e?this._safe_map:this._map;t.clamp();for(var o=[],s=0;s<i;s+=3)for(var c=(r[s>>>2]>>>24-s%4*8&255)<<16|(r[s+1>>>2]>>>24-(s+1)%4*8&255)<<8|r[s+2>>>2]>>>24-(s+2)%4*8&255,a=0;a<4&&s+.75*a<i;a++)o.push(n.charAt(c>>>6*(3-a)&63));var h=n.charAt(64);if(h)for(;o.length%4;)o.push(h);return o.join("")},parse:function(t,e=!0){var r=t.length,i=e?this._safe_map:this._map;if(!(n=this._reverseMap))for(var n=this._reverseMap=[],o=0;o<i.length;o++)n[i.charCodeAt(o)]=o;e=i.charAt(64);return!e||-1!==(e=t.indexOf(e))&&(r=e),function(t,e,r){for(var i=[],n=0,o=0;o<e;o++){var s,c;o%4&&(s=r[t.charCodeAt(o-1)]<<o%4*2,c=r[t.charCodeAt(o)]>>>6-o%4*2,c=s|c,i[n>>>2]|=c<<24-n%4*8,n++)}return h.create(i,n)}(t,r,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},function(a){var t=U,e=t.lib,r=e.WordArray,i=e.Hasher,e=t.algo,A=[];!function(){for(var t=0;t<64;t++)A[t]=4294967296*a.abs(a.sin(t+1))|0}();e=e.MD5=i.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o=this._hash.words,s=t[e+0],c=t[e+1],a=t[e+2],h=t[e+3],l=t[e+4],f=t[e+5],d=t[e+6],u=t[e+7],p=t[e+8],_=t[e+9],y=t[e+10],v=t[e+11],g=t[e+12],B=t[e+13],w=t[e+14],k=t[e+15],m=H(m=o[0],b=o[1],x=o[2],S=o[3],s,7,A[0]),S=H(S,m,b,x,c,12,A[1]),x=H(x,S,m,b,a,17,A[2]),b=H(b,x,S,m,h,22,A[3]);m=H(m,b,x,S,l,7,A[4]),S=H(S,m,b,x,f,12,A[5]),x=H(x,S,m,b,d,17,A[6]),b=H(b,x,S,m,u,22,A[7]),m=H(m,b,x,S,p,7,A[8]),S=H(S,m,b,x,_,12,A[9]),x=H(x,S,m,b,y,17,A[10]),b=H(b,x,S,m,v,22,A[11]),m=H(m,b,x,S,g,7,A[12]),S=H(S,m,b,x,B,12,A[13]),x=H(x,S,m,b,w,17,A[14]),m=z(m,b=H(b,x,S,m,k,22,A[15]),x,S,c,5,A[16]),S=z(S,m,b,x,d,9,A[17]),x=z(x,S,m,b,v,14,A[18]),b=z(b,x,S,m,s,20,A[19]),m=z(m,b,x,S,f,5,A[20]),S=z(S,m,b,x,y,9,A[21]),x=z(x,S,m,b,k,14,A[22]),b=z(b,x,S,m,l,20,A[23]),m=z(m,b,x,S,_,5,A[24]),S=z(S,m,b,x,w,9,A[25]),x=z(x,S,m,b,h,14,A[26]),b=z(b,x,S,m,p,20,A[27]),m=z(m,b,x,S,B,5,A[28]),S=z(S,m,b,x,a,9,A[29]),x=z(x,S,m,b,u,14,A[30]),m=C(m,b=z(b,x,S,m,g,20,A[31]),x,S,f,4,A[32]),S=C(S,m,b,x,p,11,A[33]),x=C(x,S,m,b,v,16,A[34]),b=C(b,x,S,m,w,23,A[35]),m=C(m,b,x,S,c,4,A[36]),S=C(S,m,b,x,l,11,A[37]),x=C(x,S,m,b,u,16,A[38]),b=C(b,x,S,m,y,23,A[39]),m=C(m,b,x,S,B,4,A[40]),S=C(S,m,b,x,s,11,A[41]),x=C(x,S,m,b,h,16,A[42]),b=C(b,x,S,m,d,23,A[43]),m=C(m,b,x,S,_,4,A[44]),S=C(S,m,b,x,g,11,A[45]),x=C(x,S,m,b,k,16,A[46]),m=D(m,b=C(b,x,S,m,a,23,A[47]),x,S,s,6,A[48]),S=D(S,m,b,x,u,10,A[49]),x=D(x,S,m,b,w,15,A[50]),b=D(b,x,S,m,f,21,A[51]),m=D(m,b,x,S,g,6,A[52]),S=D(S,m,b,x,h,10,A[53]),x=D(x,S,m,b,y,15,A[54]),b=D(b,x,S,m,c,21,A[55]),m=D(m,b,x,S,p,6,A[56]),S=D(S,m,b,x,k,10,A[57]),x=D(x,S,m,b,d,15,A[58]),b=D(b,x,S,m,B,21,A[59]),m=D(m,b,x,S,l,6,A[60]),S=D(S,m,b,x,v,10,A[61]),x=D(x,S,m,b,a,15,A[62]),b=D(b,x,S,m,_,21,A[63]),o[0]=o[0]+m|0,o[1]=o[1]+b|0,o[2]=o[2]+x|0,o[3]=o[3]+S|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;e[i>>>5]|=128<<24-i%32;var n=a.floor(r/4294967296),r=r;e[15+(64+i>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),e[14+(64+i>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var e=this._hash,o=e.words,s=0;s<4;s++){var c=o[s];o[s]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return e},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});function H(t,e,r,i,n,o,s){s=t+(e&r|~e&i)+n+s;return(s<<o|s>>>32-o)+e}function z(t,e,r,i,n,o,s){s=t+(e&i|r&~i)+n+s;return(s<<o|s>>>32-o)+e}function C(t,e,r,i,n,o,s){s=t+(e^r^i)+n+s;return(s<<o|s>>>32-o)+e}function D(t,e,r,i,n,o,s){s=t+(r^(e|~i))+n+s;return(s<<o|s>>>32-o)+e}t.MD5=i._createHelper(e),t.HmacMD5=i._createHmacHelper(e)}(Math),P=(M=U).lib,t=P.WordArray,e=P.Hasher,P=M.algo,l=[],P=P.SHA1=e.extend({_doReset:function(){this._hash=new t.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],c=r[4],a=0;a<80;a++){a<16?l[a]=0|t[e+a]:(h=l[a-3]^l[a-8]^l[a-14]^l[a-16],l[a]=h<<1|h>>>31);var h=(i<<5|i>>>27)+c+l[a];h+=a<20?1518500249+(n&o|~n&s):a<40?1859775393+(n^o^s):a<60?(n&o|n&s|o&s)-1894007588:(n^o^s)-899497514,c=s,s=o,o=n<<30|n>>>2,n=i,i=h}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+c|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=Math.floor(r/4294967296),e[15+(64+i>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t}}),M.SHA1=e._createHelper(P),M.HmacSHA1=e._createHmacHelper(P),function(n){var t=U,e=t.lib,r=e.WordArray,i=e.Hasher,e=t.algo,o=[],p=[];!function(){function t(t){return 4294967296*(t-(0|t))|0}for(var e=2,r=0;r<64;)!function(t){for(var e=n.sqrt(t),r=2;r<=e;r++)if(!(t%r))return;return 1}(e)||(r<8&&(o[r]=t(n.pow(e,.5))),p[r]=t(n.pow(e,1/3)),r++),e++}();var _=[],e=e.SHA256=i.extend({_doReset:function(){this._hash=new r.init(o.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],c=r[4],a=r[5],h=r[6],l=r[7],f=0;f<64;f++){f<16?_[f]=0|t[e+f]:(d=_[f-15],u=_[f-2],_[f]=((d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3)+_[f-7]+((u<<15|u>>>17)^(u<<13|u>>>19)^u>>>10)+_[f-16]);var d=i&n^i&o^n&o,u=l+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&a^~c&h)+p[f]+_[f],l=h,h=a,a=c,c=s+u|0,s=o,o=n,n=i,i=u+(((i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22))+d)|0}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+c|0,r[5]=r[5]+a|0,r[6]=r[6]+h|0,r[7]=r[7]+l|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=n.floor(r/4294967296),e[15+(64+i>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});t.SHA256=i._createHelper(e),t.HmacSHA256=i._createHmacHelper(e)}(Math),r=(w=U).lib.WordArray,F=w.algo,i=F.SHA256,F=F.SHA224=i.extend({_doReset:function(){this._hash=new r.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=i._doFinalize.call(this);return t.sigBytes-=4,t}}),w.SHA224=i._createHelper(F),w.HmacSHA224=i._createHmacHelper(F),function(){var t=U,e=t.lib.Hasher,r=t.x64,i=r.Word,n=r.WordArray,r=t.algo;function o(){return i.create.apply(i,arguments)}var t1=[o(1116352408,3609767458),o(1899447441,602891725),o(3049323471,3964484399),o(3921009573,2173295548),o(961987163,4081628472),o(1508970993,3053834265),o(2453635748,2937671579),o(2870763221,3664609560),o(3624381080,2734883394),o(310598401,1164996542),o(607225278,1323610764),o(1426881987,3590304994),o(1925078388,4068182383),o(2162078206,991336113),o(2614888103,633803317),o(3248222580,3479774868),o(3835390401,2666613458),o(4022224774,944711139),o(264347078,2341262773),o(604807628,2007800933),o(770255983,1495990901),o(1249150122,1856431235),o(1555081692,3175218132),o(1996064986,2198950837),o(2554220882,3999719339),o(2821834349,766784016),o(2952996808,2566594879),o(3210313671,3203337956),o(3336571891,1034457026),o(3584528711,2466948901),o(113926993,3758326383),o(338241895,168717936),o(666307205,1188179964),o(773529912,1546045734),o(1294757372,1522805485),o(1396182291,2643833823),o(1695183700,2343527390),o(1986661051,1014477480),o(2177026350,1206759142),o(2456956037,344077627),o(2730485921,1290863460),o(2820302411,3158454273),o(3259730800,3505952657),o(3345764771,106217008),o(3516065817,3606008344),o(3600352804,1432725776),o(4094571909,1467031594),o(275423344,851169720),o(430227734,3100823752),o(506948616,1363258195),o(659060556,3750685593),o(883997877,3785050280),o(958139571,3318307427),o(1322822218,3812723403),o(1537002063,2003034995),o(1747873779,3602036899),o(1955562222,1575990012),o(2024104815,1125592928),o(2227730452,2716904306),o(2361852424,442776044),o(2428436474,593698344),o(2756734187,3733110249),o(3204031479,2999351573),o(3329325298,3815920427),o(3391569614,3928383900),o(3515267271,566280711),o(3940187606,3454069534),o(4118630271,4000239992),o(116418474,1914138554),o(174292421,2731055270),o(289380356,3203993006),o(460393269,320620315),o(685471733,587496836),o(852142971,1086792851),o(1017036298,365543100),o(1126000580,2618297676),o(1288033470,3409855158),o(1501505948,4234509866),o(1607167915,987167468),o(1816402316,1246189591)],e1=[];!function(){for(var t=0;t<80;t++)e1[t]=o()}();r=r.SHA512=e.extend({_doReset:function(){this._hash=new n.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],c=r[4],a=r[5],h=r[6],l=r[7],f=i.high,d=i.low,u=n.high,p=n.low,_=o.high,y=o.low,v=s.high,g=s.low,B=c.high,w=c.low,k=a.high,m=a.low,S=h.high,x=h.low,b=l.high,r=l.low,A=f,H=d,z=u,C=p,D=_,E=y,R=v,M=g,F=B,P=w,W=k,O=m,I=S,U=x,K=b,X=r,L=0;L<80;L++){var j,T,N=e1[L];L<16?(T=N.high=0|t[e+2*L],j=N.low=0|t[e+2*L+1]):($=(q=e1[L-15]).high,J=q.low,G=(Q=e1[L-2]).high,V=Q.low,Z=(Y=e1[L-7]).high,q=Y.low,Y=(Q=e1[L-16]).high,T=(T=(($>>>1|J<<31)^($>>>8|J<<24)^$>>>7)+Z+((j=(Z=(J>>>1|$<<31)^(J>>>8|$<<24)^(J>>>7|$<<25))+q)>>>0<Z>>>0?1:0))+((G>>>19|V<<13)^(G<<3|V>>>29)^G>>>6)+((j+=J=(V>>>19|G<<13)^(V<<3|G>>>29)^(V>>>6|G<<26))>>>0<J>>>0?1:0),j+=$=Q.low,N.high=T=T+Y+(j>>>0<$>>>0?1:0),N.low=j);var q=F&W^~F&I,Z=P&O^~P&U,V=A&z^A&D^z&D,G=(H>>>28|A<<4)^(H<<30|A>>>2)^(H<<25|A>>>7),J=t1[L],Q=J.high,Y=J.low,$=X+((P>>>14|F<<18)^(P>>>18|F<<14)^(P<<23|F>>>9)),N=K+((F>>>14|P<<18)^(F>>>18|P<<14)^(F<<23|P>>>9))+($>>>0<X>>>0?1:0),J=G+(H&C^H&E^C&E),K=I,X=U,I=W,U=O,W=F,O=P,F=R+(N=(N=(N=N+q+(($=$+Z)>>>0<Z>>>0?1:0))+Q+(($=$+Y)>>>0<Y>>>0?1:0))+T+(($=$+j)>>>0<j>>>0?1:0))+((P=M+$|0)>>>0<M>>>0?1:0)|0,R=D,M=E,D=z,E=C,z=A,C=H,A=N+(((A>>>28|H<<4)^(A<<30|H>>>2)^(A<<25|H>>>7))+V+(J>>>0<G>>>0?1:0))+((H=$+J|0)>>>0<$>>>0?1:0)|0}d=i.low=d+H,i.high=f+A+(d>>>0<H>>>0?1:0),p=n.low=p+C,n.high=u+z+(p>>>0<C>>>0?1:0),y=o.low=y+E,o.high=_+D+(y>>>0<E>>>0?1:0),g=s.low=g+M,s.high=v+R+(g>>>0<M>>>0?1:0),w=c.low=w+P,c.high=B+F+(w>>>0<P>>>0?1:0),m=a.low=m+O,a.high=k+W+(m>>>0<O>>>0?1:0),x=h.low=x+U,h.high=S+I+(x>>>0<U>>>0?1:0),r=l.low=r+X,l.high=b+K+(r>>>0<X>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[30+(128+i>>>10<<5)]=Math.floor(r/4294967296),e[31+(128+i>>>10<<5)]=r,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(r),t.HmacSHA512=e._createHmacHelper(r)}(),P=(M=U).x64,c=P.Word,f=P.WordArray,P=M.algo,d=P.SHA512,P=P.SHA384=d.extend({_doReset:function(){this._hash=new f.init([new c.init(3418070365,3238371032),new c.init(1654270250,914150663),new c.init(2438529370,812702999),new c.init(355462360,4144912697),new c.init(1731405415,4290775857),new c.init(2394180231,1750603025),new c.init(3675008525,1694076839),new c.init(1203062813,3204075428)])},_doFinalize:function(){var t=d._doFinalize.call(this);return t.sigBytes-=16,t}}),M.SHA384=d._createHelper(P),M.HmacSHA384=d._createHmacHelper(P),function(l){var t=U,e=t.lib,f=e.WordArray,i=e.Hasher,d=t.x64.Word,e=t.algo,A=[],H=[],z=[];!function(){for(var t=1,e=0,r=0;r<24;r++){A[t+5*e]=(r+1)*(r+2)/2%64;var i=(2*t+3*e)%5;t=e%5,e=i}for(t=0;t<5;t++)for(e=0;e<5;e++)H[t+5*e]=e+(2*t+3*e)%5*5;for(var n=1,o=0;o<24;o++){for(var s,c=0,a=0,h=0;h<7;h++)1&n&&((s=(1<<h)-1)<32?a^=1<<s:c^=1<<s-32),128&n?n=n<<1^113:n<<=1;z[o]=d.create(c,a)}}();var C=[];!function(){for(var t=0;t<25;t++)C[t]=d.create()}();e=e.SHA3=i.extend({cfg:i.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new d.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var r=this._state,i=this.blockSize/2,n=0;n<i;n++){var o=t[e+2*n],s=t[e+2*n+1],o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8);(m=r[n]).high^=s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),m.low^=o}for(var c=0;c<24;c++){for(var a=0;a<5;a++){for(var h=0,l=0,f=0;f<5;f++)h^=(m=r[a+5*f]).high,l^=m.low;var d=C[a];d.high=h,d.low=l}for(a=0;a<5;a++)for(var u=C[(a+4)%5],p=C[(a+1)%5],_=p.high,p=p.low,h=u.high^(_<<1|p>>>31),l=u.low^(p<<1|_>>>31),f=0;f<5;f++)(m=r[a+5*f]).high^=h,m.low^=l;for(var y=1;y<25;y++){var v=(m=r[y]).high,g=m.low,B=A[y];l=B<32?(h=v<<B|g>>>32-B,g<<B|v>>>32-B):(h=g<<B-32|v>>>64-B,v<<B-32|g>>>64-B);B=C[H[y]];B.high=h,B.low=l}var w=C[0],k=r[0];w.high=k.high,w.low=k.low;for(a=0;a<5;a++)for(f=0;f<5;f++){var m=r[y=a+5*f],S=C[y],x=C[(a+1)%5+5*f],b=C[(a+2)%5+5*f];m.high=S.high^~x.high&b.high,m.low=S.low^~x.low&b.low}m=r[0],k=z[c];m.high^=k.high,m.low^=k.low}},_doFinalize:function(){var t=this._data,e=t.words,r=(this._nDataBytes,8*t.sigBytes),i=32*this.blockSize;e[r>>>5]|=1<<24-r%32,e[(l.ceil((1+r)/i)*i>>>5)-1]|=128,t.sigBytes=4*e.length,this._process();for(var n=this._state,e=this.cfg.outputLength/8,o=e/8,s=[],c=0;c<o;c++){var a=n[c],h=a.high,a=a.low,h=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8);s.push(a=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)),s.push(h)}return new f.init(s,e)},clone:function(){for(var t=i.clone.call(this),e=t._state=this._state.slice(0),r=0;r<25;r++)e[r]=e[r].clone();return t}});t.SHA3=i._createHelper(e),t.HmacSHA3=i._createHmacHelper(e)}(Math),Math,F=(w=U).lib,u=F.WordArray,p=F.Hasher,F=w.algo,S=u.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),x=u.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),b=u.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),A=u.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),H=u.create([0,1518500249,1859775393,2400959708,2840853838]),z=u.create([1352829926,1548603684,1836072691,2053994217,0]),F=F.RIPEMD160=p.extend({_doReset:function(){this._hash=u.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}for(var o,s,c,a,h,l,f=this._hash.words,d=H.words,u=z.words,p=S.words,_=x.words,y=b.words,v=A.words,g=o=f[0],B=s=f[1],w=c=f[2],k=a=f[3],m=h=f[4],r=0;r<80;r+=1)l=o+t[e+p[r]]|0,l+=r<16?(s^c^a)+d[0]:r<32?K(s,c,a)+d[1]:r<48?((s|~c)^a)+d[2]:r<64?X(s,c,a)+d[3]:(s^(c|~a))+d[4],l=(l=L(l|=0,y[r]))+h|0,o=h,h=a,a=L(c,10),c=s,s=l,l=g+t[e+_[r]]|0,l+=r<16?(B^(w|~k))+u[0]:r<32?X(B,w,k)+u[1]:r<48?((B|~w)^k)+u[2]:r<64?K(B,w,k)+u[3]:(B^w^k)+u[4],l=(l=L(l|=0,v[r]))+m|0,g=m,m=k,k=L(w,10),w=B,B=l;l=f[1]+c+k|0,f[1]=f[2]+a+m|0,f[2]=f[3]+h+g|0,f[3]=f[4]+o+B|0,f[4]=f[0]+s+w|0,f[0]=l},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var e=this._hash,n=e.words,o=0;o<5;o++){var s=n[o];n[o]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return e},clone:function(){var t=p.clone.call(this);return t._hash=this._hash.clone(),t}}),w.RIPEMD160=p._createHelper(F),w.HmacRIPEMD160=p._createHmacHelper(F),P=(M=U).lib.Base,_=M.enc.Utf8,M.algo.HMAC=P.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=_.parse(e));var r=t.blockSize,i=4*r;(e=e.sigBytes>i?t.finalize(e):e).clamp();for(var t=this._oKey=e.clone(),e=this._iKey=e.clone(),n=t.words,o=e.words,s=0;s<r;s++)n[s]^=1549556828,o[s]^=909522486;t.sigBytes=e.sigBytes=i,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,t=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(t))}}),F=(w=U).lib,M=F.Base,v=F.WordArray,P=w.algo,F=P.SHA1,g=P.HMAC,y=P.PBKDF2=M.extend({cfg:M.extend({keySize:4,hasher:F,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,i=g.create(r.hasher,t),n=v.create(),o=v.create([1]),s=n.words,c=o.words,a=r.keySize,h=r.iterations;s.length<a;){var l=i.update(e).finalize(o);i.reset();for(var f=l.words,d=f.length,u=l,p=1;p<h;p++){u=i.finalize(u),i.reset();for(var _=u.words,y=0;y<d;y++)f[y]^=_[y]}n.concat(l),c[0]++}return n.sigBytes=4*a,n}}),w.PBKDF2=function(t,e,r){return y.create(r).compute(t,e)},M=(P=U).lib,F=M.Base,B=M.WordArray,w=P.algo,M=w.MD5,k=w.EvpKDF=F.extend({cfg:F.extend({keySize:4,hasher:M,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r,i=this.cfg,n=i.hasher.create(),o=B.create(),s=o.words,c=i.keySize,a=i.iterations;s.length<c;){r&&n.update(r),r=n.update(t).finalize(e),n.reset();for(var h=1;h<a;h++)r=n.finalize(r),n.reset();o.concat(r)}return o.sigBytes=4*c,o}}),P.EvpKDF=function(t,e,r){return k.create(r).compute(t,e)},U.lib.Cipher||function(){var t=U,e=t.lib,r=e.Base,s=e.WordArray,i=e.BufferedBlockAlgorithm,n=t.enc,o=(n.Utf8,n.Base64),c=t.algo.EvpKDF,a=e.Cipher=i.extend({cfg:r.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,r){this.cfg=this.cfg.extend(r),this._xformMode=t,this._key=e,this.reset()},reset:function(){i.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(i){return{encrypt:function(t,e,r){return h(e).encrypt(i,t,e,r)},decrypt:function(t,e,r){return h(e).decrypt(i,t,e,r)}}}});function h(t){return"string"==typeof t?p:u}e.StreamCipher=a.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var l=t.mode={},n=e.BlockCipherMode=r.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),n=l.CBC=((l=n.extend()).Encryptor=l.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize;f.call(this,t,e,i),r.encryptBlock(t,e),this._prevBlock=t.slice(e,e+i)}}),l.Decryptor=l.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=t.slice(e,e+i);r.decryptBlock(t,e),f.call(this,t,e,i),this._prevBlock=n}}),l);function f(t,e,r){var i,n=this._iv;n?(i=n,this._iv=void 0):i=this._prevBlock;for(var o=0;o<r;o++)t[e+o]^=i[o]}var l=(t.pad={}).Pkcs7={pad:function(t,e){for(var e=4*e,r=e-t.sigBytes%e,i=r<<24|r<<16|r<<8|r,n=[],o=0;o<r;o+=4)n.push(i);e=s.create(n,r);t.concat(e)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},d=(e.BlockCipher=a.extend({cfg:a.cfg.extend({mode:n,padding:l}),reset:function(){var t;a.reset.call(this);var e=this.cfg,r=e.iv,e=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=e.createEncryptor:(t=e.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,r&&r.words):(this._mode=t.call(e,this,r&&r.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4}),e.CipherParams=r.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}})),l=(t.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,t=t.salt,e=t?s.create([1398893684,1701076831]).concat(t).concat(e):e;return e.toString(o)},parse:function(t){var e,r=o.parse(t),t=r.words;return 1398893684==t[0]&&1701076831==t[1]&&(e=s.create(t.slice(2,4)),t.splice(0,4),r.sigBytes-=16),d.create({ciphertext:r,salt:e})}},u=e.SerializableCipher=r.extend({cfg:r.extend({format:l}),encrypt:function(t,e,r,i){i=this.cfg.extend(i);var n=t.createEncryptor(r,i),e=n.finalize(e),n=n.cfg;return d.create({ciphertext:e,key:r,iv:n.iv,algorithm:t,mode:n.mode,padding:n.padding,blockSize:t.blockSize,formatter:i.format})},decrypt:function(t,e,r,i){return i=this.cfg.extend(i),e=this._parse(e,i.format),t.createDecryptor(r,i).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),t=(t.kdf={}).OpenSSL={execute:function(t,e,r,i){i=i||s.random(8);t=c.create({keySize:e+r}).compute(t,i),r=s.create(t.words.slice(e),4*r);return t.sigBytes=4*e,d.create({key:t,iv:r,salt:i})}},p=e.PasswordBasedCipher=u.extend({cfg:u.cfg.extend({kdf:t}),encrypt:function(t,e,r,i){r=(i=this.cfg.extend(i)).kdf.execute(r,t.keySize,t.ivSize);i.iv=r.iv;i=u.encrypt.call(this,t,e,r.key,i);return i.mixIn(r),i},decrypt:function(t,e,r,i){i=this.cfg.extend(i),e=this._parse(e,i.format);r=i.kdf.execute(r,t.keySize,t.ivSize,e.salt);return i.iv=r.iv,u.decrypt.call(this,t,e,r.key,i)}})}(),U.mode.CFB=((F=U.lib.BlockCipherMode.extend()).Encryptor=F.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize;j.call(this,t,e,i,r),this._prevBlock=t.slice(e,e+i)}}),F.Decryptor=F.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=t.slice(e,e+i);j.call(this,t,e,i,r),this._prevBlock=n}}),F),U.mode.CTR=(M=U.lib.BlockCipherMode.extend(),P=M.Encryptor=M.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0);var s=o.slice(0);r.encryptBlock(s,0),o[i-1]=o[i-1]+1|0;for(var c=0;c<i;c++)t[e+c]^=s[c]}}),M.Decryptor=P,M),U.mode.CTRGladman=(F=U.lib.BlockCipherMode.extend(),P=F.Encryptor=F.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0),0===((n=o)[0]=T(n[0]))&&(n[1]=T(n[1]));var s=o.slice(0);r.encryptBlock(s,0);for(var c=0;c<i;c++)t[e+c]^=s[c]}}),F.Decryptor=P,F),U.mode.OFB=(M=U.lib.BlockCipherMode.extend(),P=M.Encryptor=M.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._keystream;n&&(o=this._keystream=n.slice(0),this._iv=void 0),r.encryptBlock(o,0);for(var s=0;s<i;s++)t[e+s]^=o[s]}}),M.Decryptor=P,M),U.mode.ECB=((F=U.lib.BlockCipherMode.extend()).Encryptor=F.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),F.Decryptor=F.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),F),U.pad.AnsiX923={pad:function(t,e){var r=t.sigBytes,e=4*e,e=e-r%e,r=r+e-1;t.clamp(),t.words[r>>>2]|=e<<24-r%4*8,t.sigBytes+=e},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},U.pad.Iso10126={pad:function(t,e){e*=4,e-=t.sigBytes%e;t.concat(U.lib.WordArray.random(e-1)).concat(U.lib.WordArray.create([e<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},U.pad.Iso97971={pad:function(t,e){t.concat(U.lib.WordArray.create([2147483648],1)),U.pad.ZeroPadding.pad(t,e)},unpad:function(t){U.pad.ZeroPadding.unpad(t),t.sigBytes--}},U.pad.ZeroPadding={pad:function(t,e){e*=4;t.clamp(),t.sigBytes+=e-(t.sigBytes%e||e)},unpad:function(t){for(var e=t.words,r=t.sigBytes-1,r=t.sigBytes-1;0<=r;r--)if(e[r>>>2]>>>24-r%4*8&255){t.sigBytes=r+1;break}}},U.pad.NoPadding={pad:function(){},unpad:function(){}},m=(P=U).lib.CipherParams,C=P.enc.Hex,P.format.Hex={stringify:function(t){return t.ciphertext.toString(C)},parse:function(t){t=C.parse(t);return m.create({ciphertext:t})}},function(){var t=U,e=t.lib.BlockCipher,r=t.algo,h=[],l=[],f=[],d=[],u=[],p=[],_=[],y=[],v=[],g=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var r=0,i=0,e=0;e<256;e++){var n=i^i<<1^i<<2^i<<3^i<<4;h[r]=n=n>>>8^255&n^99;var o=t[l[n]=r],s=t[o],c=t[s],a=257*t[n]^16843008*n;f[r]=a<<24|a>>>8,d[r]=a<<16|a>>>16,u[r]=a<<8|a>>>24,p[r]=a,_[n]=(a=16843009*c^65537*s^257*o^16843008*r)<<24|a>>>8,y[n]=a<<16|a>>>16,v[n]=a<<8|a>>>24,g[n]=a,r?(r=o^t[t[t[c^o]]],i^=t[t[i]]):r=i=1}}();var B=[0,1,2,4,8,16,32,64,128,27,54],r=r.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4,i=4*(1+(this._nRounds=6+r)),n=this._keySchedule=[],o=0;o<i;o++)o<r?n[o]=e[o]:(a=n[o-1],o%r?6<r&&o%r==4&&(a=h[a>>>24]<<24|h[a>>>16&255]<<16|h[a>>>8&255]<<8|h[255&a]):(a=h[(a=a<<8|a>>>24)>>>24]<<24|h[a>>>16&255]<<16|h[a>>>8&255]<<8|h[255&a],a^=B[o/r|0]<<24),n[o]=n[o-r]^a);for(var s=this._invKeySchedule=[],c=0;c<i;c++){var a,o=i-c;a=c%4?n[o]:n[o-4],s[c]=c<4||o<=4?a:_[h[a>>>24]]^y[h[a>>>16&255]]^v[h[a>>>8&255]]^g[h[255&a]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,f,d,u,p,h)},decryptBlock:function(t,e){var r=t[e+1];t[e+1]=t[e+3],t[e+3]=r,this._doCryptBlock(t,e,this._invKeySchedule,_,y,v,g,l);r=t[e+1];t[e+1]=t[e+3],t[e+3]=r},_doCryptBlock:function(t,e,r,i,n,o,s,c){for(var a=this._nRounds,h=t[e]^r[0],l=t[e+1]^r[1],f=t[e+2]^r[2],d=t[e+3]^r[3],u=4,p=1;p<a;p++)var _=i[h>>>24]^n[l>>>16&255]^o[f>>>8&255]^s[255&d]^r[u++],y=i[l>>>24]^n[f>>>16&255]^o[d>>>8&255]^s[255&h]^r[u++],v=i[f>>>24]^n[d>>>16&255]^o[h>>>8&255]^s[255&l]^r[u++],g=i[d>>>24]^n[h>>>16&255]^o[l>>>8&255]^s[255&f]^r[u++],h=_,l=y,f=v,d=g;_=(c[h>>>24]<<24|c[l>>>16&255]<<16|c[f>>>8&255]<<8|c[255&d])^r[u++],y=(c[l>>>24]<<24|c[f>>>16&255]<<16|c[d>>>8&255]<<8|c[255&h])^r[u++],v=(c[f>>>24]<<24|c[d>>>16&255]<<16|c[h>>>8&255]<<8|c[255&l])^r[u++],g=(c[d>>>24]<<24|c[h>>>16&255]<<16|c[l>>>8&255]<<8|c[255&f])^r[u++];t[e]=_,t[e+1]=y,t[e+2]=v,t[e+3]=g},keySize:8});t.AES=e._createHelper(r)}(),function(){var t=U,e=t.lib,i=e.WordArray,r=e.BlockCipher,e=t.algo,h=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],l=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],f=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],d=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],u=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],n=e.DES=r.extend({_doReset:function(){for(var t=this._key.words,e=[],r=0;r<56;r++){var i=h[r]-1;e[r]=t[i>>>5]>>>31-i%32&1}for(var n=this._subKeys=[],o=0;o<16;o++){for(var s=n[o]=[],c=f[o],r=0;r<24;r++)s[r/6|0]|=e[(l[r]-1+c)%28]<<31-r%6,s[4+(r/6|0)]|=e[28+(l[r+24]-1+c)%28]<<31-r%6;s[0]=s[0]<<1|s[0]>>>31;for(r=1;r<7;r++)s[r]=s[r]>>>4*(r-1)+3;s[7]=s[7]<<5|s[7]>>>27}for(var a=this._invSubKeys=[],r=0;r<16;r++)a[r]=n[15-r]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,r){this._lBlock=t[e],this._rBlock=t[e+1],p.call(this,4,252645135),p.call(this,16,65535),_.call(this,2,858993459),_.call(this,8,16711935),p.call(this,1,1431655765);for(var i=0;i<16;i++){for(var n=r[i],o=this._lBlock,s=this._rBlock,c=0,a=0;a<8;a++)c|=d[a][((s^n[a])&u[a])>>>0];this._lBlock=s,this._rBlock=o^c}var h=this._lBlock;this._lBlock=this._rBlock,this._rBlock=h,p.call(this,1,1431655765),_.call(this,8,16711935),_.call(this,2,858993459),p.call(this,16,65535),p.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function p(t,e){e=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=e,this._lBlock^=e<<t}function _(t,e){e=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=e,this._rBlock^=e<<t}t.DES=r._createHelper(n);e=e.TripleDES=r.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),r=t.length<4?t.slice(0,2):t.slice(2,4),t=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=n.createEncryptor(i.create(e)),this._des2=n.createEncryptor(i.create(r)),this._des3=n.createEncryptor(i.create(t))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=r._createHelper(e)}(),function(){var t=U,e=t.lib.StreamCipher,r=t.algo,i=r.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,r=t.sigBytes,i=this._S=[],n=0;n<256;n++)i[n]=n;for(var n=0,o=0;n<256;n++){var s=n%r,s=e[s>>>2]>>>24-s%4*8&255,o=(o+i[n]+s)%256,s=i[n];i[n]=i[o],i[o]=s}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=n.call(this)},keySize:8,ivSize:0});function n(){for(var t=this._S,e=this._i,r=this._j,i=0,n=0;n<4;n++){var r=(r+t[e=(e+1)%256])%256,o=t[e];t[e]=t[r],t[r]=o,i|=t[(t[e]+t[r])%256]<<24-8*n}return this._i=e,this._j=r,i}t.RC4=e._createHelper(i);r=r.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;0<t;t--)n.call(this)}});t.RC4Drop=e._createHelper(r)}(),F=(M=U).lib.StreamCipher,P=M.algo,D=[],E=[],R=[],P=P.Rabbit=F.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=0;r<4;r++)t[r]=16711935&(t[r]<<8|t[r]>>>24)|4278255360&(t[r]<<24|t[r]>>>8);for(var i=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]],r=this._b=0;r<4;r++)N.call(this);for(r=0;r<8;r++)n[r]^=i[r+4&7];if(e){var o=e.words,s=o[0],c=o[1],e=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),o=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8),s=e>>>16|4294901760&o,c=o<<16|65535&e;n[0]^=e,n[1]^=s,n[2]^=o,n[3]^=c,n[4]^=e,n[5]^=s,n[6]^=o,n[7]^=c;for(r=0;r<4;r++)N.call(this)}},_doProcessBlock:function(t,e){var r=this._X;N.call(this),D[0]=r[0]^r[5]>>>16^r[3]<<16,D[1]=r[2]^r[7]>>>16^r[5]<<16,D[2]=r[4]^r[1]>>>16^r[7]<<16,D[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)D[i]=16711935&(D[i]<<8|D[i]>>>24)|4278255360&(D[i]<<24|D[i]>>>8),t[e+i]^=D[i]},blockSize:4,ivSize:2}),M.Rabbit=F._createHelper(P),F=(M=U).lib.StreamCipher,P=M.algo,W=[],O=[],I=[],P=P.RabbitLegacy=F.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]],n=this._b=0;n<4;n++)q.call(this);for(n=0;n<8;n++)i[n]^=r[n+4&7];if(e){var o=e.words,s=o[0],t=o[1],e=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),o=16711935&(t<<8|t>>>24)|4278255360&(t<<24|t>>>8),s=e>>>16|4294901760&o,t=o<<16|65535&e;i[0]^=e,i[1]^=s,i[2]^=o,i[3]^=t,i[4]^=e,i[5]^=s,i[6]^=o,i[7]^=t;for(n=0;n<4;n++)q.call(this)}},_doProcessBlock:function(t,e){var r=this._X;q.call(this),W[0]=r[0]^r[5]>>>16^r[3]<<16,W[1]=r[2]^r[7]>>>16^r[5]<<16,W[2]=r[4]^r[1]>>>16^r[7]<<16,W[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)W[i]=16711935&(W[i]<<8|W[i]>>>24)|4278255360&(W[i]<<24|W[i]>>>8),t[e+i]^=W[i]},blockSize:4,ivSize:2}),M.RabbitLegacy=F._createHelper(P),U
	};

    return {
		CryptoJS: CryptoJS
    };
});

/*
	CryptoJS v3.3.0
	[The MIT License (MIT)](http://opensource.org/licenses/MIT)

	Copyright (c) 2009-2013 Jeff Mott  
	Copyright (c) 2013-2016 Evan Vosberg

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
*/
define('Saralux.Core.ExternalLibraries.CryptoJS', [], function() {

	function CryptoJS(){var l,r,t,e,i,f,n,o,s,a,c,h,u,d,p,_,v,y,g,B,w,k,S,m,x,b,H,z,A,C,D,R,E,M,F,P,W,O,U,I,K,X,L,j,N,T,Z,q,G,J,$,Q,V,Y,tt,et,rt,it,nt,ot,st,at,ct,ht,lt,ft,ut,dt,pt,_t,vt,yt,gt,Bt,wt,kt,St,mt,xt,bt,Ht,zt,At,Ct,Dt,Rt,Et,Mt,Ft,Pt=Pt||(l=Math,r=Object.create||function(t){var e;return Wt.prototype=t,e=new Wt,Wt.prototype=null,e},e=(t={}).lib={},i=e.Base={extend:function(t){var e=r(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),(e.init.prototype=e).$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},f=e.WordArray=i.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||o).stringify(this)},concat:function(t){var e=this.words,r=t.words,i=this.sigBytes,n=t.sigBytes;if(this.clamp(),i%4)for(var o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;e[i+o>>>2]|=s<<24-(i+o)%4*8}else for(o=0;o<n;o+=4)e[i+o>>>2]=r[o>>>2];return this.sigBytes+=n,this},clamp:function(){var t=this.words,e=this.sigBytes;t[e>>>2]&=4294967295<<32-e%4*8,t.length=l.ceil(e/4)},clone:function(){var t=i.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){function e(e){e=e;var r=987654321,i=4294967295;return function(){var t=((r=36969*(65535&r)+(r>>16)&i)<<16)+(e=18e3*(65535&e)+(e>>16)&i)&i;return t/=4294967296,(t+=.5)*(.5<l.random()?1:-1)}}for(var r,i=[],n=0;n<t;n+=4){var o=e(4294967296*(r||l.random()));r=987654071*o(),i.push(4294967296*o()|0)}return new f.init(i,t)}}),n=t.enc={},o=n.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i+=2)r[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new f.init(r,e/2)}},s=n.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>2]|=(255&t.charCodeAt(i))<<24-i%4*8;return new f.init(r,e)}},a=n.Utf8={stringify:function(t){try{return decodeURIComponent(escape(s.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return s.parse(unescape(encodeURIComponent(t)))}},c=e.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new f.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=a.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var e=this._data,r=e.words,i=e.sigBytes,n=this.blockSize,o=i/(4*n),s=(o=t?l.ceil(o):l.max((0|o)-this._minBufferSize,0))*n,a=l.min(4*s,i);if(s){for(var c=0;c<s;c+=n)this._doProcessBlock(r,c);var h=r.splice(0,s);e.sigBytes-=a}return new f.init(h,a)},clone:function(){var t=i.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),e.Hasher=c.extend({cfg:i.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){c.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(r){return function(t,e){return new r.init(e).finalize(t)}},_createHmacHelper:function(r){return function(t,e){return new h.HMAC.init(r,e).finalize(t)}}}),h=t.algo={},t);function Wt(){}function Ot(t,e,r){return t^e^r}function Ut(t,e,r){return t&e|~t&r}function It(t,e,r){return(t|~e)^r}function Kt(t,e,r){return t&r|e&~r}function Xt(t,e,r){return t^(e|~r)}function Lt(t,e){return t<<e|t>>>32-e}function jt(t,e,r,i){var n=this._iv;if(n){var o=n.slice(0);this._iv=void 0}else o=this._prevBlock;i.encryptBlock(o,0);for(var s=0;s<r;s++)t[e+s]^=o[s]}function Nt(t){if(255==(t>>24&255)){var e=t>>16&255,r=t>>8&255,i=255&t;255===e?(e=0,255===r?(r=0,255===i?i=0:++i):++r):++e,t=0,t+=e<<16,t+=r<<8,t+=i}else t+=1<<24;return t}function Tt(){for(var t=this._X,e=this._C,r=0;r<8;r++)mt[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<mt[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<mt[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<mt[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<mt[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<mt[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<mt[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<mt[6]>>>0?1:0)|0,this._b=e[7]>>>0<mt[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],n=65535&i,o=i>>>16,s=((n*n>>>17)+n*o>>>15)+o*o,a=((4294901760&i)*i|0)+((65535&i)*i|0);xt[r]=s^a}t[0]=xt[0]+(xt[7]<<16|xt[7]>>>16)+(xt[6]<<16|xt[6]>>>16)|0,t[1]=xt[1]+(xt[0]<<8|xt[0]>>>24)+xt[7]|0,t[2]=xt[2]+(xt[1]<<16|xt[1]>>>16)+(xt[0]<<16|xt[0]>>>16)|0,t[3]=xt[3]+(xt[2]<<8|xt[2]>>>24)+xt[1]|0,t[4]=xt[4]+(xt[3]<<16|xt[3]>>>16)+(xt[2]<<16|xt[2]>>>16)|0,t[5]=xt[5]+(xt[4]<<8|xt[4]>>>24)+xt[3]|0,t[6]=xt[6]+(xt[5]<<16|xt[5]>>>16)+(xt[4]<<16|xt[4]>>>16)|0,t[7]=xt[7]+(xt[6]<<8|xt[6]>>>24)+xt[5]|0}function Zt(){for(var t=this._X,e=this._C,r=0;r<8;r++)Et[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<Et[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<Et[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<Et[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<Et[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<Et[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<Et[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<Et[6]>>>0?1:0)|0,this._b=e[7]>>>0<Et[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],n=65535&i,o=i>>>16,s=((n*n>>>17)+n*o>>>15)+o*o,a=((4294901760&i)*i|0)+((65535&i)*i|0);Mt[r]=s^a}t[0]=Mt[0]+(Mt[7]<<16|Mt[7]>>>16)+(Mt[6]<<16|Mt[6]>>>16)|0,t[1]=Mt[1]+(Mt[0]<<8|Mt[0]>>>24)+Mt[7]|0,t[2]=Mt[2]+(Mt[1]<<16|Mt[1]>>>16)+(Mt[0]<<16|Mt[0]>>>16)|0,t[3]=Mt[3]+(Mt[2]<<8|Mt[2]>>>24)+Mt[1]|0,t[4]=Mt[4]+(Mt[3]<<16|Mt[3]>>>16)+(Mt[2]<<16|Mt[2]>>>16)|0,t[5]=Mt[5]+(Mt[4]<<8|Mt[4]>>>24)+Mt[3]|0,t[6]=Mt[6]+(Mt[5]<<16|Mt[5]>>>16)+(Mt[4]<<16|Mt[4]>>>16)|0,t[7]=Mt[7]+(Mt[6]<<8|Mt[6]>>>24)+Mt[5]|0}return u=Pt.lib.WordArray,Pt.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,i=this._map;t.clamp();for(var n=[],o=0;o<r;o+=3)for(var s=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;a<4&&o+.75*a<r;a++)n.push(i.charAt(s>>>6*(3-a)&63));var c=i.charAt(64);if(c)for(;n.length%4;)n.push(c);return n.join("")},parse:function(t){var e=t.length,r=this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var n=0;n<r.length;n++)i[r.charCodeAt(n)]=n}var o=r.charAt(64);if(o){var s=t.indexOf(o);-1!==s&&(e=s)}return function(t,e,r){for(var i=[],n=0,o=0;o<e;o++)if(o%4){var s=r[t.charCodeAt(o-1)]<<o%4*2,a=r[t.charCodeAt(o)]>>>6-o%4*2;i[n>>>2]|=(s|a)<<24-n%4*8,n++}return u.create(i,n)}(t,e,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},function(l){var t=Pt,e=t.lib,r=e.WordArray,i=e.Hasher,n=t.algo,H=[];!function(){for(var t=0;t<64;t++)H[t]=4294967296*l.abs(l.sin(t+1))|0}();var o=n.MD5=i.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o=this._hash.words,s=t[e+0],a=t[e+1],c=t[e+2],h=t[e+3],l=t[e+4],f=t[e+5],u=t[e+6],d=t[e+7],p=t[e+8],_=t[e+9],v=t[e+10],y=t[e+11],g=t[e+12],B=t[e+13],w=t[e+14],k=t[e+15],S=o[0],m=o[1],x=o[2],b=o[3];S=z(S,m,x,b,s,7,H[0]),b=z(b,S,m,x,a,12,H[1]),x=z(x,b,S,m,c,17,H[2]),m=z(m,x,b,S,h,22,H[3]),S=z(S,m,x,b,l,7,H[4]),b=z(b,S,m,x,f,12,H[5]),x=z(x,b,S,m,u,17,H[6]),m=z(m,x,b,S,d,22,H[7]),S=z(S,m,x,b,p,7,H[8]),b=z(b,S,m,x,_,12,H[9]),x=z(x,b,S,m,v,17,H[10]),m=z(m,x,b,S,y,22,H[11]),S=z(S,m,x,b,g,7,H[12]),b=z(b,S,m,x,B,12,H[13]),x=z(x,b,S,m,w,17,H[14]),S=A(S,m=z(m,x,b,S,k,22,H[15]),x,b,a,5,H[16]),b=A(b,S,m,x,u,9,H[17]),x=A(x,b,S,m,y,14,H[18]),m=A(m,x,b,S,s,20,H[19]),S=A(S,m,x,b,f,5,H[20]),b=A(b,S,m,x,v,9,H[21]),x=A(x,b,S,m,k,14,H[22]),m=A(m,x,b,S,l,20,H[23]),S=A(S,m,x,b,_,5,H[24]),b=A(b,S,m,x,w,9,H[25]),x=A(x,b,S,m,h,14,H[26]),m=A(m,x,b,S,p,20,H[27]),S=A(S,m,x,b,B,5,H[28]),b=A(b,S,m,x,c,9,H[29]),x=A(x,b,S,m,d,14,H[30]),S=C(S,m=A(m,x,b,S,g,20,H[31]),x,b,f,4,H[32]),b=C(b,S,m,x,p,11,H[33]),x=C(x,b,S,m,y,16,H[34]),m=C(m,x,b,S,w,23,H[35]),S=C(S,m,x,b,a,4,H[36]),b=C(b,S,m,x,l,11,H[37]),x=C(x,b,S,m,d,16,H[38]),m=C(m,x,b,S,v,23,H[39]),S=C(S,m,x,b,B,4,H[40]),b=C(b,S,m,x,s,11,H[41]),x=C(x,b,S,m,h,16,H[42]),m=C(m,x,b,S,u,23,H[43]),S=C(S,m,x,b,_,4,H[44]),b=C(b,S,m,x,g,11,H[45]),x=C(x,b,S,m,k,16,H[46]),S=D(S,m=C(m,x,b,S,c,23,H[47]),x,b,s,6,H[48]),b=D(b,S,m,x,d,10,H[49]),x=D(x,b,S,m,w,15,H[50]),m=D(m,x,b,S,f,21,H[51]),S=D(S,m,x,b,g,6,H[52]),b=D(b,S,m,x,h,10,H[53]),x=D(x,b,S,m,v,15,H[54]),m=D(m,x,b,S,a,21,H[55]),S=D(S,m,x,b,p,6,H[56]),b=D(b,S,m,x,k,10,H[57]),x=D(x,b,S,m,u,15,H[58]),m=D(m,x,b,S,B,21,H[59]),S=D(S,m,x,b,l,6,H[60]),b=D(b,S,m,x,y,10,H[61]),x=D(x,b,S,m,c,15,H[62]),m=D(m,x,b,S,_,21,H[63]),o[0]=o[0]+S|0,o[1]=o[1]+m|0,o[2]=o[2]+x|0,o[3]=o[3]+b|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;e[i>>>5]|=128<<24-i%32;var n=l.floor(r/4294967296),o=r;e[15+(64+i>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),e[14+(64+i>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),t.sigBytes=4*(e.length+1),this._process();for(var s=this._hash,a=s.words,c=0;c<4;c++){var h=a[c];a[c]=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8)}return s},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});function z(t,e,r,i,n,o,s){var a=t+(e&r|~e&i)+n+s;return(a<<o|a>>>32-o)+e}function A(t,e,r,i,n,o,s){var a=t+(e&i|r&~i)+n+s;return(a<<o|a>>>32-o)+e}function C(t,e,r,i,n,o,s){var a=t+(e^r^i)+n+s;return(a<<o|a>>>32-o)+e}function D(t,e,r,i,n,o,s){var a=t+(r^(e|~i))+n+s;return(a<<o|a>>>32-o)+e}t.MD5=i._createHelper(o),t.HmacMD5=i._createHmacHelper(o)}(Math),p=(d=Pt).lib,_=p.WordArray,v=p.Hasher,y=d.algo,g=[],B=y.SHA1=v.extend({_doReset:function(){this._hash=new _.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],a=r[4],c=0;c<80;c++){if(c<16)g[c]=0|t[e+c];else{var h=g[c-3]^g[c-8]^g[c-14]^g[c-16];g[c]=h<<1|h>>>31}var l=(i<<5|i>>>27)+a+g[c];l+=c<20?1518500249+(n&o|~n&s):c<40?1859775393+(n^o^s):c<60?(n&o|n&s|o&s)-1894007588:(n^o^s)-899497514,a=s,s=o,o=n<<30|n>>>2,n=i,i=l}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+a|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=Math.floor(r/4294967296),e[15+(64+i>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=v.clone.call(this);return t._hash=this._hash.clone(),t}}),d.SHA1=v._createHelper(B),d.HmacSHA1=v._createHmacHelper(B),function(n){var t=Pt,e=t.lib,r=e.WordArray,i=e.Hasher,o=t.algo,s=[],B=[];!function(){function t(t){for(var e=n.sqrt(t),r=2;r<=e;r++)if(!(t%r))return;return 1}function e(t){return 4294967296*(t-(0|t))|0}for(var r=2,i=0;i<64;)t(r)&&(i<8&&(s[i]=e(n.pow(r,.5))),B[i]=e(n.pow(r,1/3)),i++),r++}();var w=[],a=o.SHA256=i.extend({_doReset:function(){this._hash=new r.init(s.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],a=r[4],c=r[5],h=r[6],l=r[7],f=0;f<64;f++){if(f<16)w[f]=0|t[e+f];else{var u=w[f-15],d=(u<<25|u>>>7)^(u<<14|u>>>18)^u>>>3,p=w[f-2],_=(p<<15|p>>>17)^(p<<13|p>>>19)^p>>>10;w[f]=d+w[f-7]+_+w[f-16]}var v=i&n^i&o^n&o,y=(i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22),g=l+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&c^~a&h)+B[f]+w[f];l=h,h=c,c=a,a=s+g|0,s=o,o=n,n=i,i=g+(y+v)|0}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+a|0,r[5]=r[5]+c|0,r[6]=r[6]+h|0,r[7]=r[7]+l|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=n.floor(r/4294967296),e[15+(64+i>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});t.SHA256=i._createHelper(a),t.HmacSHA256=i._createHmacHelper(a)}(Math),function(){var n=Pt.lib.WordArray,t=Pt.enc;t.Utf16=t.Utf16BE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n+=2){var o=e[n>>>2]>>>16-n%4*8&65535;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>1]|=t.charCodeAt(i)<<16-i%2*16;return n.create(r,2*e)}};function s(t){return t<<8&4278255360|t>>>8&16711935}t.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n+=2){var o=s(e[n>>>2]>>>16-n%4*8&65535);i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>1]|=s(t.charCodeAt(i)<<16-i%2*16);return n.create(r,2*e)}}}(),function(){if("function"==typeof ArrayBuffer){var t=Pt.lib.WordArray,n=t.init;(t.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var e=t.byteLength,r=[],i=0;i<e;i++)r[i>>>2]|=t[i]<<24-i%4*8;n.call(this,r,e)}else n.apply(this,arguments)}).prototype=t}}(),Math,k=(w=Pt).lib,S=k.WordArray,m=k.Hasher,x=w.algo,b=S.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),H=S.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),z=S.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),A=S.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),C=S.create([0,1518500249,1859775393,2400959708,2840853838]),D=S.create([1352829926,1548603684,1836072691,2053994217,0]),R=x.RIPEMD160=m.extend({_doReset:function(){this._hash=S.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o,s,a,c,h,l,f,u,d,p,_,v=this._hash.words,y=C.words,g=D.words,B=b.words,w=H.words,k=z.words,S=A.words;l=o=v[0],f=s=v[1],u=a=v[2],d=c=v[3],p=h=v[4];for(r=0;r<80;r+=1)_=o+t[e+B[r]]|0,_+=r<16?Ot(s,a,c)+y[0]:r<32?Ut(s,a,c)+y[1]:r<48?It(s,a,c)+y[2]:r<64?Kt(s,a,c)+y[3]:Xt(s,a,c)+y[4],_=(_=Lt(_|=0,k[r]))+h|0,o=h,h=c,c=Lt(a,10),a=s,s=_,_=l+t[e+w[r]]|0,_+=r<16?Xt(f,u,d)+g[0]:r<32?Kt(f,u,d)+g[1]:r<48?It(f,u,d)+g[2]:r<64?Ut(f,u,d)+g[3]:Ot(f,u,d)+g[4],_=(_=Lt(_|=0,S[r]))+p|0,l=p,p=d,d=Lt(u,10),u=f,f=_;_=v[1]+a+d|0,v[1]=v[2]+c+p|0,v[2]=v[3]+h+l|0,v[3]=v[4]+o+f|0,v[4]=v[0]+s+u|0,v[0]=_},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;e[i>>>5]|=128<<24-i%32,e[14+(64+i>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var n=this._hash,o=n.words,s=0;s<5;s++){var a=o[s];o[s]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}return n},clone:function(){var t=m.clone.call(this);return t._hash=this._hash.clone(),t}}),w.RIPEMD160=m._createHelper(R),w.HmacRIPEMD160=m._createHmacHelper(R),E=Pt.lib.Base,M=Pt.enc.Utf8,Pt.algo.HMAC=E.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=M.parse(e));var r=t.blockSize,i=4*r;e.sigBytes>i&&(e=t.finalize(e)),e.clamp();for(var n=this._oKey=e.clone(),o=this._iKey=e.clone(),s=n.words,a=o.words,c=0;c<r;c++)s[c]^=1549556828,a[c]^=909522486;n.sigBytes=o.sigBytes=i,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,r=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(r))}}),P=(F=Pt).lib,W=P.Base,O=P.WordArray,U=F.algo,I=U.SHA1,K=U.HMAC,X=U.PBKDF2=W.extend({cfg:W.extend({keySize:4,hasher:I,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,i=K.create(r.hasher,t),n=O.create(),o=O.create([1]),s=n.words,a=o.words,c=r.keySize,h=r.iterations;s.length<c;){var l=i.update(e).finalize(o);i.reset();for(var f=l.words,u=f.length,d=l,p=1;p<h;p++){d=i.finalize(d),i.reset();for(var _=d.words,v=0;v<u;v++)f[v]^=_[v]}n.concat(l),a[0]++}return n.sigBytes=4*c,n}}),F.PBKDF2=function(t,e,r){return X.create(r).compute(t,e)},j=(L=Pt).lib,N=j.Base,T=j.WordArray,Z=L.algo,q=Z.MD5,G=Z.EvpKDF=N.extend({cfg:N.extend({keySize:4,hasher:q,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,i=r.hasher.create(),n=T.create(),o=n.words,s=r.keySize,a=r.iterations;o.length<s;){c&&i.update(c);var c=i.update(t).finalize(e);i.reset();for(var h=1;h<a;h++)c=i.finalize(c),i.reset();n.concat(c)}return n.sigBytes=4*s,n}}),L.EvpKDF=function(t,e,r){return G.create(r).compute(t,e)},$=(J=Pt).lib.WordArray,Q=J.algo,V=Q.SHA256,Y=Q.SHA224=V.extend({_doReset:function(){this._hash=new $.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=V._doFinalize.call(this);return t.sigBytes-=4,t}}),J.SHA224=V._createHelper(Y),J.HmacSHA224=V._createHmacHelper(Y),tt=Pt.lib,et=tt.Base,rt=tt.WordArray,(it=Pt.x64={}).Word=et.extend({init:function(t,e){this.high=t,this.low=e}}),it.WordArray=et.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],i=0;i<e;i++){var n=t[i];r.push(n.high),r.push(n.low)}return rt.create(r,this.sigBytes)},clone:function(){for(var t=et.clone.call(this),e=t.words=this.words.slice(0),r=e.length,i=0;i<r;i++)e[i]=e[i].clone();return t}}),function(u){var t=Pt,e=t.lib,d=e.WordArray,i=e.Hasher,l=t.x64.Word,r=t.algo,C=[],D=[],R=[];!function(){for(var t=1,e=0,r=0;r<24;r++){C[t+5*e]=(r+1)*(r+2)/2%64;var i=(2*t+3*e)%5;t=e%5,e=i}for(t=0;t<5;t++)for(e=0;e<5;e++)D[t+5*e]=e+(2*t+3*e)%5*5;for(var n=1,o=0;o<24;o++){for(var s=0,a=0,c=0;c<7;c++){if(1&n){var h=(1<<c)-1;h<32?a^=1<<h:s^=1<<h-32}128&n?n=n<<1^113:n<<=1}R[o]=l.create(s,a)}}();var E=[];!function(){for(var t=0;t<25;t++)E[t]=l.create()}();var n=r.SHA3=i.extend({cfg:i.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new l.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var r=this._state,i=this.blockSize/2,n=0;n<i;n++){var o=t[e+2*n],s=t[e+2*n+1];o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),(x=r[n]).high^=s,x.low^=o}for(var a=0;a<24;a++){for(var c=0;c<5;c++){for(var h=0,l=0,f=0;f<5;f++){h^=(x=r[c+5*f]).high,l^=x.low}var u=E[c];u.high=h,u.low=l}for(c=0;c<5;c++){var d=E[(c+4)%5],p=E[(c+1)%5],_=p.high,v=p.low;for(h=d.high^(_<<1|v>>>31),l=d.low^(v<<1|_>>>31),f=0;f<5;f++){(x=r[c+5*f]).high^=h,x.low^=l}}for(var y=1;y<25;y++){var g=(x=r[y]).high,B=x.low,w=C[y];if(w<32)h=g<<w|B>>>32-w,l=B<<w|g>>>32-w;else h=B<<w-32|g>>>64-w,l=g<<w-32|B>>>64-w;var k=E[D[y]];k.high=h,k.low=l}var S=E[0],m=r[0];S.high=m.high,S.low=m.low;for(c=0;c<5;c++)for(f=0;f<5;f++){var x=r[y=c+5*f],b=E[y],H=E[(c+1)%5+5*f],z=E[(c+2)%5+5*f];x.high=b.high^~H.high&z.high,x.low=b.low^~H.low&z.low}x=r[0];var A=R[a];x.high^=A.high,x.low^=A.low}},_doFinalize:function(){var t=this._data,e=t.words,r=(this._nDataBytes,8*t.sigBytes),i=32*this.blockSize;e[r>>>5]|=1<<24-r%32,e[(u.ceil((1+r)/i)*i>>>5)-1]|=128,t.sigBytes=4*e.length,this._process();for(var n=this._state,o=this.cfg.outputLength/8,s=o/8,a=[],c=0;c<s;c++){var h=n[c],l=h.high,f=h.low;l=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8),f=16711935&(f<<8|f>>>24)|4278255360&(f<<24|f>>>8),a.push(f),a.push(l)}return new d.init(a,o)},clone:function(){for(var t=i.clone.call(this),e=t._state=this._state.slice(0),r=0;r<25;r++)e[r]=e[r].clone();return t}});t.SHA3=i._createHelper(n),t.HmacSHA3=i._createHmacHelper(n)}(Math),function(){var t=Pt,e=t.lib.Hasher,r=t.x64,i=r.Word,n=r.WordArray,o=t.algo;function s(){return i.create.apply(i,arguments)}var mt=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],xt=[];!function(){for(var t=0;t<80;t++)xt[t]=s()}();var a=o.SHA512=e.extend({_doReset:function(){this._hash=new n.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],a=r[4],c=r[5],h=r[6],l=r[7],f=i.high,u=i.low,d=n.high,p=n.low,_=o.high,v=o.low,y=s.high,g=s.low,B=a.high,w=a.low,k=c.high,S=c.low,m=h.high,x=h.low,b=l.high,H=l.low,z=f,A=u,C=d,D=p,R=_,E=v,M=y,F=g,P=B,W=w,O=k,U=S,I=m,K=x,X=b,L=H,j=0;j<80;j++){var N=xt[j];if(j<16)var T=N.high=0|t[e+2*j],Z=N.low=0|t[e+2*j+1];else{var q=xt[j-15],G=q.high,J=q.low,$=(G>>>1|J<<31)^(G>>>8|J<<24)^G>>>7,Q=(J>>>1|G<<31)^(J>>>8|G<<24)^(J>>>7|G<<25),V=xt[j-2],Y=V.high,tt=V.low,et=(Y>>>19|tt<<13)^(Y<<3|tt>>>29)^Y>>>6,rt=(tt>>>19|Y<<13)^(tt<<3|Y>>>29)^(tt>>>6|Y<<26),it=xt[j-7],nt=it.high,ot=it.low,st=xt[j-16],at=st.high,ct=st.low;T=(T=(T=$+nt+((Z=Q+ot)>>>0<Q>>>0?1:0))+et+((Z=Z+rt)>>>0<rt>>>0?1:0))+at+((Z=Z+ct)>>>0<ct>>>0?1:0);N.high=T,N.low=Z}var ht,lt=P&O^~P&I,ft=W&U^~W&K,ut=z&C^z&R^C&R,dt=A&D^A&E^D&E,pt=(z>>>28|A<<4)^(z<<30|A>>>2)^(z<<25|A>>>7),_t=(A>>>28|z<<4)^(A<<30|z>>>2)^(A<<25|z>>>7),vt=(P>>>14|W<<18)^(P>>>18|W<<14)^(P<<23|W>>>9),yt=(W>>>14|P<<18)^(W>>>18|P<<14)^(W<<23|P>>>9),gt=mt[j],Bt=gt.high,wt=gt.low,kt=X+vt+((ht=L+yt)>>>0<L>>>0?1:0),St=_t+dt;X=I,L=K,I=O,K=U,O=P,U=W,P=M+(kt=(kt=(kt=kt+lt+((ht=ht+ft)>>>0<ft>>>0?1:0))+Bt+((ht=ht+wt)>>>0<wt>>>0?1:0))+T+((ht=ht+Z)>>>0<Z>>>0?1:0))+((W=F+ht|0)>>>0<F>>>0?1:0)|0,M=R,F=E,R=C,E=D,C=z,D=A,z=kt+(pt+ut+(St>>>0<_t>>>0?1:0))+((A=ht+St|0)>>>0<ht>>>0?1:0)|0}u=i.low=u+A,i.high=f+z+(u>>>0<A>>>0?1:0),p=n.low=p+D,n.high=d+C+(p>>>0<D>>>0?1:0),v=o.low=v+E,o.high=_+R+(v>>>0<E>>>0?1:0),g=s.low=g+F,s.high=y+M+(g>>>0<F>>>0?1:0),w=a.low=w+W,a.high=B+P+(w>>>0<W>>>0?1:0),S=c.low=S+U,c.high=k+O+(S>>>0<U>>>0?1:0),x=h.low=x+K,h.high=m+I+(x>>>0<K>>>0?1:0),H=l.low=H+L,l.high=b+X+(H>>>0<L>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[30+(128+i>>>10<<5)]=Math.floor(r/4294967296),e[31+(128+i>>>10<<5)]=r,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(a),t.HmacSHA512=e._createHmacHelper(a)}(),ot=(nt=Pt).x64,st=ot.Word,at=ot.WordArray,ct=nt.algo,ht=ct.SHA512,lt=ct.SHA384=ht.extend({_doReset:function(){this._hash=new at.init([new st.init(3418070365,3238371032),new st.init(1654270250,914150663),new st.init(2438529370,812702999),new st.init(355462360,4144912697),new st.init(1731405415,4290775857),new st.init(2394180231,1750603025),new st.init(3675008525,1694076839),new st.init(1203062813,3204075428)])},_doFinalize:function(){var t=ht._doFinalize.call(this);return t.sigBytes-=16,t}}),nt.SHA384=ht._createHelper(lt),nt.HmacSHA384=ht._createHmacHelper(lt),Pt.lib.Cipher||function(){var t=Pt,e=t.lib,r=e.Base,c=e.WordArray,i=e.BufferedBlockAlgorithm,n=t.enc,o=(n.Utf8,n.Base64),s=t.algo.EvpKDF,a=e.Cipher=i.extend({cfg:r.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,r){this.cfg=this.cfg.extend(r),this._xformMode=t,this._key=e,this.reset()},reset:function(){i.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(i){return{encrypt:function(t,e,r){return h(e).encrypt(i,t,e,r)},decrypt:function(t,e,r){return h(e).decrypt(i,t,e,r)}}}});function h(t){return"string"==typeof t?w:g}e.StreamCipher=a.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var l,f=t.mode={},u=e.BlockCipherMode=r.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),d=f.CBC=((l=u.extend()).Encryptor=l.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize;p.call(this,t,e,i),r.encryptBlock(t,e),this._prevBlock=t.slice(e,e+i)}}),l.Decryptor=l.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=t.slice(e,e+i);r.decryptBlock(t,e),p.call(this,t,e,i),this._prevBlock=n}}),l);function p(t,e,r){var i=this._iv;if(i){var n=i;this._iv=void 0}else n=this._prevBlock;for(var o=0;o<r;o++)t[e+o]^=n[o]}var _=(t.pad={}).Pkcs7={pad:function(t,e){for(var r=4*e,i=r-t.sigBytes%r,n=i<<24|i<<16|i<<8|i,o=[],s=0;s<i;s+=4)o.push(n);var a=c.create(o,i);t.concat(a)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},v=(e.BlockCipher=a.extend({cfg:a.cfg.extend({mode:d,padding:_}),reset:function(){a.reset.call(this);var t=this.cfg,e=t.iv,r=t.mode;if(this._xformMode==this._ENC_XFORM_MODE)var i=r.createEncryptor;else{i=r.createDecryptor;this._minBufferSize=1}this._mode&&this._mode.__creator==i?this._mode.init(this,e&&e.words):(this._mode=i.call(r,this,e&&e.words),this._mode.__creator=i)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){t.pad(this._data,this.blockSize);var e=this._process(!0)}else{e=this._process(!0);t.unpad(e)}return e},blockSize:4}),e.CipherParams=r.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}})),y=(t.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,r=t.salt;if(r)var i=c.create([1398893684,1701076831]).concat(r).concat(e);else i=e;return i.toString(o)},parse:function(t){var e=o.parse(t),r=e.words;if(1398893684==r[0]&&1701076831==r[1]){var i=c.create(r.slice(2,4));r.splice(0,4),e.sigBytes-=16}return v.create({ciphertext:e,salt:i})}},g=e.SerializableCipher=r.extend({cfg:r.extend({format:y}),encrypt:function(t,e,r,i){i=this.cfg.extend(i);var n=t.createEncryptor(r,i),o=n.finalize(e),s=n.cfg;return v.create({ciphertext:o,key:r,iv:s.iv,algorithm:t,mode:s.mode,padding:s.padding,blockSize:t.blockSize,formatter:i.format})},decrypt:function(t,e,r,i){return i=this.cfg.extend(i),e=this._parse(e,i.format),t.createDecryptor(r,i).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),B=(t.kdf={}).OpenSSL={execute:function(t,e,r,i){i=i||c.random(8);var n=s.create({keySize:e+r}).compute(t,i),o=c.create(n.words.slice(e),4*r);return n.sigBytes=4*e,v.create({key:n,iv:o,salt:i})}},w=e.PasswordBasedCipher=g.extend({cfg:g.cfg.extend({kdf:B}),encrypt:function(t,e,r,i){var n=(i=this.cfg.extend(i)).kdf.execute(r,t.keySize,t.ivSize);i.iv=n.iv;var o=g.encrypt.call(this,t,e,n.key,i);return o.mixIn(n),o},decrypt:function(t,e,r,i){i=this.cfg.extend(i),e=this._parse(e,i.format);var n=i.kdf.execute(r,t.keySize,t.ivSize,e.salt);return i.iv=n.iv,g.decrypt.call(this,t,e,n.key,i)}})}(),Pt.mode.CFB=((ft=Pt.lib.BlockCipherMode.extend()).Encryptor=ft.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize;jt.call(this,t,e,i,r),this._prevBlock=t.slice(e,e+i)}}),ft.Decryptor=ft.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=t.slice(e,e+i);jt.call(this,t,e,i,r),this._prevBlock=n}}),ft),Pt.mode.ECB=((ut=Pt.lib.BlockCipherMode.extend()).Encryptor=ut.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),ut.Decryptor=ut.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),ut),Pt.pad.AnsiX923={pad:function(t,e){var r=t.sigBytes,i=4*e,n=i-r%i,o=r+n-1;t.clamp(),t.words[o>>>2]|=n<<24-o%4*8,t.sigBytes+=n},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},Pt.pad.Iso10126={pad:function(t,e){var r=4*e,i=r-t.sigBytes%r;t.concat(Pt.lib.WordArray.random(i-1)).concat(Pt.lib.WordArray.create([i<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},Pt.pad.Iso97971={pad:function(t,e){t.concat(Pt.lib.WordArray.create([2147483648],1)),Pt.pad.ZeroPadding.pad(t,e)},unpad:function(t){Pt.pad.ZeroPadding.unpad(t),t.sigBytes--}},Pt.mode.OFB=(dt=Pt.lib.BlockCipherMode.extend(),pt=dt.Encryptor=dt.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._keystream;n&&(o=this._keystream=n.slice(0),this._iv=void 0),r.encryptBlock(o,0);for(var s=0;s<i;s++)t[e+s]^=o[s]}}),dt.Decryptor=pt,dt),Pt.pad.NoPadding={pad:function(){},unpad:function(){}},_t=Pt.lib.CipherParams,vt=Pt.enc.Hex,Pt.format.Hex={stringify:function(t){return t.ciphertext.toString(vt)},parse:function(t){var e=vt.parse(t);return _t.create({ciphertext:e})}},function(){var t=Pt,e=t.lib.BlockCipher,r=t.algo,h=[],l=[],f=[],u=[],d=[],p=[],_=[],v=[],y=[],g=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var r=0,i=0;for(e=0;e<256;e++){var n=i^i<<1^i<<2^i<<3^i<<4;n=n>>>8^255&n^99,h[r]=n;var o=t[l[n]=r],s=t[o],a=t[s],c=257*t[n]^16843008*n;f[r]=c<<24|c>>>8,u[r]=c<<16|c>>>16,d[r]=c<<8|c>>>24,p[r]=c;c=16843009*a^65537*s^257*o^16843008*r;_[n]=c<<24|c>>>8,v[n]=c<<16|c>>>16,y[n]=c<<8|c>>>24,g[n]=c,r?(r=o^t[t[t[a^o]]],i^=t[t[i]]):r=i=1}}();var B=[0,1,2,4,8,16,32,64,128,27,54],i=r.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4,i=4*(1+(this._nRounds=6+r)),n=this._keySchedule=[],o=0;o<i;o++)if(o<r)n[o]=e[o];else{var s=n[o-1];o%r?6<r&&o%r==4&&(s=h[s>>>24]<<24|h[s>>>16&255]<<16|h[s>>>8&255]<<8|h[255&s]):(s=h[(s=s<<8|s>>>24)>>>24]<<24|h[s>>>16&255]<<16|h[s>>>8&255]<<8|h[255&s],s^=B[o/r|0]<<24),n[o]=n[o-r]^s}for(var a=this._invKeySchedule=[],c=0;c<i;c++){o=i-c;if(c%4)s=n[o];else s=n[o-4];a[c]=c<4||o<=4?s:_[h[s>>>24]]^v[h[s>>>16&255]]^y[h[s>>>8&255]]^g[h[255&s]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,f,u,d,p,h)},decryptBlock:function(t,e){var r=t[e+1];t[e+1]=t[e+3],t[e+3]=r,this._doCryptBlock(t,e,this._invKeySchedule,_,v,y,g,l);r=t[e+1];t[e+1]=t[e+3],t[e+3]=r},_doCryptBlock:function(t,e,r,i,n,o,s,a){for(var c=this._nRounds,h=t[e]^r[0],l=t[e+1]^r[1],f=t[e+2]^r[2],u=t[e+3]^r[3],d=4,p=1;p<c;p++){var _=i[h>>>24]^n[l>>>16&255]^o[f>>>8&255]^s[255&u]^r[d++],v=i[l>>>24]^n[f>>>16&255]^o[u>>>8&255]^s[255&h]^r[d++],y=i[f>>>24]^n[u>>>16&255]^o[h>>>8&255]^s[255&l]^r[d++],g=i[u>>>24]^n[h>>>16&255]^o[l>>>8&255]^s[255&f]^r[d++];h=_,l=v,f=y,u=g}_=(a[h>>>24]<<24|a[l>>>16&255]<<16|a[f>>>8&255]<<8|a[255&u])^r[d++],v=(a[l>>>24]<<24|a[f>>>16&255]<<16|a[u>>>8&255]<<8|a[255&h])^r[d++],y=(a[f>>>24]<<24|a[u>>>16&255]<<16|a[h>>>8&255]<<8|a[255&l])^r[d++],g=(a[u>>>24]<<24|a[h>>>16&255]<<16|a[l>>>8&255]<<8|a[255&f])^r[d++];t[e]=_,t[e+1]=v,t[e+2]=y,t[e+3]=g},keySize:8});t.AES=e._createHelper(i)}(),function(){var t=Pt,e=t.lib,r=e.WordArray,i=e.BlockCipher,n=t.algo,h=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],l=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],f=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],d=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],o=n.DES=i.extend({_doReset:function(){for(var t=this._key.words,e=[],r=0;r<56;r++){var i=h[r]-1;e[r]=t[i>>>5]>>>31-i%32&1}for(var n=this._subKeys=[],o=0;o<16;o++){var s=n[o]=[],a=f[o];for(r=0;r<24;r++)s[r/6|0]|=e[(l[r]-1+a)%28]<<31-r%6,s[4+(r/6|0)]|=e[28+(l[r+24]-1+a)%28]<<31-r%6;s[0]=s[0]<<1|s[0]>>>31;for(r=1;r<7;r++)s[r]=s[r]>>>4*(r-1)+3;s[7]=s[7]<<5|s[7]>>>27}var c=this._invSubKeys=[];for(r=0;r<16;r++)c[r]=n[15-r]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,r){this._lBlock=t[e],this._rBlock=t[e+1],p.call(this,4,252645135),p.call(this,16,65535),_.call(this,2,858993459),_.call(this,8,16711935),p.call(this,1,1431655765);for(var i=0;i<16;i++){for(var n=r[i],o=this._lBlock,s=this._rBlock,a=0,c=0;c<8;c++)a|=u[c][((s^n[c])&d[c])>>>0];this._lBlock=s,this._rBlock=o^a}var h=this._lBlock;this._lBlock=this._rBlock,this._rBlock=h,p.call(this,1,1431655765),_.call(this,8,16711935),_.call(this,2,858993459),p.call(this,16,65535),p.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function p(t,e){var r=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=r,this._lBlock^=r<<t}function _(t,e){var r=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=r,this._rBlock^=r<<t}t.DES=i._createHelper(o);var s=n.TripleDES=i.extend({_doReset:function(){var t=this._key.words;this._des1=o.createEncryptor(r.create(t.slice(0,2))),this._des2=o.createEncryptor(r.create(t.slice(2,4))),this._des3=o.createEncryptor(r.create(t.slice(4,6)))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=i._createHelper(s)}(),function(){var t=Pt,e=t.lib.StreamCipher,r=t.algo,i=r.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,r=t.sigBytes,i=this._S=[],n=0;n<256;n++)i[n]=n;n=0;for(var o=0;n<256;n++){var s=n%r,a=e[s>>>2]>>>24-s%4*8&255;o=(o+i[n]+a)%256;var c=i[n];i[n]=i[o],i[o]=c}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=n.call(this)},keySize:8,ivSize:0});function n(){for(var t=this._S,e=this._i,r=this._j,i=0,n=0;n<4;n++){r=(r+t[e=(e+1)%256])%256;var o=t[e];t[e]=t[r],t[r]=o,i|=t[(t[e]+t[r])%256]<<24-8*n}return this._i=e,this._j=r,i}t.RC4=e._createHelper(i);var o=r.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;0<t;t--)n.call(this)}});t.RC4Drop=e._createHelper(o)}(),Pt.mode.CTRGladman=(yt=Pt.lib.BlockCipherMode.extend(),gt=yt.Encryptor=yt.extend({processBlock:function(t,e){var r,i=this._cipher,n=i.blockSize,o=this._iv,s=this._counter;o&&(s=this._counter=o.slice(0),this._iv=void 0),0===((r=s)[0]=Nt(r[0]))&&(r[1]=Nt(r[1]));var a=s.slice(0);i.encryptBlock(a,0);for(var c=0;c<n;c++)t[e+c]^=a[c]}}),yt.Decryptor=gt,yt),wt=(Bt=Pt).lib.StreamCipher,kt=Bt.algo,St=[],mt=[],xt=[],bt=kt.Rabbit=wt.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=0;r<4;r++)t[r]=16711935&(t[r]<<8|t[r]>>>24)|4278255360&(t[r]<<24|t[r]>>>8);var i=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];for(r=this._b=0;r<4;r++)Tt.call(this);for(r=0;r<8;r++)n[r]^=i[r+4&7];if(e){var o=e.words,s=o[0],a=o[1],c=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),h=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),l=c>>>16|4294901760&h,f=h<<16|65535&c;n[0]^=c,n[1]^=l,n[2]^=h,n[3]^=f,n[4]^=c,n[5]^=l,n[6]^=h,n[7]^=f;for(r=0;r<4;r++)Tt.call(this)}},_doProcessBlock:function(t,e){var r=this._X;Tt.call(this),St[0]=r[0]^r[5]>>>16^r[3]<<16,St[1]=r[2]^r[7]>>>16^r[5]<<16,St[2]=r[4]^r[1]>>>16^r[7]<<16,St[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)St[i]=16711935&(St[i]<<8|St[i]>>>24)|4278255360&(St[i]<<24|St[i]>>>8),t[e+i]^=St[i]},blockSize:4,ivSize:2}),Bt.Rabbit=wt._createHelper(bt),Pt.mode.CTR=(Ht=Pt.lib.BlockCipherMode.extend(),zt=Ht.Encryptor=Ht.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0);var s=o.slice(0);r.encryptBlock(s,0),o[i-1]=o[i-1]+1|0;for(var a=0;a<i;a++)t[e+a]^=s[a]}}),Ht.Decryptor=zt,Ht),Ct=(At=Pt).lib.StreamCipher,Dt=At.algo,Rt=[],Et=[],Mt=[],Ft=Dt.RabbitLegacy=Ct.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]],n=this._b=0;n<4;n++)Zt.call(this);for(n=0;n<8;n++)i[n]^=r[n+4&7];if(e){var o=e.words,s=o[0],a=o[1],c=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),h=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),l=c>>>16|4294901760&h,f=h<<16|65535&c;i[0]^=c,i[1]^=l,i[2]^=h,i[3]^=f,i[4]^=c,i[5]^=l,i[6]^=h,i[7]^=f;for(n=0;n<4;n++)Zt.call(this)}},_doProcessBlock:function(t,e){var r=this._X;Zt.call(this),Rt[0]=r[0]^r[5]>>>16^r[3]<<16,Rt[1]=r[2]^r[7]>>>16^r[5]<<16,Rt[2]=r[4]^r[1]>>>16^r[7]<<16,Rt[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)Rt[i]=16711935&(Rt[i]<<8|Rt[i]>>>24)|4278255360&(Rt[i]<<24|Rt[i]>>>8),t[e+i]^=Rt[i]},blockSize:4,ivSize:2}),At.RabbitLegacy=Ct._createHelper(Ft),Pt.pad.ZeroPadding={pad:function(t,e){var r=4*e;t.clamp(),t.sigBytes+=r-(t.sigBytes%r||r)},unpad:function(t){for(var e=t.words,r=t.sigBytes-1;!(e[r>>>2]>>>24-r%4*8&255);)r--;t.sigBytes=r+1}},Pt};
	
	function encryptValue(rawValue, key) {
		return CryptoJS().AES.encrypt(rawValue, key).toString();
	};

	function decryptValue(encrypted, key) {
		return CryptoJS().AES.decrypt(encrypted, key).toString(CryptoJS().enc.Utf8);
	};

    return {
		CryptoJS: CryptoJS,
		encryptValue: encryptValue,
		decryptValue: decryptValue
    };
});

/*
	MomentJS v2.24.0
	momentjs.com
	Copyright (c) JS Foundation and other contributors
	https://github.com/moment/moment/blob/develop/LICENSE
*/
define('Saralux.Core.ExternalLibraries.MomentJS', [], function(){"use strict";var e,i;function c(){return e.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function u(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function l(e){return void 0===e}function h(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function d(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function f(e,t){var n,s=[];for(n=0;n<e.length;++n)s.push(t(e[n],n));return s}function m(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function _(e,t){for(var n in t)m(t,n)&&(e[n]=t[n]);return m(t,"toString")&&(e.toString=t.toString),m(t,"valueOf")&&(e.valueOf=t.valueOf),e}function y(e,t,n,s){return Tt(e,t,n,s,!0).utc()}function g(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function v(e){if(null==e._isValid){var t=g(e),n=i.call(t.parsedDateParts,function(e){return null!=e}),s=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(s=s&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return s;e._isValid=s}return e._isValid}function p(e){var t=y(NaN);return null!=e?_(g(t),e):g(t).userInvalidated=!0,t}i=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,s=0;s<n;s++)if(s in t&&e.call(this,t[s],s,t))return!0;return!1};var r=c.momentProperties=[];function w(e,t){var n,s,i;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=g(t)),l(t._locale)||(e._locale=t._locale),0<r.length)for(n=0;n<r.length;n++)l(i=t[s=r[n]])||(e[s]=i);return e}var t=!1;function M(e){w(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===t&&(t=!0,c.updateOffset(this),t=!1)}function k(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function S(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function D(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=S(t)),n}function a(e,t,n){var s,i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),a=0;for(s=0;s<i;s++)(n&&e[s]!==t[s]||!n&&D(e[s])!==D(t[s]))&&a++;return a+r}function Y(e){!1===c.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function n(i,r){var a=!0;return _(function(){if(null!=c.deprecationHandler&&c.deprecationHandler(null,i),a){for(var e,t=[],n=0;n<arguments.length;n++){if(e="","object"==typeof arguments[n]){for(var s in e+="\n["+n+"] ",arguments[0])e+=s+": "+arguments[0][s]+", ";e=e.slice(0,-2)}else e=arguments[n];t.push(e)}Y(i+"\nArguments: "+Array.prototype.slice.call(t).join("")+"\n"+(new Error).stack),a=!1}return r.apply(this,arguments)},r)}var s,O={};function T(e,t){null!=c.deprecationHandler&&c.deprecationHandler(e,t),O[e]||(Y(t),O[e]=!0)}function b(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,s=_({},e);for(n in t)m(t,n)&&(u(e[n])&&u(t[n])?(s[n]={},_(s[n],e[n]),_(s[n],t[n])):null!=t[n]?s[n]=t[n]:delete s[n]);for(n in e)m(e,n)&&!m(t,n)&&u(e[n])&&(s[n]=_({},s[n]));return s}function P(e){null!=e&&this.set(e)}c.suppressDeprecationWarnings=!1,c.deprecationHandler=null,s=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)m(e,t)&&n.push(t);return n};var W={};function C(e,t){var n=e.toLowerCase();W[n]=W[n+"s"]=W[t]=e}function H(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function R(e){var t,n,s={};for(n in e)m(e,n)&&(t=H(n))&&(s[t]=e[n]);return s}var U={};function F(e,t){U[e]=t}function L(e,t,n){var s=""+Math.abs(e),i=t-s.length;return(0<=e?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+s}var N=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,G=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,V={},E={};function I(e,t,n,s){var i=s;"string"==typeof s&&(i=function(){return this[s]()}),e&&(E[e]=i),t&&(E[t[0]]=function(){return L(i.apply(this,arguments),t[1],t[2])}),n&&(E[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function A(e,t){return e.isValid()?(t=j(t,e.localeData()),V[t]=V[t]||function(s){var e,i,t,r=s.match(N);for(e=0,i=r.length;e<i;e++)E[r[e]]?r[e]=E[r[e]]:r[e]=(t=r[e]).match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"");return function(e){var t,n="";for(t=0;t<i;t++)n+=b(r[t])?r[t].call(e,s):r[t];return n}}(t),V[t](e)):e.localeData().invalidDate()}function j(e,t){var n=5;function s(e){return t.longDateFormat(e)||e}for(G.lastIndex=0;0<=n&&G.test(e);)e=e.replace(G,s),G.lastIndex=0,n-=1;return e}var Z=/\d/,z=/\d\d/,$=/\d{3}/,q=/\d{4}/,J=/[+-]?\d{6}/,B=/\d\d?/,Q=/\d\d\d\d?/,X=/\d\d\d\d\d\d?/,K=/\d{1,3}/,ee=/\d{1,4}/,te=/[+-]?\d{1,6}/,ne=/\d+/,se=/[+-]?\d+/,ie=/Z|[+-]\d\d:?\d\d/gi,re=/Z|[+-]\d\d(?::?\d\d)?/gi,ae=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,oe={};function ue(e,n,s){oe[e]=b(n)?n:function(e,t){return e&&s?s:n}}function le(e,t){return m(oe,e)?oe[e](t._strict,t._locale):new RegExp(he(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,s,i){return t||n||s||i})))}function he(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var de={};function ce(e,n){var t,s=n;for("string"==typeof e&&(e=[e]),h(n)&&(s=function(e,t){t[n]=D(e)}),t=0;t<e.length;t++)de[e[t]]=s}function fe(e,i){ce(e,function(e,t,n,s){n._w=n._w||{},i(e,n._w,n,s)})}var me=0,_e=1,ye=2,ge=3,ve=4,pe=5,we=6,Me=7,ke=8;function Se(e){return De(e)?366:365}function De(e){return e%4==0&&e%100!=0||e%400==0}I("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),I(0,["YY",2],0,function(){return this.year()%100}),I(0,["YYYY",4],0,"year"),I(0,["YYYYY",5],0,"year"),I(0,["YYYYYY",6,!0],0,"year"),C("year","y"),F("year",1),ue("Y",se),ue("YY",B,z),ue("YYYY",ee,q),ue("YYYYY",te,J),ue("YYYYYY",te,J),ce(["YYYYY","YYYYYY"],me),ce("YYYY",function(e,t){t[me]=2===e.length?c.parseTwoDigitYear(e):D(e)}),ce("YY",function(e,t){t[me]=c.parseTwoDigitYear(e)}),ce("Y",function(e,t){t[me]=parseInt(e,10)}),c.parseTwoDigitYear=function(e){return D(e)+(68<D(e)?1900:2e3)};var Ye,Oe=Te("FullYear",!0);function Te(t,n){return function(e){return null!=e?(xe(this,t,e),c.updateOffset(this,n),this):be(this,t)}}function be(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function xe(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&De(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Pe(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Pe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,s=(t%(n=12)+n)%n;return e+=(t-s)/12,1===s?De(e)?29:28:31-s%7%2}Ye=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},I("M",["MM",2],"Mo",function(){return this.month()+1}),I("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),I("MMMM",0,0,function(e){return this.localeData().months(this,e)}),C("month","M"),F("month",8),ue("M",B),ue("MM",B,z),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),ce(["M","MM"],function(e,t){t[_e]=D(e)-1}),ce(["MMM","MMMM"],function(e,t,n,s){var i=n._locale.monthsParse(e,s,n._strict);null!=i?t[_e]=i:g(n).invalidMonth=e});var We=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ce="January_February_March_April_May_June_July_August_September_October_November_December".split("_");var He="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Re(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=D(t);else if(!h(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Pe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ue(e){return null!=e?(Re(this,e),c.updateOffset(this,!0),this):be(this,"Month")}var Fe=ae;var Le=ae;function Ne(){function e(e,t){return t.length-e.length}var t,n,s=[],i=[],r=[];for(t=0;t<12;t++)n=y([2e3,t]),s.push(this.monthsShort(n,"")),i.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(s.sort(e),i.sort(e),r.sort(e),t=0;t<12;t++)s[t]=he(s[t]),i[t]=he(i[t]);for(t=0;t<24;t++)r[t]=he(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+s.join("|")+")","i")}function Ge(e){var t;if(e<100&&0<=e){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Ve(e,t,n){var s=7+t-n;return-((7+Ge(e,0,s).getUTCDay()-t)%7)+s-1}function Ee(e,t,n,s,i){var r,a,o=1+7*(t-1)+(7+n-s)%7+Ve(e,s,i);return a=o<=0?Se(r=e-1)+o:o>Se(e)?(r=e+1,o-Se(e)):(r=e,o),{year:r,dayOfYear:a}}function Ie(e,t,n){var s,i,r=Ve(e.year(),t,n),a=Math.floor((e.dayOfYear()-r-1)/7)+1;return a<1?s=a+Ae(i=e.year()-1,t,n):a>Ae(e.year(),t,n)?(s=a-Ae(e.year(),t,n),i=e.year()+1):(i=e.year(),s=a),{week:s,year:i}}function Ae(e,t,n){var s=Ve(e,t,n),i=Ve(e+1,t,n);return(Se(e)-s+i)/7}I("w",["ww",2],"wo","week"),I("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),F("week",5),F("isoWeek",5),ue("w",B),ue("ww",B,z),ue("W",B),ue("WW",B,z),fe(["w","ww","W","WW"],function(e,t,n,s){t[s.substr(0,1)]=D(e)});function je(e,t){return e.slice(t,7).concat(e.slice(0,t))}I("d",0,"do","day"),I("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),I("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),I("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),I("e",0,0,"weekday"),I("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),F("day",11),F("weekday",11),F("isoWeekday",11),ue("d",B),ue("e",B),ue("E",B),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),fe(["dd","ddd","dddd"],function(e,t,n,s){var i=n._locale.weekdaysParse(e,s,n._strict);null!=i?t.d=i:g(n).invalidWeekday=e}),fe(["d","e","E"],function(e,t,n,s){t[s]=D(e)});var Ze="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");var ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");var $e="Su_Mo_Tu_We_Th_Fr_Sa".split("_");var qe=ae;var Je=ae;var Be=ae;function Qe(){function e(e,t){return t.length-e.length}var t,n,s,i,r,a=[],o=[],u=[],l=[];for(t=0;t<7;t++)n=y([2e3,1]).day(t),s=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),r=this.weekdays(n,""),a.push(s),o.push(i),u.push(r),l.push(s),l.push(i),l.push(r);for(a.sort(e),o.sort(e),u.sort(e),l.sort(e),t=0;t<7;t++)o[t]=he(o[t]),u[t]=he(u[t]),l[t]=he(l[t]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Xe(){return this.hours()%12||12}function Ke(e,t){I(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function et(e,t){return t._meridiemParse}I("H",["HH",2],0,"hour"),I("h",["hh",2],0,Xe),I("k",["kk",2],0,function(){return this.hours()||24}),I("hmm",0,0,function(){return""+Xe.apply(this)+L(this.minutes(),2)}),I("hmmss",0,0,function(){return""+Xe.apply(this)+L(this.minutes(),2)+L(this.seconds(),2)}),I("Hmm",0,0,function(){return""+this.hours()+L(this.minutes(),2)}),I("Hmmss",0,0,function(){return""+this.hours()+L(this.minutes(),2)+L(this.seconds(),2)}),Ke("a",!0),Ke("A",!1),C("hour","h"),F("hour",13),ue("a",et),ue("A",et),ue("H",B),ue("h",B),ue("k",B),ue("HH",B,z),ue("hh",B,z),ue("kk",B,z),ue("hmm",Q),ue("hmmss",X),ue("Hmm",Q),ue("Hmmss",X),ce(["H","HH"],ge),ce(["k","kk"],function(e,t,n){var s=D(e);t[ge]=24===s?0:s}),ce(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ce(["h","hh"],function(e,t,n){t[ge]=D(e),g(n).bigHour=!0}),ce("hmm",function(e,t,n){var s=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s)),g(n).bigHour=!0}),ce("hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s,2)),t[pe]=D(e.substr(i)),g(n).bigHour=!0}),ce("Hmm",function(e,t,n){var s=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s))}),ce("Hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s,2)),t[pe]=D(e.substr(i))});var tt,nt=Te("Hours",!0),st={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ce,monthsShort:He,week:{dow:0,doy:6},weekdays:Ze,weekdaysMin:$e,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},it={},rt={};function at(e){return e?e.toLowerCase().replace("_","-"):e}function ot(e){var t=null;if(!it[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=tt._abbr,require("./locale/"+e),ut(t)}catch(e){}return it[e]}function ut(e,t){var n;return e&&((n=l(t)?ht(e):lt(e,t))?tt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),tt._abbr}function lt(e,t){if(null===t)return delete it[e],null;var n,s=st;if(t.abbr=e,null!=it[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),s=it[e]._config;else if(null!=t.parentLocale)if(null!=it[t.parentLocale])s=it[t.parentLocale]._config;else{if(null==(n=ot(t.parentLocale)))return rt[t.parentLocale]||(rt[t.parentLocale]=[]),rt[t.parentLocale].push({name:e,config:t}),null;s=n._config}return it[e]=new P(x(s,t)),rt[e]&&rt[e].forEach(function(e){lt(e.name,e.config)}),ut(e),it[e]}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return tt;if(!o(e)){if(t=ot(e))return t;e=[e]}return function(e){for(var t,n,s,i,r=0;r<e.length;){for(t=(i=at(e[r]).split("-")).length,n=(n=at(e[r+1]))?n.split("-"):null;0<t;){if(s=ot(i.slice(0,t).join("-")))return s;if(n&&n.length>=t&&a(i,n,!0)>=t-1)break;t--}r++}return tt}(e)}function dt(e){var t,n=e._a;return n&&-2===g(e).overflow&&(t=n[_e]<0||11<n[_e]?_e:n[ye]<1||n[ye]>Pe(n[me],n[_e])?ye:n[ge]<0||24<n[ge]||24===n[ge]&&(0!==n[ve]||0!==n[pe]||0!==n[we])?ge:n[ve]<0||59<n[ve]?ve:n[pe]<0||59<n[pe]?pe:n[we]<0||999<n[we]?we:-1,g(e)._overflowDayOfYear&&(t<me||ye<t)&&(t=ye),g(e)._overflowWeeks&&-1===t&&(t=Me),g(e)._overflowWeekday&&-1===t&&(t=ke),g(e).overflow=t),e}function ct(e,t,n){return null!=e?e:null!=t?t:n}function ft(e){var t,n,s,i,r,a=[];if(!e._d){var o,u;for(o=e,u=new Date(c.now()),s=o._useUTC?[u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()]:[u.getFullYear(),u.getMonth(),u.getDate()],e._w&&null==e._a[ye]&&null==e._a[_e]&&function(e){var t,n,s,i,r,a,o,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)r=1,a=4,n=ct(t.GG,e._a[me],Ie(bt(),1,4).year),s=ct(t.W,1),((i=ct(t.E,1))<1||7<i)&&(u=!0);else{r=e._locale._week.dow,a=e._locale._week.doy;var l=Ie(bt(),r,a);n=ct(t.gg,e._a[me],l.year),s=ct(t.w,l.week),null!=t.d?((i=t.d)<0||6<i)&&(u=!0):null!=t.e?(i=t.e+r,(t.e<0||6<t.e)&&(u=!0)):i=r}s<1||s>Ae(n,r,a)?g(e)._overflowWeeks=!0:null!=u?g(e)._overflowWeekday=!0:(o=Ee(n,s,i,r,a),e._a[me]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(r=ct(e._a[me],s[me]),(e._dayOfYear>Se(r)||0===e._dayOfYear)&&(g(e)._overflowDayOfYear=!0),n=Ge(r,0,e._dayOfYear),e._a[_e]=n.getUTCMonth(),e._a[ye]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=a[t]=s[t];for(;t<7;t++)e._a[t]=a[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ge]&&0===e._a[ve]&&0===e._a[pe]&&0===e._a[we]&&(e._nextDay=!0,e._a[ge]=0),e._d=(e._useUTC?Ge:function(e,t,n,s,i,r,a){var o;return e<100&&0<=e?(o=new Date(e+400,t,n,s,i,r,a),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,s,i,r,a),o}).apply(null,a),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ge]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(g(e).weekdayMismatch=!0)}}var mt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,_t=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/Z|[+-]\d\d(?::?\d\d)?/,gt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],vt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((\-?\d+)/i;function wt(e){var t,n,s,i,r,a,o=e._i,u=mt.exec(o)||_t.exec(o);if(u){for(g(e).iso=!0,t=0,n=gt.length;t<n;t++)if(gt[t][1].exec(u[1])){i=gt[t][0],s=!1!==gt[t][2];break}if(null==i)return void(e._isValid=!1);if(u[3]){for(t=0,n=vt.length;t<n;t++)if(vt[t][1].exec(u[3])){r=(u[2]||" ")+vt[t][0];break}if(null==r)return void(e._isValid=!1)}if(!s&&null!=r)return void(e._isValid=!1);if(u[4]){if(!yt.exec(u[4]))return void(e._isValid=!1);a="Z"}e._f=i+(r||"")+(a||""),Yt(e)}else e._isValid=!1}var Mt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e,t,n,s,i,r){var a=[function(e){var t=parseInt(e,10);{if(t<=49)return 2e3+t;if(t<=999)return 1900+t}return t}(e),He.indexOf(t),parseInt(n,10),parseInt(s,10),parseInt(i,10)];return r&&a.push(parseInt(r,10)),a}var St={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Dt(e){var t,n,s,i=Mt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(i){var r=kt(i[4],i[3],i[2],i[5],i[6],i[7]);if(t=i[1],n=r,s=e,t&&ze.indexOf(t)!==new Date(n[0],n[1],n[2]).getDay()&&(g(s).weekdayMismatch=!0,!(s._isValid=!1)))return;e._a=r,e._tzm=function(e,t,n){if(e)return St[e];if(t)return 0;var s=parseInt(n,10),i=s%100;return(s-i)/100*60+i}(i[8],i[9],i[10]),e._d=Ge.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),g(e).rfc2822=!0}else e._isValid=!1}function Yt(e){if(e._f!==c.ISO_8601)if(e._f!==c.RFC_2822){e._a=[],g(e).empty=!0;var t,n,s,i,r,a,o,u,l=""+e._i,h=l.length,d=0;for(s=j(e._f,e._locale).match(N)||[],t=0;t<s.length;t++)i=s[t],(n=(l.match(le(i,e))||[])[0])&&(0<(r=l.substr(0,l.indexOf(n))).length&&g(e).unusedInput.push(r),l=l.slice(l.indexOf(n)+n.length),d+=n.length),E[i]?(n?g(e).empty=!1:g(e).unusedTokens.push(i),a=i,u=e,null!=(o=n)&&m(de,a)&&de[a](o,u._a,u,a)):e._strict&&!n&&g(e).unusedTokens.push(i);g(e).charsLeftOver=h-d,0<l.length&&g(e).unusedInput.push(l),e._a[ge]<=12&&!0===g(e).bigHour&&0<e._a[ge]&&(g(e).bigHour=void 0),g(e).parsedDateParts=e._a.slice(0),g(e).meridiem=e._meridiem,e._a[ge]=function(e,t,n){var s;if(null==n)return t;return null!=e.meridiemHour?e.meridiemHour(t,n):(null!=e.isPM&&((s=e.isPM(n))&&t<12&&(t+=12),s||12!==t||(t=0)),t)}(e._locale,e._a[ge],e._meridiem),ft(e),dt(e)}else Dt(e);else wt(e)}function Ot(e){var t,n,s,i,r=e._i,a=e._f;return e._locale=e._locale||ht(e._l),null===r||void 0===a&&""===r?p({nullInput:!0}):("string"==typeof r&&(e._i=r=e._locale.preparse(r)),k(r)?new M(dt(r)):(d(r)?e._d=r:o(a)?function(e){var t,n,s,i,r;if(0===e._f.length)return g(e).invalidFormat=!0,e._d=new Date(NaN);for(i=0;i<e._f.length;i++)r=0,t=w({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],Yt(t),v(t)&&(r+=g(t).charsLeftOver,r+=10*g(t).unusedTokens.length,g(t).score=r,(null==s||r<s)&&(s=r,n=t));_(e,n||t)}(e):a?Yt(e):l(n=(t=e)._i)?t._d=new Date(c.now()):d(n)?t._d=new Date(n.valueOf()):"string"==typeof n?(s=t,null===(i=pt.exec(s._i))?(wt(s),!1===s._isValid&&(delete s._isValid,Dt(s),!1===s._isValid&&(delete s._isValid,c.createFromInputFallback(s)))):s._d=new Date(+i[1])):o(n)?(t._a=f(n.slice(0),function(e){return parseInt(e,10)}),ft(t)):u(n)?function(e){if(!e._d){var t=R(e._i);e._a=f([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),ft(e)}}(t):h(n)?t._d=new Date(n):c.createFromInputFallback(t),v(e)||(e._d=null),e))}function Tt(e,t,n,s,i){var r,a={};return!0!==n&&!1!==n||(s=n,n=void 0),(u(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||o(e)&&0===e.length)&&(e=void 0),a._isAMomentObject=!0,a._useUTC=a._isUTC=i,a._l=n,a._i=e,a._f=t,a._strict=s,(r=new M(dt(Ot(a))))._nextDay&&(r.add(1,"d"),r._nextDay=void 0),r}function bt(e,t,n,s){return Tt(e,t,n,s,!1)}c.createFromInputFallback=n("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),c.ISO_8601=function(){},c.RFC_2822=function(){};var xt=n("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=bt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Pt=n("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=bt.apply(null,arguments);return this.isValid()&&e.isValid()?this<e?this:e:p()});function Wt(e,t){var n,s;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return bt();for(n=t[0],s=1;s<t.length;++s)t[s].isValid()&&!t[s][e](n)||(n=t[s]);return n}var Ct=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ht(e){var t=R(e),n=t.year||0,s=t.quarter||0,i=t.month||0,r=t.week||t.isoWeek||0,a=t.day||0,o=t.hour||0,u=t.minute||0,l=t.second||0,h=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Ye.call(Ct,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,s=0;s<Ct.length;++s)if(e[Ct[s]]){if(n)return!1;parseFloat(e[Ct[s]])!==D(e[Ct[s]])&&(n=!0)}return!0}(t),this._milliseconds=+h+1e3*l+6e4*u+1e3*o*60*60,this._days=+a+7*r,this._months=+i+3*s+12*n,this._data={},this._locale=ht(),this._bubble()}function Rt(e){return e instanceof Ht}function Ut(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ft(e,n){I(e,0,0,function(){var e=this.utcOffset(),t="+";return e<0&&(e=-e,t="-"),t+L(~~(e/60),2)+n+L(~~e%60,2)})}Ft("Z",":"),Ft("ZZ",""),ue("Z",re),ue("ZZ",re),ce(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Nt(re,e)});var Lt=/([\+\-]|\d\d)/gi;function Nt(e,t){var n=(t||"").match(e);if(null===n)return null;var s=((n[n.length-1]||[])+"").match(Lt)||["-",0,0],i=60*s[1]+D(s[2]);return 0===i?0:"+"===s[0]?i:-i}function Gt(e,t){var n,s;return t._isUTC?(n=t.clone(),s=(k(e)||d(e)?e.valueOf():bt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+s),c.updateOffset(n,!1),n):bt(e).local()}function Vt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Et(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}c.updateOffset=function(){};var It=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,At=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function jt(e,t){var n,s,i,r=e,a=null;return Rt(e)?r={ms:e._milliseconds,d:e._days,M:e._months}:h(e)?(r={},t?r[t]=e:r.milliseconds=e):(a=It.exec(e))?(n="-"===a[1]?-1:1,r={y:0,d:D(a[ye])*n,h:D(a[ge])*n,m:D(a[ve])*n,s:D(a[pe])*n,ms:D(Ut(1e3*a[we]))*n}):(a=At.exec(e))?(n="-"===a[1]?-1:1,r={y:Zt(a[2],n),M:Zt(a[3],n),w:Zt(a[4],n),d:Zt(a[5],n),h:Zt(a[6],n),m:Zt(a[7],n),s:Zt(a[8],n)}):null==r?r={}:"object"==typeof r&&("from"in r||"to"in r)&&(i=function(e,t){var n;if(!e.isValid()||!t.isValid())return{milliseconds:0,months:0};t=Gt(t,e),e.isBefore(t)?n=zt(e,t):((n=zt(t,e)).milliseconds=-n.milliseconds,n.months=-n.months);return n}(bt(r.from),bt(r.to)),(r={}).ms=i.milliseconds,r.M=i.months),s=new Ht(r),Rt(e)&&m(e,"_locale")&&(s._locale=e._locale),s}function Zt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function zt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function $t(s,i){return function(e,t){var n;return null===t||isNaN(+t)||(T(i,"moment()."+i+"(period, number) is deprecated. Please use moment()."+i+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),n=e,e=t,t=n),qt(this,jt(e="string"==typeof e?+e:e,t),s),this}}function qt(e,t,n,s){var i=t._milliseconds,r=Ut(t._days),a=Ut(t._months);e.isValid()&&(s=null==s||s,a&&Re(e,be(e,"Month")+a*n),r&&xe(e,"Date",be(e,"Date")+r*n),i&&e._d.setTime(e._d.valueOf()+i*n),s&&c.updateOffset(e,r||a))}jt.fn=Ht.prototype,jt.invalid=function(){return jt(NaN)};var Jt=$t(1,"add"),Bt=$t(-1,"subtract");function Qt(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),s=e.clone().add(n,"months");return-(n+(t-s<0?(t-s)/(s-e.clone().add(n-1,"months")):(t-s)/(e.clone().add(n+1,"months")-s)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}c.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",c.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Kt=n("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function en(){return this._locale}var tn=126227808e5;function nn(e,t){return(e%t+t)%t}function sn(e,t,n){return e<100&&0<=e?new Date(e+400,t,n)-tn:new Date(e,t,n).valueOf()}function rn(e,t,n){return e<100&&0<=e?Date.UTC(e+400,t,n)-tn:Date.UTC(e,t,n)}function an(e,t){I(0,[e,e.length],0,t)}function on(e,t,n,s,i){var r;return null==e?Ie(this,s,i).year:((r=Ae(e,s,i))<t&&(t=r),function(e,t,n,s,i){var r=Ee(e,t,n,s,i),a=Ge(r.year,0,r.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}.call(this,e,t,n,s,i))}I(0,["gg",2],0,function(){return this.weekYear()%100}),I(0,["GG",2],0,function(){return this.isoWeekYear()%100}),an("gggg","weekYear"),an("ggggg","weekYear"),an("GGGG","isoWeekYear"),an("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),F("weekYear",1),F("isoWeekYear",1),ue("G",se),ue("g",se),ue("GG",B,z),ue("gg",B,z),ue("GGGG",ee,q),ue("gggg",ee,q),ue("GGGGG",te,J),ue("ggggg",te,J),fe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,s){t[s.substr(0,2)]=D(e)}),fe(["gg","GG"],function(e,t,n,s){t[s]=c.parseTwoDigitYear(e)}),I("Q",0,"Qo","quarter"),C("quarter","Q"),F("quarter",7),ue("Q",Z),ce("Q",function(e,t){t[_e]=3*(D(e)-1)}),I("D",["DD",2],"Do","date"),C("date","D"),F("date",9),ue("D",B),ue("DD",B,z),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),ce(["D","DD"],ye),ce("Do",function(e,t){t[ye]=D(e.match(B)[0])});var un=Te("Date",!0);I("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),F("dayOfYear",4),ue("DDD",K),ue("DDDD",$),ce(["DDD","DDDD"],function(e,t,n){n._dayOfYear=D(e)}),I("m",["mm",2],0,"minute"),C("minute","m"),F("minute",14),ue("m",B),ue("mm",B,z),ce(["m","mm"],ve);var ln=Te("Minutes",!1);I("s",["ss",2],0,"second"),C("second","s"),F("second",15),ue("s",B),ue("ss",B,z),ce(["s","ss"],pe);var hn,dn=Te("Seconds",!1);for(I("S",0,0,function(){return~~(this.millisecond()/100)}),I(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),I(0,["SSS",3],0,"millisecond"),I(0,["SSSS",4],0,function(){return 10*this.millisecond()}),I(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),I(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),I(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),I(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),I(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),C("millisecond","ms"),F("millisecond",16),ue("S",K,Z),ue("SS",K,z),ue("SSS",K,$),hn="SSSS";hn.length<=9;hn+="S")ue(hn,ne);function cn(e,t){t[we]=D(1e3*("0."+e))}for(hn="S";hn.length<=9;hn+="S")ce(hn,cn);var fn=Te("Milliseconds",!1);I("z",0,0,"zoneAbbr"),I("zz",0,0,"zoneName");var mn=M.prototype;function _n(e){return e}mn.add=Jt,mn.calendar=function(e,t){var n=e||bt(),s=Gt(n,this).startOf("day"),i=c.calendarFormat(this,s)||"sameElse",r=t&&(b(t[i])?t[i].call(this,n):t[i]);return this.format(r||this.localeData().calendar(i,this,bt(n)))},mn.clone=function(){return new M(this)},mn.diff=function(e,t,n){var s,i,r;if(!this.isValid())return NaN;if(!(s=Gt(e,this)).isValid())return NaN;switch(i=6e4*(s.utcOffset()-this.utcOffset()),t=H(t)){case"year":r=Qt(this,s)/12;break;case"month":r=Qt(this,s);break;case"quarter":r=Qt(this,s)/3;break;case"second":r=(this-s)/1e3;break;case"minute":r=(this-s)/6e4;break;case"hour":r=(this-s)/36e5;break;case"day":r=(this-s-i)/864e5;break;case"week":r=(this-s-i)/6048e5;break;default:r=this-s}return n?r:S(r)},mn.endOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?rn:sn;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-nn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-nn(t,1e3)-1;break}return this._d.setTime(t),c.updateOffset(this,!0),this},mn.format=function(e){e||(e=this.isUtc()?c.defaultFormatUtc:c.defaultFormat);var t=A(this,e);return this.localeData().postformat(t)},mn.from=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||bt(e).isValid())?jt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},mn.fromNow=function(e){return this.from(bt(),e)},mn.to=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||bt(e).isValid())?jt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},mn.toNow=function(e){return this.to(bt(),e)},mn.get=function(e){return b(this[e=H(e)])?this[e]():this},mn.invalidAt=function(){return g(this).overflow},mn.isAfter=function(e,t){var n=k(e)?e:bt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},mn.isBefore=function(e,t){var n=k(e)?e:bt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},mn.isBetween=function(e,t,n,s){var i=k(e)?e:bt(e),r=k(t)?t:bt(t);return!!(this.isValid()&&i.isValid()&&r.isValid())&&("("===(s=s||"()")[0]?this.isAfter(i,n):!this.isBefore(i,n))&&(")"===s[1]?this.isBefore(r,n):!this.isAfter(r,n))},mn.isSame=function(e,t){var n,s=k(e)?e:bt(e);return!(!this.isValid()||!s.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()===s.valueOf():(n=s.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},mn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},mn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},mn.isValid=function(){return v(this)},mn.lang=Kt,mn.locale=Xt,mn.localeData=en,mn.max=Pt,mn.min=xt,mn.parsingFlags=function(){return _({},g(this))},mn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:U[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=R(e)),s=0;s<n.length;s++)this[n[s].unit](e[n[s].unit]);else if(b(this[e=H(e)]))return this[e](t);return this},mn.startOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?rn:sn;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=nn(t,6e4);break;case"second":t=this._d.valueOf(),t-=nn(t,1e3);break}return this._d.setTime(t),c.updateOffset(this,!0),this},mn.subtract=Bt,mn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},mn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},mn.toDate=function(){return new Date(this.valueOf())},mn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||9999<n.year()?A(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):b(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",A(n,"Z")):A(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},mn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',s=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(n+s+"-MM-DD[T]HH:mm:ss.SSS"+i)},mn.toJSON=function(){return this.isValid()?this.toISOString():null},mn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},mn.unix=function(){return Math.floor(this.valueOf()/1e3)},mn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},mn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},mn.year=Oe,mn.isLeapYear=function(){return De(this.year())},mn.weekYear=function(e){return on.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},mn.isoWeekYear=function(e){return on.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},mn.quarter=mn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},mn.month=Ue,mn.daysInMonth=function(){return Pe(this.year(),this.month())},mn.week=mn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},mn.isoWeek=mn.isoWeeks=function(e){var t=Ie(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},mn.weeksInYear=function(){var e=this.localeData()._week;return Ae(this.year(),e.dow,e.doy)},mn.isoWeeksInYear=function(){return Ae(this.year(),1,4)},mn.date=un,mn.day=mn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t,n,s=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(t=e,n=this.localeData(),e="string"!=typeof t?t:isNaN(t)?"number"==typeof(t=n.weekdaysParse(t))?t:null:parseInt(t,10),this.add(e-s,"d")):s},mn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},mn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null==e)return this.day()||7;var t,n,s=(t=e,n=this.localeData(),"string"==typeof t?n.weekdaysParse(t)%7||7:isNaN(t)?null:t);return this.day(this.day()%7?s:s-7)},mn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},mn.hour=mn.hours=nt,mn.minute=mn.minutes=ln,mn.second=mn.seconds=dn,mn.millisecond=mn.milliseconds=fn,mn.utcOffset=function(e,t,n){var s,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null==e)return this._isUTC?i:Vt(this);if("string"==typeof e){if(null===(e=Nt(re,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(s=Vt(this)),this._offset=e,this._isUTC=!0,null!=s&&this.add(s,"m"),i!==e&&(!t||this._changeInProgress?qt(this,jt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,c.updateOffset(this,!0),this._changeInProgress=null)),this},mn.utc=function(e){return this.utcOffset(0,e)},mn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Vt(this),"m")),this},mn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Nt(ie,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},mn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?bt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},mn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},mn.isLocal=function(){return!!this.isValid()&&!this._isUTC},mn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},mn.isUtc=Et,mn.isUTC=Et,mn.zoneAbbr=function(){return this._isUTC?"UTC":""},mn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},mn.dates=n("dates accessor is deprecated. Use date instead.",un),mn.months=n("months accessor is deprecated. Use month instead",Ue),mn.years=n("years accessor is deprecated. Use year instead",Oe),mn.zone=n("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),mn.isDSTShifted=n("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e={};if(w(e,this),(e=Ot(e))._a){var t=e._isUTC?y(e._a):bt(e._a);this._isDSTShifted=this.isValid()&&0<a(e._a,t.toArray())}else this._isDSTShifted=!1;return this._isDSTShifted});var yn=P.prototype;function gn(e,t,n,s){var i=ht(),r=y().set(s,t);return i[n](r,e)}function vn(e,t,n){if(h(e)&&(t=e,e=void 0),e=e||"",null!=t)return gn(e,t,n,"month");var s,i=[];for(s=0;s<12;s++)i[s]=gn(e,s,n,"month");return i}function pn(e,t,n,s){t=("boolean"==typeof e?h(t)&&(n=t,t=void 0):(t=e,e=!1,h(n=t)&&(n=t,t=void 0)),t||"");var i,r=ht(),a=e?r._week.dow:0;if(null!=n)return gn(t,(n+a)%7,s,"day");var o=[];for(i=0;i<7;i++)o[i]=gn(t,(i+a)%7,s,"day");return o}yn.calendar=function(e,t,n){var s=this._calendar[e]||this._calendar.sameElse;return b(s)?s.call(t,n):s},yn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},yn.invalidDate=function(){return this._invalidDate},yn.ordinal=function(e){return this._ordinal.replace("%d",e)},yn.preparse=_n,yn.postformat=_n,yn.relativeTime=function(e,t,n,s){var i=this._relativeTime[n];return b(i)?i(e,t,n,s):i.replace(/%d/i,e)},yn.pastFuture=function(e,t){var n=this._relativeTime[0<e?"future":"past"];return b(n)?n(t):n.replace(/%s/i,t)},yn.set=function(e){var t,n;for(n in e)b(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},yn.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||We).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},yn.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[We.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},yn.monthsParse=function(e,t,n){var s,i,r;if(this._monthsParseExact)return function(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],s=0;s<12;++s)r=y([2e3,s]),this._shortMonthsParse[s]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[s]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(i=Ye.call(this._shortMonthsParse,a))?i:null:-1!==(i=Ye.call(this._longMonthsParse,a))?i:null:"MMM"===t?-1!==(i=Ye.call(this._shortMonthsParse,a))?i:-1!==(i=Ye.call(this._longMonthsParse,a))?i:null:-1!==(i=Ye.call(this._longMonthsParse,a))?i:-1!==(i=Ye.call(this._shortMonthsParse,a))?i:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),s=0;s<12;s++){if(i=y([2e3,s]),n&&!this._longMonthsParse[s]&&(this._longMonthsParse[s]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[s]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[s]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[s]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[s].test(e))return s;if(n&&"MMM"===t&&this._shortMonthsParse[s].test(e))return s;if(!n&&this._monthsParse[s].test(e))return s}},yn.monthsRegex=function(e){return this._monthsParseExact?(m(this,"_monthsRegex")||Ne.call(this),e?this._monthsStrictRegex:this._monthsRegex):(m(this,"_monthsRegex")||(this._monthsRegex=Le),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},yn.monthsShortRegex=function(e){return this._monthsParseExact?(m(this,"_monthsRegex")||Ne.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(m(this,"_monthsShortRegex")||(this._monthsShortRegex=Fe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},yn.week=function(e){return Ie(e,this._week.dow,this._week.doy).week},yn.firstDayOfYear=function(){return this._week.doy},yn.firstDayOfWeek=function(){return this._week.dow},yn.weekdays=function(e,t){var n=o(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?je(n,this._week.dow):e?n[e.day()]:n},yn.weekdaysMin=function(e){return!0===e?je(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},yn.weekdaysShort=function(e){return!0===e?je(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},yn.weekdaysParse=function(e,t,n){var s,i,r;if(this._weekdaysParseExact)return function(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],s=0;s<7;++s)r=y([2e3,1]).day(s),this._minWeekdaysParse[s]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[s]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[s]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(i=Ye.call(this._weekdaysParse,a))?i:null:"ddd"===t?-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:null:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:null:"dddd"===t?-1!==(i=Ye.call(this._weekdaysParse,a))?i:-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:null:"ddd"===t?-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ye.call(this._weekdaysParse,a))?i:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:null:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:-1!==(i=Ye.call(this._weekdaysParse,a))?i:-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),s=0;s<7;s++){if(i=y([2e3,1]).day(s),n&&!this._fullWeekdaysParse[s]&&(this._fullWeekdaysParse[s]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[s]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[s]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[s]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[s]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[s].test(e))return s;if(n&&"ddd"===t&&this._shortWeekdaysParse[s].test(e))return s;if(n&&"dd"===t&&this._minWeekdaysParse[s].test(e))return s;if(!n&&this._weekdaysParse[s].test(e))return s}},yn.weekdaysRegex=function(e){return this._weekdaysParseExact?(m(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(m(this,"_weekdaysRegex")||(this._weekdaysRegex=qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},yn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(m(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(m(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},yn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(m(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(m(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Be),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},yn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},yn.meridiem=function(e,t,n){return 11<e?n?"pm":"PM":n?"am":"AM"},ut("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===D(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),c.lang=n("moment.lang is deprecated. Use moment.locale instead.",ut),c.langData=n("moment.langData is deprecated. Use moment.localeData instead.",ht);var wn=Math.abs;function Mn(e,t,n,s){var i=jt(t,n);return e._milliseconds+=s*i._milliseconds,e._days+=s*i._days,e._months+=s*i._months,e._bubble()}function kn(e){return e<0?Math.floor(e):Math.ceil(e)}function Sn(e){return 4800*e/146097}function Dn(e){return 146097*e/4800}function Yn(e){return function(){return this.as(e)}}var On=Yn("ms"),Tn=Yn("s"),bn=Yn("m"),xn=Yn("h"),Pn=Yn("d"),Wn=Yn("w"),Cn=Yn("M"),Hn=Yn("Q"),Rn=Yn("y");function Un(e){return function(){return this.isValid()?this._data[e]:NaN}}var Fn=Un("milliseconds"),Ln=Un("seconds"),Nn=Un("minutes"),Gn=Un("hours"),Vn=Un("days"),En=Un("months"),In=Un("years");var An=Math.round,jn={ss:44,s:45,m:45,h:22,d:26,M:11};var Zn=Math.abs;function zn(e){return(0<e)-(e<0)||+e}function $n(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Zn(this._milliseconds)/1e3,s=Zn(this._days),i=Zn(this._months);t=S((e=S(n/60))/60),n%=60,e%=60;var r=S(i/12),a=i%=12,o=s,u=t,l=e,h=n?n.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var c=d<0?"-":"",f=zn(this._months)!==zn(d)?"-":"",m=zn(this._days)!==zn(d)?"-":"",_=zn(this._milliseconds)!==zn(d)?"-":"";return c+"P"+(r?f+r+"Y":"")+(a?f+a+"M":"")+(o?m+o+"D":"")+(u||l||h?"T":"")+(u?_+u+"H":"")+(l?_+l+"M":"")+(h?_+h+"S":"")}var qn=Ht.prototype;return qn.isValid=function(){return this._isValid},qn.abs=function(){var e=this._data;return this._milliseconds=wn(this._milliseconds),this._days=wn(this._days),this._months=wn(this._months),e.milliseconds=wn(e.milliseconds),e.seconds=wn(e.seconds),e.minutes=wn(e.minutes),e.hours=wn(e.hours),e.months=wn(e.months),e.years=wn(e.years),this},qn.add=function(e,t){return Mn(this,e,t,1)},qn.subtract=function(e,t){return Mn(this,e,t,-1)},qn.as=function(e){if(!this.isValid())return NaN;var t,n,s=this._milliseconds;if("month"===(e=H(e))||"quarter"===e||"year"===e)switch(t=this._days+s/864e5,n=this._months+Sn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Dn(this._months)),e){case"week":return t/7+s/6048e5;case"day":return t+s/864e5;case"hour":return 24*t+s/36e5;case"minute":return 1440*t+s/6e4;case"second":return 86400*t+s/1e3;case"millisecond":return Math.floor(864e5*t)+s;default:throw new Error("Unknown unit "+e)}},qn.asMilliseconds=On,qn.asSeconds=Tn,qn.asMinutes=bn,qn.asHours=xn,qn.asDays=Pn,qn.asWeeks=Wn,qn.asMonths=Cn,qn.asQuarters=Hn,qn.asYears=Rn,qn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*D(this._months/12):NaN},qn._bubble=function(){var e,t,n,s,i,r=this._milliseconds,a=this._days,o=this._months,u=this._data;return 0<=r&&0<=a&&0<=o||r<=0&&a<=0&&o<=0||(r+=864e5*kn(Dn(o)+a),o=a=0),u.milliseconds=r%1e3,e=S(r/1e3),u.seconds=e%60,t=S(e/60),u.minutes=t%60,n=S(t/60),u.hours=n%24,o+=i=S(Sn(a+=S(n/24))),a-=kn(Dn(i)),s=S(o/12),o%=12,u.days=a,u.months=o,u.years=s,this},qn.clone=function(){return jt(this)},qn.get=function(e){return e=H(e),this.isValid()?this[e+"s"]():NaN},qn.milliseconds=Fn,qn.seconds=Ln,qn.minutes=Nn,qn.hours=Gn,qn.days=Vn,qn.weeks=function(){return S(this.days()/7)},qn.months=En,qn.years=In,qn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t,n,s,i,r,a,o,u,l,h,d,c=this.localeData(),f=(n=!e,s=c,i=jt(t=this).abs(),r=An(i.as("s")),a=An(i.as("m")),o=An(i.as("h")),u=An(i.as("d")),l=An(i.as("M")),h=An(i.as("y")),(d=r<=jn.ss&&["s",r]||r<jn.s&&["ss",r]||a<=1&&["m"]||a<jn.m&&["mm",a]||o<=1&&["h"]||o<jn.h&&["hh",o]||u<=1&&["d"]||u<jn.d&&["dd",u]||l<=1&&["M"]||l<jn.M&&["MM",l]||h<=1&&["y"]||["yy",h])[2]=n,d[3]=0<+t,d[4]=s,function(e,t,n,s,i){return i.relativeTime(t||1,!!n,e,s)}.apply(null,d));return e&&(f=c.pastFuture(+this,f)),c.postformat(f)},qn.toISOString=$n,qn.toString=$n,qn.toJSON=$n,qn.locale=Xt,qn.localeData=en,qn.toIsoString=n("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",$n),qn.lang=Kt,I("X",0,0,"unix"),I("x",0,0,"valueOf"),ue("x",se),ue("X",/[+-]?\d+(\.\d{1,3})?/),ce("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ce("x",function(e,t,n){n._d=new Date(D(e))}),c.version="2.24.0",e=bt,c.fn=mn,c.min=function(){return Wt("isBefore",[].slice.call(arguments,0))},c.max=function(){return Wt("isAfter",[].slice.call(arguments,0))},c.now=function(){return Date.now?Date.now():+new Date},c.utc=y,c.unix=function(e){return bt(1e3*e)},c.months=function(e,t){return vn(e,t,"months")},c.isDate=d,c.locale=ut,c.invalid=p,c.duration=jt,c.isMoment=k,c.weekdays=function(e,t,n){return pn(e,t,n,"weekdays")},c.parseZone=function(){return bt.apply(null,arguments).parseZone()},c.localeData=ht,c.isDuration=Rt,c.monthsShort=function(e,t){return vn(e,t,"monthsShort")},c.weekdaysMin=function(e,t,n){return pn(e,t,n,"weekdaysMin")},c.defineLocale=lt,c.updateLocale=function(e,t){if(null!=t){var n,s,i=st;null!=(s=ot(e))&&(i=s._config),(n=new P(t=x(i,t))).parentLocale=it[e],it[e]=n,ut(e)}else null!=it[e]&&(null!=it[e].parentLocale?it[e]=it[e].parentLocale:null!=it[e]&&delete it[e]);return it[e]},c.locales=function(){return s(it)},c.weekdaysShort=function(e,t,n){return pn(e,t,n,"weekdaysShort")},c.normalizeUnits=H,c.relativeTimeRounding=function(e){return void 0===e?An:"function"==typeof e&&(An=e,!0)},c.relativeTimeThreshold=function(e,t){return void 0!==jn[e]&&(void 0===t?jn[e]:(jn[e]=t,"s"===e&&(jn.ss=t-1),!0))},c.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},c.prototype=mn,c.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},c});


/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */
define('Saralux.Core.ExternalLibraries.OwlCarousel', [], function() {
! function(a, b, c, d) {
    function e(b, c) {
        this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = {
            time: null,
            target: null,
            pointer: null,
            stage: {
                start: null,
                current: null
            },
            direction: null
        }, this._states = {
            current: {},
            tags: {
                initializing: ["busy"],
                animating: ["busy"],
                dragging: ["interacting"]
            }
        }, a.each(["onResize", "onThrottledResize"], a.proxy(function(b, c) {
            this._handlers[c] = a.proxy(this[c], this)
        }, this)), a.each(e.Plugins, a.proxy(function(a, b) {
            this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this)
        }, this)), a.each(e.Workers, a.proxy(function(b, c) {
            this._pipe.push({
                filter: c.filter,
                run: a.proxy(c.run, this)
            })
        }, this)), this.setup(), this.initialize()
    }
    e.Defaults = {
        items: 3,
        loop: !1,
        center: !1,
        rewind: !1,
        checkVisibility: !0,
        mouseDrag: !0,
        touchDrag: !0,
        pullDrag: !0,
        freeDrag: !1,
        margin: 0,
        stagePadding: 0,
        merge: !1,
        mergeFit: !0,
        autoWidth: !1,
        startPosition: 0,
        rtl: !1,
        smartSpeed: 250,
        fluidSpeed: !1,
        dragEndSpeed: !1,
        responsive: {},
        responsiveRefreshRate: 200,
        responsiveBaseElement: b,
        fallbackEasing: "swing",
        slideTransition: "",
        info: !1,
        nestedItemSelector: !1,
        itemElement: "div",
        stageElement: "div",
        refreshClass: "owl-refresh",
        loadedClass: "owl-loaded",
        loadingClass: "owl-loading",
        rtlClass: "owl-rtl",
        responsiveClass: "owl-responsive",
        dragClass: "owl-drag",
        itemClass: "owl-item",
        stageClass: "owl-stage",
        stageOuterClass: "owl-stage-outer",
        grabClass: "owl-grab"
    }, e.Width = {
        Default: "default",
        Inner: "inner",
        Outer: "outer"
    }, e.Type = {
        Event: "event",
        State: "state"
    }, e.Plugins = {}, e.Workers = [{
        filter: ["width", "settings"],
        run: function() {
            this._width = this.$element.width()
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function(a) {
            a.current = this._items && this._items[this.relative(this._current)]
        }
    }, {
        filter: ["items", "settings"],
        run: function() {
            this.$stage.children(".cloned").remove()
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function(a) {
            var b = this.settings.margin || "",
                c = !this.settings.autoWidth,
                d = this.settings.rtl,
                e = {
                    width: "auto",
                    "margin-left": d ? b : "",
                    "margin-right": d ? "" : b
                };
            !c && this.$stage.children().css(e), a.css = e
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function(a) {
            var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
                c = null,
                d = this._items.length,
                e = !this.settings.autoWidth,
                f = [];
            for (a.items = {
                    merge: !1,
                    width: b
                }; d--;) c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();
            this._widths = f
        }
    }, {
        filter: ["items", "settings"],
        run: function() {
            var b = [],
                c = this._items,
                d = this.settings,
                e = Math.max(2 * d.items, 4),
                f = 2 * Math.ceil(c.length / 2),
                g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,
                h = "",
                i = "";
            for (g /= 2; g > 0;) b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i, g -= 1;
            this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage)
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function() {
            for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);
            this._coordinates = f
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function() {
            var a = this.settings.stagePadding,
                b = this._coordinates,
                c = {
                    width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a,
                    "padding-left": a || "",
                    "padding-right": a || ""
                };
            this.$stage.css(c)
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function(a) {
            var b = this._coordinates.length,
                c = !this.settings.autoWidth,
                d = this.$stage.children();
            if (c && a.items.merge)
                for (; b--;) a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);
            else c && (a.css.width = a.items.width, d.css(a.css))
        }
    }, {
        filter: ["items"],
        run: function() {
            this._coordinates.length < 1 && this.$stage.removeAttr("style")
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function(a) {
            a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current)
        }
    }, {
        filter: ["position"],
        run: function() {
            this.animate(this.coordinates(this._current))
        }
    }, {
        filter: ["width", "position", "items", "settings"],
        run: function() {
            var a, b, c, d, e = this.settings.rtl ? 1 : -1,
                f = 2 * this.settings.stagePadding,
                g = this.coordinates(this.current()) + f,
                h = g + this.width() * e,
                i = [];
            for (c = 0, d = this._coordinates.length; c < d; c++) a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c);
            this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.$stage.children(".center").removeClass("center"), this.settings.center && this.$stage.children().eq(this.current()).addClass("center")
        }
    }], e.prototype.initializeStage = function() {
        this.$stage = this.$element.find("." + this.settings.stageClass), this.$stage.length || (this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ">", {
            class: this.settings.stageClass
        }).wrap(a("<div/>", {
            class: this.settings.stageOuterClass
        })), this.$element.append(this.$stage.parent()))
    }, e.prototype.initializeItems = function() {
        var b = this.$element.find(".owl-item");
        if (b.length) return this._items = b.get().map(function(b) {
            return a(b)
        }), this._mergers = this._items.map(function() {
            return 1
        }), void this.refresh();
        this.replace(this.$element.children().not(this.$stage.parent())), this.isVisible() ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass)
    }, e.prototype.initialize = function() {
        if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) {
            var a, b, c;
            a = this.$element.find("img"), b = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, c = this.$element.children(b).width(), a.length && c <= 0 && this.preloadAutoWidthImages(a)
        }
        this.initializeStage(), this.initializeItems(), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized")
    }, e.prototype.isVisible = function() {
        return !this.settings.checkVisibility || this.$element.is(":visible")
    }, e.prototype.setup = function() {
        var b = this.viewport(),
            c = this.options.responsive,
            d = -1,
            e = null;
        c ? (a.each(c, function(a) {
            a <= b && a > d && (d = Number(a))
        }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", {
            property: {
                name: "settings",
                value: e
            }
        }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", {
            property: {
                name: "settings",
                value: this.settings
            }
        })
    }, e.prototype.optionsLogic = function() {
        this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1)
    }, e.prototype.prepare = function(b) {
        var c = this.trigger("prepare", {
            content: b
        });
        return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", {
            content: c.data
        }), c.data
    }, e.prototype.update = function() {
        for (var b = 0, c = this._pipe.length, d = a.proxy(function(a) {
                return this[a]
            }, this._invalidated), e = {}; b < c;)(this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;
        this._invalidated = {}, !this.is("valid") && this.enter("valid")
    }, e.prototype.width = function(a) {
        switch (a = a || e.Width.Default) {
            case e.Width.Inner:
            case e.Width.Outer:
                return this._width;
            default:
                return this._width - 2 * this.settings.stagePadding + this.settings.margin
        }
    }, e.prototype.refresh = function() {
        this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed")
    }, e.prototype.onThrottledResize = function() {
        b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate)
    }, e.prototype.onResize = function() {
        return !!this._items.length && (this._width !== this.$element.width() && (!!this.isVisible() && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized")))))
    }, e.prototype.registerEventHandlers = function() {
        a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), !1 !== this.settings.responsive && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function() {
            return !1
        })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this)))
    }, e.prototype.onDragStart = function(b) {
        var d = null;
        3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = {
            x: d[16 === d.length ? 12 : 4],
            y: d[16 === d.length ? 13 : 5]
        }) : (d = this.$stage.position(), d = {
            x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left,
            y: d.top
        }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = (new Date).getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function(b) {
            var d = this.difference(this._drag.pointer, this.pointer(b));
            a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag"))
        }, this)))
    }, e.prototype.onDragMove = function(a) {
        var b = null,
            c = null,
            d = null,
            e = this.difference(this._drag.pointer, this.pointer(a)),
            f = this.difference(this._drag.stage.start, e);
        this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x))
    }, e.prototype.onDragEnd = function(b) {
        var d = this.difference(this._drag.pointer, this.pointer(b)),
            e = this._drag.stage.current,
            f = d.x > 0 ^ this.settings.rtl ? "left" : "right";
        a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || (new Date).getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function() {
            return !1
        })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"))
    }, e.prototype.closest = function(b, c) {
        var e = -1,
            f = 30,
            g = this.width(),
            h = this.coordinates();
        return this.settings.freeDrag || a.each(h, a.proxy(function(a, i) {
            return "left" === c && b > i - f && b < i + f ? e = a : "right" === c && b > i - g - f && b < i - g + f ? e = a + 1 : this.op(b, "<", i) && this.op(b, ">", h[a + 1] !== d ? h[a + 1] : i - g) && (e = "left" === c ? a + 1 : a), -1 === e
        }, this)), this.settings.loop || (this.op(b, ">", h[this.minimum()]) ? e = b = this.minimum() : this.op(b, "<", h[this.maximum()]) && (e = b = this.maximum())), e
    }, e.prototype.animate = function(b) {
        var c = this.speed() > 0;
        this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({
            transform: "translate3d(" + b + "px,0px,0px)",
            transition: this.speed() / 1e3 + "s" + (this.settings.slideTransition ? " " + this.settings.slideTransition : "")
        }) : c ? this.$stage.animate({
            left: b + "px"
        }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({
            left: b + "px"
        })
    }, e.prototype.is = function(a) {
        return this._states.current[a] && this._states.current[a] > 0
    }, e.prototype.current = function(a) {
        if (a === d) return this._current;
        if (0 === this._items.length) return d;
        if (a = this.normalize(a), this._current !== a) {
            var b = this.trigger("change", {
                property: {
                    name: "position",
                    value: a
                }
            });
            b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", {
                property: {
                    name: "position",
                    value: this._current
                }
            })
        }
        return this._current
    }, e.prototype.invalidate = function(b) {
        return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function(a, b) {
            return b
        })
    }, e.prototype.reset = function(a) {
        (a = this.normalize(a)) !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"]))
    }, e.prototype.normalize = function(a, b) {
        var c = this._items.length,
            e = b ? 0 : this._clones.length;
        return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a
    }, e.prototype.relative = function(a) {
        return a -= this._clones.length / 2, this.normalize(a, !0)
    }, e.prototype.maximum = function(a) {
        var b, c, d, e = this.settings,
            f = this._coordinates.length;
        if (e.loop) f = this._clones.length / 2 + this._items.length - 1;
        else if (e.autoWidth || e.merge) {
            if (b = this._items.length)
                for (c = this._items[--b].width(), d = this.$element.width(); b-- && !((c += this._items[b].width() + this.settings.margin) > d););
            f = b + 1
        } else f = e.center ? this._items.length - 1 : this._items.length - e.items;
        return a && (f -= this._clones.length / 2), Math.max(f, 0)
    }, e.prototype.minimum = function(a) {
        return a ? 0 : this._clones.length / 2
    }, e.prototype.items = function(a) {
        return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a])
    }, e.prototype.mergers = function(a) {
        return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a])
    }, e.prototype.clones = function(b) {
        var c = this._clones.length / 2,
            e = c + this._items.length,
            f = function(a) {
                return a % 2 == 0 ? e + a / 2 : c - (a + 1) / 2
            };
        return b === d ? a.map(this._clones, function(a, b) {
            return f(b)
        }) : a.map(this._clones, function(a, c) {
            return a === b ? f(c) : null
        })
    }, e.prototype.speed = function(a) {
        return a !== d && (this._speed = a), this._speed
    }, e.prototype.coordinates = function(b) {
        var c, e = 1,
            f = b - 1;
        return b === d ? a.map(this._coordinates, a.proxy(function(a, b) {
            return this.coordinates(b)
        }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c))
    }, e.prototype.duration = function(a, b, c) {
        return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed)
    }, e.prototype.to = function(a, b) {
        var c = this.current(),
            d = null,
            e = a - this.relative(c),
            f = (e > 0) - (e < 0),
            g = this._items.length,
            h = this.minimum(),
            i = this.maximum();
        this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += -1 * f * g), a = c + e, (d = ((a - h) % g + g) % g + h) !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.isVisible() && this.update()
    }, e.prototype.next = function(a) {
        a = a || !1, this.to(this.relative(this.current()) + 1, a)
    }, e.prototype.prev = function(a) {
        a = a || !1, this.to(this.relative(this.current()) - 1, a)
    }, e.prototype.onTransitionEnd = function(a) {
        if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1;
        this.leave("animating"), this.trigger("translated")
    }, e.prototype.viewport = function() {
        var d;
        return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn("Can not detect viewport width."), d
    }, e.prototype.replace = function(b) {
        this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function() {
            return 1 === this.nodeType
        }).each(a.proxy(function(a, b) {
            b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)
        }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items")
    }, e.prototype.add = function(b, c) {
        var e = this.relative(this._current);
        c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", {
            content: b,
            position: c
        }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", {
            content: b,
            position: c
        })
    }, e.prototype.remove = function(a) {
        (a = this.normalize(a, !0)) !== d && (this.trigger("remove", {
            content: this._items[a],
            position: a
        }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", {
            content: null,
            position: a
        }))
    }, e.prototype.preloadAutoWidthImages = function(b) {
        b.each(a.proxy(function(b, c) {
            this.enter("pre-loading"), c = a(c), a(new Image).one("load", a.proxy(function(a) {
                c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh()
            }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"))
        }, this))
    }, e.prototype.destroy = function() {
        this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), !1 !== this.settings.responsive && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize));
        for (var d in this._plugins) this._plugins[d].destroy();
        this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$stage.remove(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel")
    }, e.prototype.op = function(a, b, c) {
        var d = this.settings.rtl;
        switch (b) {
            case "<":
                return d ? a > c : a < c;
            case ">":
                return d ? a < c : a > c;
            case ">=":
                return d ? a <= c : a >= c;
            case "<=":
                return d ? a >= c : a <= c
        }
    }, e.prototype.on = function(a, b, c, d) {
        a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c)
    }, e.prototype.off = function(a, b, c, d) {
        a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c)
    }, e.prototype.trigger = function(b, c, d, f, g) {
        var h = {
                item: {
                    count: this._items.length,
                    index: this.current()
                }
            },
            i = a.camelCase(a.grep(["on", b, d], function(a) {
                return a
            }).join("-").toLowerCase()),
            j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({
                relatedTarget: this
            }, h, c));
        return this._supress[b] || (a.each(this._plugins, function(a, b) {
            b.onTrigger && b.onTrigger(j)
        }), this.register({
            type: e.Type.Event,
            name: b
        }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j
    }, e.prototype.enter = function(b) {
        a.each([b].concat(this._states.tags[b] || []), a.proxy(function(a, b) {
            this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++
        }, this))
    }, e.prototype.leave = function(b) {
        a.each([b].concat(this._states.tags[b] || []), a.proxy(function(a, b) {
            this._states.current[b]--
        }, this))
    }, e.prototype.register = function(b) {
        if (b.type === e.Type.Event) {
            if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {
                var c = a.event.special[b.name]._default;
                a.event.special[b.name]._default = function(a) {
                    return !c || !c.apply || a.namespace && -1 !== a.namespace.indexOf("owl") ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments)
                }, a.event.special[b.name].owl = !0
            }
        } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function(c, d) {
            return a.inArray(c, this._states.tags[b.name]) === d
        }, this)))
    }, e.prototype.suppress = function(b) {
        a.each(b, a.proxy(function(a, b) {
            this._supress[b] = !0
        }, this))
    }, e.prototype.release = function(b) {
        a.each(b, a.proxy(function(a, b) {
            delete this._supress[b]
        }, this))
    }, e.prototype.pointer = function(a) {
        var c = {
            x: null,
            y: null
        };
        return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c
    }, e.prototype.isNumeric = function(a) {
        return !isNaN(parseFloat(a))
    }, e.prototype.difference = function(a, b) {
        return {
            x: a.x - b.x,
            y: a.y - b.y
        }
    }, a.fn.owlCarousel = function(b) {
        var c = Array.prototype.slice.call(arguments, 1);
        return this.each(function() {
            var d = a(this),
                f = d.data("owl.carousel");
            f || (f = new e(this, "object" == typeof b && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function(b, c) {
                f.register({
                    type: e.Type.Event,
                    name: c
                }), f.$element.on(c + ".owl.carousel.core", a.proxy(function(a) {
                    a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]))
                }, f))
            })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c)
        })
    }, a.fn.owlCarousel.Constructor = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    var e = function(b) {
        this._core = b, this._interval = null, this._visible = null, this._handlers = {
            "initialized.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.settings.autoRefresh && this.watch()
            }, this)
        }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers)
    };
    e.Defaults = {
        autoRefresh: !0,
        autoRefreshInterval: 500
    }, e.prototype.watch = function() {
        this._interval || (this._visible = this._core.isVisible(), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval))
    }, e.prototype.refresh = function() {
        this._core.isVisible() !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh())
    }, e.prototype.destroy = function() {
        var a, c;
        b.clearInterval(this._interval);
        for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);
        for (c in Object.getOwnPropertyNames(this)) "function" != typeof this[c] && (this[c] = null)
    }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    var e = function(b) {
        this._core = b, this._loaded = [], this._handlers = {
            "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function(b) {
                if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) {
                    var c = this._core.settings,
                        e = c.center && Math.ceil(c.items / 2) || c.items,
                        f = c.center && -1 * e || 0,
                        g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f,
                        h = this._core.clones().length,
                        i = a.proxy(function(a, b) {
                            this.load(b)
                        }, this);
                    for (c.lazyLoadEager > 0 && (e += c.lazyLoadEager, c.loop && (g -= c.lazyLoadEager, e++)); f++ < e;) this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++
                }
            }, this)
        }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers)
    };
    e.Defaults = {
        lazyLoad: !1,
        lazyLoadEager: 0
    }, e.prototype.load = function(c) {
        var d = this._core.$stage.children().eq(c),
            e = d && d.find(".owl-lazy");
        !e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function(c, d) {
            var e, f = a(d),
                g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src") || f.attr("data-srcset");
            this._core.trigger("load", {
                element: f,
                url: g
            }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function() {
                f.css("opacity", 1), this._core.trigger("loaded", {
                    element: f,
                    url: g
                }, "lazy")
            }, this)).attr("src", g) : f.is("source") ? f.one("load.owl.lazy", a.proxy(function() {
                this._core.trigger("loaded", {
                    element: f,
                    url: g
                }, "lazy")
            }, this)).attr("srcset", g) : (e = new Image, e.onload = a.proxy(function() {
                f.css({
                    "background-image": 'url("' + g + '")',
                    opacity: "1"
                }), this._core.trigger("loaded", {
                    element: f,
                    url: g
                }, "lazy")
            }, this), e.src = g)
        }, this)), this._loaded.push(d.get(0)))
    }, e.prototype.destroy = function() {
        var a, b;
        for (a in this.handlers) this._core.$element.off(a, this.handlers[a]);
        for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null)
    }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    var e = function(c) {
        this._core = c, this._previousHeight = null, this._handlers = {
            "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.settings.autoHeight && this.update()
            }, this),
            "changed.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.settings.autoHeight && "position" === a.property.name && this.update()
            }, this),
            "loaded.owl.lazy": a.proxy(function(a) {
                a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update()
            }, this)
        }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._intervalId = null;
        var d = this;
        a(b).on("load", function() {
            d._core.settings.autoHeight && d.update()
        }), a(b).resize(function() {
            d._core.settings.autoHeight && (null != d._intervalId && clearTimeout(d._intervalId), d._intervalId = setTimeout(function() {
                d.update()
            }, 250))
        })
    };
    e.Defaults = {
        autoHeight: !1,
        autoHeightClass: "owl-height"
    }, e.prototype.update = function() {
        var b = this._core._current,
            c = b + this._core.settings.items,
            d = this._core.settings.lazyLoad,
            e = this._core.$stage.children().toArray().slice(b, c),
            f = [],
            g = 0;
        a.each(e, function(b, c) {
            f.push(a(c).height())
        }), g = Math.max.apply(null, f), g <= 1 && d && this._previousHeight && (g = this._previousHeight), this._previousHeight = g, this._core.$stage.parent().height(g).addClass(this._core.settings.autoHeightClass)
    }, e.prototype.destroy = function() {
        var a, b;
        for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);
        for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null)
    }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    var e = function(b) {
        this._core = b, this._videos = {}, this._playing = null, this._handlers = {
            "initialized.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.register({
                    type: "state",
                    name: "playing",
                    tags: ["interacting"]
                })
            }, this),
            "resize.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault()
            }, this),
            "refreshed.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove()
            }, this),
            "changed.owl.carousel": a.proxy(function(a) {
                a.namespace && "position" === a.property.name && this._playing && this.stop()
            }, this),
            "prepared.owl.carousel": a.proxy(function(b) {
                if (b.namespace) {
                    var c = a(b.content).find(".owl-video");
                    c.length && (c.css("display", "none"), this.fetch(c, a(b.content)))
                }
            }, this)
        }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function(a) {
            this.play(a)
        }, this))
    };
    e.Defaults = {
        video: !1,
        videoHeight: !1,
        videoWidth: !1
    }, e.prototype.fetch = function(a, b) {
        var c = function() {
                return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube"
            }(),
            d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"),
            e = a.attr("data-width") || this._core.settings.videoWidth,
            f = a.attr("data-height") || this._core.settings.videoHeight,
            g = a.attr("href");
        if (!g) throw new Error("Missing video URL.");
        if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube";
        else if (d[3].indexOf("vimeo") > -1) c = "vimeo";
        else {
            if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");
            c = "vzaar"
        }
        d = d[6], this._videos[g] = {
            type: c,
            id: d,
            width: e,
            height: f
        }, b.attr("data-video", g), this.thumbnail(a, this._videos[g])
    }, e.prototype.thumbnail = function(b, c) {
        var d, e, f, g = c.width && c.height ? "width:" + c.width + "px;height:" + c.height + "px;" : "",
            h = b.find("img"),
            i = "src",
            j = "",
            k = this._core.settings,
            l = function(c) {
                e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? a("<div/>", {
                    class: "owl-video-tn " + j,
                    srcType: c
                }) : a("<div/>", {
                    class: "owl-video-tn",
                    style: "opacity:1;background-image:url(" + c + ")"
                }), b.after(d), b.after(e)
            };
        if (b.wrap(a("<div/>", {
                class: "owl-video-wrapper",
                style: g
            })), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length) return l(h.attr(i)), h.remove(), !1;
        "youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({
            type: "GET",
            url: "//vimeo.com/api/v2/video/" + c.id + ".json",
            jsonp: "callback",
            dataType: "jsonp",
            success: function(a) {
                f = a[0].thumbnail_large, l(f)
            }
        }) : "vzaar" === c.type && a.ajax({
            type: "GET",
            url: "//vzaar.com/api/videos/" + c.id + ".json",
            jsonp: "callback",
            dataType: "jsonp",
            success: function(a) {
                f = a.framegrab_url, l(f)
            }
        })
    }, e.prototype.stop = function() {
        this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video")
    }, e.prototype.play = function(b) {
        var c, d = a(b.target),
            e = d.closest("." + this._core.settings.itemClass),
            f = this._videos[e.attr("data-video")],
            g = f.width || "100%",
            h = f.height || this._core.$stage.height();
        this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), c = a('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'), c.attr("height", h), c.attr("width", g), "youtube" === f.type ? c.attr("src", "//www.youtube.com/embed/" + f.id + "?autoplay=1&rel=0&v=" + f.id) : "vimeo" === f.type ? c.attr("src", "//player.vimeo.com/video/" + f.id + "?autoplay=1") : "vzaar" === f.type && c.attr("src", "//view.vzaar.com/" + f.id + "/player?autoplay=true"), a(c).wrap('<div class="owl-video-frame" />').insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing"))
    }, e.prototype.isInFullScreen = function() {
        var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;
        return b && a(b).parent().hasClass("owl-video-frame")
    }, e.prototype.destroy = function() {
        var a, b;
        this._core.$element.off("click.owl.video");
        for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);
        for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null)
    }, a.fn.owlCarousel.Constructor.Plugins.Video = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    var e = function(b) {
        this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = {
            "change.owl.carousel": a.proxy(function(a) {
                a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value)
            }, this),
            "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function(a) {
                a.namespace && (this.swapping = "translated" == a.type)
            }, this),
            "translate.owl.carousel": a.proxy(function(a) {
                a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap()
            }, this)
        }, this.core.$element.on(this.handlers)
    };
    e.Defaults = {
        animateOut: !1,
        animateIn: !1
    }, e.prototype.swap = function() {
        if (1 === this.core.settings.items && a.support.animation && a.support.transition) {
            this.core.speed(0);
            var b, c = a.proxy(this.clear, this),
                d = this.core.$stage.children().eq(this.previous),
                e = this.core.$stage.children().eq(this.next),
                f = this.core.settings.animateIn,
                g = this.core.settings.animateOut;
            this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({
                left: b + "px"
            }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f))
        }
    }, e.prototype.clear = function(b) {
        a(b.target).css({
            left: ""
        }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd()
    }, e.prototype.destroy = function() {
        var a, b;
        for (a in this.handlers) this.core.$element.off(a, this.handlers[a]);
        for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null)
    }, a.fn.owlCarousel.Constructor.Plugins.Animate = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    var e = function(b) {
        this._core = b, this._call = null, this._time = 0, this._timeout = 0, this._paused = !0, this._handlers = {
            "changed.owl.carousel": a.proxy(function(a) {
                a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._paused && (this._time = 0)
            }, this),
            "initialized.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.settings.autoplay && this.play()
            }, this),
            "play.owl.autoplay": a.proxy(function(a, b, c) {
                a.namespace && this.play(b, c)
            }, this),
            "stop.owl.autoplay": a.proxy(function(a) {
                a.namespace && this.stop()
            }, this),
            "mouseover.owl.autoplay": a.proxy(function() {
                this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause()
            }, this),
            "mouseleave.owl.autoplay": a.proxy(function() {
                this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play()
            }, this),
            "touchstart.owl.core": a.proxy(function() {
                this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause()
            }, this),
            "touchend.owl.core": a.proxy(function() {
                this._core.settings.autoplayHoverPause && this.play()
            }, this)
        }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options)
    };
    e.Defaults = {
        autoplay: !1,
        autoplayTimeout: 5e3,
        autoplayHoverPause: !1,
        autoplaySpeed: !1
    }, e.prototype._next = function(d) {
        this._call = b.setTimeout(a.proxy(this._next, this, d), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()), this._core.is("interacting") || c.hidden || this._core.next(d || this._core.settings.autoplaySpeed)
    }, e.prototype.read = function() {
        return (new Date).getTime() - this._time
    }, e.prototype.play = function(c, d) {
        var e;
        this._core.is("rotating") || this._core.enter("rotating"), c = c || this._core.settings.autoplayTimeout, e = Math.min(this._time % (this._timeout || c), c), this._paused ? (this._time = this.read(), this._paused = !1) : b.clearTimeout(this._call), this._time += this.read() % c - e, this._timeout = c, this._call = b.setTimeout(a.proxy(this._next, this, d), c - e)
    }, e.prototype.stop = function() {
        this._core.is("rotating") && (this._time = 0, this._paused = !0, b.clearTimeout(this._call), this._core.leave("rotating"))
    }, e.prototype.pause = function() {
        this._core.is("rotating") && !this._paused && (this._time = this.read(), this._paused = !0, b.clearTimeout(this._call))
    }, e.prototype.destroy = function() {
        var a, b;
        this.stop();
        for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);
        for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null)
    }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    "use strict";
    var e = function(b) {
        this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = {
            next: this._core.next,
            prev: this._core.prev,
            to: this._core.to
        }, this._handlers = {
            "prepared.owl.carousel": a.proxy(function(b) {
                b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>")
            }, this),
            "added.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop())
            }, this),
            "remove.owl.carousel": a.proxy(function(a) {
                a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1)
            }, this),
            "changed.owl.carousel": a.proxy(function(a) {
                a.namespace && "position" == a.property.name && this.draw()
            }, this),
            "initialized.owl.carousel": a.proxy(function(a) {
                a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"))
            }, this),
            "refreshed.owl.carousel": a.proxy(function(a) {
                a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"))
            }, this)
        }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers)
    };
    e.Defaults = {
        nav: !1,
        navText: ['<span aria-label="Previous">&#x2039;</span>', '<span aria-label="Next">&#x203a;</span>'],
        navSpeed: !1,
        navElement: 'button type="button" role="presentation"',
        navContainer: !1,
        navContainerClass: "owl-nav",
        navClass: ["owl-prev", "owl-next"],
        slideBy: 1,
        dotClass: "owl-dot",
        dotsClass: "owl-dots",
        dots: !0,
        dotsEach: !1,
        dotsData: !1,
        dotsSpeed: !1,
        dotsContainer: !1
    }, e.prototype.initialize = function() {
        var b, c = this._core.settings;
        this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function(a) {
            this.prev(c.navSpeed)
        }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function(a) {
            this.next(c.navSpeed)
        }, this)), c.dotsData || (this._templates = [a('<button role="button">').addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "button", a.proxy(function(b) {
            var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();
            b.preventDefault(), this.to(d, c.dotsSpeed)
        }, this));
        for (b in this._overrides) this._core[b] = a.proxy(this[b], this)
    }, e.prototype.destroy = function() {
        var a, b, c, d, e;
        e = this._core.settings;
        for (a in this._handlers) this.$element.off(a, this._handlers[a]);
        for (b in this._controls) "$relative" === b && e.navContainer ? this._controls[b].html("") : this._controls[b].remove();
        for (d in this.overides) this._core[d] = this._overrides[d];
        for (c in Object.getOwnPropertyNames(this)) "function" != typeof this[c] && (this[c] = null)
    }, e.prototype.update = function() {
        var a, b, c, d = this._core.clones().length / 2,
            e = d + this._core.items().length,
            f = this._core.maximum(!0),
            g = this._core.settings,
            h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;
        if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy)
            for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) {
                if (b >= h || 0 === b) {
                    if (this._pages.push({
                            start: Math.min(f, a - d),
                            end: a - d + h - 1
                        }), Math.min(f, a - d) === f) break;
                    b = 0, ++c
                }
                b += this._core.mergers(this._core.relative(a))
            }
    }, e.prototype.draw = function() {
        var b, c = this._core.settings,
            d = this._core.items().length <= c.items,
            e = this._core.relative(this._core.current()),
            f = c.loop || c.rewind;
        this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active"))
    }, e.prototype.onTrigger = function(b) {
        var c = this._core.settings;
        b.page = {
            index: a.inArray(this.current(), this._pages),
            count: this._pages.length,
            size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items)
        }
    }, e.prototype.current = function() {
        var b = this._core.relative(this._core.current());
        return a.grep(this._pages, a.proxy(function(a, c) {
            return a.start <= b && a.end >= b
        }, this)).pop()
    }, e.prototype.getPosition = function(b) {
        var c, d, e = this._core.settings;
        return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c
    }, e.prototype.next = function(b) {
        a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b)
    }, e.prototype.prev = function(b) {
        a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b)
    }, e.prototype.to = function(b, c, d) {
        var e;
        !d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c)
    }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    "use strict";
    var e = function(c) {
        this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = {
            "initialized.owl.carousel": a.proxy(function(c) {
                c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation")
            }, this),
            "prepared.owl.carousel": a.proxy(function(b) {
                if (b.namespace) {
                    var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");
                    if (!c) return;
                    this._hashes[c] = b.content
                }
            }, this),
            "changed.owl.carousel": a.proxy(function(c) {
                if (c.namespace && "position" === c.property.name) {
                    var d = this._core.items(this._core.relative(this._core.current())),
                        e = a.map(this._hashes, function(a, b) {
                            return a === d ? b : null
                        }).join();
                    if (!e || b.location.hash.slice(1) === e) return;
                    b.location.hash = e
                }
            }, this)
        }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function(a) {
            var c = b.location.hash.substring(1),
                e = this._core.$stage.children(),
                f = this._hashes[c] && e.index(this._hashes[c]);
            f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0)
        }, this))
    };
    e.Defaults = {
        URLhashListener: !1
    }, e.prototype.destroy = function() {
        var c, d;
        a(b).off("hashchange.owl.navigation");
        for (c in this._handlers) this._core.$element.off(c, this._handlers[c]);
        for (d in Object.getOwnPropertyNames(this)) "function" != typeof this[d] && (this[d] = null)
    }, a.fn.owlCarousel.Constructor.Plugins.Hash = e
}(window.Zepto || window.jQuery, window, document),
function(a, b, c, d) {
    function e(b, c) {
        var e = !1,
            f = b.charAt(0).toUpperCase() + b.slice(1);
        return a.each((b + " " + h.join(f + " ") + f).split(" "), function(a, b) {
            if (g[b] !== d) return e = !c || b, !1
        }), e
    }

    function f(a) {
        return e(a, !0)
    }
    var g = a("<support>").get(0).style,
        h = "Webkit Moz O ms".split(" "),
        i = {
            transition: {
                end: {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "oTransitionEnd",
                    transition: "transitionend"
                }
            },
            animation: {
                end: {
                    WebkitAnimation: "webkitAnimationEnd",
                    MozAnimation: "animationend",
                    OAnimation: "oAnimationEnd",
                    animation: "animationend"
                }
            }
        },
        j = {
            csstransforms: function() {
                return !!e("transform")
            },
            csstransforms3d: function() {
                return !!e("perspective")
            },
            csstransitions: function() {
                return !!e("transition")
            },
            cssanimations: function() {
                return !!e("animation")
            }
        };
    j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d())
}(window.Zepto || window.jQuery, window, document);

});

/*! @vimeo/player v2.17.1 | (c) 2022 Vimeo | MIT License | https://github.com/vimeo/player.js */
define('Saralux.Core.ExternalLibraries.VimeoPlayer', [], function() {"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var e="undefined"!=typeof global&&"[object global]"==={}.toString.call(global);function i(e,t){return 0===e.indexOf(t.toLowerCase())?e:"".concat(t.toLowerCase()).concat(e.substr(0,1).toUpperCase()).concat(e.substr(1))}function c(e){return/^(https?:)?\/\/((player|www)\.)?vimeo\.com(?=$|\/)/.test(e)}function s(e){var t,n=0<arguments.length&&void 0!==e?e:{},r=n.id,o=n.url,i=r||o;if(!i)throw new Error("An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.");if(t=i,!isNaN(parseFloat(t))&&isFinite(t)&&Math.floor(t)==t)return"https://vimeo.com/".concat(i);if(c(i))return i.replace("http:","https:");if(r)throw new TypeError("“".concat(r,"” is not a valid video id."));throw new TypeError("“".concat(i,"” is not a vimeo.com url."))}var t=void 0!==Array.prototype.indexOf,n="undefined"!=typeof window&&void 0!==window.postMessage;if(!(e||t&&n))throw new Error("Sorry, the Vimeo Player API is not available in this browser.");var o,a,u,l,f="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function d(){if(void 0===this)throw new TypeError("Constructor WeakMap requires 'new'");if(l(this,"_id","_WeakMap_"+v()+"."+v()),0<arguments.length)throw new TypeError("WeakMap iterable is not supported")}function h(e,t){if(!m(e)||!a.call(e,"_id"))throw new TypeError(t+" method called on incompatible receiver "+typeof e)}function v(){return Math.random().toString().substring(2)}function m(e){return Object(e)===e}(o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:f).WeakMap||(a=Object.prototype.hasOwnProperty,u=Object.defineProperty&&function(){try{return 1===Object.defineProperty({},"x",{value:1}).x}catch(e){}}(),l=function(e,t,n){u?Object.defineProperty(e,t,{configurable:!0,writable:!0,value:n}):e[t]=n},o.WeakMap=(l(d.prototype,"delete",function(e){if(h(this,"delete"),!m(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)&&(delete e[this._id],!0)}),l(d.prototype,"get",function(e){if(h(this,"get"),m(e)){var t=e[this._id];return t&&t[0]===e?t[1]:void 0}}),l(d.prototype,"has",function(e){if(h(this,"has"),!m(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)}),l(d.prototype,"set",function(e,t){if(h(this,"set"),!m(e))throw new TypeError("Invalid value used as weak map key");var n=e[this._id];return n&&n[0]===e?n[1]=t:l(e,this._id,[e,t]),this}),l(d,"_polyfill",!0),d));var p,y=(function(e){var t,n,r;r=function(){var t,n,r,o,i,a,e=Object.prototype.toString,u="undefined"!=typeof setImmediate?function(e){return setImmediate(e)}:setTimeout;try{Object.defineProperty({},"x",{}),t=function(e,t,n,r){return Object.defineProperty(e,t,{value:n,writable:!0,configurable:!1!==r})}}catch(e){t=function(e,t,n){return e[t]=n,e}}function l(e,t){this.fn=e,this.self=t,this.next=void 0}function c(e,t){r.add(e,t),n=n||u(r.drain)}function s(e){var t,n=typeof e;return null==e||"object"!=n&&"function"!=n||(t=e.then),"function"==typeof t&&t}function f(){for(var e=0;e<this.chain.length;e++)!function(e,t,n){var r,o;try{!1===t?n.reject(e.msg):(r=!0===t?e.msg:t.call(void 0,e.msg))===n.promise?n.reject(TypeError("Promise-chain cycle")):(o=s(r))?o.call(r,n.resolve,n.reject):n.resolve(r)}catch(e){n.reject(e)}}(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function d(e){var n,r=this;if(!r.triggered){r.triggered=!0,r.def&&(r=r.def);try{(n=s(e))?c(function(){var t=new m(r);try{n.call(e,function(){d.apply(t,arguments)},function(){h.apply(t,arguments)})}catch(e){h.call(t,e)}}):(r.msg=e,r.state=1,0<r.chain.length&&c(f,r))}catch(e){h.call(new m(r),e)}}}function h(e){var t=this;t.triggered||(t.triggered=!0,t.def&&(t=t.def),t.msg=e,t.state=2,0<t.chain.length&&c(f,t))}function v(e,n,r,o){for(var t=0;t<n.length;t++)!function(t){e.resolve(n[t]).then(function(e){r(t,e)},o)}(t)}function m(e){this.def=e,this.triggered=!1}function p(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function y(e){if("function"!=typeof e)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var r=new p(this);this.then=function(e,t){var n={success:"function"!=typeof e||e,failure:"function"==typeof t&&t};return n.promise=new this.constructor(function(e,t){if("function"!=typeof e||"function"!=typeof t)throw TypeError("Not a function");n.resolve=e,n.reject=t}),r.chain.push(n),0!==r.state&&c(f,r),n.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,function(e){d.call(r,e)},function(e){h.call(r,e)})}catch(e){h.call(r,e)}}var g=t({},"constructor",y,!(r={add:function(e,t){a=new l(e,t),i?i.next=a:o=a,i=a,a=void 0},drain:function(){var e=o;for(o=i=n=void 0;e;)e.fn.call(e.self),e=e.next}}));return t(y.prototype=g,"__NPO__",0,!1),t(y,"resolve",function(n){return n&&"object"==typeof n&&1===n.__NPO__?n:new this(function(e,t){if("function"!=typeof e||"function"!=typeof t)throw TypeError("Not a function");e(n)})}),t(y,"reject",function(n){return new this(function(e,t){if("function"!=typeof e||"function"!=typeof t)throw TypeError("Not a function");t(n)})}),t(y,"all",function(t){var a=this;return"[object Array]"!=e.call(t)?a.reject(TypeError("Not an array")):0===t.length?a.resolve([]):new a(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");var r=t.length,o=Array(r),i=0;v(a,t,function(e,t){o[e]=t,++i===r&&n(o)},e)})}),t(y,"race",function(t){var r=this;return"[object Array]"!=e.call(t)?r.reject(TypeError("Not an array")):new r(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");v(r,t,function(e,t){n(t)},e)})}),y},(n=f)[t="Promise"]=n[t]||r(),e.exports&&(e.exports=n[t])}(p={exports:{}}),p.exports),g=new WeakMap;function w(e,t,n){var r=g.get(e.element)||{};t in r||(r[t]=[]),r[t].push(n),g.set(e.element,r)}function b(e,t){return(g.get(e.element)||{})[t]||[]}function k(e,t,n){var r=g.get(e.element)||{};if(!r[t])return!0;if(!n)return r[t]=[],g.set(e.element,r),!0;var o=r[t].indexOf(n);return-1!==o&&r[t].splice(o,1),g.set(e.element,r),r[t]&&0===r[t].length}function E(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){return console.warn(e),{}}return e}function T(e,t,n){var r,o;e.element.contentWindow&&e.element.contentWindow.postMessage&&(r={method:t},void 0!==n&&(r.value=n),8<=(o=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/,"$1")))&&o<10&&(r=JSON.stringify(r)),e.element.contentWindow.postMessage(r,e.origin))}function P(n,r){var t,e,o=[];(r=E(r)).event?("error"===r.event&&b(n,r.data.method).forEach(function(e){var t=new Error(r.data.message);t.name=r.data.name,e.reject(t),k(n,r.data.method,e)}),o=b(n,"event:".concat(r.event)),t=r.data):!r.method||(e=function(e,t){var n=b(e,t);if(n.length<1)return!1;var r=n.shift();return k(e,t,r),r}(n,r.method))&&(o.push(e),t=r.value),o.forEach(function(e){try{if("function"==typeof e)return void e.call(n,t);e.resolve(t)}catch(e){}})}var M=["autopause","autoplay","background","byline","color","controls","dnt","height","id","interactive_params","keyboard","loop","maxheight","maxwidth","muted","playsinline","portrait","responsive","speed","texttrack","title","transparent","url","width"];function _(r,e){var t=1<arguments.length&&void 0!==e?e:{};return M.reduce(function(e,t){var n=r.getAttribute("data-vimeo-".concat(t));return!n&&""!==n||(e[t]=""===n?1:n),e},t)}function N(e,t){var n=e.html;if(!t)throw new TypeError("An element must be provided");if(null!==t.getAttribute("data-vimeo-initialized"))return t.querySelector("iframe");var r=document.createElement("div");return r.innerHTML=n,t.appendChild(r.firstChild),t.setAttribute("data-vimeo-initialized","true"),t.querySelector("iframe")}function F(i,e,t){var a=1<arguments.length&&void 0!==e?e:{},u=2<arguments.length?t:void 0;return new Promise(function(t,n){if(!c(i))throw new TypeError("“".concat(i,"” is not a vimeo.com url."));var e="https://vimeo.com/api/oembed.json?url=".concat(encodeURIComponent(i));for(var r in a)a.hasOwnProperty(r)&&(e+="&".concat(r,"=").concat(encodeURIComponent(a[r])));var o=new("XDomainRequest"in window?XDomainRequest:XMLHttpRequest);o.open("GET",e,!0),o.onload=function(){if(404!==o.status)if(403!==o.status)try{var e=JSON.parse(o.responseText);if(403===e.domain_status_code)return N(e,u),void n(new Error("“".concat(i,"” is not embeddable.")));t(e)}catch(e){n(e)}else n(new Error("“".concat(i,"” is not embeddable.")));else n(new Error("“".concat(i,"” was not found.")))},o.onerror=function(){var e=o.status?" (".concat(o.status,")"):"";n(new Error("There was an error fetching the embed code from Vimeo".concat(e,".")))},o.send()})}var x,C,j,A=new WeakMap,S=new WeakMap,q={},Player=function(){function Player(u){var e,t,l=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,Player),window.jQuery&&u instanceof jQuery&&(1<u.length&&window.console&&console.warn&&console.warn("A jQuery object with multiple elements was passed, using the first element."),u=u[0]),"undefined"!=typeof document&&"string"==typeof u&&(u=document.getElementById(u)),e=u,!Boolean(e&&1===e.nodeType&&"nodeName"in e&&e.ownerDocument&&e.ownerDocument.defaultView))throw new TypeError("You must pass either a valid element or a valid id.");if("IFRAME"===u.nodeName||(t=u.querySelector("iframe"))&&(u=t),"IFRAME"===u.nodeName&&!c(u.getAttribute("src")||""))throw new Error("The player element passed isn’t a Vimeo embed.");if(A.has(u))return A.get(u);this._window=u.ownerDocument.defaultView,this.element=u,this.origin="*";var r,o=new y(function(i,a){var e;l._onMessage=function(e){if(c(e.origin)&&l.element.contentWindow===e.source){"*"===l.origin&&(l.origin=e.origin);var t=E(e.data);if(t&&"error"===t.event&&t.data&&"ready"===t.data.method){var n=new Error(t.data.message);return n.name=t.data.name,void a(n)}var r=t&&"ready"===t.event,o=t&&"ping"===t.method;if(r||o)return l.element.setAttribute("data-ready","true"),void i();P(l,t)}},l._window.addEventListener("message",l._onMessage),"IFRAME"!==l.element.nodeName&&F(s(e=_(u,n)),e,u).then(function(e){var t,n,r,o=N(e,u);return l.element=o,l._originalElement=u,t=u,n=o,r=g.get(t),g.set(n,r),g.delete(t),A.set(l.element,l),e}).catch(a)});return S.set(this,o),A.set(this.element,this),"IFRAME"===this.element.nodeName&&T(this,"ping"),q.isEnabled&&(r=function(){return q.exit()},this.fullscreenchangeHandler=function(){(q.isFullscreen?w:k)(l,"event:exitFullscreen",r),l.ready().then(function(){T(l,"fullscreenchange",q.isFullscreen)})},q.on("fullscreenchange",this.fullscreenchangeHandler)),this}var e,t,n;return e=Player,(t=[{key:"callMethod",value:function(n,e){var r=this,o=1<arguments.length&&void 0!==e?e:{};return new y(function(e,t){return r.ready().then(function(){w(r,n,{resolve:e,reject:t}),T(r,n,o)}).catch(t)})}},{key:"get",value:function(n){var r=this;return new y(function(e,t){return n=i(n,"get"),r.ready().then(function(){w(r,n,{resolve:e,reject:t}),T(r,n)}).catch(t)})}},{key:"set",value:function(n,r){var o=this;return new y(function(e,t){if(n=i(n,"set"),null==r)throw new TypeError("There must be a value to set.");return o.ready().then(function(){w(o,n,{resolve:e,reject:t}),T(o,n,r)}).catch(t)})}},{key:"on",value:function(e,t){if(!e)throw new TypeError("You must pass an event name.");if(!t)throw new TypeError("You must pass a callback function.");if("function"!=typeof t)throw new TypeError("The callback must be a function.");0===b(this,"event:".concat(e)).length&&this.callMethod("addEventListener",e).catch(function(){}),w(this,"event:".concat(e),t)}},{key:"off",value:function(e,t){if(!e)throw new TypeError("You must pass an event name.");if(t&&"function"!=typeof t)throw new TypeError("The callback must be a function.");k(this,"event:".concat(e),t)&&this.callMethod("removeEventListener",e).catch(function(e){})}},{key:"loadVideo",value:function(e){return this.callMethod("loadVideo",e)}},{key:"ready",value:function(){var e=S.get(this)||new y(function(e,t){t(new Error("Unknown player. Probably unloaded."))});return y.resolve(e)}},{key:"addCuePoint",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};return this.callMethod("addCuePoint",{time:e,data:n})}},{key:"removeCuePoint",value:function(e){return this.callMethod("removeCuePoint",e)}},{key:"enableTextTrack",value:function(e,t){if(!e)throw new TypeError("You must pass a language.");return this.callMethod("enableTextTrack",{language:e,kind:t})}},{key:"disableTextTrack",value:function(){return this.callMethod("disableTextTrack")}},{key:"pause",value:function(){return this.callMethod("pause")}},{key:"play",value:function(){return this.callMethod("play")}},{key:"requestFullscreen",value:function(){return q.isEnabled?q.request(this.element):this.callMethod("requestFullscreen")}},{key:"exitFullscreen",value:function(){return q.isEnabled?q.exit():this.callMethod("exitFullscreen")}},{key:"getFullscreen",value:function(){return q.isEnabled?y.resolve(q.isFullscreen):this.get("fullscreen")}},{key:"requestPictureInPicture",value:function(){return this.callMethod("requestPictureInPicture")}},{key:"exitPictureInPicture",value:function(){return this.callMethod("exitPictureInPicture")}},{key:"getPictureInPicture",value:function(){return this.get("pictureInPicture")}},{key:"unload",value:function(){return this.callMethod("unload")}},{key:"destroy",value:function(){var n=this;return new y(function(e){var t;S.delete(n),A.delete(n.element),n._originalElement&&(A.delete(n._originalElement),n._originalElement.removeAttribute("data-vimeo-initialized")),n.element&&"IFRAME"===n.element.nodeName&&n.element.parentNode&&(n.element.parentNode.parentNode&&n._originalElement&&n._originalElement!==n.element.parentNode?n.element.parentNode.parentNode.removeChild(n.element.parentNode):n.element.parentNode.removeChild(n.element)),n.element&&"DIV"===n.element.nodeName&&n.element.parentNode&&(n.element.removeAttribute("data-vimeo-initialized"),(t=n.element.querySelector("iframe"))&&t.parentNode&&(t.parentNode.parentNode&&n._originalElement&&n._originalElement!==t.parentNode?t.parentNode.parentNode.removeChild(t.parentNode):t.parentNode.removeChild(t))),n._window.removeEventListener("message",n._onMessage),q.isEnabled&&q.off("fullscreenchange",n.fullscreenchangeHandler),e()})}},{key:"getAutopause",value:function(){return this.get("autopause")}},{key:"setAutopause",value:function(e){return this.set("autopause",e)}},{key:"getBuffered",value:function(){return this.get("buffered")}},{key:"getCameraProps",value:function(){return this.get("cameraProps")}},{key:"setCameraProps",value:function(e){return this.set("cameraProps",e)}},{key:"getChapters",value:function(){return this.get("chapters")}},{key:"getCurrentChapter",value:function(){return this.get("currentChapter")}},{key:"getColor",value:function(){return this.get("color")}},{key:"setColor",value:function(e){return this.set("color",e)}},{key:"getCuePoints",value:function(){return this.get("cuePoints")}},{key:"getCurrentTime",value:function(){return this.get("currentTime")}},{key:"setCurrentTime",value:function(e){return this.set("currentTime",e)}},{key:"getDuration",value:function(){return this.get("duration")}},{key:"getEnded",value:function(){return this.get("ended")}},{key:"getLoop",value:function(){return this.get("loop")}},{key:"setLoop",value:function(e){return this.set("loop",e)}},{key:"setMuted",value:function(e){return this.set("muted",e)}},{key:"getMuted",value:function(){return this.get("muted")}},{key:"getPaused",value:function(){return this.get("paused")}},{key:"getPlaybackRate",value:function(){return this.get("playbackRate")}},{key:"setPlaybackRate",value:function(e){return this.set("playbackRate",e)}},{key:"getPlayed",value:function(){return this.get("played")}},{key:"getQualities",value:function(){return this.get("qualities")}},{key:"getQuality",value:function(){return this.get("quality")}},{key:"setQuality",value:function(e){return this.set("quality",e)}},{key:"getSeekable",value:function(){return this.get("seekable")}},{key:"getSeeking",value:function(){return this.get("seeking")}},{key:"getTextTracks",value:function(){return this.get("textTracks")}},{key:"getVideoEmbedCode",value:function(){return this.get("videoEmbedCode")}},{key:"getVideoId",value:function(){return this.get("videoId")}},{key:"getVideoTitle",value:function(){return this.get("videoTitle")}},{key:"getVideoWidth",value:function(){return this.get("videoWidth")}},{key:"getVideoHeight",value:function(){return this.get("videoHeight")}},{key:"getVideoUrl",value:function(){return this.get("videoUrl")}},{key:"getVolume",value:function(){return this.get("volume")}},{key:"setVolume",value:function(e){return this.set("volume",e)}}])&&r(e.prototype,t),n&&r(e,n),Player}();return e||(x=function(){for(var e,t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n=0,r=t.length,o={};n<r;n++)if((e=t[n])&&e[1]in document){for(n=0;n<e.length;n++)o[t[0][n]]=e[n];return o}return!1}(),C={fullscreenchange:x.fullscreenchange,fullscreenerror:x.fullscreenerror},j={request:function(o){return new Promise(function(e,t){function n(){j.off("fullscreenchange",n),e()}j.on("fullscreenchange",n);var r=(o=o||document.documentElement)[x.requestFullscreen]();r instanceof Promise&&r.then(n).catch(t)})},exit:function(){return new Promise(function(t,e){var n,r;j.isFullscreen?(n=function e(){j.off("fullscreenchange",e),t()},j.on("fullscreenchange",n),(r=document[x.exitFullscreen]())instanceof Promise&&r.then(n).catch(e)):t()})},on:function(e,t){var n=C[e];n&&document.addEventListener(n,t)},off:function(e,t){var n=C[e];n&&document.removeEventListener(n,t)}},Object.defineProperties(j,{isFullscreen:{get:function(){return Boolean(document[x.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[x.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[x.fullscreenEnabled])}}}),q=j,function(e){function n(e){"console"in window&&console.error&&console.error("There was an error creating an embed: ".concat(e))}var t=0<arguments.length&&void 0!==e?e:document;[].slice.call(t.querySelectorAll("[data-vimeo-id], [data-vimeo-url]")).forEach(function(t){try{if(null!==t.getAttribute("data-vimeo-defer"))return;var e=_(t);F(s(e),e,t).then(function(e){return N(e,t)}).catch(n)}catch(e){n(e)}})}(),function(e){var r=0<arguments.length&&void 0!==e?e:document;window.VimeoPlayerResizeEmbeds_||(window.VimeoPlayerResizeEmbeds_=!0,window.addEventListener("message",function(e){if(c(e.origin)&&e.data&&"spacechange"===e.data.event)for(var t=r.querySelectorAll("iframe"),n=0;n<t.length;n++)if(t[n].contentWindow===e.source){t[n].parentElement.style.paddingBottom="".concat(e.data.data[0].bottom,"px");break}}))}(),function(e){var u=0<arguments.length&&void 0!==e?e:document;window.VimeoSeoMetadataAppended||(window.VimeoSeoMetadataAppended=!0,window.addEventListener("message",function(e){if(c(e.origin)){var t=E(e.data);if(t&&"ready"===t.event)for(var n,r=u.querySelectorAll("iframe"),o=0;o<r.length;o++){var i=r[o],a=i.contentWindow===e.source;n=i.src,/^https:\/\/player\.vimeo\.com\/video\/\d+/.test(n)&&a&&new Player(i).callMethod("appendVideoMetadata",window.location.href)}}}))}()),Player});

define('Saralux.Core.Forms.Address.View',	[
	'saralux_core_forms_address.tpl',

    'Saralux.Core.Checkout.Context.Model',
	
	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_forms_address_tpl,

    CheckoutContextModel,
	
	Utils,
	jQuery,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function FormsAddressView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.firstAddress = options.firstAddress;
		this.customerInfo = options.customerInfo;
		
        this.calculateShippingEstimate = options.calculateShippingEstimate;
        // console.log('calculateShippingEstimate', this.calculateShippingEstimate);

        this.cart_component = this.container.getComponent('Cart');

        this.checkoutContextModel = CheckoutContextModel.getInstance();

        this.countries = options.countries;
        this.allStates = options.allStates;
        this.states = options.states;
        // console.log('FormsAddressView countries', this.countries);
        // console.log('FormsAddressView allStates', this.allStates);
        // console.log('FormsAddressView states', this.states);

        this.template = saralux_core_forms_address_tpl;
    }

    FormsAddressView.prototype = Object.create(SCView.prototype);
    FormsAddressView.prototype.constructor = FormsAddressView;

    FormsAddressView.prototype.getEvents = function () {
        return {
            'change [data-change="m360-slxc-fa-sel-country"]': "selectCountry",
            'focusout [id="forms-address-full-name"]': "validateFullName",
            'focusout [id="forms-address-phone"]': "validatePhone",
            'focusout [id="forms-address-address-1"]': "validateAddr1",
            'focusout [id="forms-address-city"]': "validateCity",
            'focusout [id="forms-address-zip"]': "validateZip",
            'change [id="forms-address-state"]': "validateState",
            'change [id="forms-address-country"]': "validateCountry"
        }
    }

    FormsAddressView.prototype.selectCountry = function(e) {
        var selectedCountryCode = this.$("#"+e.currentTarget.id).val();
        // console.log('selectedCountryCode', selectedCountryCode);
        
        this.states = [];
        
        for(var i = 0; i < this.allStates.length; i++) {
            if(this.allStates[i].countrycode == selectedCountryCode) {
                this.states = this.allStates[i].states;
                break;
            }
        }

        // console.log('states', this.states);

        if(selectedCountryCode != 'select' && this.states.length == 0) {
            this.$("#forms-address-state").parent().html(
                "<input type='text' placeholder='"+Utils.translate('Enter State name')+"' name='forms-address-state' id='forms-address-state' class='form-control' required />" +
                "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
            );
        } else {
            /* this.$("#forms-address-state").parent().html(
                "<select name='forms-address-state' id='forms-address-state' class='form-control' required style='padding: 7px;'>" +
                "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
            ); */

            var stateOptions = "";
            if(this.states.length == 0) {
                stateOptions = "<option value='select'>"+ Utils.translate("Select State") +"</option>";
            } else {
                for(var i = 0; i < this.states.length; i++) {
                    stateOptions = stateOptions + "<option value='"+this.states[i].code+"'>" + this.states[i].name + "</option>";
                }
            }

            // this.$("#forms-address-state").html(stateOptions);
            this.$(".state-container").html(
                "<select name='forms-address-state' id='forms-address-state' class='form-control' required style='padding: 7px;'>" +
                stateOptions + "</select>" +
                "<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
            );
        }
    }

    FormsAddressView.prototype.validateFullName = function(e) {
        var fullName = this.$(e.currentTarget).val().trim();
        this.$(e.currentTarget).val(fullName);

        if (fullName == '') {
            this.$('#forms-address-full-name').siblings("p").addClass("err");
        } else {
            this.$('#forms-address-full-name').siblings("p").removeClass("err");
        }
    }

    FormsAddressView.prototype.validatePhone = function(e) {
        if (this.$("#"+e.currentTarget.id).val() == '') {
            this.$('#forms-address-phone').siblings("p").addClass("err");
        } else {
            var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;

            if (!regex.test(this.$("#"+e.currentTarget.id).val())) {
                this.$('#forms-address-phone').siblings("p").addClass("err");
                // this.$('#forms-address-phone').focus();
            } else {
                this.$('#forms-address-phone').siblings("p").removeClass("err");
            }
        }
    }

    FormsAddressView.prototype.validateAddr1 = function(e) {
        var addr1 = this.$(e.currentTarget).val().trim();
        this.$(e.currentTarget).val(addr1);

        if (addr1 == '') {
			this.$('#forms-address-address-1').siblings("p").addClass("err");
		} else {
			this.$('#forms-address-address-1').siblings("p").removeClass("err");
		}
    }

    FormsAddressView.prototype.validateCity = function(e) {
        var city = this.$(e.currentTarget).val().trim();
        this.$(e.currentTarget).val(city);

        if (city == '') {
			this.$('#forms-address-city').siblings("p").addClass("err");
		} else {
			this.$('#forms-address-city').siblings("p").removeClass("err");
		}
    }

    FormsAddressView.prototype.validateZip = function(e) {
        var self = this;

        var zipcode = this.$(e.currentTarget).val().trim();
        this.$(e.currentTarget).val(zipcode);

        if(zipcode == '') {
			this.$('#forms-address-zip').siblings("p").addClass("err");
		} else {
			var selectedCountryCode = $("#forms-address-country").val();

            if(this.calculateShippingEstimate && selectedCountryCode) {
                var zip = this.$("#forms-address-zip").val();
                var country = this.$("#forms-address-country").val();
    
                this.cart_component.estimateShipping({
                    address: {
                        zip: zip,
                        country: country
                    }
                }).done(function(res) {
                    console.log('estimateShipping done', res);
                    // self.checkoutContextModel.set('shippingAddress', selectedAddress);
                    self.cart_component.getShipMethod().then(function(shipmethod) {
                        console.log('getShipMethod done', shipmethod);
                        if(shipmethod.internalid) {
                            self.checkoutContextModel.set('shippingMethod', shipmethod);
                        } else {
                            self.checkoutContextModel.set('shippingMethod', null);
                        }
                    });
                });
            }

			if(selectedCountryCode == 'US') {
				var regex = /^[0-9]{5}(?:-[0-9]{4})?$/;

				if (!regex.test(this.$("#"+e.currentTarget.id).val())) {
					this.$('#forms-address-zip').siblings("p").addClass("err");
					// this.$('#forms-address-zip').focus();
				} else {
					this.$('#forms-address-zip').siblings("p").removeClass("err");
				}
			} else {
				this.$('#forms-address-zip').siblings("p").removeClass("err");
			}
		}
    }

    FormsAddressView.prototype.validateState = function(e) {
        if (this.$("#"+e.currentTarget.id).val() == "select" || this.$("#"+e.currentTarget.id).val() == null) {
			this.$("#"+e.currentTarget.id).siblings("p").addClass("err");
		} else {
			this.$("#"+e.currentTarget.id).siblings("p").removeClass("err");
		}
    }

    FormsAddressView.prototype.validateCountry = function(e) {
        if (this.$("#"+e.currentTarget.id).val() == "select" || this.$("#"+e.currentTarget.id).val() == null) {
			this.$("#"+e.currentTarget.id).siblings("p").addClass("err");
		}
		else {
			this.$("#"+e.currentTarget.id).siblings("p").removeClass("err");
		}
    }

    FormsAddressView.prototype.getContext = function () {
        return {
            countries: this.countries,
            customerInfo: this.customerInfo
        }
    }

    return FormsAddressView;
});

define('Saralux.Core.Forms.CreditCard.View',	[
	'saralux_core_forms_credit_card.tpl',

	'Saralux.Core.CommonLibraries.General',
	
	'Utils',
	'jQuery',
	'SCView'
], function (
	saralux_core_forms_credit_card_tpl,

	CoreCLGeneral,
	
	Utils,
	jQuery,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function FormsCreditCardView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.template = saralux_core_forms_credit_card_tpl;
		
		this.container = options.container;
		this.firstCard = options.firstCard;
		this.customerInfo = options.customerInfo;

		this.environment_component = this.container.getComponent('Environment');

		this.creditCardMap = {
			mastercard: this.environment_component.getConfig('pmIdMastercard'),
			visa: this.environment_component.getConfig('pmIdVisa'),
			amex: this.environment_component.getConfig('pmIdAmericanExpress'),
			discover: this.environment_component.getConfig('pmIdDiscover')
		};

		var paymentMethods = this.environment_component.getSiteSetting('paymentmethods');
		this.paymentMethods = CoreCLGeneral.formatPaymentMethods(paymentMethods);
	}

	FormsCreditCardView.prototype = Object.create(SCView.prototype);
	FormsCreditCardView.prototype.constructor = FormsCreditCardView;

	FormsCreditCardView.prototype.getEvents = function () {
		return {
			'input [id="forms-creditcard-card-number"]': "formatCardNumber",

			'focusout [id="forms-creditcard-card-holders-name"]': "validateCardName",
			'focusout [id="forms-creditcard-card-number"]': "validateCardNumber",
			'focusout [id="forms-creditcard-card-exp"]': "validateCardExp",
			'focusout [id="forms-creditcard-card-code"]': "validateCardSecCode",
			'click [data-action="cc-methods-click"]': "ccMethodsClick",
			'keyup [data-keyup="cc-expiry-keyup"]': 'ccExpiryKeyUpDown',
			'keydown [data-keydown="cc-expiry-keydown"]': 'ccExpiryKeyUpDown'
		}
	}

	FormsCreditCardView.prototype.formatCardNumber = function (e) {
		var cardNumber = this.$(e.currentTarget).val().replace(/ /g,'');

		var formattedCardNumber = CoreCLGeneral.getFormattedCreditCardNumber(cardNumber);

		this.$(e.currentTarget).val(formattedCardNumber);
	}
	
	FormsCreditCardView.prototype.ccExpiryKeyUpDown = function (e) {
		var inputLength = e.target.value.length;
	
		if(e.keyCode == 8 && inputLength === 2){
			var thisVal1 = e.target.value.slice(0,-1);
			$(e.target).val(thisVal1);
		} else {
			if(inputLength === 2){
				var thisVal2 = e.target.value;
				thisVal2 += '/';
				$(e.target).val(thisVal2);
			}
		}
	}

	FormsCreditCardView.prototype.ccMethodsClick = function (e) {
		this.$('.methods input[type="radio"]').attr('checked', false);
		this.$(e.currentTarget).find('input[type="radio"]').attr('checked', true);
		this.$(".methods").removeClass('selected');

		if(this.$(e.currentTarget).find('input[type="radio"]').is(':checked')) {
			this.$(e.currentTarget).addClass('selected');
			this.$('.forms-creditcard-payment-method-p').removeClass("err");
		}

		if(this.$("#forms-creditcard-card-number").val() != "") {
			this.$("#forms-creditcard-card-number").trigger("focusout");
		}
		if(this.$("#forms-creditcard-card-code").val() != "") {
			this.$("#forms-creditcard-card-code").trigger("focusout");
		}
	}

  	FormsCreditCardView.prototype.validateCardName = function(e) {
		if(this.$('input[name="forms-creditcard-payment-method"]:checked').length == 0) {
			if(this.$('.payment-method-section-content').is(":visible")) {
				this.$('.forms-creditcard-payment-method-p').addClass("err");
			}
		}

        if(this.$(e.currentTarget).val()=='') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			var regex = /^[a-zA-Z]+([\sa-zA-Z]+)?[a-zA-Z]+$/;
	  
			if(!regex.test(this.$(e.currentTarget).val())) {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
			  	this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		}
  }

	FormsCreditCardView.prototype.validateCardNumber = function(e) {
		this.$(e.currentTarget).siblings("p").removeClass("err");

		if(this.$('input[name="forms-creditcard-payment-method"]:checked').length == 0) {
			this.$('.forms-creditcard-payment-method-p').addClass("err");
		}

		if(this.$(e.currentTarget).val()=='') {
			this.$(e.currentTarget).siblings("p.err-1").addClass("err");
		} else {
			if(this.$('.forms-creditcard-payment-method:checked').is(':checked')) { 
				this.$(e.currentTarget).siblings("p").removeClass("err");
				var cardNumber = this.$(e.currentTarget).val().replace(/ /g,'');

				var formattedCardNumber = CoreCLGeneral.getFormattedCreditCardNumber(cardNumber);

				this.$(e.currentTarget).val(formattedCardNumber);

				var dataCardType = this.$('.forms-creditcard-payment-method:checked').attr('data-card-type');
				dataCardType = dataCardType?dataCardType.toLowerCase():"";
				var cardId = this.$('.forms-creditcard-payment-method:checked').val();

				var regex = /^[0-9]{16}$/;
				if(parseInt(cardId) == parseInt(this.creditCardMap.discover)) { // discover
					regex = /^65[4-9][0-9]{13}|64[4-9][0-9]{13}|6011[0-9]{12}|(622(?:12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[01][0-9]|92[0-5])[0-9]{10})$/;
				} else if (parseInt(cardId) == parseInt(this.creditCardMap.mastercard)) { // mastercard
					regex = /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/;
				} else if (parseInt(cardId) == parseInt(this.creditCardMap.visa)) { // visa
					regex = /^4[0-9]{12}(?:[0-9]{3})?$/;
				} else if (parseInt(cardId) == parseInt(this.creditCardMap.amex)) { // american express
					regex = /^3[47][0-9]{13}$/;
				}
				
				if(!regex.test(cardNumber)) {
					this.$(e.currentTarget).siblings("p.err-1").addClass("err");
				} else {
					this.$(e.currentTarget).siblings("p").removeClass("err");
				}
			} else {
				this.$(e.currentTarget).siblings("p.err-2").addClass("err");
			}
		}
	}

	FormsCreditCardView.prototype.validateCardExp = function(e) {
		if(this.$(e.currentTarget).val()=='') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			var regex = /^(0[1-9]|1[0-2])\/([0-9]{4}|[0-9]{2})$/;

			var flag = 0;
			var currentYear = new Date().getFullYear();
			var currentMonth = new Date().getMonth() + 1;
			var temp = this.$(e.currentTarget).val().split("/");

			if (temp[1] === undefined || temp[1]=== null) {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				if(temp[1].length === 2){
					var newVal = temp[0]+'/20'+temp[1];
					this.$(e.currentTarget).val(newVal);
				}

				var newTemp = this.$(e.currentTarget).val().split("/");
				
				if(newTemp[0] < currentMonth || newTemp[1] < currentYear) {
					flag = 1;
				}
				if(newTemp[0] < currentMonth && newTemp[1] == currentYear) {
					flag = 1;
				}
				if(newTemp[0] < currentMonth && newTemp[1] > currentYear) {
					flag = 0;
				}

				if(!regex.test(this.$(e.currentTarget).val()) || flag == 1) {
					this.$(e.currentTarget).siblings("p").addClass("err");
				} else {
					this.$(e.currentTarget).siblings("p").removeClass("err");
				}
			}
		}
  }

	FormsCreditCardView.prototype.validateCardSecCode = function(e) {
  		if(this.$(e.currentTarget).val()=='') {
			this.$('#forms-creditcard-card-code').siblings("p").addClass("err");
		} else {
			var pmId = this.$('.forms-creditcard-payment-method:checked').val();
			if (parseInt(pmId) == parseInt(this.creditCardMap.amex)) {
			  	var regex = /^[0-9]{4}$/;
			} else {
			  	var regex = /^[0-9]{3}$/;
			}
	  
			if(!regex.test(this.$(e.currentTarget).val())) {
				this.$('#forms-creditcard-card-code').siblings("p").addClass("err");
			} else {
			  	this.$('#forms-creditcard-card-code').siblings("p").removeClass("err");
			}
		}
  	}

	FormsCreditCardView.prototype.getContext = function () {
		return {
			firstCard: this.firstCard,
			paymentMethods: this.paymentMethods,
			customerInfo: this.customerInfo,

			cardSelectedImage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-select-card.png'))
		}
	}

	return FormsCreditCardView;
});

define('Saralux.Core.Forms',   [
	
],   function (
	
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {

		}
	};
});


define('Saralux.Core.InvitePeopleSV.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function InvitePeopleSVSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/InvitePeopleSV/SuiteScript2/InvitePeopleSV.Service.ss"
                ), true
            );
        }
    }

    InvitePeopleSVSS2Model.prototype = Object.create(SCModel.prototype);
    InvitePeopleSVSS2Model.prototype.constructor = InvitePeopleSVSS2Model;
 
    return InvitePeopleSVSS2Model;
});

define('Saralux.Core.InvitePeopleSV.View',[
	'saralux_core_invitepeoplesv.tpl',

	'Saralux.Core.CommonLibraries.General',

	'Saralux.Core.InvitePeopleSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_invitepeoplesv_tpl,

	CoreCLGeneral,

	InvitePeopleSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';
	
	var SCView = SCViewModule.SCView;

	function InvitePeopleSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);

		var self = this;
		this.template = saralux_core_invitepeoplesv_tpl;

		this.container = options.container;
		this.crmTags = options.crmTags;
		this.orgId = options.orgId;

		this.environment_component = options.container.getComponent('Environment');
		var subsidiaries = this.environment_component.getSiteSetting('subsidiaries');
		this.defaultSubsidiary = CoreCLGeneral.getDefaultSubsidiary(subsidiaries);

		this.model = new InvitePeopleSVSS2Model();
		//this.$("#send-invite-create-cust").attr("disabled", true);

		this.parent = options.parent;
		this.key = options.key;
		this.newCustomerEmailTemplateId = this.parent.newCustomerEmailTemplateId;
		this.existingCustomerEmailTemplateId = this.parent.existingCustomerEmailTemplateId;
		this.activeModuleId = this.parent.activeModuleId;

		this.preexistingAccountsError = false;
		this.isLoading = false;

		this.selectedInviteList = [];

		// this.defaultPagination = {
		// 	index: 0,
		// 	pageSize: 10,
		// 	count: 0,
		// 	from: 0,
		// 	to: 0,
		// 	totalPages: 0,
		// 	displayWindow: 1,
		// 	pages: []
		// };
		// this.pagination = Utils.deepCopy(this.defaultPagination);
		this.pagination = {
			currentPage: 1,
			pageSize: 5,
			currentPageStartIndex: null,
			currentPageEndIndex: null,
			currentPageResults: null,
			totalResults: null,
			totalPages: null,
			firstSetOfPages: [],
			firstSetOfDots: null,
			secondSetOfPages: [],
			secondSetOfDots: null,
			thirdSetOfPages: []
		};

		this.selectedInvitesCount = 0;
		this.selectedInvitesBtnView = false;
		this.selectedInvitesTableView = false;
		this.searchString = "";

		this.data = [];
		this.selectedData = [];
		this.selectedInvites = [];
	}

	InvitePeopleSVView.prototype = Object.create(SCView.prototype);
	InvitePeopleSVView.prototype.constructor = InvitePeopleSVView;
	
	InvitePeopleSVView.prototype.getEvents = function () {
		return {
			'click [data-action="switch-tab-click"]' : "switchTabClick",
			'click [data-action="select-record-click"]' : "selectRecordClick",
			'click [data-action="view-selected-records"]' : "viewSelectedRecords",
			'click [data-action="add-row-click"]' : "addRowClick",
			'click [data-action="remove-row-click"]': "removeRowClick",
			'click [data-action="send-invite-create-cust-click"]' : "sendInviteCreateCustomerClick",
			'click [data-action="send-invite-click"]' : "sendInviteClick",
			'click [data-action="m360-ip-search-customers"]' : "searchForCustomers",
			'click [data-action="m360-slxc-ipsv-goto-prev"]': "goToPrev",
			'click [data-action="m360-slxc-ipsv-goto-page"]': "goToPage",
			'click [data-action="m360-slxc-ipsv-goto-next"]': "goToNext",
			'focusout [data-focusout="m360-slxc-focusout-val"]': "focusoutVal",
			
		}
	}

	InvitePeopleSVView.prototype.focusoutVal = function (e) {
		console.log('target',e.currentTarget);
		//this.$(e.currentTarget).siblings("p").text(Utils.translate("this is duplicate"));
		var fieldVal = this.$(e.currentTarget).val();
		var proceedFlag = true;
		if(fieldVal.trim() === ""){
			this.$(e.currentTarget).siblings("p").show();
			proceedFlag = false;
		}else{
			this.$(e.currentTarget).siblings("p").hide();
		}

		if(proceedFlag && e.currentTarget.id == 'email-text-field'){
			var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
			var charLength = this.$(e.currentTarget).val().length;
			if (!regex.test(this.$(e.currentTarget).val()) || charLength>254) {
				proceedFlag = false;
				this.$(e.currentTarget).siblings("p").show();
			}
		}

		if(!proceedFlag){
			$("#send-invite-create-cust").prop('disabled', true);
		}else{
			$("#send-invite-create-cust").prop('disabled', false);
		}
	}
	
	InvitePeopleSVView.prototype.clearModalData = function () {
		var rowCount = this.$('#new-email-invite-row-count').val();
		
		this.$("#new-email-invite-0").find('input[name="email"]').val("");
		this.$("#new-email-invite-0").find('input[name="first-name"]').val("");
		this.$("#new-email-invite-0").find('input[name="last-name"]').val("");
		this.$("#new-email-invite-0").find('input[name="email"]').siblings("p").hide();
		this.$("#new-email-invite-0").find('input[name="first-name"]').siblings("p").hide();
		this.$("#new-email-invite-0").find('input[name="last-name"]').siblings("p").hide();
		if(rowCount > 1) {
			for (var i = 1; i < rowCount; i++) {
				this.$("#new-email-invite-"+i).remove();
			}
		}
	}

	InvitePeopleSVView.prototype.sendInviteClick = function (e) {
		var self = this;

		this.$(e.currentTarget).attr("disabled", true);// this.$("#send-invite-create-cust").attr("disabled", true);
		this.$(e.currentTarget).text(Utils.translate("Send Invites (Processing...)"));
		
		console.log('selectedInvites : ', this.selectedInvites);		
		this.isLoading = true;
		var data = {
			action: 'send_invite',
			createNewCustomer: false,
			data: this.selectedInvites,
			inviteList:this.selectedInviteList,
			emailTemplateId: this.existingCustomerEmailTemplateId,
			key: this.key
		};
		
		console.log(data);

		this.model.clear({ silent: true });
		this.model.save(data).then(function(res){
			console.log('sendInviteClick res : ', res);
			if(!res.hasError){
				self.parent.postInvitePeopleProcessing(self.selectedInvites);
			}
			self.render();
			
			self.$(e.currentTarget).attr("disabled", false);
			self.$(e.currentTarget).text(Utils.translate("Send Invites"));
		});
	}

	InvitePeopleSVView.prototype.checkDuplicateEntriesInNewEmailList = function (inviteList) {
		var inviteeEmails = [];
		
		for (var i = 0; i < inviteList.length; i++) {
			inviteeEmails.push(inviteList[i].email);
		}

		var duplicateFound = false;
		for (var i = 0; i < inviteeEmails.length; i++) {
			var first_index = inviteeEmails.indexOf(inviteeEmails[i]);
			var last_index = inviteeEmails.lastIndexOf(inviteeEmails[i]);

			console.log('first_index : ', first_index);
			console.log('last_index : ', last_index);

			if(first_index !== last_index){
				duplicateFound = true;
				inviteList[i].duplicateEntry = true;
			}
		}
		if(duplicateFound){
			this.addNewEmailInputs(inviteList)
		}
		console.log('inviteList : ', inviteList);
		// this.render();
		this.$('#tab-switch-2').click();
		return duplicateFound;
	}
	
	InvitePeopleSVView.prototype.sendInviteCreateCustomerClick = function (e) {
		var self = this;		
		var inviteList = [];
		var duplicateEmailFound = false;
		this.$('.parent-box .error-message').remove();		
		var rowCount = this.$('#new-email-invite-row-count').val();
		if(rowCount == 0){

		}
		for (var i = 0; i < rowCount; i++) {
			if(inviteList.length > 0){
				var email = this.$("#new-email-invite-"+i).find('input[name="email"]').val();
				for (var i = 0; i < inviteList.length; i++) {
					this.$('#new-email-invite-'+(i+1)).find('.email-input').siblings("p").hide();
					if(inviteList[i].email == email){
						this.duplicateEmailFound = true;						
						this.$('#new-email-invite-'+(i+1)).find('.email-input').addClass('err-input');//
						this.$('#new-email-invite-'+(i+1)).find('.email-input').siblings("p").text(Utils.translate("Duplicate Email Address"));
						this.$('#new-email-invite-'+(i+1)).find('.email-input').siblings("p").show();						
					}
				}
			}
			var obj = {
				firstName :  this.$("#new-email-invite-"+i).find('input[name="first-name"]').val(), 
				lastName :  this.$("#new-email-invite-"+i).find('input[name="last-name"]').val(),
				email :  this.$("#new-email-invite-"+i).find('input[name="email"]').val(),
				crmTags: this.crmTags,
				orgId: this.orgId
			}
			if(obj.firstName != "" && obj.email != "")
				inviteList.push(obj);
		}

		// var duplicateFound = this.checkDuplicateEntriesInNewEmailList(inviteList);

		if(!this.duplicateEmailFound && inviteList.length > 0){
			var data = {
				action: 'send_invite',
				inviteList: inviteList,
				createNewCustomer: true,
				defaultSubsidiary: this.defaultSubsidiary,
				emailTemplateId: this.newCustomerEmailTemplateId,
				key: this.key
			};
			console.log('send_invite:-',data);
			
			this.$(e.currentTarget).attr("disabled", true);
			this.$(e.currentTarget).text(Utils.translate("Send Invites (Processing...)"));
			
			this.model.clear({ silent: true });
			this.model.save(data).then(function(res){
				if(res.preexistingAccounts){
					self.preexistingAccountsError = true;					
					//self.("#existing-email-list").
					
					self.render();
					for(var i = 0  ; i <inviteList.length ;i++ ){
						self.$('#new-email-invite-'+i).find('.email-input').siblings("p").hide();
						self.$("#new-email-invite-"+i).find('input[name="email"]').val(inviteList[i].email);
						self.$("#new-email-invite-"+i).find('input[name="first-name"]').val(inviteList[i].firstName);
						self.$("#new-email-invite-"+i).find('input[name="last-name"]').val(inviteList[i].lastName);		
						if(res.preexistingAccounts.indexOf(inviteList[i].email) != -1){
							console.log('inside if');
							self.$('#new-email-invite-'+i).find('.email-input').addClass('err-input');//for preexisting ..
							self.$('#new-email-invite-'+i).find('.email-input').siblings("p").text(Utils.translate("Customer Already Exits in Database"));
							self.$('#new-email-invite-'+i).find('.email-input').siblings("p").show();
						}else{
							self.$('#new-email-invite-'+i).find('.email-input').addClass('err-input');//for Not preexisting ..
							self.$('#new-email-invite-'+i).find('.email-input').siblings("p").text(Utils.translate(""));
							self.$('#new-email-invite-'+i).find('.email-input').siblings("p").hide();
						}
						console.log(res.preexistingAccounts.indexOf(inviteList[i].email));
						if(i < inviteList.length-1){
							self.addRowClick({});
						}
						
					}
					console.log('calling switchTabTwoClick');
					self.switchTabTwoClick();
				}
				if(!res.hasError){
					self.parent.postInvitePeopleProcessing(res.newCustomers);
					self.$(".pre-sucess-box").hide()
					self.$(".post-sucess-box").show();
				}

				self.$(e.currentTarget).attr("disabled", false);
				self.$(e.currentTarget).text(Utils.translate("Send Invites"));
			});
		 }//else if(inviteList.length == 0){
		// 	self.$(e.currentTarget).attr("disabled", true);
		// }

	}
	
	InvitePeopleSVView.prototype.searchForCustomers = function (e) {
		var self = this;

		if (this.$("#search-text").val() === "") {
			this.searchString = "";
		}
		else {
			this.selectedInvitesTableView = false;
			this.searchString = this.$("#search-text").val();
			console.log('parent reviewers',this.parent.reviewers);
			var reviewerIdsList = [];
			this.parent.reviewers.forEach((reviewer)=> { reviewerIdsList.push(reviewer.customerId)}) ;
			console.log('reviewerIdList',reviewerIdsList);
			this.model.clear({ silent: true });
			this.model.save({
				action: 'search_customer',
				pagination: {
					currentPage: this.pagination.currentPage,
					pageSize: this.pagination.pageSize
				},
				searchString: this.searchString,
				activeModuleId: this.activeModuleId,
				moduleTableName: this.parent.moduleTableName,//can
				addedEntriesFilters: this.parent.addedEntriesFilters,
				selectedData: this.selectedData,
				alreadyExistingList:reviewerIdsList
			}).then(function(res){
				console.log('res:-searchCustomers:-',res)
				if(!res.hasError && res.data.customers) {
					self.data = res.data.customers
					// self.pagination.count = res.data.count;
					// self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					// self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					// self.pagination.to = (self.pagination.from + self.data.length) - 1;
					// self.generatePages();
					self.pagination.totalResults = res.data.totalResults;
					self.pagination.totalPages = res.data.totalPages;
					self.refreshPagination();
					console.log('self.selectedData.',self.selectedData);					
					console.log('self.data',self.data);
				}
				self.isLoading = false;
				self.render();
			});
		}		
	}

	InvitePeopleSVView.prototype.refreshPagination = function () {
		this.pagination.currentPageStartIndex = null;
		this.pagination.currentPageEndIndex = null;
		this.pagination.currentPageResults = this.data ? this.data.length : 0;
		this.pagination.firstSetOfPages = [];
		this.pagination.firstSetOfDots = null;
		this.pagination.secondSetOfPages = [];
		this.pagination.secondSetOfDots = null;
		this.pagination.thirdSetOfPages = [];

		if (this.pagination.currentPageResults > 0) {
			this.pagination.currentPageStartIndex = ((this.pagination.currentPage-1) * this.pagination.pageSize) + 1;
			this.pagination.currentPageEndIndex = this.pagination.currentPageStartIndex + this.pagination.currentPageResults - 1;
		}

		if (this.pagination.totalPages > 0 && this.pagination.currentPage > 0) {
			var startingPageRange = [];
			var currentPageRange = [];
			var endingPageRange = [];

			for (var i = 1; i <= this.pagination.totalPages && i <= 3; i++) {
				startingPageRange.push(i);
			}

			if (this.pagination.currentPage-1 > 0) {
				currentPageRange.push(this.pagination.currentPage-1);
			}
			currentPageRange.push(this.pagination.currentPage);
			if (this.pagination.currentPage+1 <= this.pagination.totalPages) {
				currentPageRange.push(this.pagination.currentPage+1);
			}
			if (currentPageRange.length != 3 && this.pagination.totalPages >= 3) {
				if (this.pagination.currentPage-2 > 0) {
					currentPageRange.push(this.pagination.currentPage-2);
				}
				if (this.pagination.currentPage+2 <= this.pagination.totalPages) {
					currentPageRange.push(this.pagination.currentPage+2);
				}
				currentPageRange.sort();
			}

			for (var i = this.pagination.totalPages-2; i <= this.pagination.totalPages; i++) {
				if (i > 0) {
					endingPageRange.push(i);
				}
			}

			if (currentPageRange[0] - startingPageRange[startingPageRange.length-1] > 1) {
				this.pagination.firstSetOfDots = true;
			}

			if (endingPageRange[0] - currentPageRange[currentPageRange.length-1] > 1) {
				this.pagination.secondSetOfDots = true;
			}

			for (var i = 0; i < currentPageRange.length; i++) {
				var index = startingPageRange.indexOf(currentPageRange[i]);
				if (index > -1) {
					startingPageRange.splice(index, 1);
				}

				var index = endingPageRange.indexOf(currentPageRange[i]);
				if (index > -1) {
					endingPageRange.splice(index, 1);
				}
			}

			this.pagination.firstSetOfPages = startingPageRange;
			this.pagination.secondSetOfPages = currentPageRange;
			this.pagination.thirdSetOfPages = endingPageRange;
		}
	}

	InvitePeopleSVView.prototype.goToPage = function(e) {
		this.pagination.currentPage = parseInt(this.$(e.currentTarget).attr('data-page'));
		this.searchForCustomers();
	}

	InvitePeopleSVView.prototype.goToPrev = function(e) {
		if (this.pagination.currentPage > 1) {
			this.pagination.currentPage -= 1;
			this.searchForCustomers();
		}
	}

	InvitePeopleSVView.prototype.goToNext = function(e) {
		if (this.pagination.currentPage < this.pagination.totalPages) {
			this.pagination.currentPage += 1;
			this.searchForCustomers();
		}
	}

	// InvitePeopleSVView.prototype.generatePages = function() {
	// 	this.pagination.pages = [];
	//
	// 	var index = this.pagination.index;
	// 	var totalPages = this.pagination.totalPages;
	//
	// 	for(var i = 0; i < totalPages; i++) {
	// 		this.pagination.pages.push({
	// 			index: i,
	// 			number: (i+1),
	// 			isActive: (index == i)?true:false
	// 		});
	// 	}
	// }

	InvitePeopleSVView.prototype.removeRowClick = function (e) {
		var self = this;
		var rowCount = this.$('#new-email-invite-row-count').val();
		this.$('#new-email-invite-row-count').val(--rowCount);

		this.$(e.currentTarget).parents(".individual-row").parent().remove();

		var counter = 1;
		this.$('.dynamic-inputs').children('div').each(function () {
			self.$(this).attr('id','new-email-invite-'+counter);
			self.$(this).attr('data-row-id',counter);
			counter++;
		});

		// change id and data-row-id as well
	}
	
	InvitePeopleSVView.prototype.addRowClick = function (e) {	
		var rowData = this.$(".first-row").html();
		
		var rowCount = this.$('#new-email-invite-row-count').val();

		console.log('rowCount : ',rowCount);

		this.$(".dynamic-inputs").append("<div id='new-email-invite-"+rowCount+"' data-row-id='"+rowCount+"'> </div>");
		
		this.$(".dynamic-inputs #new-email-invite-"+rowCount).append(rowData);
		self.$('#new-email-invite-'+rowCount).find('.email-input').removeClass('err-input');
		this.$('#new-email-invite-'+rowCount).find('.email-input').siblings("p").hide();
		this.$("#new-email-invite-"+rowCount).find('input[name="first-name"]').siblings("p").hide();		
		this.$(".dynamic-inputs label").remove();

		this.$('#new-email-invite-row-count').val(++rowCount);
	}

	InvitePeopleSVView.prototype.viewSelectedRecords = function (e) {		
		this.selectedInvitesTableView = true;

		this.render();
	}

	InvitePeopleSVView.prototype.selectRecordClick = function (e) {
		if (this.$(e.currentTarget).parents('tbody').hasClass('all-record-data')) {
			console.log('Inside if');
			var dataArrIndex = this.data.findIndex(a => a.id === this.data[this.$(e.currentTarget).attr('data-index')].id);
		}
		else {
			console.log('Inside else');
			var dataArrIndex = this.data.findIndex(a => a.id === this.selectedInvites[this.$(e.currentTarget).attr('data-index')].id);
		}
			
		console.log('e:-',this.$(e.currentTarget));	
		if (this.$(e.currentTarget).hasClass('selected-record')) {
			this.data[dataArrIndex].isSelected = false;	

			//var index = this.selectedInvites.findIndex(b => b.id === this.data[dataArrIndex].id);
			var index = this.selectedInvites.indexOf(this.data[dataArrIndex].id);			
			if (index !== -1) {
				this.selectedInvites.splice(index, 1);
			}
			var index2 = this.selectedData.indexOf(this.data[dataArrIndex].id);

			if(index2 !== -1){
				this.selectedData.splice(index2,1);
			}

		}
		else {
			this.data[dataArrIndex].isSelected = true;
			this.selectedData.push(this.data[dataArrIndex].id);			
			this.selectedInvites.push(this.data[dataArrIndex].id);
			this.selectedInviteList.push({id:this.data[dataArrIndex].id , email:this.data[dataArrIndex].email});
			
		}
		console.log('this.data',this.selectedData);
		//this.selectedData = this.data ;
		this.selectedInvitesCount = this.selectedInvites.length;

		if (this.selectedInvitesCount == 0) {
			this.selectedInvitesBtnView = false;
			this.selectedInvitesTableView = false;
		}
		else {
			this.selectedInvitesBtnView = true;
		}

		this.render();
	}
	
	InvitePeopleSVView.prototype.switchTabClick = function(e){

		this.$(e.currentTarget).parent(".tab-switch-header").find(".tab-switch").removeClass("active");
		this.$(e.currentTarget).parent(".tab-switch-header").find(".tab-switch div").remove();
		this.$(e.currentTarget).append("<div></div>");
		this.$(e.currentTarget).addClass("active");
		console.log('current target',e.currentTarget);
		this.$(e.currentTarget).parent(".tab-switch-header").siblings(".tab-switch-body").find(".tab-switch-data-body").hide();
		var clickedtab = this.$(e.currentTarget).attr('tab-switch-name');
		console.log('clickedtab',clickedtab);	
		this.$("." + clickedtab).show();
		this.$(`.tab-switch-footer`).hide();
		this.$(`.tab-switch-data-body`).hide();



		this.$(`#${clickedtab}-body`).show();
		this.$(`.${clickedtab}-footer`).show();

	}

	InvitePeopleSVView.prototype.switchTabTwoClick = function(){
		// var index = this.$('#'+e.currentTarget.id);//tab-switch-2
		this.$("#tab-switch-2").parent(".tab-switch-header").find(".tab-switch").removeClass("active");
		this.$("#tab-switch-2").parent(".tab-switch-header").find(".tab-switch div").remove();
		this.$("#tab-switch-2").append("<div></div>");
		this.$("#tab-switch-2").addClass("active");
		
		this.$("#tab-switch-2").parent(".tab-switch-header").siblings(".tab-switch-body").find(".tab-switch-data-body").hide();
		var clickedtab = this.$("#tab-switch-2").attr('tab-switch-name');
		console.log('clickedtab',clickedtab);	
		this.$("." + clickedtab).show();
		this.$(".tab-switch-2-footer").show();
	}

	InvitePeopleSVView.prototype.getContext = function () {
		return {
			data: this.data,
			pagination: this.pagination,
			selectedInvites: this.selectedInvites,
			preexistingAccountsError: this.preexistingAccountsError,

			selectedInvitesBtnView: this.selectedInvitesBtnView,
			selectedInvitesTableView: this.selectedInvitesTableView,
			selectedInvitesCount: this.selectedInvitesCount,
			searchString: this.searchString,
			modalName: this.parent.modalName ?this.parent.modalName:'Authors' ,

			imgSearchPeople: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-search-people.png')),
			defaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.jpg')),
			detailsReceived: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received-3.png')),
			imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),

			icons: {
				icnPlusBlueSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-plus-blue-sm.png')),
				icnWhiteTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-white-tick.png')),
				icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
				icnCrossRed: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-cross-red.png')),
			},
		}
	}

	return InvitePeopleSVView;
});


define('Saralux.Core.ManageSponsorshipSV.Advertisement.View',	[
	'saralux_core_managesponsorshipsv_advertisement.tpl',
  
	'Utils',
	'SCView',
  	'jQuery'
], function (
	saralux_core_managesponsorshipsv_advertisement_tpl,

	Utils,
	SCViewModule,
  	jQuery
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVAdvertisementView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.template = saralux_core_managesponsorshipsv_advertisement_tpl;
		
		this.parent = options.parent;
		
		this.activeView = null;
		this.searchText = "";

		this.sponsorships = [{
			id: 1,
			banner: null,
			name: "12-Class Package",
			location: "The Golf Club at Chelsea Piers",
			speciality: ['Putting Speciality',],
			coaches: 'Anthony Morris, John Smith',
			fromToDate: "07.10.2021 - 09.04.2022",
			category: 'Package Category',
			validity: '1 month',
			price: "$280",
			status: {
				isDraft: true,
				isPublished: false,
				isClosed: false,
				isCancelled: false,
			}
		}];
	}

	ManageSponsorshipSVAdvertisementView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVAdvertisementView.prototype.constructor = ManageSponsorshipSVAdvertisementView;
	
	ManageSponsorshipSVAdvertisementView.prototype.getEvents = function () {
		return {
			'click [data-action="upload-click"]': 'uploadClick',
			'change [data-change="file-change"]': "fileChange",
			'click [data-action="remove-image-click"]': "removeImageClick",
		};
	}

	ManageSponsorshipSVAdvertisementView.prototype.uploadClick = function (e) {
		e.stopImmediatePropagation();
	  this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
	},

	ManageSponsorshipSVAdvertisementView.prototype.fileChange = function (e) {
		this.readFileName(e.target, this.$(e.currentTarget));
	}

	ManageSponsorshipSVAdvertisementView.prototype.removeImageClick = function (e) {
		this.$("#upload-document").val('');
		this.$('.upload-image-box').css({'background-color':'#fafafa', 'border-style':'dashed'});
		this.$('.uploaded-files-box').hide();
		this.$('.upload-image').show();
		this.$('.submit-request').prop("disabled", true);
	},

	ManageSponsorshipSVAdvertisementView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			sponsorships: this.sponsorships,
			activeView: this.activeView,

			pagination: this.pagination,
			
			defaultBanner: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/default-cover-sponsorship.png')
    	),
			defaultTeam: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/default-team.jpg')
    	),
      
			icons: {
				imgUpload: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-upload.png')
				),
				icnRemoveMd: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')
				),
				icnStatusNotStarted: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-not-started.png')
				)
			}
		}
	}

	return ManageSponsorshipSVAdvertisementView;
});

define('Saralux.Core.ManageSponsorshipSV.Benefits.One.Time.Item.Discount.View', [
	'saralux_core_managesponsorshipsv_benefits_one_time_item_discount.tpl',

	'Saralux.Core.ManageSponsorshipSV.SS2Model',

	'Handlebars',
	'Utils',
	'SCView',
	'jQuery'
], function (
	saralux_core_managesponsorshipsv_benefits_one_time_item_discount_tpl,

	ManageBenefitsOneTimeItemDiscountSVSS2Model,
	Handlebars,
	Utils,
	SCViewModule,
	jQuery
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVBenefitsOneTimeItemDiscountView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		Handlebars.registerHelper('showDefault', function (options) {
			return options ? options : "-";
		})

		Handlebars.registerHelper('formatCurrency', function (options) {
			return options ? "$" + options : "-";
		})

		this.template = saralux_core_managesponsorshipsv_benefits_one_time_item_discount_tpl;

		this.parent = options.parent;


		this.model = new ManageBenefitsOneTimeItemDiscountSVSS2Model()

		this.activeView = null;
		this.searchText = "";
		this.benefitId = this.parent.benefitId
		this.sponsorshipRegistrationId = this.parent.sponsorshipRegistrationId
		this.benefitDetails = {
			'benefitTitle':'Discounted Attendee Registration (Event)',
			'benefitDesc':'You will receive two free VIP tickets with preferential seating to the event',
			'benefitCol':[
				{
					'key':'Sponsorship',
					'value':'Gold Sponsorship'
				},
				{
					'key':'Benefit',
					'value':'Benefit Value goes here'
				},
				{
					'key':'Benefit Type',
					'value':'Discounted Attendee Registration'
				}
			],
			'benefitEventCol':[
				{
					'key':'Ad Type',
					'value':'Ad Type goes here'
				},
				{
					'key':'Ad Media',
					'value':'Value'
				},
				{
					'key':'Ad Size',
					'value':'Value'
				},
				{
					'key':'Ad Placement',
					'value':'Value'
				},
				{
					'key':'Ad Tergenting Criteria',
					'value':'Value'
				},
				{
					'key':'Ad Impression',
					'value':'Value'
				},
				{
					'key':'Ad Start Date',
					'value':'03.03.2023'
				},
				{
					'key':'Ad End Date',
					'value':'04.04.2023'
				}
			]
		}
		this.attendees = {
			'attendeesTableCol':[
				{
					'attendeeNo': '1',
					'firstName': 'John',
					'lastName': 'smith',
					'email': 'johnsmith@email.com',
					'attendeeId': 'ABCDE123456',
					'registrationId': 'XYZ7890',
				},
				{
					'attendeeNo': '2',
					'firstName': 'Adam',
					'lastName': 'smith',
					'email': 'Adamsmith@email.com',
					'attendeeId': 'ABCDE123456',
					'registrationId': 'XYZ7890',
				},
				{
					'attendeeNo': '3',
					'firstName': 'Harry',
					'lastName': 'smith',
					'email': 'Harrysmith@email.com',
					'attendeeId': 'ABCDE123456',
					'registrationId': 'XYZ7890',
				},
				{
					'attendeeNo': '4',
					'firstName': 'Michael',
					'lastName': 'smith',
					'email': 'Michaelsmith@email.com',
					'attendeeId': 'ABCDE123456',
					'registrationId': 'XYZ7890',
				},
				
			]

		}
		// this.getBenefitsDetails()
	}

	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype.constructor = ManageSponsorshipSVBenefitsOneTimeItemDiscountView;
	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype.getEvents = function () {
		return {
			"change [data-action='m360-slxc-upload-change']": "insertInArray",
			"click [data-action='m360-slxc-remove-document']": "removeDocument",
			"click [data-action='m360-slxc-upload-doc-upload-image']": "uploadImage",
			"click [data-action='m360-slxc-upload-doc-remove-file']": "removeFile"
		};
	}

	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype.uploadImage = function(e){
		console.log("Uplode file");
		e.stopImmediatePropagation();
	  	jQuery('#upload-document').trigger('click');
	}
	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype.removeFile = function(e){
		jQuery('#document-upload-model').show();
		this.$("#btn-submit").prop('disabled',true);
		jQuery( "#remove-documents-model").hide();
	}

	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype.removeDocument = function (e) {
		console.log('removeDocument');
	}
	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype.insertInArray = function (e) {
		var self = this;
        var uploadedDoc = jQuery('#upload-document')[0].files[0]
		console.log('upload-change',uploadedDoc);
        if(uploadedDoc){
			jQuery('#document-upload-model').hide();
			this.$("#btn-submit").prop('disabled',false);
			jQuery( "#remove-documents-model").show();
		}
	}

	ManageSponsorshipSVBenefitsOneTimeItemDiscountView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			benefitDetails: this.benefitDetails,
			attendees: this.attendees,
			sponsorshipRegistrationId: this.sponsorshipRegistrationId,
			defaultProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-person.png')
			),

			icons: {
				imgBenefits1: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-benefits1.png')
				),
				icnAttendees: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-attendees.png')
				),
				icnEditMd: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-edit-md.png')
				),
				icnStatusCompleted: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-approved.png')
				),
				icnStatusNotStarted: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-not-started.png')
				),
				icnOrg: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-org.png')
				),
				icnView: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-view.png')
				),
				icnCloselg: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-remove-lg.png')
				),
				icnUploadSuccess: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-5/img-uploaded-success.png')
				),
			}
		}
	}

	return ManageSponsorshipSVBenefitsOneTimeItemDiscountView;
});

define('Saralux.Core.ManageSponsorshipSV.Benefits.View',	[
	'saralux_core_managesponsorshipsv_benefits.tpl',
	'Saralux.Core.ManageSponsorshipSV.SS2Model',
	'Saralux.Core.ManageSponsorshipSV.Benefits.One.Time.Item.Discount.View',

	'Handlebars',
	'Utils',
	'SCView',
  	'jQuery'
], function (
	saralux_core_managesponsorshipsv_benefits_tpl,

	ManageBenefitsSVSS2Model,
	ManageSponsorshipSVBenefitsOneTimeItemDiscountView,
	Handlebars,
	Utils,
	SCViewModule,
  	jQuery
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVBenefitsView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		Handlebars.registerHelper('showDefault',function(options){
			return options?options:"-";
		})
	
		Handlebars.registerHelper('formatCurrency',function(options){
			return options?"$"+options:"-";
		})

		this.template = saralux_core_managesponsorshipsv_benefits_tpl;
		
		this.parent = options.parent;
		

		this.model =new ManageBenefitsSVSS2Model()
		
		this.activeView = null;
		this.searchText = "";
		this.benefitId = this.parent.benefitId
		this.sponsorshipRegistrationId = this.parent.sponsorshipRegistrationId
		this.benefitDetails = {
			'benefitTitle':'Discounted Attendee Registration (Event)',
			'benefitDesc':'You will receive two free VIP tickets with preferential seating to the event',
			'benefitCol':[
				{
					'key':'Sponsorship',
					'value':'Gold Sponsorship'
				},
				{
					'key':'Benefit',
					'value':'Benefit Value goes here'
				},
				{
					'key':'Benefit Type',
					'value':'Discounted Attendee Registration'
				}
			],
			'benefitEventCol':[
				{
					'key':'Ad Type',
					'value':'Ad Type goes here'
				},
				{
					'key':'Ad Media',
					'value':'Value'
				},
				{
					'key':'Ad Size',
					'value':'Value'
				},
				{
					'key':'Ad Placement',
					'value':'Value'
				},
				{
					'key':'Ad Tergenting Criteria',
					'value':'Value'
				},
				{
					'key':'Ad Impression',
					'value':'Value'
				},
				{
					'key':'Ad Start Date',
					'value':'03.03.2023'
				},
				{
					'key':'Ad End Date',
					'value':'04.04.2023'
				}
			]
		}

		this.childViews = {
			'ManageSponsorshipSV.Benefits.One.Time.Item.Discount': function () {
				return new ManageSponsorshipSVBenefitsOneTimeItemDiscountView({
					container: this.container,
					parent: this
				});
			},
		};

		this.getBenefitsDetails()
	}

	ManageSponsorshipSVBenefitsView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVBenefitsView.prototype.constructor = ManageSponsorshipSVBenefitsView;
	
	ManageSponsorshipSVBenefitsView.prototype.getEvents = function () {
		return {

			benefitDetails: this.benefitDetails,
			
			'focusout [data-focusout="input-required-focusout"]': "inputRequiredFocusout",
			'focusout [data-focusout="email-validation"]': 'emailValidation',
			'click [data-action="save-attendee"]': 'saveAttendee',
			'click [data-action="edit-attendee"]': 'setActiveAttendee',
			'click [data-action="close-modal"]':'clearError'
		};
	}

	ManageSponsorshipSVBenefitsView.prototype.clearError = function (e) {
		var errorMessages = this.$("#edit-attendee-form").find('.err')
		errorMessages.length
		for(var i=0;i<errorMessages.length;i++)
		 {
			this.$(errorMessages[i]).removeClass("err")
		}
	
	}



	ManageSponsorshipSVBenefitsView.prototype.setActiveAttendee = function(e) {

		this.activeAttendee =e.target.attributes["data-attendee_id"].value;
		var selectedAttendeeId = this.activeAttendee;

		var firstName = this.$("#first-name-"+selectedAttendeeId).text();
		var lastName = this.$("#last-name-"+selectedAttendeeId).text();
		var email = this.$("#email-"+selectedAttendeeId).text();

		this.$("#edit-attendee-form").find('#first-name').val(firstName!='-'?firstName:"");
		this.$("#edit-attendee-form").find('#last-name').val(lastName!='-'?lastName:"");
		this.$("#edit-attendee-form").find('#email-id').val(email!='-'?email:"");

	}

	ManageSponsorshipSVBenefitsView.prototype.inputRequiredFocusout = function (e) {
		var self = this;
	
		if (self.$(e.currentTarget).val() == '') {
			self.$(e.currentTarget).siblings('p').addClass('err');
		  } else {
			var regex = /^[a-zA-Z]+([\sa-zA-Z]+)?[a-zA-Z]+$/;
	  
			if (!regex.test(self.$(e.currentTarget).val())) {
				self.$(e.currentTarget).siblings('p').addClass('err');
			  // $('#donor-card-holder-name').focus();
			} else {
				self.$(e.currentTarget).siblings("p").removeClass("err");
			}
	  
		}


	}

	ManageSponsorshipSVBenefitsView.prototype.emailValidation = function (e) {

	  if (this.$(e.currentTarget).val() == '') {
		this.$(e.currentTarget).siblings("p").addClass("err");

	  } else {
		 var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
	   // var regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,6})$/;
		var charLength = this.$(e.currentTarget).val().length;
		if (!regex.test(this.$(e.currentTarget).val()) || charLength>254) {
		  this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	  }


	}

	
	ManageSponsorshipSVBenefitsView.prototype.getBenefitsDetails = function(e) {

		var data = {
			action: 'get_benefits_details',
			benefitId: this.benefitId
		}

		var self = this
		this.isLoading = false;
		this.render();
		this.model.save(data).then(function(res){
		
			if( !res.hasError ) {
				self.benefitDetails = res
				self.isLoading = false;
			self.render();
			   
			}
			else
			{
				console.error(res.errorMessage)
			}
		})

	}



	ManageSponsorshipSVBenefitsView.prototype.saveAttendee = function(e) {
		this.$("#edit-attendee-form").find('#first-name').trigger('focusout');
		this.$("#edit-attendee-form").find('#last-name').trigger('focusout');
		this.$("#edit-attendee-form").find('#email-id').trigger('focusout');
		
		if(this.$("#edit-attendee-form").find('.err').length>0){
			return
		}
		

		this.$("#save-attendee").attr("disabled", true);
		this.$("#save-attendee").text(this.$("#save-attendee").text() + Utils.translate(" (Processing...)"));

		var firstName = this.$("#edit-attendee-form").find('#first-name').val();
		var lastName = this.$("#edit-attendee-form").find('#last-name').val();
		var email = this.$("#edit-attendee-form").find('#email-id').val();
		var attendeeId = this.activeAttendee;
		
		
		var data = {
			action: 'update_attendee',
			firstName:firstName,
			lastName:lastName,
			email:email,
			attendeeId:attendeeId
		}
		var self = this
		this.model.save(data).then(function(res){
			if( !res.hasError ) {
			
				self.$("#first-name-"+res.attendeeId).text(res.firstName);
				self.$("#last-name-"+res.attendeeId).text(res.lastName);
				self.$("#email-"+res.attendeeId).text(res.email);
				self.$("#registration-"+res.attendeeId).text(res.registrationId?res.registrationId:"-");

				self.$("#save-attendee").text(Utils.translate("Submit"));  
				self.$("#save-attendee").attr("disabled", false);		
				self.$("#close_modal").trigger('click')
			}
			else
			{
				console.error(res.errorMessage)
			}
		})
	}

	ManageSponsorshipSVBenefitsView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			benefitDetails:this.benefitDetails,
			benefitId :this.benefitId,
			sponsorshipRegistrationId:this.sponsorshipRegistrationId,
			defaultProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-person.png')
    	),
      
			icons: {
				imgBenefits1: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-benefits1.png')
				),
				icnAttendees: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-attendees.png')
				),
				icnEditMd: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-edit-md.png')
				),
				icnStatusCompleted: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-approved.png')
				),
				icnStatusNotStarted: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-not-started.png')
				),
				icnOrg: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-org.png')
				),
				icnView: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-view.png')
				)
			}
		}
	}

	return ManageSponsorshipSVBenefitsView;
});

define('Saralux.Core.ManageSponsorshipSV.Details.View',	[
	'saralux_core_managesponsorshipsv_details.tpl',
  
	'Saralux.Core.ManageSponsorshipSV.SS2Model',
	'Handlebars',
	'Utils',
	'SCView',
  	'jQuery'
], function (
	saralux_core_managesponsorshipsv_details_tpl,

	ManageSponsorshipSVSS2Model,

	Handlebars,
	Utils,
	SCViewModule,
  	jQuery
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVDetailsView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

	Handlebars.registerHelper('showDefault',function(options){
		return options?options:"-";
	})

	Handlebars.registerHelper('formatCurrency',function(options){
		return options?"$"+options:"-";
	})

		this.template = saralux_core_managesponsorshipsv_details_tpl;
		
		this.parent = options.parent;
		this.documentsToUpload = [];
		this.model = new ManageSponsorshipSVSS2Model();

		this.sponsorshipId = this.parent.sponsorshipId;
		this.sponsorshipDetails = {};
		this.uploadFileCompleted = false;
		if(options.uploadFileCompleted == "Completed"){
			this.uploadFileCompleted = true;
		}
		this.features = [];
		this.activeTab = options.parent.activeTab? options.parent.activeTab:null;

		this.activeView = null;
		this.searchText = "";
		this.index = 0;
		this.docPagination = {index:0};
		this.getSponsorshipDetails(this.sponsorshipId);
	}

	ManageSponsorshipSVDetailsView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVDetailsView.prototype.constructor = ManageSponsorshipSVDetailsView;
	
	

	ManageSponsorshipSVDetailsView.prototype.getSponsorshipDetails = function (sponsorshipId) {
		var self = this;

		var data = {
			action: 'get_sponsorship_registration_details',
			id: this.parent.sponsorshipRegistrationId,
			index:this.docPagination.index,
			searchText:this.searchText
		};

		this.isLoading = true;
		this.render();
		this.model.save(data).then(function (res) {
			console.log({res});
			if( !res.hasError ) {
				self.data = res.data;
				var docPagination = res.data.documents.pagination
				for(var i=0;i<docPagination.pageRanges.length;i++)
				{
					docPagination.pageRanges[i].index = i+1
					docPagination.pageRanges[i].isCurrentIndex = (i==docPagination.index)
				}
				docPagination.isFirstPage = (0==docPagination.index)
				docPagination.isLastPage = ((docPagination.pageRanges.length-1)==docPagination.index)
				docPagination.pageNumbers = docPagination.pageRanges;
				docPagination.prev = docPagination.index - 1;
				docPagination.next = docPagination.index + 1;
				docPagination.from  = (docPagination.index * docPagination.pageSize) + 1;
				var to = ((parseInt(docPagination.index)+ 1) * docPagination.pageSize)
				docPagination.to  = docPagination.count<to?docPagination.count:to
				docPagination.hasResults = docPagination.count>0
				self.docPagination = docPagination
			}
			self.isLoading = false;
			self.render();
			self.$( "#"+self.activeTab).trigger( "click" )
		});

	}
	
	ManageSponsorshipSVDetailsView.prototype.scrollLeftRight = function (e) {
		if (this.$(e.currentTarget).hasClass("left-arrow")) {
			this.$('.media-types').animate({
				scrollLeft: "-=255px"
			}, "medium");
		}
		else {
			this.$('.media-types').animate({
				scrollLeft: "+=255px"
	}, "medium");
		}
	},

	ManageSponsorshipSVDetailsView.prototype.sponsorshipTabs = function (e) {
		this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
		this.$(e.currentTarget).parent(".tab-header").find(".tabs div").remove();
		this.$(e.currentTarget).append("<div></div>");
		this.$(e.currentTarget).addClass("active");
		this.$(e.currentTarget).parent(".tab-header").siblings(".tab-body").hide();
		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		this.activeTab = e.currentTarget.id
		this.$("." + clickedtab).show();
	}
  
  	ManageSponsorshipSVDetailsView.prototype.clearSearch = function() {
		$("#list-search-string-application").val("");
		this.searchText = "";
	}

	ManageSponsorshipSVDetailsView.prototype.triggerSearch = function() {
		this.searchText = this.$("#document-search-string").val();
		this.getSponsorshipDetails()
	}

	ManageSponsorshipSVDetailsView.prototype.searchNext = function(e) {
		this.docPagination.index =e.target.attributes["data-index"].value;
		this.getSponsorshipDetails()	
	}


	ManageSponsorshipSVDetailsView.prototype.searchKeydown = function(e) {
		if(e.which == 13)
		{
			this.searchText = this.$("#document-search-string").val();
			this.getSponsorshipDetails()
		}
	}

	
	ManageSponsorshipSVDetailsView.prototype.checkChangeClick = function(e) {
		this.markBtnClick(e,true)
	}

	ManageSponsorshipSVDetailsView.prototype.markBtnClick = function(e,isCheckBox) {

		var checklistId = e.target.attributes["data-checklist"].value
		this.$("#mark-checklist-btn-"+checklistId).prop('disabled',true);
		this.$("#mark-checkbox-"+checklistId).prop('disabled',true);

		var buttonId ="mark-checklist-btn-"+checklistId
		var checkBoxId = "mark-checkbox-"+checklistId

		var currentValue = this.$("#"+checkBoxId).is(':checked');

		if(isCheckBox)	
		{
			currentValue = !currentValue
			this.$("#mark-checkbox-"+checklistId).prop("checked", currentValue)
		}
	
		
		var data = {
			action: 'update_sponsorship_reg_checklist',
			checklistId: checklistId,
			isCompleted:!currentValue
		}


		var self = this
		this.model.save(data).then(function(res){
			if( !res.hasError ) {
				var checklistId = res.data.checklistId;
				self.$("#mark-checkbox-"+checklistId).prop( "checked", res.data.isCompleted )
				if (res.data.isCompleted) {
					self.$("#completed-icon-"+checklistId).prop('src',Utils.getAbsoluteUrl(
						getExtensionAssetsPath('img/icons-set-4/icn-approved.png')
					));
					self.$("#completed-status-"+checklistId).prop('class',"completed");
					self.$("#mark-checkbox-"+checklistId).siblings('label').html('Completed');
					self.$("#completed-status-"+checklistId).html('Completed');
					self.$("#completion-date-"+checklistId).html(res.data.completionDate);
				//	self.$("#completed-status-"+checklistId).prop('disabled',true);
			  } else {
				self.$("#mark-checkbox-"+checklistId).siblings('label').html('Mark as done');
				self.$("#completed-status-"+checklistId).prop('class',"not-started");
				self.$("#completion-date-"+checklistId).html('-');
				self.$("#completed-icon-"+checklistId).prop('src',Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-not-started.png')
				));				
				self.$("#completed-status-"+checklistId).html('Not Started');
			  }
			}else
			{
				console.error(res.errorMessage)
			}
			self.$("#mark-checklist-btn-"+checklistId).prop('disabled',false);
			self.$("#mark-checkbox-"+checklistId).prop('disabled',false);
		})	
	}

	ManageSponsorshipSVDetailsView.prototype.getEvents = function () {
		return {
			'click [data-action="m360-trigger-search"]' : 'triggerSearch',
			'click [data-action="m360-clear-search"]'   : 'clearSearch',
			'keydown [data-action="search-input"]': 'searchKeydown',
			'click [data-action="scroll-left-right"]': 'scrollLeftRight',
			'click [data-action="to-sponsorship-tabs"]': 'sponsorshipTabs',
			'click [data-action="mark-btn-click"]': 'markBtnClick',
			'click [data-action="mark-checkbox-change"]': 'checkChangeClick',
			'click [data-action="m360-slxc-sponsorship-doc-page"]': 'searchNext',
			"change [data-action='m360-slxc-upload-change']": "insertInArray",
			"click [data-action='m360-slxc-remove-document']": "removeDocument",
			"click [data-action='m360-slxc-upload-doc-upload-image']": "uploadImage",
			"click [data-action='m360-slxc-upload-doc-remove-file']": "removeFile"
		};
	}
	ManageSponsorshipSVDetailsView.prototype.uploadImage = function(e){
		console.log("Uplode file");
		e.stopImmediatePropagation();
	  	jQuery('#upload-document').trigger('click');
	}
	ManageSponsorshipSVDetailsView.prototype.removeFile = function(e){
		jQuery('#document-upload-model').show();
		this.$("#btn-submit").prop('disabled',true);
		jQuery( "#remove-documents-model").hide();
	}

	ManageSponsorshipSVDetailsView.prototype.removeDocument = function (e) {
		console.log('removeDocument');
	}
	ManageSponsorshipSVDetailsView.prototype.insertInArray = function (e) {
		var self = this;
        var uploadedDoc = jQuery('#upload-document')[0].files[0]
		console.log('upload-change',uploadedDoc);
        if(uploadedDoc){
			jQuery('#document-upload-model').hide();
			this.$("#btn-submit").prop('disabled',false);
			jQuery( "#remove-documents-model").show();
		}
	}
	ManageSponsorshipSVDetailsView.prototype.getContext = function () {

		return {
			isLoading: this.isLoading,
			sponsorshipDetails:this.data,		
			pagination:this.docPagination,
			uploadFileCompleted: this.uploadFileCompleted,
			searchText:this.searchText,
			documentsToUpload: this.documentsToUpload,

			data: this.data,
			uploadedDocumentCount: this.uploadedDocumentCount,
			defaultProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-person.png')
    		),
			defaultBanner: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/default-cover-sponsorship.png')
    		),
      
			icons: {
				icnInProgress: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-in-progress.png')
				),
				icnView: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-view.png')
				),
				icnTasksActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-tasks-active.png')
				),
				icnTasksInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-tasks-inactive.png')
				),
				icnDocumentsActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-documents-active.png')
				),
				icnDocumentsInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-documents-inactive.png')
				),
				icnBenefitsActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-benefits-active.png')
				),
				icnBenefitsInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-benefits-inactive.png')
				),
				icnDetailsActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-details-active.png')
				),
				icnDetailsInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-details-inactive.png')
				),
				icnUploadsActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-uploads-active.png')
				),
				icnUploadsInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-uploads-inactive.png')
				),
				icnCompleted: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-approved.png')
				),
				icnProgress: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-2/icn-submission-pending.png')
				),
				icnNotStarted: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-not-started.png')
				),
				icnDocumentMd: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-file-md.png')
				),
				icnDownload: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-download.png')
				),
				imgBenefits1: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-benefits1.png')
				),
				imgBenefits2: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-benefits2.png')
				),
				imgBenefits3: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-benefits3.png')
				),
				imgBenefits4: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-benefits4.png')
				),
				imgBenefits5: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-benefits5.png')
				),
				icnTick: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-tick.png')
				),
				icnEditmd: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-edit-md.png')
				),
				icnCloselg: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-remove-lg.png')
				),
				icnRemoveImg: Utils.getAbsoluteUrl(
                    getExtensionAssetsPath('img/icons-set-4/img-remove.png')
                ),
				imgUpload: Utils.getAbsoluteUrl(
                    getExtensionAssetsPath('img/icons-set-4/img-upload.png')
                ),
				imgUploadRemove: Utils.getAbsoluteUrl(
                    getExtensionAssetsPath('img/icons-set-4/group-3.png')
                ),
				icnSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-success.png')),
				icnUploadSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/img-uploaded-success.png')),
			}
		}
	}

	return ManageSponsorshipSVDetailsView;
});

define('Saralux.Core.ManageSponsorshipSV.Edit.Profile.View',	[
	'saralux_core_managesponsorshipsv_edit_profile.tpl',

	'Saralux.Core.CommonLibraries.CAPI.Model',
	'Saralux.Core.MyPortal.Context.Model',
	'Saralux.Core.ManageSponsorshipSV.SS2Model',
	'Saralux.Core.ExternalLibraries.CryptoJS',
  
	'Utils',
	'SCView',
  	'jQuery'
], function (
	saralux_core_managesponsorshipsv_edit_profile_tpl,

	CLCoreCAPIModel,
	MyPortalContextModel,
	ManageSponsorshipSVSS2Model,
	CryptoJS,

	Utils,
	SCViewModule,
  	jQuery
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVEditProfileView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.template = saralux_core_managesponsorshipsv_edit_profile_tpl;

		this.container = options.container;
		this.environment_component = this.container.getComponent("Environment");
		
		var IhIByvhasYD = 'kin5wtp20a';
		this.m360Context = SC.m360Context;
		var currentPermissions = this.m360Context.currentPermissions;
		currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissions, IhIByvhasYD));
		this.parentRecordId = currentPermissions.servicePositionForId;

		this.sponsorshipProfile = null;

		this.sppConfig = {
			enableProfileGalleryForSPP: this.environment_component.getConfig("enableProfileGalleryForSPP"),
			enableProfileVideoForSPP: this.environment_component.getConfig("enableProfileVideoForSPP"),
			enableProfileDocumentsForSPP: this.environment_component.getConfig("enableProfileDocumentsForSPP"),

			visitWebsiteLabelForSPP: this.environment_component.getConfig("visitWebsiteLabelForSPP"),
			mediaLabelForSPP: this.environment_component.getConfig("mediaLabelForSPP"),
			aboutLabelForSPP: this.environment_component.getConfig("aboutLabelForSPP"),
			weblinksLabelForSPP: this.environment_component.getConfig("weblinksLabelForSPP"),
			filesLabelForSPP: this.environment_component.getConfig("filesLabelForSPP")
		};

		this.CAPIModel = new CLCoreCAPIModel();
		this.model = new ManageSponsorshipSVSS2Model();
		this.mpContextModel = MyPortalContextModel.getInstance();
        
        this.customerId = this.mpContextModel.get('m360CustomerId');
		
		this.activeView = null;
		this.searchText = "";
		this.profileImageUrl = null;
		this.coverImageUrl = null;
		this.documentsUploaded = false;
		this.zeroState = false;

		this.countries = [];
		this.states =[];
		this.statesToDisplay = [];
		this.userSelectedState=null;

		this.socialMediaItemIndex = 0;

		this.formData = {
			changeProfileImg: false,
			profileImage: null,
			profileImageUrl: "",
			changeCoverImage: false,
			coverImageUrl: "",
			coverImage: null,
			videoEmbedLink: null,
		};

		this.socialMediaSiteRows = [];

        this.sponsorProfile = {
			galleryImages: {
				all: []
			}
		};

		this.sponsorProfileStatusList = [];


		this.documentsToUpload = [];
		this.hideUploadDocBox = false;

		this.taskCompleted = false;
		this.uploadedDocumentCount = 0;
		this.socialMediaRowCount = 0;
		if(options.taskStatus == "Completed"){
			this.taskCompleted = true;
		}

		this.sponsorships = [{
			id: 1,
			banner: null,
			name: "12-Class Package",
			location: "The Golf Club at Chelsea Piers",
			speciality: ['Putting Speciality',],
			sponsorships: 'Anthony Morris, John Smith',
			fromToDate: "07.10.2021 - 09.04.2022",
			category: 'Package Category',
			validity: '1 month',
			price: "$280",
			status: {
				isDraft: true,
				isPublished: false,
				isClosed: false,
				isCancelled: false,
			}
		}];
		this.isLoading = true;
		this.getSponsorProfile();
	}

	ManageSponsorshipSVEditProfileView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVEditProfileView.prototype.constructor = ManageSponsorshipSVEditProfileView;
	
	ManageSponsorshipSVEditProfileView.prototype.getEvents = function () {
		return {
			'change [data-change="upload-profile-image"]': 'uploadProfileImage',
			'click [data-action="remove-profile-image"]': 'removeProfileImage',
			'change [data-change="upload-cover-image"]': 'uploadCoverImage',
			'click [data-action="remove-cover-image"]': 'removeCoverImage',
			'change [data-change="upload-gallery-image"]': 'uploadGalleryImage1',
      		'click [data-action="remove-gallery-image"]': 'removeGalleryImage',
			'change [data-action="upload-document"]': 'uploadDocument',
			'click [data-action="remove-document"]': 'removeDocument',
			'click [data-action="video-embed-link"]': 'setVideoEmbedLink',
			'click [data-action="remove-embeded-video"]': 'removeVideoEmbedLink',
			'click [data-action="edit-embeded-video"]': 'editVideoEmbedLink',

			'click [data-action="add-row-click"]' : "addRowClick",
			'click [data-action="remove-row-click"]': "removeRowClick",

			'click [data-action="filter-btn-click"]': 'filterBtnClick',
			'click [data-action="overlay-click"]': 'overlayClick',

			'change [data-action="form-fields-country"]': 'countryOptionChange',

			'click [data-action="update-sponsor-profile-data"]': 'updateSponsorProfiledata',

			'focusout [data-focusout="company-name-focusout"]': 'getUserEnteredCompanyName',
			'focusout [data-focusout="tagline-focusout"]': 'getUserEnteredTagline',
			'focusout [data-focusout="about-company-focusout"]': 'getUserEnteredAboutTheCompnay',
			'focusout [data-focusout="contact-person-focusout"]': 'getUserEnteredContactPerson',
			'focusout [data-focusout="email-focusout"]': 'getUserEnteredEmail',
			'focusout [data-focusout="phone-number-focusout"]': 'getUserEnteredPhoneNumber',
			'focusout [data-focusout="mobile-number-focusout"]': 'getUserEnteredMobileNumber',
			'focusout [data-focusout="website-focusout"]': 'getUserEnteredWebsite',
			'focusout [data-focusout="addr1-focusout"]': 'getUserEnteredAddr1',
			'focusout [data-focusout="addr2-focusout"]': 'getUserEnteredAddr2',
			'focusout [data-focusout="form-fields-city"]': 'getUserEnteredCity',
			'change [data-change="state-data-change"]': 'getUserEnteredState',
			'focusout [data-focusout="form-fields-state"]': 'getChangedState',
			'focusout [data-focusout="form-fields-zipcode"]': 'getUserEnteredZipCode',
			'change [data-change="form-field-social"]': 'validateSocialMediaDropdownValue',
			'focusout [data-focusout="social-media-link-focusout"]': 'setSocialMediaLink',
			'focusout [data-focusout="profile-link-focusout"]': 'setSocialMediaLink',
			'change [data-change="hide-video-section"]': 'hideVideoSection',
			'change [data-change="hide-gallery-section"]': 'hideGallerySection',
			'change [data-change="hide-document-section"]': 'hideDocumentSection',

			'click [data-action="reset-video-embed-link"]': 'resetVideoEmbedLink',
			'change [data-change="form-field-sponsor-profile-status-list"]': 'setSponsorProfileStatus',
			/*'focusout [data-focusout="display-name-focusout"]': 'getUserEnteredDisplayName',
			'click [data-action="m360-slxc-msep-open-rd-modal"]': 'openRdModal',
			'click [data-action="m360-slxc-msep-rename-document"]': 'renameDocument',*/
			'click [data-action="m360-slxc-doc-image-upload"]': 'docImageUpload',
			'click [data-action="M360-slxc-upload-gallery-image"]': 'uploadGalleryImage',
			'mouseover [data-mouseover="m360-slxc-edit-profile-mouseover"]': 'profileMousehover',
			'mouseover [data-mouseover="m360-slxc-edit-profile-banner-img-mouseover"]': 'bannerImageMousehover',
			'mouseover [data-mouseover="m360-slxc-contact-details"]': 'contactDetailsMousehover',
			'mouseover [data-mouseover="m360-slxc-files"]': 'filesMousehover',
			'mouseover [data-mouseover="m360-slxc-social-weblinks"]': 'socialWeblinksMousehover',
			'mouseover [data-mouseover="m360-slxc-gallery"]': 'galleryMousehover',
			'mouseover [data-mouseover="m360-slxc-about"]': 'aboutMousehover',
			'mouseout [data-mouseout="m360-slxc-default-mouseout"]': 'hoverOutToDefault'
		};
	}

	/*ManageSponsorshipSVEditProfileView.prototype.openRdModal = function (e) {
		var index = this.$(e.currentTarget).attr('data-index');
		this.$("#rd-submit").attr('data-index', index);
		this.$("#rename-document").modal('show');
	},

	ManageSponsorshipSVEditProfileView.prototype.renameDocument = function (e) {
		var self = this;
		var index = this.$(e.currentTarget).attr('data-index');
		var name = this.$("#display-name").val();

		this.documentsToUpload[index].title = name;
		console.log("this.documentsToUpload - ", this.documentsToUpload);

		this.$("#rename-document").modal('hide');
		jQuery('.modal-backdrop').remove();
		jQuery(document.body).removeClass("modal-open");

		this.render();
		jQuery('html, body').animate({
			scrollTop: self.$(".files").offset().top - 17	
		}, 1000);

	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredDisplayName = function (e) {
		
	},*/

	ManageSponsorshipSVEditProfileView.prototype.resetVideoEmbedLink = function(e) {
		this.formData.videoEmbedLink = null;
        this.render();
    }

	ManageSponsorshipSVEditProfileView.prototype.hideVideoSection = function (e) {
		this.sponsorshipProfile.multimediaConfigurations.videoConfiguration = this.$(e.currentTarget).is(':checked');
	},

	ManageSponsorshipSVEditProfileView.prototype.hideGallerySection = function (e) {
		this.sponsorshipProfile.multimediaConfigurations.galleryConfiguration = this.$(e.currentTarget).is(':checked');
	},

	ManageSponsorshipSVEditProfileView.prototype.hideDocumentSection = function (e) {
		this.sponsorshipProfile.multimediaConfigurations.documentConfiguration = this.$(e.currentTarget).is(':checked');
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredCompanyName = function (e) {
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.sponsorshipProfile.basicDetails.companyName = this.$(e.currentTarget).val();
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredTagline = function (e) {
		this.sponsorshipProfile.basicDetails.tagLine = this.$(e.currentTarget).val();
		/*if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.sponsorshipProfile.basicDetails.tagLine = this.$(e.currentTarget).val();
		}*/
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredAboutTheCompnay= function (e) {
		this.sponsorshipProfile.basicDetails.aboutCompany = this.$(e.currentTarget).val();
		/*if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.sponsorshipProfile.basicDetails.aboutCompany = this.$(e.currentTarget).val();
		}*/
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredContactPerson = function (e) {
		this.sponsorshipProfile.contactDetails.contactPerson = this.$(e.currentTarget).val();
		/*if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
			this.sponsorshipProfile.contactDetails.contactPerson = this.$(e.currentTarget).val();
		}*/
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredEmail= function (e) {
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
			var charLength = this.$(e.currentTarget).val().length;
			if (!regex.test(this.$(e.currentTarget).val()) || charLength>254) {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
				this.sponsorshipProfile.contactDetails.emailID = this.$(e.currentTarget).val();
				//self.sponsorshipProfile.contactDetails.emailID = Utils.deepCopy(this.$(e.currentTarget).val());
			}
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredPhoneNumber = function (e) {
		var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
		if(this.$(e.currentTarget).val() == '' || !regex.test(this.$(e.currentTarget).val()) ) {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} 
		else{
			this.$(e.currentTarget).siblings("p").removeClass("err");
			//this.sponsorshipProfile.contactDetails.phoneNumber = this.$(e.currentTarget).val();
			this.sponsorshipProfile.contactDetails.phoneNumber = this.$(e.currentTarget).val();
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredMobileNumber = function (e) {
		var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
		if(this.$(e.currentTarget).val() != '' && !regex.test(this.$(e.currentTarget).val()) ) {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} 
		else{
			this.$(e.currentTarget).siblings("p").removeClass("err");
			if(this.$(e.currentTarget).val() == '')
				this.sponsorshipProfile.contactDetails.mobileNumber = '';
			else
				this.sponsorshipProfile.contactDetails.mobileNumber = this.$(e.currentTarget).val();
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredWebsite = function (e) {

		//http://, https:// or ftp://
		var website = this.$(e.currentTarget).val();
		this.sponsorshipProfile.contactDetails.website = website;
		var regex = /^(https:\/\/|http:\/\/|ftp:\/\/)([a-zA-Z0-9!._\-$/&%#@=?*])+[^\s]$/;
		if(( website.length > 0 && website.length <= 999) && regex.test(website) ){
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
		else if(website.length > 0 && (website.length > 999 || !regex.test(website))){
			this.$(e.currentTarget).siblings("p").addClass("err");
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredAddr1 = function (e) {
		this.sponsorshipProfile.addressDetails.addressLine1 = this.$(e.currentTarget).val();
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredAddr2 = function (e) {
		var self = this;
		self.sponsorshipProfile.addressDetails.addressLine2 = this.$(e.currentTarget).val();
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredCity = function (e) {
		var self = this;
		self.sponsorshipProfile.addressDetails.city = this.$(e.currentTarget).val();
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredState = function (e) {
		var self = this;
		var selectedState = this.$(e.currentTarget).val();
		var selectedCountry = this.$("#form-field-country").val();
		var applicableStatesForSelectedCountry = [];
		for( i=0; i<self.states.length; i++){
			if(self.states[i].countrycode == selectedCountry){
				applicableStatesForSelectedCountry = self.states[i].states;
			}
		}

		for(i=0; i<applicableStatesForSelectedCountry.length; i++){
			if(applicableStatesForSelectedCountry[i].code == selectedState){
				self.sponsorshipProfile.addressDetails.state = applicableStatesForSelectedCountry[i].name;
			}
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.getChangedState = function (e) {
		var self = this;
		self.sponsorshipProfile.addressDetails.state = this.$(e.currentTarget).val();
	},

	ManageSponsorshipSVEditProfileView.prototype.getUserEnteredZipCode = function (e) {
		var regex = /^[0-9]{5}(?:-[0-9]{4})?$/;
		if(this.$(e.currentTarget).val().length != 0){
			if(this.sponsorshipProfile.addressDetails.country == 'United States'){
				if(regex.test(this.$(e.currentTarget).val())) {
					this.$(e.currentTarget).siblings("p").removeClass("err");
					this.sponsorshipProfile.addressDetails.zipCode = this.$(e.currentTarget).val();
				} else {
					this.$(e.currentTarget).siblings("p").addClass("err");
				}
			}else{
				this.sponsorshipProfile.addressDetails.zipCode = this.$(e.currentTarget).val();
			}
			
		}else{
			this.sponsorshipProfile.addressDetails.zipCode = '';
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
		
	},
	ManageSponsorshipSVEditProfileView.prototype.getSocialMediaData = function (e) {
		var self = this;
		this.socialMediaSiteRows = [];
		this.$('.dynamic-inputs #social-media-row').each(function () {
			var socialMediaSiteIndex = self.$(this).find('#form-field-social').val();
			var siteLink = self.$(this).find('#form-field-profile-link').val();
			if(socialMediaSiteIndex >= 0) {
				var socialMediaSiteName = self.sponsorshipProfile.mediaSiteNames[socialMediaSiteIndex-1];
				self.socialMediaSiteRows.push({
					socialMediaSiteName: socialMediaSiteName,
					siteLink: siteLink
				});
			}
		});
	},

	ManageSponsorshipSVEditProfileView.prototype.validateSocialMediaDropdownValue = function (e) {
		var currentlySelectedSocialMediaSiteIndex = this.$(e.currentTarget).val();
		var currentlySelectedSocialMediaSiteName = this.sponsorshipProfile.mediaSiteNames[currentlySelectedSocialMediaSiteIndex-1];
		for(var i=0; i<this.socialMediaSiteRows.length; i++){
			if(currentlySelectedSocialMediaSiteName && (this.socialMediaSiteRows[i].socialMediaSiteName != undefined && this.socialMediaSiteRows[i].socialMediaSiteName.text == currentlySelectedSocialMediaSiteName.text) && this.socialMediaSiteRows.length > 1){
				this.$(e.currentTarget).val(0);
			}
		}
		this.getSocialMediaData();
		//var lastRowIndex = this.sponsorshipProfile.userSelectedSocialMedia.length - 1;
		//this.sponsorshipProfile.userSelectedSocialMedia = [];
		for(var i=0; i<this.socialMediaSiteRows.length; i++){
			var socialMediaItem = null
			if (this.socialMediaSiteRows[i].socialMediaSiteName == null){
				socialMediaItem = '';
			}else{
				socialMediaItem = this.socialMediaSiteRows[i].socialMediaSiteName.text;
			}
			if (this.sponsorshipProfile.userSelectedSocialMedia[i].id == null){
				this.sponsorshipProfile.userSelectedSocialMedia[i].socialMediaItem = socialMediaItem;
				this.sponsorshipProfile.userSelectedSocialMedia[i].socialMediaLink = this.socialMediaSiteRows[i].siteLink;
			}
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.setSocialMediaLink = function (e) {
		var self = this;
		var socialMediaLink = this.$(e.currentTarget).val();
		var index = null;
		index = this.$(e.currentTarget).parent().parent().attr('data-index');
		this.getSocialMediaData();
		//this.sponsorshipProfile.userSelectedSocialMedia = [];
		for(var i=0; i<this.socialMediaSiteRows.length; i++){
			var socialMediaItem = null
			if (this.socialMediaSiteRows[i].socialMediaSiteName == null){
				socialMediaItem = '';
			}else{
				socialMediaItem = this.socialMediaSiteRows[i].socialMediaSiteName.text;
			}
			this.sponsorshipProfile.userSelectedSocialMedia[i].socialMediaItem = socialMediaItem;
			this.sponsorshipProfile.userSelectedSocialMedia[i].socialMediaLink = this.socialMediaSiteRows[i].siteLink;
		}
	},

	ManageSponsorshipSVEditProfileView.prototype.setSponsorProfileStatus = function (e) {
		this.sponsorshipProfile.sponsorProfileStatus = this.$(e.currentTarget).val();
		// var sponsorProfileStatusID = parseInt(this.sponsorshipProfile.sponsorProfileStatus);
		// if(sponsorProfileStatusID > 0){
		// 	this.$(e.currentTarget).siblings("p").removeClass("err");
		// }else{
		// 	this.$(e.currentTarget).siblings("p").addClass("err");
		// }
	},


	ManageSponsorshipSVEditProfileView.prototype.overlayClick = function (e) {
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".filter-btn").removeClass("activefilter");
	},

	ManageSponsorshipSVEditProfileView.prototype.filterBtnClick = function (e) {
		if(!this.$(e.currentTarget).hasClass("activefilter")){
			this.$(".overlaybox").show();
			this.$(e.currentTarget).siblings(".options-set").show();
			this.$(e.currentTarget).addClass("activefilter");
		  }
	},

	ManageSponsorshipSVEditProfileView.prototype.removeRowClick = function (e) {
		var self = this;
		var rowCount = this.$('#social-row-count').val();
		var index = this.$(e.currentTarget).parents(".individual-row").attr('data-index');
		this.$('#social-row-count').val(--rowCount);


		var socialMediaItemId = this.$(e.currentTarget).parents(".individual-row").attr("data-id");


		var i = -1;

		if(socialMediaItemId == null || socialMediaItemId == undefined || (""+socialMediaItemId).length == 0) {
			i = index;
		} else {
			for(i=0;i<this.sponsorshipProfile.userSelectedSocialMedia.length;i++) {
				if(this.sponsorshipProfile.userSelectedSocialMedia[i].id == socialMediaItemId) {
					break;
				}
			}
		}

		//update the array which saves the social media items
		this.sponsorshipProfile.userSelectedSocialMedia.splice(i, 1);
		this.socialMediaItemIndex--;
 
		//without rendering, take out the required div from the UI
		//this.$(e.currentTarget).parents(".individual-row").remove();
		//this.$(e.currentTarget).parent().parent().remove();
		this.render();

		var counter = 1;
		this.$('.dynamic-inputs').children('div').each(function () {
			counter++;
		});

		this.socialMediaRowCount = rowCount;
	}

	ManageSponsorshipSVEditProfileView.prototype.addRowClick = function (e) {	
		var self = this;
		var blankFieldFound = false;

		this.$(".dynamic-inputs #social-media-row").find("p").removeClass('err');

		this.$('.dynamic-inputs #social-media-row').each(function () {
			var socialMediaSiteIndex = self.$(this).find('#form-field-social').val();
			var siteLink = self.$(this).find('#form-field-profile-link').val();

			if(socialMediaSiteIndex == 0) {
				blankFieldFound = true;
				self.$(this).find("#form-field-social").siblings("p").addClass('err');
			}
			var regex = /^(https:\/\/|http:\/\/|ftp:\/\/)([a-zA-Z0-9!._\-$/&%#@=?*])+[^\s]$/;
			if( siteLink.length == 0 || siteLink.length > 999 || !regex.test(siteLink) ) {
				blankFieldFound = true;
				self.$(this).find("#form-field-profile-link").siblings("p").addClass('err');
			}
		});

		if(!blankFieldFound) {
			this.sponsorshipProfile.userSelectedSocialMedia.push({
				id: null,
				socialMediaItem: null,
				socialMediaLink: ''
			});

			this.socialMediaItemIndex++;

			this.render();

			// var newRowHTML = this.$(".social-media-row-blank").html();
			
			// this.$(".dynamic-inputs").append(newRowHTML);
			
		}
	}

	ManageSponsorshipSVEditProfileView.prototype.uploadCoverImage = function(e) {
		var self = this;

		var targetPreview = this.$(e.currentTarget).attr('data-target-preview');
		var fieldId = this.$(e.currentTarget).attr('data-field-id');
		var fileType = e.currentTarget.files[0].type;
		var size = parseInt(Math.floor(e.currentTarget.files[0].size / 1000000));
		if(e.currentTarget.files && e.currentTarget.files[0] && (fileType == "image/jpeg" || fileType == "image/jpg") && size <= 5) {
				var reader = new FileReader();
				reader.onload = function(e) {
						var base64 = e.target.result.split('base64,')[1];
						self.$('#'+targetPreview).css('background-image', 'url('+e.target.result +')');
						self.$('#'+fieldId).val(base64);
						self.$('#'+fieldId).attr('data-changed', "true");

						self.formData.changeCoverImage = true;
						self.formData.coverImage = base64;
						self.formData.coverImageUrl = e.target.result;

						self.$('#'+targetPreview).hide();
						self.$('#'+targetPreview).fadeIn(500);


						self.render();

				}
				reader.readAsDataURL(e.currentTarget.files[0]);
		}
	}

	ManageSponsorshipSVEditProfileView.prototype.removeCoverImage = function(e) {
		this.formData.changeCoverImage = true;
		this.formData.coverImage = null;
		this.formData.coverImageUrl = null;		
		this.render();
	}

	ManageSponsorshipSVEditProfileView.prototype.uploadProfileImage = function(e) {
		var self = this;

		var targetPreview = this.$(e.currentTarget).attr('data-target-preview');
		var fieldId = this.$(e.currentTarget).attr('data-field-id');
		var fileType = e.currentTarget.files[0].type;
		var size = parseInt(Math.floor(e.currentTarget.files[0].size / 1000000));
		if(e.currentTarget.files && e.currentTarget.files[0] && (fileType == "image/jpeg" || fileType == "image/jpg") && size <= 5) {
				var reader = new FileReader();
				reader.onload = function(e) {
						var base64 = e.target.result.split('base64,')[1];
						self.$('#'+targetPreview).css('background-image', 'url('+e.target.result +')');
						self.$('#'+fieldId).val(base64);
						self.$('#'+fieldId).attr('data-changed', "true");

						self.formData.changeProfileImg = true;
						self.formData.profileImage = base64;
						self.formData.profileImageUrl = e.target.result;

						self.$('#'+targetPreview).hide();
						self.$('#'+targetPreview).fadeIn(500);


						self.render();
				}
				reader.readAsDataURL(e.currentTarget.files[0]);
		}
	}

	ManageSponsorshipSVEditProfileView.prototype.removeProfileImage = function(e) {
		// this.sponsorProfile.image = null;
		this.formData.changeProfileImg = true;
		this.formData.profileImage = null;
		this.formData.profileImageUrl = null;
		
		this.render();
	}

	ManageSponsorshipSVEditProfileView.prototype.uploadGalleryImage1 = function(e) {
		var self = this;
		var reader = new FileReader();
		var uploadedImg = e.currentTarget.files[0];
		var imgName = uploadedImg.name.split(".")[0];
		var fileType = uploadedImg.type;
		var size = parseInt(Math.floor(uploadedImg.size / 1000000));
		if(e.currentTarget.files && e.currentTarget.files[0] && (fileType == "image/jpeg" || fileType == "image/jpg") && size <= 5) {
			reader.onload = function(e) {
					var base64 = e.target.result.split('base64,')[1];
					var num = self.sponsorProfile.galleryImages.all.length;
					var imgUploadCnounter = self.sponsorProfile.galleryImages.all.length;
					if(imgUploadCnounter < 5) {
						self.sponsorProfile.galleryImages.all.push({
							num: ++num,
							name: imgName,
							url: e.target.result,
							base64: base64,
							id: null
						});
						if(imgUploadCnounter == 4){
							self.sponsorProfile.galleryImages.full = true;
						}
					}
					self.render();
			}
			reader.readAsDataURL(e.currentTarget.files[0]);
		}
	}

	ManageSponsorshipSVEditProfileView.prototype.removeGalleryImage = function(e) {
		var index = this.$(e.currentTarget).attr('data-index');
		this.sponsorProfile.galleryImages.all.splice(index, 1);
		
		this.$(e.currentTarget).parents(".gallary-images-parent").remove();

		this.sponsorProfile.galleryImages.full = false;
		this.render();
	
		$(this).parents('.individual-file-box').remove();
	}

	ManageSponsorshipSVEditProfileView.prototype.setVideoEmbedLink = function(e) {
		var videoLink = this.$("#form-field-video-embed-link").val();
		var regex = /^(https:\/\/|http:\/\/|ftp:\/\/)([a-zA-Z0-9!._\-$/&%#@=?*])+[^\s]$/;
		if(videoLink.length > 0 && videoLink.length <= 999 && regex.test(videoLink) ){
			this.formData.videoEmbedLink = videoLink;
			this.render();
			this.$("#edit-video").fadeIn();
			this.$("#link-video").fadeOut();
			this.$(".video-panel").find("p").removeClass("err");
		}else{
			this.$(".video-panel").find("p").addClass("err")
		}
    }

	ManageSponsorshipSVEditProfileView.prototype.editVideoEmbedLink = function(e) {
		this.$("#form-field-video-embed-link").val(this.formData.videoEmbedLink);
    }

	ManageSponsorshipSVEditProfileView.prototype.removeVideoEmbedLink = function(e) {
		this.formData.videoEmbedLink = null;
		this.$("#form-field-video-embed-link").val("");
        this.render();
    }

	ManageSponsorshipSVEditProfileView.prototype.removeDocument = function (e) {
		var index = this.$(e.currentTarget).attr("data-index");
		//this.documentsToUpload[index].isValid = false;
		this.documentsToUpload.splice(index, 1);
		this.uploadedDocumentCount--;
		this.hideUploadDocBox = false;
		
		this.render();
	}

	ManageSponsorshipSVEditProfileView.prototype.uploadDocument = function (e) {
		var self = this;
        var uploadedDoc = jQuery('#upload-document')[0].files[0]
		var size = uploadedDoc.size / 1000000;
		var fileInfo = uploadedDoc.name.split(".");
		var fileExtension = fileInfo[fileInfo.length-1];
		this.documentsUploaded = false;
        if(uploadedDoc && fileExtension == "pdf" && size <= 10 && self.documentsToUpload.length < 3){
            var reader = new FileReader();
            reader.onloadend = function() {
				self.documentsUploaded = true;
				var name = uploadedDoc.name;
                uploadedDoc = (reader.result).split('base64,')[1];
				
				self.documentsToUpload.push({
					uploadedDoc: uploadedDoc,
					name: name,
					size: size,
					id: null,
					isValid: true
				});
				self.uploadedDocumentCount++;
				var arrayLength = self.documentsToUpload.length - 1;
				if(self.uploadedDocumentCount == 3){
					self.hideUploadDocBox = true;
				}else{
					self.hideUploadDocBox = false;
				}
				self.render();
				// if(self.hideUploadDocBox)
				// 	this.$(e.currentTarget).parents(".document-upload-box").hide();
				self.$(".documents").find("p").hide();
            }
            reader.readAsDataURL(uploadedDoc);
		}else{
			this.$(".documents").find("p").show();
		}
	}

	ManageSponsorshipSVEditProfileView.prototype.getSponsorProfile = function() {
        var self = this;
        this.model.clear({ silent: true });
        this.model.save({
            action: "get_sponsor_profile",
			parentRecordId: this.parentRecordId
        }).done(function(res) {
			self.sponsorProfile.galleryImages.all = [];
            if(!res.hasError){
                self.sponsorshipProfile = res.sponsorshipProfile;
				self.sponsorProfileStatusList = self.sponsorshipProfile.sponsorProfileStatusList;
				if(res.sponsorshipProfile.savedSponsorProfileStatus.length > 0){
					self.sponsorshipProfile.sponsorProfileStatus = res.sponsorshipProfile.savedSponsorProfileStatus[0].value;
					for(var i=0; i<self.sponsorProfileStatusList.length; i++){
						if(self.sponsorProfileStatusList[i].id == self.sponsorshipProfile.sponsorProfileStatus){
							self.sponsorProfileStatusList[i].selected = true;
							break;
						}
					}
				}
				for(var i=0; i<5; i++){
					if(self.sponsorshipProfile.gallery[i] != null)
						self.sponsorProfile.galleryImages.all.push({
							num: null,
							url: self.sponsorshipProfile.gallery[i].text,
							base64: null,
							id: self.sponsorshipProfile.gallery[i].value
						});
				}
				if(self.sponsorProfile.galleryImages.all.length == 5){
				self.sponsorProfile.galleryImages.full = true;
				}
				self.documentsToUpload = [];
				self.uploadedDocumentCount = 0;
				self.socialMediaRowCount = self.sponsorshipProfile.userSelectedSocialMedia.length;
				self.socialMediaItemIndex = self.socialMediaRowCount - 1;

				for(var i=0; i<3; i++){
					if(self.sponsorshipProfile.documents[i] != null){
						self.documentsToUpload.push({
							uploadedDoc: null,
							name: self.sponsorshipProfile.documents[i].text,
							id: self.sponsorshipProfile.documents[i].value,
							size: (self.sponsorshipProfile.documents[i].size/1000000),
							isValid: true	
						});
						self.documentsUploaded = true;
						self.uploadedDocumentCount++;
					}
				}
				if(self.uploadedDocumentCount == 3){
					self.hideUploadDocBox = true;
				}else{
					self.hideUploadDocBox = false;
				}
				self.formData.videoEmbedLink = res.sponsorshipProfile.videoLink;

				self.formData.changeProfileImg = false;
				self.formData.profileImageUrl = self.sponsorshipProfile.profileImage;

				self.formData.changeCoverImage = false;
				self.formData.coverImageUrl = self.sponsorshipProfile.profilecoverImage;

				self.CAPIModel.fetch().done(function(response){
					self.countries = response.countries;
					self.states = response.states;
					//The reason we have declared the userSelectedState as an instance var because, we need this var in tpl file,
					//in case, if the country has no state then we can display this userSelectedState var in the textbox.
					self.userSelectedState = self.sponsorshipProfile.addressDetails.state;
					var userSelectedCountry = null;
					if(self.sponsorshipProfile.addressDetails.country.length > 0){
						userSelectedCountry = self.sponsorshipProfile.addressDetails.country[0].text;
					}
					
					self.sponsorshipProfile.addressDetails.country = userSelectedCountry;
					self.countries.forEach(countryObj => {
					 	if(countryObj.name == userSelectedCountry){
							for(let i=0; i< self.states.length; i++){
								if(self.states[i].countrycode == countryObj.code){
									self.statesToDisplay = self.states[i].states;
								}
							}
							countryObj.selected = true;
					 	}
						else{
							countryObj.selected = false;
						}
					});
					if(self.statesToDisplay && self.statesToDisplay.length > 0){
						self.zeroState = false;
						for(let i=0; i<self.statesToDisplay.length; i++){
							if(self.statesToDisplay[i].name == self.userSelectedState){
								self.statesToDisplay[i].selected = true;
								self.sponsorshipProfile.addressDetails.state = self.statesToDisplay[i].name;
							}
							else{
								self.statesToDisplay[i].selected = false;
							}
						}
					}else{
						self.zeroState = true;
						self.sponsorshipProfile.addressDetails.state = self.userSelectedState;
					}
					self.isLoading = false;
					self.render();
					self.getSocialMediaData();
				})				
            }
        });		
    }

	ManageSponsorshipSVEditProfileView.prototype.updateSponsorProfiledata = function(e) {
		var self = this;
		this.getSocialMediaData();

		this.$(".sponsorship-profile").find('#form-field-company-name').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-tagline').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-about-company').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-contact-person').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-email').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-phone-number').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-mobile-number').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-website').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-address1').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-zipcode').trigger('focusout');
		// this.$(".sponsorship-profile").find('#form-field-sponsor-profile-status-list').trigger('change');
	
		this.$('.dynamic-inputs #social-media-row').each(function () {
			var socialMediaSiteIndex = self.$(this).find('#form-field-social').val();
			var siteLink = self.$(this).find('#form-field-profile-link').val();

			if(socialMediaSiteIndex == 0) {
				self.$(this).find("#form-field-social").siblings("p").addClass('err');
			}else{
				self.$(this).find("#form-field-social").siblings("p").removeClass('err');
			}

			var regex = /^(https:\/\/|http:\/\/|ftp:\/\/)([a-zA-Z0-9!._\-$/&%#@=?*])+[^\s]$/;

			if(siteLink.length == 0) {
				self.$(this).find("#form-field-profile-link").siblings("p").addClass('err');
			} else {
				//if(!regex.test(siteLink)) 
				if( siteLink.length > 999 || !regex.test(siteLink)) {
					self.$(this).find("#form-field-profile-link").siblings("p").addClass('err');
				} else {
					self.$(this).find("#form-field-profile-link").siblings("p").removeClass("err");
				}
			}
		});
		if(self.$(".sponsorship-profile").find('.err').length != 0) {
			//self.$(".sponsorship-profile").find(".global-error-msg #validation-error-message").show();
			self.$("#global-error-msg").show();
			setTimeout(function() {
				self.$("#global-error-msg").hide();
			}, 2000);
		} else {
			var data = {
				action: "update_sponsor_profile_data",
				sponsorshipProfile: self.sponsorshipProfile,
				formData: this.formData,
				sponsorProfile: this.sponsorProfile,
				socialMediaSiteRows: this.socialMediaSiteRows,
				documentsToUpload:  this.documentsToUpload,
				parentRecordId: this.parentRecordId
			};
			
			var isDisabled = this.$(e.currentTarget).attr('disabled');
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				this.$(e.currentTarget).text(Utils.translate("Saving..."));
				this.$(e.currentTarget).attr('disabled', true);
			}
		
			this.model.save(data).done(function(res) {
				if(!res.hasError){
					self.getSponsorProfile();
					self.$("#form-success-msg").show();
					self.$(e.currentTarget).text(Utils.translate("Save"));
					self.$(e.currentTarget).attr('disabled', false);

					setTimeout(function() {
						self.$("#form-success-msg").hide();
					}, 2000);
				}
				else{
					self.$(e.currentTarget).text(Utils.translate("Save"));
					self.$(e.currentTarget).attr('disabled', false);
					self.$("#global-error-msg").show();
					setTimeout(function() {
						self.$("#global-error-msg").hide();
					}, 2000);
				}
			});
		}

		
	}

	/*
		This method will execute when user will change the option from country dropdown.
		In that case, the respective states for the newly selected country will appear in state's dropdow,
		and if there are no states for any country then a blank textfield will appear on screen.
	*/
	ManageSponsorshipSVEditProfileView.prototype.countryOptionChange = function(e) {
		var self = this;
		//get and set the selected country from and to UI
		var newCountryCode = this.$(e.currentTarget).val();
		if(newCountryCode == '-1'){
			this.sponsorshipProfile.addressDetails.country = '';
			for(i=0; i< this.countries.length; i++){
				this.countries[i].selected = false;
			}
		}else{
			for(i=0; i< this.countries.length; i++){
				if(this.countries[i].code == newCountryCode){
					this.countries[i].selected = true;
					this.sponsorshipProfile.addressDetails.country = this.countries[i].name;
				}
				else
					this.countries[i].selected = false;
			}
		}
		//based on the selected country, fetch its states
		this.statesToDisplay = [];
		this.userSelectedState = '';
		for(let i=0; i<this.states.length; i++){
			if(this.states[i].countrycode == newCountryCode){
				this.statesToDisplay = this.states[i].states;
				break;
			}
		}
		//display the newly fetched states on UI
		if(this.statesToDisplay.length > 0){
			this.zeroState = false;
		}else{
			this.zeroState = true;
		}
		this.render();
	}


	ManageSponsorshipSVEditProfileView.prototype.getContext = function () {
		return {
			taskCompleted: this.taskCompleted,
			sponsorships: this.sponsorships,
			activeView: this.activeView,
			formData: this.formData,
			documentsUploaded: this.documentsUploaded,
			documentsToUpload: this.documentsToUpload,
			uploadedDocumentCount: this.uploadedDocumentCount,
			sponsorshipProfile:this.sponsorshipProfile,
			countries: this.countries,
			states: this.statesToDisplay,
			userSelectedState: this.userSelectedState,
			sponsorProfile: this.sponsorProfile,
			sppConfig: this.sppConfig,
			zeroState: this.zeroState,
			hideUploadDocBox: this.hideUploadDocBox,
			isLoading: this.isLoading,
			showVideoSection: this.showVideoSection,

			pagination: this.pagination,

			socialMediaItemIndex: this.socialMediaItemIndex,
			parentRecordId: this.parentRecordId,
			sponsorProfileStatusList: this.sponsorProfileStatusList,
			
			defaultProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-person.png')
    		),
			defaultBanner: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/default-cover-sponsorship.png')
    		),
			defaultCover: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-cover.png')
			),
			imgDefaultWizard: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-default.png')
			),
			imgWizardProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-profile.png')
			),
			imgWizardCover: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-cover.png')
			),
			imgWizardContact: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-contact.png')
			),
			imgWizardTagLine: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-tagline.png')
			),
			imgWizardFiles: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-files.png')
			),
			imgWizardWeblinks: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-weblinks.png')
			),
      imgWizardName: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-name.png')
			),
			imgWizardMedia: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-media.png')
			),
			imgWizardAbout: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-wizard-about.png')
			),
			

			icons: {
				imgUpload: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-upload.png')
				),
				icnRemoveMd: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')
				),
				icnRemoveRemove: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/img-remove.png')
				),
				icnCameraLg: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-camera-lg.png')
				),
				icnChangeCover: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-changecover.png')
				),
				icnFacebook: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-facebook.png')
				),
				icnAddImg: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-add.png')
				),
				icnRemove: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-remove-sm.png')
				),
				icnRemoveRed: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-3/icn-incorrect-md.png')
				),
				icnCloselg: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-remove-lg.png')
				),
				icnEditmd: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-edit-md.png')
				),
				icnDocInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-documents-inactive.png')
				),
				icnDocUploaded: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/group-3.png')
				),
				icnErrSm: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-error-sm.png')
				),
				icnView: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-view.png')
				),
				
			}
		}
	}

	ManageSponsorshipSVEditProfileView.prototype.docImageUpload = function (e) {
		e.stopImmediatePropagation();
  	this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
	}

	ManageSponsorshipSVEditProfileView.prototype.uploadGalleryImage = function (e) {
		e.stopImmediatePropagation();
  		this.$(e.currentTarget).siblings('#form-field-upload-gallery-img').trigger('click');
	}

	ManageSponsorshipSVEditProfileView.prototype.profileMousehover = function(e){
		this.$('.show-wizard').hide();
  	this.$('.img-start-wizard-profile').show();
	}
	ManageSponsorshipSVEditProfileView.prototype.bannerImageMousehover = function(e){
		this.$('.show-wizard').hide();
  	this.$('.img-start-wizard-cover').show();
	}
	ManageSponsorshipSVEditProfileView.prototype.contactDetailsMousehover = function(e){
		this.$('.show-wizard').hide();
  	this.$('.img-start-wizard-contact').show();
	}
	ManageSponsorshipSVEditProfileView.prototype.filesMousehover = function(e){
		this.$('.show-wizard').hide();
		this.$('.img-start-wizard-files').show();
	}
	ManageSponsorshipSVEditProfileView.prototype.socialWeblinksMousehover = function(e){
		this.$('.show-wizard').hide();
  	this.$('.img-start-wizard-weblinks').show();
	}
	ManageSponsorshipSVEditProfileView.prototype.galleryMousehover = function(e){
		this.$('.show-wizard').hide();
		this.$('.img-start-wizard-media').show();
	}
	ManageSponsorshipSVEditProfileView.prototype.aboutMousehover = function(e){
		this.$('.show-wizard').hide();
		this.$('.img-start-wizard-about').show();
	}
	ManageSponsorshipSVEditProfileView.prototype.hoverOutToDefault = function (e) {
		this.$('.show-wizard').hide();
		this.$('.img-start-wizard-default').show();
	}
	return ManageSponsorshipSVEditProfileView;
});

define('Saralux.Core.ManageSponsorshipSV.List.Active.View',	[
	'saralux_core_managesponsorshipsv_list_active.tpl',
		
	'Saralux.Core.ManageSponsorshipSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_managesponsorshipsv_list_active,
	
	ManageSponsorshipSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVActiveListView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		console.log('inside constructor');

		this.container = options.container;

		this.model = new ManageSponsorshipSVSS2Model();

		this.template = saralux_core_managesponsorshipsv_list_active;

		this.sponsorships = [];
		this.searchString = null;
		this.parent = options.parent;

		this.defaultPagination = {
			index	 	  : 0,
			pageSize 	  : 10,
			count    	  : 0,
			from     	  : 0,
			to            : 0,
			totalPages 	  : 0,
			displayWindow : 1,
			pages		  : []
		}
		this.pagination = Utils.deepCopy(this.defaultPagination);

		this.getActiveSponsorships();
	}

	ManageSponsorshipSVActiveListView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVActiveListView.prototype.constructor = ManageSponsorshipSVActiveListView;
	
    ManageSponsorshipSVActiveListView.prototype.getActiveSponsorships = function () {
		console.log('inside getActiveSponsorships');
		var self = this;
		
		var data = {
			action: 'get_active_sponsorships',
			pagination: this.pagination
		};

		if(this.searchString != null) {
			data.searchString = this.searchString;
		}

		this.model.clear({ silent: true });
		this.isLoading = true;
		this.model.save(data).then(function (res) {
			console.log({res});
			if( !res.hasError ) {
                self.sponsorships = res.data.sponsorships;
				self.pagination.count = res.data.count;
				self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
				self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
				self.pagination.to = (self.pagination.from + self.sponsorships.length) - 1;

				self.generatePages();
			}
			self.isLoading = false;
			self.render();
			console.log('search string after render : ', self.searchString);
		})
	}

	ManageSponsorshipSVActiveListView.prototype.generatePages = function() {
		var self = this;

		self.pagination.pages = [];
		var index = self.pagination.index;
		var totalPages = self.pagination.totalPages;
			
		for(var i = 0; i < totalPages; i++) {
			self.pagination.pages.push({
				index: i,
				number: (i+1),
				isActive: (index == i)?true:false
			});
		}
	}

	ManageSponsorshipSVActiveListView.prototype.toSponsorshipDetails = function(e) {
		var index = this.$(e.currentTarget).attr('data-index');
		this.parent.toSponsorshipDetails(this.sponsorships[index].sponsorshipId);
	}

	ManageSponsorshipSVActiveListView.prototype.searchSponsorship = function (e) {
		this.searchString = this.$('#search-sponsorship').val();
		this.getActiveSponsorships();
	}
	
	ManageSponsorshipSVActiveListView.prototype.clearSearchString = function (e) {
		this.searchString = null;
		this.getActiveSponsorships();
	}
	
	ManageSponsorshipSVActiveListView.prototype.goToPage = function(e) {
		this.pagination.index = this.$('#' + e.currentTarget.id).attr('data-index');
		
		this.getActiveSponsorships();
	}
	
	ManageSponsorshipSVActiveListView.prototype.goToPrev = function(e) {
		var previousPage = this.$('.active-page').prev().attr('data-index');
		if(previousPage) {
			this.$('.active-page').prev().trigger('click');
		}
	}

	ManageSponsorshipSVActiveListView.prototype.goToNext = function(e) {
		var nextPage = this.$('.active-page').next().attr('data-index');
		if(nextPage) {
			this.$('.active-page').next().trigger('click');
		}
	}

	ManageSponsorshipSVActiveListView.prototype.getEvents = function () {
		return {
			"click [data-action='m360-slxc-sponsorship-goto-prev']" : "goToPrev",
            "click [data-action='m360-slxc-sponsorship-goto-next']" : "goToNext",
            "click [data-action='m360-slxc-sponsorship-goto-page']" : "goToPage",
            "click [data-action='to-sponsorship-details']" : "toSponsorshipDetails",
			'click [data-action="m360-sponsorship-search"]': 'searchSponsorship',
			'click [data-action="m360-sponsorship-clear-search-string"]': 'clearSearchString'
		}
	}

	ManageSponsorshipSVActiveListView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			pagination: this.pagination,

            sponsorships: this.sponsorships,
			searchString: this.searchString,

			defaultProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-person.png')
    		),
      
			icons: {
				icnActiveActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-active-active.png')
				),
				icnActiveInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-active-inactive.png')
				),
				icnArchiveActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-subscriptions-active.png')
				),
				icnArchiveInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-subscriptions.png')
				),
				icnInProgress: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-in-progress.png')
				),
				icnApproved: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-approved.png')
				),
				icnView: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-view.png')
				)
			}
		}
	}

	return ManageSponsorshipSVActiveListView;
});

define('Saralux.Core.ManageSponsorshipSV.List.Archive.View',	[
	'saralux_core_managesponsorshipsv_list_archive.tpl',
		
	'Saralux.Core.ManageSponsorshipSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_managesponsorshipsv_list_archive,
	
	ManageSponsorshipSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipArchiveSVListView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.model = new ManageSponsorshipSVSS2Model();

		this.template = saralux_core_managesponsorshipsv_list_archive;

		this.sponsorships = [];
		this.parent = options.parent;

		this.defaultPagination = {
			index	 	  : 0,
			pageSize 	  : 10,
			count    	  : 0,
			from     	  : 0,
			to            : 0,
			totalPages 	  : 0,
			displayWindow : 1,
			pages		  : []
		}
		this.pagination = Utils.deepCopy(this.defaultPagination);

		this.getArchiveSponsorships();	
	}

	ManageSponsorshipArchiveSVListView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipArchiveSVListView.prototype.constructor = ManageSponsorshipArchiveSVListView;
	
    ManageSponsorshipArchiveSVListView.prototype.getArchiveSponsorships = function (e) {
		console.log('inside getArchiveSponsorships');
		var self = this;
		
		var data = {
			action: 'get_archive_sponsorships',
			pagination: this.pagination
		};

		this.model.clear({ silent: true });
		// this.isLoading = true;
		this.model.save(data).then(function (res) {
			console.log({res});
			if( !res.hasError ) {
                self.sponsorships = res.data.sponsorships;
				self.pagination.count = res.data.count;
				self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
				self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
				self.pagination.to = (self.pagination.from + self.sponsorships.length) - 1;

				self.generatePages();
			}
			self.isLoading = false;
			self.render()
		})
	}

	ManageSponsorshipArchiveSVListView.prototype.generatePages = function() {
		var self = this;

		self.pagination.pages = [];
		var index = self.pagination.index;
		var totalPages = self.pagination.totalPages;
			
		for(var i = 0; i < totalPages; i++) {
			self.pagination.pages.push({
				index: i,
				number: (i+1),
				isArchive: (index == i)?true:false
			});
		}
	}

	ManageSponsorshipArchiveSVListView.prototype.goToPage = function(e) {
		this.pagination.index = this.$('#' + e.currentTarget.id).attr('data-index');
		
		this.getArchiveSponsorships();
	}
	
	ManageSponsorshipArchiveSVListView.prototype.goToPrev = function(e) {
		var previousPage = this.$('.active-page').prev().attr('data-index');
		if(previousPage) {
			this.$('.active-page').prev().trigger('click');
		}
	}

	ManageSponsorshipArchiveSVListView.prototype.goToNext = function(e) {
		var nextPage = this.$('.active-page').next().attr('data-index');
		if(nextPage) {
			this.$('.active-page').next().trigger('click');
		}
	}

	ManageSponsorshipArchiveSVListView.prototype.getEvents = function () {
		return {
			"click [data-action='m360-slxc-sponsorship-goto-prev']" : "goToPrev",
            "click [data-action='m360-slxc-sponsorship-goto-next']" : "goToNext",
            "click [data-action='m360-slxc-sponsorship-goto-page']" : "goToPage",
		}
	}

	ManageSponsorshipArchiveSVListView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			pagination: this.pagination,

            sponsorships: this.sponsorships,

			defaultProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-person.png')
    		),
      
			icons: {
				icnArchiveArchive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-active-active.png')
				),
				icnArchiveInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-active-inactive.png')
				),
				icnArchiveArchive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-subscriptions-active.png')
				),
				icnArchiveInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-subscriptions.png')
				),
				icnInProgress: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-in-progress.png')
				),
				icnApproved: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-approved.png')
				),
				icnView: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-view.png')
				)
			}
		}
	}

	return ManageSponsorshipArchiveSVListView;
});

define('Saralux.Core.ManageSponsorshipSV.List.View',	[
	'saralux_core_managesponsorshipsv_list.tpl',
  
	'Saralux.Core.ManageSponsorshipSV.SS2Model',

	'Saralux.Core.ManageSponsorshipSV.List.Active.View',
	'Saralux.Core.ManageSponsorshipSV.List.Archive.View',

	'Saralux.Core.MyPortal.Context.Model',

	'Utils',
	'SCView',
  'jQuery'
], function (
	saralux_core_managesponsorshipsv_list_tpl,

	ManageSponsorshipSVSS2Model,

	ManageSponsorshipSVActiveView,
    ManageSponsorshipSVArchiveView,

	CtxModel,

	Utils,
	SCViewModule,
  	jQuery
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVListView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.template = saralux_core_managesponsorshipsv_list_tpl;
		
		this.parent = options.parent;
		
		this.model = new ManageSponsorshipSVSS2Model();
		this.count = 0;
		this.totalPages = 0;
		this.currentIndex = 0;
		this.index = 0;
		this.prev = -1;
		this.next = 1;
		this.from = 0;
		this.to = 0;
		this.hasResults = false;
		this.searchText = "";
		this.pageNumbers = [];
		this.isFirstPage = true;
		this.isLastPage = false;
		this.isLoading = true;

		this.ctxModel = CtxModel.getInstance();
		this.currentPermissions = this.ctxModel.getCurrentPermissions();

		this.sponsorships = this.getSponsorshipRegistrations()
	}

	ManageSponsorshipSVListView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVListView.prototype.constructor = ManageSponsorshipSVListView;

	ManageSponsorshipSVListView.prototype.getSponsorshipRegistrations = function (e) {
		var data = {
			action: 'get_sponsorship_registrations',
			pagination: this.pagination,
			searchString:this.searchText,
			pageSize:10,
			pageCount: this.count,
			index: this.index,
			orgId: parseInt(this.currentPermissions.servicePositionForId)
		};
		console.log('data : ',data)
		var self = this;
		self.searchString = this.searchText
		this.isLoading = true;
		this.render()
		this.model.save(data).then(function(res){
			console.log('res : ', res);
			if(!res.hasError)
			{
				self.sponsorships = res.data.sponsorships;
				console.log('sponsorships : ', self.sponsorships);
				self.count = res.data.count;
				self.hasResults =  res.data.count>0;
				self.totalPages = res.data.pageCount;
				self.currentIndex =  res.data.index;
				for(var i=0;i<res.data.pageRanges.length;i++)
				{
					res.data.pageRanges[i].index = i+1
					res.data.pageRanges[i].isCurrentIndex = (i==res.data.index)
				}
				self.isFirstPage = (0==res.data.index)
				self.isLastPage = ((res.data.pageRanges.length-1)==res.data.index)
				self.pageNumbers = res.data.pageRanges;
				self.prev = res.data.index - 1;
				self.next = res.data.index + 1;
				self.from  = (res.data.index * res.data.pageSize) + 1;
				var to = ((parseInt(res.data.index)+ 1) * res.data.pageSize)
				self.to  = res.data.count<to?res.data.count:to
			}else{
				console.error(res.errorMessage)
			}
			self.isLoading = false;
			self.render();
		})
	}

	
	ManageSponsorshipSVListView.prototype.sponsorshipTabs = function (e) {
		this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
		this.$(e.currentTarget).parent(".tab-header").find(".tabs div").remove();
		this.$(e.currentTarget).append("<div></div>");
		this.$(e.currentTarget).addClass("active");
		this.$(e.currentTarget).parent(".tab-header").siblings(".tab-body").hide();
		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		this.$("." + clickedtab).show();
	}
  
	ManageSponsorshipSVListView.prototype.triggerSearch = function() {
		this.searchText = this.$("#search-sponsorship").val();
		this.getSponsorshipRegistrations()
	}

	ManageSponsorshipSVListView.prototype.searchKeydown = function(e) {
		if(e.which == 13)
		{
			this.searchText = this.$("#search-sponsorship").val();
			this.getSponsorshipRegistrations()
		}
	}
	ManageSponsorshipSVListView.prototype.searchNext = function(e) {
			this.index =e.target.attributes["data-index"].value;
			this.getSponsorshipRegistrations()	
	}

	ManageSponsorshipSVListView.prototype.getEvents = function () {
		return {
			'click [data-action="m360-sponsorship-search"]' : 'triggerSearch',
			'keydown [data-action="search-input"]': 'searchKeydown',
			'click [data-action="m360-slxc-sponsorship-goto-page"]': 'searchNext'		
		};
	}

	ManageSponsorshipSVListView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			sponsorships: this.sponsorships,
			searchText: this.searchText,
			totalPages: this.totalPages,
			count: this.count,
			index: this.index,
			prev: this.prev,
			next: this.next,
			from:this.from,
			to:this.to,
			pageNumbers:this.pageNumbers,
			isFirstPage : this.isFirstPage,
			isLastPage :this.isLastPage,
			hasResults:this.hasResults,
			defaultProfile: Utils.getAbsoluteUrl(
				getExtensionAssetsPath('img/img-placeholder-person.png')
    		),
      
			icons: {
				icnActiveActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-active-active.png')
				),
				icnActiveInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-active-inactive.png')
				),
				icnArchiveActive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-subscriptions-active.png')
				),
				icnArchiveInactive: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-subscriptions.png')
				),
				icnInProgress: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-in-progress.png')
				),
				icnApproved: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-4/icn-approved.png')
				),
				icnCorrect: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-correct.png')
				),
				icnView: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-view.png')
				)
			}
		}
	}

	return ManageSponsorshipSVListView;
});

define('Saralux.Core.ManageSponsorshipSV.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function ManageSponsorshipSVSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/ManageSponsorshipSV/SuiteScript2/ManageSponsorshipSV.Service.ss"
                ), true
            );
        }
    }

    ManageSponsorshipSVSS2Model.prototype = Object.create(SCModel.prototype);
    ManageSponsorshipSVSS2Model.prototype.constructor = ManageSponsorshipSVSS2Model;
 
    return ManageSponsorshipSVSS2Model;
});

// @module Saralux.ManageSponsorshipSV
define('Saralux.Core.ManageSponsorshipSV.View',	[
	'saralux_core_managesponsorshipsv.tpl',
	
	'Saralux.Core.ManageSponsorshipSV.List.View',
	'Saralux.Core.ManageSponsorshipSV.Details.View',
	'Saralux.Core.ManageSponsorshipSV.Benefits.View',
	'Saralux.Core.ManageSponsorshipSV.Benefits.One.Time.Item.Discount.View',
	'Saralux.Core.ManageSponsorshipSV.Advertisement.View',
	'Saralux.Core.ManageSponsorshipSV.Edit.Profile.View',
	
	'SCView'
], function (
	saralux_core_managesponsorshipsv_tpl,
	ManageSponsorshipSVListView,
	ManageSponsorshipSVDetailsView,
	ManageSponsorshipSVBenefitsView,
	ManageSponsorshipSVBenefitsOneTimeItemDiscountView,
	ManageSponsorshipSVAdvertisementView,
	ManageSponsorshipSVEditProfileView,
	SCViewModule
){
	'use strict';

	var SCView = SCViewModule.SCView;

	function ManageSponsorshipSVView(options) {
		SCView.call(this, options);
		var self = this;
		jQuery(window).scrollTop(0);

		this.sponsorshipRegistrationId = '';
		this.template = saralux_core_managesponsorshipsv_tpl;
		this.container = options.container;
		this.sponsorshipId = null;

		this.childViews = {
			'ManageSponsorshipSV.List.View': function () {
				return new ManageSponsorshipSVListView({
					container: this.container,
					parent: this,
				});
			},
			'ManageSponsorshipSV.Details.View': function () {
				return new ManageSponsorshipSVDetailsView({
					container: this.container,
					parent: this,
					sponsorshipId: this.sponsorshipId
				});
			},
			'ManageSponsorshipSV.Benefits.View': function () {
				return new ManageSponsorshipSVBenefitsView({
					container: this.container,
					parent: this,
				});
			},
			'ManageSponsorshipSV.Benefits.One.Time.Item.Discount.View': function () {
				return new ManageSponsorshipSVBenefitsOneTimeItemDiscountView({
					container: this.container,
					parent: this,
				});
			},
			'ManageSponsorshipSV.Advertisement.View': function () {
				return new ManageSponsorshipSVAdvertisementView({
					container: this.container,
					parent: this,
				});
			},
			'ManageSponsorshipSV.Edit.Profile.View': function () {
				return new ManageSponsorshipSVEditProfileView({
					container: this.container,
					parent: this,
				});
			},
    	};
    	this.activeView = "ManageSponsorshipSV.List.View";
	}

	ManageSponsorshipSVView.prototype = Object.create(SCView.prototype);
	ManageSponsorshipSVView.prototype.constructor = ManageSponsorshipSVView;

	ManageSponsorshipSVView.prototype.getEvents = function () {
		return {
			'click [data-action="to-sponsorship-details"]': 'showSponsorshipDetails',
			'click [data-action="back-to-sponsorship-details"]': 'backToSponsorshipDetails',
			'click [data-action="to-sponsorship-benefits"]': 'showSponsorshipBenefits',
			'click [data-action="to-sponsorship-benefits-one-time-item-discount"]': 'showSponsorshipBenefitsOneTimeItemDiscount',
			'click [data-action="to-sponsorship-list"]': 'showSponsorshipList',
			'click [data-action="to-advertisement"]': 'showSponsorshipAdvertisement',
			'click [data-action="to-edit-profile"]': 'showSponsorshipEditProfile',
		}
	}

	ManageSponsorshipSVView.prototype.backToSponsorshipDetails = function (e) {
		this.activeTab = "tab3";
		this.showSponsorshipDetails(e,"tab3");
	
  	},

	ManageSponsorshipSVView.prototype.showSponsorshipDetails = function (e,activTabId) {
		console.log('inside view parent');
		this.sponsorshipRegistrationId = e.target.attributes["data-index"].value;
		this.parent = this
		this.activeTab = activTabId?activTabId:null
    	this.activeView = "ManageSponsorshipSV.Details.View";
    	this.render();
		if(activTabId)
		{
			this.$(activTabId).trigger( "click" )
		}
  	},

	ManageSponsorshipSVView.prototype.showSponsorshipBenefits = function (e) {
		this.benefitId = e.target.attributes["data-index"].value
		this.parent = this
	  	this.activeView = "ManageSponsorshipSV.Benefits.View";
	  	this.render();
	},
	ManageSponsorshipSVView.prototype.showSponsorshipBenefitsOneTimeItemDiscount = function (e) {
		// this.benefitId = e.target.attributes["data-index"].value
		this.parent = this
		console.log('one time item ....');
		// this.activeView = "MediaSeriesSV.Detail.View";
		// this.render();		
	  	this.activeView = "ManageSponsorshipSV.Benefits.One.Time.Item.Discount.View";
	  	this.render();
	},

	ManageSponsorshipSVView.prototype.showSponsorshipList = function (e) {
	  this.activeView = "ManageSponsorshipSV.List.View";
	  this.render();
	},

	ManageSponsorshipSVView.prototype.showSponsorshipAdvertisement = function (e) {
	  this.activeView = "ManageSponsorshipSV.Advertisement.View";
	  this.render();
	},

	ManageSponsorshipSVView.prototype.showSponsorshipEditProfile = function (e) {
	  this.activeView = "ManageSponsorshipSV.Edit.Profile.View";
	  this.render();
	},

	ManageSponsorshipSVView.prototype.getContext = function () {
		return {
		  activeView: this.activeView
		}
	}

	return ManageSponsorshipSVView;
});

define('Saralux.Core.ManageSponsorshipSV', [
	'Saralux.Core.ManageSponsorshipSV.View',
	'Saralux.Core.ManageSponsorshipSV.Edit.Profile.View'
], function (
	ManageSponsorshipSVView,
	ManageSponsorshipSVEditProfileView
){
	'use strict';

	return  {
		mountToApp: function mountToApp(container) {
			try {
				var Layout = container.getComponent('Layout');

				if (Layout) {
					Layout.registerView('SLXC0014', function () {
						return new ManageSponsorshipSVView({ container: container });
					});
					Layout.registerView('SLXC0015', function () {
						return new ManageSponsorshipSVEditProfileView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.ManageSponsorshipSV', ex.toString());
			}
		}
	};
});

define('Saralux.Core.MediaSeriesSV.Detail.View',	[
	'saralux_core_mediaseriessv_detail.tpl',
	'Saralux.Core.MediaSeriesSV.SS2Model',	
	
	'Utils',
	'SCView',
  	'jQuery'
    ], function (
	saralux_core_mediaseriessv_detail_tpl,
	
	MediaSeriesSVSS2Model,
	Utils,
	SCViewModule,
  	jQuery
)
{
    'use strict';

	var SCView = SCViewModule.SCView;

	function MediaSeriesSVDetailView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
		this.container = options.container;
		this.template = saralux_core_mediaseriessv_detail_tpl;
		this.parent = options.parent;
		
	}

	MediaSeriesSVDetailView.prototype = Object.create(SCView.prototype);
	MediaSeriesSVDetailView.prototype.constructor = MediaSeriesSVDetailView;

	MediaSeriesSVDetailView.prototype.getEvents = function () {
		return {
			// 'click [data-action="draft-btn-click"]': 'draftBtnClick',
			'click [data-action="scroll-left-right"]': 'scrollLeftRight',
		};
		
	}
	

	MediaSeriesSVDetailView.prototype.getContext = function () {
		return {
			defaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),
			defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/team-banner.png')),
			membershipImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-membershipcard.png')),
			defaultBg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/images-set-1/bg-mediaseries.png')),
			icons: {
				icnActiveActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-active-active.png')),
				icnPoints: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-points.png')),
				icnTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-tick.png')),
						
			}
		}
	}
	return MediaSeriesSVDetailView;
});


define('Saralux.Core.MediaSeriesSV.List.View',	[
	'saralux_core_mediaseriessv_list.tpl',
	'Saralux.Core.MediaSeriesSV.SS2Model',	
	
	'Utils',
	'SCView',
  	'jQuery'
    ], function (
	saralux_core_mediaseriessv_list_tpl,
	
	MediaSeriesSVSS2Model,
	
	Utils,
	SCViewModule,
  	jQuery
)
{
    'use strict';

	var SCView = SCViewModule.SCView;

	function MediaSeriesSVListView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
		this.container = options.container;
		this.template = saralux_core_mediaseriessv_list_tpl;
		this.parent = options.parent;
		
	}

	MediaSeriesSVListView.prototype = Object.create(SCView.prototype);
	MediaSeriesSVListView.prototype.constructor = MediaSeriesSVListView;

	MediaSeriesSVListView.prototype.getEvents = function () {
		return {
		};
	}
	
	MediaSeriesSVListView.prototype.getContext = function () {
		return {
			defaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),
			defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/team-banner.png')),
			membershipImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-membershipcard.png')),
			defaultBg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/images-set-1/bg-mediaseries.png')),
			icons: {
				icnActiveActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-active-active.png')),
				icnPoints: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-points.png')),
				icnFeatured: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-featured.png'))
						
			}
		}
	}
	return MediaSeriesSVListView;
});


// @module Saralux.M360_SLXC_Core.MediaSeriesSV
define('Saralux.Core.MediaSeriesSV.View',	[
	'saralux_core_mediaseriessv.tpl',
	//'Saralux.Core.MediaSeriesSV.SS2Model',

	'Saralux.Core.MediaSeriesSV.List.View',
	'Saralux.Core.MediaSeriesSV.Detail.View',
	
	'SCView'
], function (
	saralux_core_mediaseriessv_tpl,
	//MediaSeriesSVSS2Model,
	
	MediaSeriesSVListView,
	MediaSeriesSVDetailView,

	SCViewModule
)
{
    'use strict';

	var SCView = SCViewModule.SCView;

	function MediaSeriesSVView(options) {
		SCView.call(this, options);
		var self = this;
		jQuery(window).scrollTop(0);
		this.template = saralux_core_mediaseriessv_tpl;
		this.videoSeriesId = null;
		this.childViews = {
			'MediaSeriesSV.List.View': function () {
				return new MediaSeriesSVListView({
					container: this.container,
					parent: this,
				});
			},
			'MediaSeriesSV.Detail.View': function () {
				return new MediaSeriesSVDetailView({
					container: this.container,
					videoSeriesId: this.videoSeriesId,
					parent: this
				});
			},
    	};
    	this.activeView = "MediaSeriesSV.List.View";
		
		
	}
	
	  MediaSeriesSVView.prototype = Object.create(SCView.prototype);
	MediaSeriesSVView.prototype.constructor = MediaSeriesSVView;

	MediaSeriesSVView.prototype.getEvents = function () {
		return {
			'click [data-action="to-details"]': 'showDetails',
			'click [data-action="draft-btn-click"]': 'draftBtnClick',
			'click [data-action="overlay-btn-click"]': 'overlayboxClick',
			'click [data-action="scroll-left-right"]': 'scrollLeftRight',
			'click [data-action="scroll-left-right-two"]': 'scrollLeftRightTwo',
			'click [data-action="scroll-left-right-three"]': 'scrollLeftRightThree',
			'click [data-action="to-medialist"]': 'BackMedialist',
			
		}
	}
	MediaSeriesSVView.prototype.BackMedialist = function (e) {
        this.activeView = 'MediaSeriesSV.List.View';
        this.render();
        jQuery(window).scrollTop(0);
    }
	MediaSeriesSVView.prototype.overlayboxClick = function(e) {
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".draft-btn").removeClass("activeDraftBox");
	}

	MediaSeriesSVView.prototype.draftBtnClick = function(e) {
		if(!this.$(e.currentTarget).hasClass("activeDraftBox")){
			this.$(".overlaybox").show();
			
			this.$(e.currentTarget).siblings(".options-set").show();
			this.$(e.currentTarget).addClass("activeDraftBox");
		}
	}

	
	// MediaSeriesSVView.prototype.showDetails = function (e,activTabId) {

	MediaSeriesSVView.prototype.getContext = function () {
		return {
		  activeView: this.activeView
		}
	}
	MediaSeriesSVView.prototype.scrollLeftRight = function (e) {
		if (this.$(e.currentTarget).hasClass("scroll-left")) {
			this.$('#video-header').animate({
				scrollLeft: "-=200px"
			}, "medium");
		}
		else {
			this.$('#video-header').animate({
				scrollLeft: "+=200px"
			}, "medium");
		}
	}
	MediaSeriesSVView.prototype.scrollLeftRightTwo = function (e) {
		if (this.$(e.currentTarget).hasClass("scroll-left-two")) {
			this.$('#video-header-two').animate({
				scrollLeft: "-=200px"
			}, "medium");
		}
		else {
			this.$('#video-header-two').animate({
				scrollLeft: "+=200px"
			}, "medium");
		}
	}
	MediaSeriesSVView.prototype.scrollLeftRightThree = function (e) {
		if (this.$(e.currentTarget).hasClass("scroll-left-three")) {
			this.$('#video-header-three').animate({
				scrollLeft: "-=200px"
			}, "medium");
		}
		else {
			this.$('#video-header-three').animate({
				scrollLeft: "+=200px"
			}, "medium");
		}
	}
	// MediaSeriesSVView.prototype.changeTabView = function changeTabView(e) {
	// 	this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
	// 	this.$(e.currentTarget).addClass("active");

	// 	this.$("#tab1-body").hide();
	// 	this.$("#tab2-body").hide();
	// 	this.$("#tab3-body").hide();
	// 	this.$("#tab4-body").hide();
	// 	this.$("#tab5-body").hide();
	// 	this.$("#tab6-body").hide();
	// 	this.$("#tab7-body").hide();

	// 	var clickedtab = this.$(e.currentTarget).attr('tab-name');
		
	// 	this.$("." + clickedtab).show();
	// },
	MediaSeriesSVView.prototype.showDetails = function (e) {
		console.log('showDetails function');
		this.activeView = "MediaSeriesSV.Detail.View";
		this.render();		
		// jQuery(window).scrollTop(0);
	}
	return MediaSeriesSVView;
});



define("Saralux.Core.MediaSeriesSV.SS2Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/MediaSeriesSV/SuiteScript2/MediaSeriesSV.Service.ss"
            ),
            true
        )
    });
});


define('Saralux.Core.MediaSeriesSV',   [
		'Saralux.Core.MediaSeriesSV.View'
	],   function (
		MediaSeriesSVView
	){
	'use strict';

	return  {

		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0017', function() {
						return new MediaSeriesSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.MediaSeriesSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.MyPortal.Context.Model', [
	'Saralux.Core.ExternalLibraries.CryptoJS',
	'CoreFunctionality.Singleton',

	'Backbone',
  	'underscore'
],	function(
	CryptoJS,
	Singleton,
	
	Backbone,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({

		/*	Properties (set during My Portal initialization):
				m360CustomerId (Logged in customer's ID)
				m360CustomerFN (Logged in customer's First Name)
				m360CustomerLN (Logged in customer's Last Name)
		*/
		
		getCurrentPermissions: function getCurrentPermissions() {
			var currentPermissions = null;

			if(this.get('m360Context')) {
				var m360Context = this.get('m360Context');
				var currentPermissionsEnc = m360Context.currentPermissions;
				currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissionsEnc, 'kin5wtp20a'));
			}

			return currentPermissions;
		},

		getStates: function getStates() {
			var states = [];

			if(this.get('m360Context')) {
				var m360Context = this.get('m360Context');
				states = m360Context.states;
			}

			return states;
		},

		getCountries: function getCountries() {
			var countries = [];

			if(this.get('m360Context')) {
				var m360Context = this.get('m360Context');
				countries = m360Context.countries;
			}

			return countries;
		}
	}, Singleton);
});

define('Saralux.Core.MyPortal.Model', [
	'Backbone',
	'Utils',
  	'underscore'
],	function(
	Backbone,
	Utils,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(getExtensionAssetsPath('services/MyPortal.Service.ss'))
	});
});

define('Saralux.Core.MyPortal.View',	[
	'saralux_core_myportal.tpl',

	'Saralux.Core.CommonLibraries.General',

	'Saralux.Core.MyPortal.Model',
	'Saralux.Core.MyPortal.Context.Model',

	'Saralux.Core.ExternalLibraries.CryptoJS',
	
	'Utils',
	'Backbone',
	'jQuery',
	'underscore'
],	function (
	saralux_core_myportal_tpl,

	CoreCLGeneral,

	MyPortalModel,
	MyPortalContextModel,

	CryptoJS,
	
	Utils,
	Backbone,
	jQuery,
	_
) {
	
	'use strict';

	return Backbone.View.extend({

		template: saralux_core_myportal_tpl,

		events: {
			'click [data-action="m360-menu-trigger"]': 'triggerMenu',
			'click [data-action="m360-myportal-spswitcher"]': 'switchSP',
			'click [data-action="sidenav-click"]': 'sidenavClick',
			'click [data-action="close-nav"]': 'closeNav',
			'click [data-action="open-nav"]': 'openNav',
			'click [data-action="close-web-nav"]': 'closeWebNav',
			'click [data-action="open-web-nav"]': 'openWebNav',
			'click [data-action="collapsible-click"]': 'collapsibleClick'
		},

		defaultChild: {
			id: "SLXC0001",
			dataViewId: "SLXC0001"
		},

		activeChild: {
			id: "SLXC0001",
			dataViewId: "SLXC0001"
		},

		initialize: function (options) {
			var self = this;
			this.options = options;
			this.environment_component = this.options.container.getComponent('Environment');
			this.userprofile_component = this.options.container.getComponent('UserProfile');

			SC.mapsApiLoaded = false;

			this.isLicenseActive = true;

			this.model = new MyPortalModel();

			this.menuPermissions = [];
			this.currentPermissions = null;
			this.portalPermissions = [];

			this.m360Context = {
				currentPermissions: null,
				crmRecordTypes: [],
				environment_component: this.environment_component,
				states: [
					{"code":"AL","name":"Alabama"},{"code":"AK","name":"Alaska"},{"code":"AZ","name":"Arizona"},{"code":"AR","name":"Arkansas"},{"code":"AA","name":"Armed Forces Americas"},{"code":"AE","name":"Armed Forces Europe"},{"code":"AP","name":"Armed Forces Pacific"},{"code":"CA","name":"California"},{"code":"CO","name":"Colorado"},{"code":"CT","name":"Connecticut"},{"code":"DE","name":"Delaware"},{"code":"DC","name":"District of Columbia"},{"code":"FL","name":"Florida"},{"code":"GA","name":"Georgia"},{"code":"HI","name":"Hawaii"},{"code":"ID","name":"Idaho"},{"code":"IL","name":"Illinois"},{"code":"IN","name":"Indiana"},{"code":"IA","name":"Iowa"},{"code":"KS","name":"Kansas"},{"code":"KY","name":"Kentucky"},{"code":"LA","name":"Louisiana"},{"code":"ME","name":"Maine"},{"code":"MD","name":"Maryland"},{"code":"MA","name":"Massachusetts"},{"code":"MI","name":"Michigan"},{"code":"MN","name":"Minnesota"},{"code":"MS","name":"Mississippi"},{"code":"MO","name":"Missouri"},{"code":"MT","name":"Montana"},{"code":"NE","name":"Nebraska"},{"code":"NV","name":"Nevada"},{"code":"NH","name":"New Hampshire"},{"code":"NJ","name":"New Jersey"},{"code":"NM","name":"New Mexico"},{"code":"NY","name":"New York"},{"code":"NC","name":"North Carolina"},{"code":"ND","name":"North Dakota"},{"code":"OH","name":"Ohio"},{"code":"OK","name":"Oklahoma"},{"code":"OR","name":"Oregon"},{"code":"PA","name":"Pennsylvania"},{"code":"PR","name":"Puerto Rico"},{"code":"RI","name":"Rhode Island"},{"code":"SC","name":"South Carolina"},{"code":"SD","name":"South Dakota"},{"code":"TN","name":"Tennessee"},{"code":"TX","name":"Texas"},{"code":"UT","name":"Utah"},{"code":"VT","name":"Vermont"},{"code":"VA","name":"Virginia"},{"code":"WA","name":"Washington"},{"code":"WV","name":"West Virginia"},{"code":"WI","name":"Wisconsin"},{"code":"WY","name":"Wyoming"}
				]
			};
			SC.m360Context = this.m360Context;
			this.mpContextModel = MyPortalContextModel.getInstance();
			this.mpContextModel.set('m360Context', this.m360Context);

			this.userprofile_component.getUserProfile().then(function(profile) {
				// console.log('profile', profile);

				self.isLoggedIn = profile.isloggedin;
				self.isRecognized = profile.isrecognized;
				if(!(self.isLoggedIn && self.isRecognized)) {
					window.location.href = CoreCLGeneral.getLoginURL(self.environment_component);
				} else {
					var autoRedirectKeyword = self.environment_component.getConfig('CPRAutoRedirectKeyword');
					if(autoRedirectKeyword) {
						var autoRedirectPath = CoreCLGeneral.getCookie('M360AutoRedirect');
						if(autoRedirectPath) {
							CoreCLGeneral.deleteCookie("M360AutoRedirect");
							var rtcLink = self.environment_component.getConfig("CPRRedirectLink"); // Redirect automatically to Community Page
							window.location.href = rtcLink;
						}
					}

					self.customerId = profile.internalid;
					self.mpContextModel.set('m360CustomerId', self.customerId);
					self.mpContextModel.set('m360CustomerFN', profile.firstname);
					self.mpContextModel.set('m360CustomerLN', profile.lastname);

					var customFields = profile.customfields;
					var membershipId = null;
					for(var i = 0; customFields && (i < customFields.length); i++) {
						if(customFields[i].id == "custentity_slxm_membership_id") {
							membershipId = customFields[i].value;
							break;
						}
					}
					self.mpContextModel.set('m360MembershipId', membershipId);
				}
			});
		},

		collapsibleClick: function (e) {
			this.$(e.currentTarget).toggleClass("active");
			
			if (this.$(e.currentTarget).next(".content").height() != 0) {
				this.$(e.currentTarget).find("i").removeClass("fa-angle-up");
				this.$(e.currentTarget).find("i").addClass("fa-angle-down");
				this.$(e.currentTarget).next(".content").css('height',"0");
			} else {
				this.$(e.currentTarget).find("i").removeClass("fa-angle-down");
				this.$(e.currentTarget).find("i").addClass("fa-angle-up");
				this.$(e.currentTarget).next(".content").css('height',"auto");
			}
		},

		closeWebNav: function (e) {
			this.$(".webNav").removeClass("fa-angle-left");
			this.$(".webNav").addClass("fa-angle-right");
			this.$(".webNav").attr("data-action", 'open-web-nav');
			this.$(".myportal-nav").hide();
			this.$(".my-portal-container").removeClass("col-md-10 col-sm-10");
			this.$(".my-portal-container").addClass("col-md-12 col-sm-12");
		},

		openWebNav: function (e){
			this.$(".webNav").removeClass("fa-angle-right");
			this.$(".webNav").addClass("fa-angle-left");
			this.$(".webNav").attr("data-action", 'close-web-nav');
			this.$(".myportal-nav").show();
			this.$(".my-portal-container").removeClass("col-md-12 col-sm-12");
			this.$(".my-portal-container").addClass("col-md-10 col-sm-10");
		},

		sidenavClick: function (e) {
			if (this.$(window).width() < 479) {
				if(!this.$(e.currentTarget).children().hasClass("collapsible")){
					this.closeNav();
				}
			}
		},

		openNav: function() {
			this.$("#myportalSidenav").css("margin-left", "0px");
			this.$("#myportalSidenav > i").css("left","250px");
			this.$(".on-open-overlay").show();
			this.$("#hamburger-button").attr("data-action","close-nav");
		},

		closeNav: function() {
			this.$("#myportalSidenav").css("margin-left", "-250px");
			this.$("#myportalSidenav > i").css("left","-30px");
			this.$(".on-open-overlay").hide();
			this.$("#hamburger-button").attr("data-action","open-nav");
		},

		switchSP: function(e) {
			var index = this.$(e.currentTarget).val();

			for(var i = 0; i < this.portalPermissions.length; i++) {
				this.portalPermissions[i].selected = false;
			}
			this.portalPermissions[index].selected = true;
			this.currentPermissions = this.portalPermissions[index];

			this.menuPermissions = [];
			this.setMenuPermissions();

			this.activeChild = this.defaultChild;

			this.render();
			this.$("#m360-menu-SLXC0001").click();
		},

		setMenuPermissions: function() {
			var parentMenus = [];

			for(var i = 0; this.currentPermissions && i < this.currentPermissions.permissions.length; i++) {
				var currentPermissions = this.currentPermissions.permissions[i];

				if(currentPermissions.menu) {

					if(currentPermissions.menu.hasParent) {
						
						var parentId = currentPermissions.menu.parent.id;
						if(parentMenus.indexOf(parentId) == -1) {
							parentMenus.push(parentId);
							this.menuPermissions.push({
								id: parentId,
								name: currentPermissions.menu.parent.name,
								activeIcon: currentPermissions.menu.parent.activeIcon,
								inactiveIcon: currentPermissions.menu.parent.inactiveIcon,
								order: currentPermissions.menu.parent.order,
								hasChildren: true,
								childMenus: [{
									id: currentPermissions.menu.id,
									pageId: currentPermissions.id,
									activeIcon: currentPermissions.menu.activeIcon,
									inactiveIcon: currentPermissions.menu.inactiveIcon,
									name: currentPermissions.menu.name,
									order: currentPermissions.menu.order,
									active: false
								}],
								active: false
							});
						} else {
							for(var j = 0; j < this.menuPermissions.length; j++) {
								if(parseInt(this.menuPermissions[j].id) == parseInt(parentId)) {
									this.menuPermissions[j].childMenus.push({
										id: currentPermissions.menu.id,
										pageId: currentPermissions.id,
										activeIcon: currentPermissions.menu.activeIcon,
										inactiveIcon: currentPermissions.menu.inactiveIcon,
										name: currentPermissions.menu.name,
										order: currentPermissions.menu.order,
										active: false
									});
								}
							}
						}
					} else {
						this.menuPermissions.push({
							id: currentPermissions.menu.id,
							pageId: currentPermissions.id,
							activeIcon: currentPermissions.menu.activeIcon,
							inactiveIcon: currentPermissions.menu.inactiveIcon,
							name: currentPermissions.menu.name,
							order: currentPermissions.menu.order,
							hasChildren: false,
							childMenus: [],
							active: false
						});
					}

				}
			}

			this.menuPermissions.sort(function(a, b) {
				return parseInt(a.order) - parseInt(b.order);
			});
			for(var i = 0; this.menuPermissions && i < this.menuPermissions.length; i++) {
				var currentMenu = this.menuPermissions[i];
				if(currentMenu.hasChildren) {
					currentMenu.childMenus.sort(function(a, b) {
						return parseInt(a.order) - parseInt(b.order);
					});
				}
			}

			if(this.menuPermissions && this.menuPermissions.length > 0) {
				if(this.menuPermissions[0].hasChildren) {
					this.menuPermissions[0].childMenus[0].active = true;
				}
				this.menuPermissions[0].active = true;
			}

			this.activeChild = this.defaultChild;

			// this.m360Context.portalPermissions = CryptoJS.encryptValue(this.portalPermissions, 'kin5wtp20a');
			this.m360Context.currentPermissions = CryptoJS.encryptValue(JSON.stringify(this.currentPermissions), 'kin5wtp20a');
			this.mpContextModel.set('m360Context', this.m360Context);
		},
		
		triggerMenu: function(e) {
			// var pageId = e.currentTarget.id.split("m360-menu-")[1];
			var pageId = this.$(e.currentTarget).attr('data-page-id');
			this.activeChild.id = pageId;

			this.activeChild.id = pageId;
			this.activeChild.dataViewId = pageId;
			
			for(var i = 0; i < this.menuPermissions.length; i++) {
				var parentMenu = this.menuPermissions[i];

				if(parentMenu.hasChildren) {
					var isChildActive = false;

					for(var j = 0; j < parentMenu.childMenus.length; j++) {
						var childMenu = parentMenu.childMenus[j];
						
						// if(parseInt(pageId) == parseInt(childMenu.pageId)) {
						if(pageId.indexOf(childMenu.pageId) != -1) {
							isChildActive = true;
							childMenu.active = true;
						} else {
							childMenu.active = false;
						}
					}

					if(isChildActive) {
						parentMenu.active = true;
					} else {
						parentMenu.active = false;
					}
				} else {
					// if(parseInt(pageId) == parseInt(parentMenu.pageId)) {
					if(pageId.indexOf(parentMenu.pageId) != -1) {
						parentMenu.active = true;
					} else {
						parentMenu.active = false;
					}
				}
			}
			
			this.render();
		},

		beforeShowContent: function beforeShowContent () {
			var self = this;
			
			return this.model.fetch().done(function(response) {
				// console.log('res', response);
				if(response.hasError) {
					console.error('ERROR: MyPortal.View.js', response.errorMessage);
				} else {
					self.isLicenseActive = response.isLicenseActive;
	
					if(self.isLicenseActive) {
						self.m360Context.crmRecordTypes = response.crmRecordTypes;
						self.m360Context.countries = response.countries;
						self.m360Context.states = response.states;
						self.mpContextModel.set('m360Context', self.m360Context);
		
						// console.log('pp', response.portalPermissions);
		
						// self.m360Context.portalPermissions = response.portalPermissions;
						// self.m360Context.currentPermissions = response.portalPermissions[0];
						self.portalPermissions = response.portalPermissions;
						self.currentPermissions = response.portalPermissions[0];
		
						for(var i = 0; self.portalPermissions && (i < self.portalPermissions.length); i++) {
							self.portalPermissions[i].selected = false;
						}
						if(self.portalPermissions && (self.portalPermissions.length > 0)) {
							self.portalPermissions[0].selected = true;
						}
		
						self.setMenuPermissions();
					}

					// self.render();
				}
			});
		},

		getContext: function getContext() {
			return {				
				isLicenseActive: this.isLicenseActive,
				isLoggedIn: this.isLoggedIn,

				currentPermissions: this.currentPermissions,
				portalPermissions: this.portalPermissions,
				menuPermissions: this.menuPermissions,

				activeChild: this.activeChild,

				icnActiveMenu: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/m360-icn-generic-active.png')),
				icnInactiveMenu: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/m360-icn-generic-inactive.png')),

				logoutUrl: Utils.getAbsoluteUrl("logOut.ssp?logoff=T")
			};
		}
	});
});

define('Saralux.Core.MyPortal',   [
	'Saralux.Core.MyPortal.View',
	
	'Utils'
],   function (
	MyPortalView,
	
	Utils
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var pageType = container.getComponent('PageType');
				pageType.registerPageType({
					name: 'MyPortal_Main',
					view: MyPortalView,
					routes: ['my-portal'],
					defaultTemplate: {
						name: 'saralux_core_myportal.tpl',
						displayName: 'My Portal - Default'
					}
				});
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.MyPortal', ex.toString());
			}

		}
	};
});

define('Saralux.Core.MyPublicationsSV.Details.View',	[
	'saralux_core_mypublicationssv_details.tpl',

	'Saralux.Core.MyPortal.Context.Model',

	'Saralux.Core.MyPublicationsSV.SS2Model',
	
	'Backbone',
	'Utils',
	'underscore',
    'SCView'
], function (
	saralux_core_mypublicationssv_details_tpl,

	MyPortalContextModel,
	
	MyPublicationsSS2Model,

	Backbone,
	Utils,
	_,
	SCViewModule,
)
{
    'use strict';

    var SCView = SCViewModule.SCView;

    function MyPublicationsSVDetailsView(options) {
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.template = saralux_core_mypublicationssv_details_tpl;
        this.defaultPagination = {
            pageSize: 10,
            index: 0
        }
        this.parent = options.parent;
        this.selectedPublicationId = options.selectedPublicationId;
        
        this.model = new MyPublicationsSS2Model();

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');
        this.activepublicationDetailsTab = "digital_issues"
        this.digitalLibrary = [];
        this.activePubSubscriptionId = this.activePubSubscriptionId || null;
        this.publicationPagination = this.parent.publicationPagination;
        this.publicationDetails = null;
        this.activePublications = [];
        this.publications = [];

        this.getDigitalPublicationDetails();
    }


    MyPublicationsSVDetailsView.prototype = Object.create(SCView.prototype);
	MyPublicationsSVDetailsView.prototype.constructor = MyPublicationsSVDetailsView;
	
    MyPublicationsSVDetailsView.prototype.getEvents = function() {
        return {
            'click [data-action="list-tabs-click"]': 'listTabsClick',
            'click [data-action="page-change-digital-issues-pagination"]': 'digitalIssuesNext',
            'click [data-action="page-change-print-issues-pagination"]': 'printIssuesNext',
            'click [data-action="view-digital-issues-details"]': 'viewDigitalIssues'

        }
    },

    MyPublicationsSVDetailsView.prototype.listTabsClick = function (e) {
		 this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
            this.$(e.currentTarget).parent(".tab-header").find(".tabs div").remove();
            this.$(e.currentTarget).append("<div></div>");
            this.$(e.currentTarget).addClass("active");
    
            this.$("#tab1-body").hide();
            this.$("#tab2-body").hide();
    
            var clickedtab = this.$(e.currentTarget).attr('tab-name');
            
            this.$("." + clickedtab).show();
	},
        MyPublicationsSVDetailsView.prototype.viewDigitalIssues = function (e) {
            console.log('inside openDigitalPublication');
           this.selectedPublicationId = this.$(e.currentTarget).attr('digital-issue-id');
            this.parent.selectedPublicationId = this.$(e.currentTarget).attr('digital-issue-id');
            console.log('current id : ', this.parent.selectedPublicationId);
            this.parent.activeTab = 'tab2'
            console.log('483')
            this.parent.publicationPagination = this.publicationPagination
            this.parent.activeView = 'MyPublicationsSV.SinglePublication.View';
            this.parent.render();
            jQuery(window).scrollTop(0);
        },

    MyPublicationsSVDetailsView.prototype.digitalIssuesNext = function (e) {
        this.publicationPagination = this.publicationPagination ||  {}
        this.publicationPagination.digitalPagination = JSON.parse(JSON.stringify(this.defaultPagination))
        var index = this.$(e.currentTarget).attr('data-index');
        this.publicationPagination.digitalPagination.index = index;
        this.activepublicationDetailsTab = "digital_issues"
        this.getDigitalPublicationDetails()
    },
        MyPublicationsSVDetailsView.prototype.printIssuesNext = function (e) {
            this.publicationPagination = this.publicationPagination || {}
            this.publicationPagination.printPagination =JSON.parse(JSON.stringify(this.defaultPagination))
            var index = this.$(e.currentTarget).attr('data-index');
            this.activepublicationDetailsTab = "print_issues"
            this.publicationPagination.printPagination.index = index;
            this.getDigitalPublicationDetails()
        },

        MyPublicationsSVDetailsView.prototype.generatePages = function (options,target) {
            var content = "";
            options.index = parseInt(options.index||0)
            options.index = isNaN(options.index)?0:options.index
            if(options.index>0){
                content = "<button class='page-no previous' data-action='page-change-"+target +"' id='publication-page-"+target +"-"+(options.index-1)+"' data-index='"+(options.index-1)+"'><i class='fa fa-angle-left' aria-hidden='true'></i></button>";
            }
            var showDots = false,truncated=false;
            for(var i=0;i<options.totalPages;i++) {

                if(showDots && !truncated)
                {
                    content += "<button class=\"transparent-bg page-no\">...</button>"
                    showDots = false;
                    truncated = true;
                }
1
                if( i<3
                    || i>options.totalPages-4
                    || i==options.index-1
                    || i == options.index+1
                    || i ==options.index
                ){
                    truncated = false;
                    content += "<button class='page-no "+(options.index==(i)?"active-page":"")+"' data-action='page-change-"+target +"' id='publication-page-"+target +"-"+(i)+"' data-index='"+(i)+"' >"+(i+1)+"</button>";
                }
                else if(!truncated){
                    showDots = true;
                }

            }
            if(options.index<options.totalPages-1){
                content += "<button class='page-no previous' data-action='page-change-"+target +"' id='publication-page-"+target +"-"+(options.index+1)+"' data-index='"+(options.index+1)+"'><i class='fa fa-angle-right' aria-hidden='true'></i></button>";
            }
            $("#"+target).html(content);
        }



    MyPublicationsSVDetailsView.prototype.getDigitalPublicationDetails = function () {
        var self = this
        console.log(this.selectedSubscriptionId)
        this.model.save({
            publicationSubId: this.parent.selectedSubcriptionPublicationId,//this.activePubSubscriptionId,
            pageDetails:this.publicationPagination,
            customerId:this.customerId,
            today:new Date().getTime(),
            action: "get_subscription_details"
        }).done(function(res) {
            console.log('publication details response : ', res);
            if(!res.hasError) {
                self.publicationDetails = res.publicationDetails;
            }
            self.template = saralux_core_mypublicationssv_details_tpl;
            self.isLoading = false;
            self.render();

            self.$("#"+self.activepublicationDetailsTab).click();

            self.generatePages(res.publicationDetails.digitalLibraries,'digital-issues-pagination');
            self.generatePages(res.publicationDetails.printLibraries,'print-issues-pagination');

            // jQuery(window).scrollTop(0);
        });    
    }
    
    MyPublicationsSVDetailsView.prototype.getContext = function () {
        return {
            message: "My Publications Details SV",
            publicationDetails:this.publicationDetails,
            icons: {
                icnDigitalActive: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-issues-active.png")),
                icnDigitalInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-issues.png")),
                icnPrintActive: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-4/icn-details-active.png")),
                icnStatusActive: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-status-active.png")),
                icnStatusPending: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-status-pending.png")),
                icnStatusExpired: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-status-expired.png')),
                icnView:Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png'))
            },
        }
    }
		
    return MyPublicationsSVDetailsView
});




define('Saralux.Core.MyPublicationsSV.List.View',	[
	'saralux_core_mypublicationssv_list.tpl',

	'Saralux.Core.MyPortal.Context.Model',

	'Saralux.Core.MyPublicationsSV.SS2Model',
	
	'Backbone',
	'Utils',
	'underscore',
    'SCView'
], function (
	saralux_core_mypublicationssv_list_tpl,

	MyPortalContextModel,
	
	MyPublicationsSS2Model,

	Backbone,
	Utils,
	_,
	SCViewModule,
)
{
    'use strict';

    var SCView = SCViewModule.SCView;

    function MyPublicationsSVListView(options) {
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.template = saralux_core_mypublicationssv_list_tpl;

        this.parent = options.parent;
        
        this.model = new MyPublicationsSS2Model();

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.digitalLibrary = [];
        this.activePubSubscriptionId = null;
        this.publicationDetails = null;
        this.activePublications = [];
        this.publications = [];
        this.filters = [];
        this.appliedFilters = {
            showAll: false,
            searchText: '',
            categories: [],
            types: [],
            media: [],
            sort: 1,
            dates: {
                fromDate : null,
                toDate   : null
            }
        };

        this.defaultPagination = {
            index	 	  : 0,
            pageSize 	  : 12,
            count    	  : 0,
            from     	  : 0,
            to            : 0,
            totalPages 	  : 0,
            displayWindow : 1,
            pages		  : []
        }
        this.digitalLibraryPagination = Utils.deepCopy(this.defaultPagination);
        this.publicationPagination  =   Utils.deepCopy(this.defaultPagination);

        this.totalMySubPages = 0;
        this.totalMyDigiLibPages = 0;

        this.totalMySubs = 0;
        this.totalMyDigiLibs = 0;

        this.sortOrder = [
            {id: 1, checked: true, text: "Sort by: Latest"},
            {id: 2, checked: false, text: "Sort by: Oldest"},
        ];

        this.hasActivePublications = false;
        this.hasPublications = false;

        this.isLoading = true;
        console.log("test92ss")
        if(this.parent.activeTab=="tab2"){
            this.appliedFilters = this.parent.mySubscriptionFilters
            this.publicationPagination.index = this.parent.subscriptionLisingPageIndex
            this.getMySubscriptions();
        }else{
            this.getMyDigitalLibrary();
        }

    }

    MyPublicationsSVListView.prototype = Object.create(SCView.prototype);
	MyPublicationsSVListView.prototype.constructor = MyPublicationsSVListView;


    MyPublicationsSVListView.prototype.getEvents = function() {
        return {
            "click [data-action='slxc-publication-open-digital-publication']": "openDigitalPublication",
            "click [data-action='to-details']": "showDetails",
            "click [data-action='to-list']": "showList",
            "click [data-action='m360-slxc-mps-update-tab']": "updateTab",
            "change [data-action='m360-slxc-mps-tab-1-category-change']": "tabOneCategoryChange",
            "change [data-action='m360-slxc-mps-tab-1-media-change']": "tabOneMediaChange",
            "change [data-action='m360-slxc-mps-tab-1-edition-change']": "tabOneEditionChange",
            "change [data-action='m360-slxc-mps-tab-1-sort']": "tabOneSort",
            "click [data-action='m360-slxc-mps-search']": "tabOneSearch",
            "change [data-action='m360-slxc-mps-tab-2-category-change']": "tabTwoCategoryChange",
            "change [data-action='m360-slxc-mps-tab-2-media-change']": "tabTwoMediaChange",
            "change [data-action='m360-slxc-mps-tab-2-sort']": "tabTwoSort",
            "click [data-action='m360-slxc-mps-tab-2-search']": "tabTwoSearch",
            "keypress [id='m360-library-tab-2-search-string']": "searchTwoKeyPress",
            "click [data-action='tab-click']": "tabClick",
            'click [data-action="filter-btn-click"]': 'filterBtnClick',
            'click [data-action="overlay-click"]': 'overlayClick',
            'click [data-action="clear-date-click"]': 'clearDateClick',
            'click [data-action="subscription-apply-date-click"]': 'applySubscriptionDate',
            'click [data-action="subscription-clear-date-click"]': 'clearSubscriptionDate',
            'change [id="date-from-subscription"]': 'validatSubscriptionDate',
            'change [id="date-to-subscription"]': 'validatSubscriptionDate',
            // publication subscription
            'click [data-action="page-change"]':'goToNextPagePublication',

            // digital library pagination
            "click [data-action='m360-slxm-goto-prev-digital-library']" : "goToPrevDigitalLibrary",
            "click [data-action='m360-slxm-goto-next-digital-library']" : "goToNextDigitalLibrary",
            "click [data-action='m360-slxm-goto-page-digital-library']" : "goToPageDigitalLibrary",

            "click [data-action='get-date-filter-values']" : "applyDateFilter"
        }
    },

    MyPublicationsSVListView.prototype.clearDateClick = function (e) {
		var $dates = $('#date-from, #date-to').datepicker();
        $dates.datepicker('setDate', null);
        this.appliedFilters.dates.fromDate = null;
        this.appliedFilters.dates.toDate = null;
        this.getMyDigitalLibrary();
	},


    MyPublicationsSVListView.prototype.overlayClick = function (e) {
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".filter-btn").removeClass("activefilter");
	},

    MyPublicationsSVListView.prototype.filterBtnClick = function (e) {
		if(!this.$(e.currentTarget).hasClass("activefilter")){
			if(this.$(e.currentTarget).parents('div').hasClass('modal-body')){
				this.$(e.currentTarget).parents('.modal-body').find(".overlaybox").show();
			}
			else{
				this.$(".overlaybox").show();
			}
			this.$(e.currentTarget).siblings(".options-set").show();
			this.$(e.currentTarget).addClass("activefilter");
		}
	}

    MyPublicationsSVListView.prototype.tabClick = function (e) {
        this.$(".tabs").removeClass("active");
        this.$(".tabs div").remove();
        this.$(e.currentTarget).append("<div></div>");
        this.$(e.currentTarget).addClass("active");

        this.$(".tab-body").hide();
        var clickedtab = this.$(e.currentTarget).attr('tab-name');
        this.$("." + clickedtab).show();
    },

    MyPublicationsSVListView.prototype.clearAppliedFilters = function() {
        this.sortOrder[0].checked = true;
        this.sortOrder[1].checked = false;

        for(var i=0;i<this.filters.categories.length;i++) {
            this.filters.categories[i].checked = false;
        }
        this.appliedFilters.categories = [];

        for(var i=0;i<this.filters.media.length;i++) {
            this.filters.media[i].checked = false;
        }
        this.appliedFilters.media = [];

        for(var i=0;i<this.filters.types.length;i++) {
            this.filters.types[i].checked = false;
        }
        this.appliedFilters.types = [];
    },

    MyPublicationsSVListView.prototype.tabTwoSearch = function(e) {
        this.appliedFilters.searchText = $("#m360-library-tab-2-search-string").val();
        this.publicationPagination.index=0;
        this.clearAppliedFilters();

        this.isLoading = true;
        this.getMySubscriptions();
    },


        MyPublicationsSVListView.prototype.searchTwoKeyPress = function(e) {
            if(13 == e.keyCode){
                this.tabTwoSearch()
            }
        },




    MyPublicationsSVListView.prototype.tabOneSearch = function(e) {
        this.appliedFilters.searchText = $("#m360-library-search-string").val();
        this.clearAppliedFilters();
        this.isLoading = true;
        this.getMyDigitalLibrary();
    },

    MyPublicationsSVListView.prototype.tabTwoSort = function(e) {
        var sortOrder = $("#" + e.currentTarget.id).val();
        this.publicationPagination.index=0;
        if(this.sortOrder[0].id == sortOrder) {
            this.sortOrder[0].checked = true;
            this.sortOrder[1].checked = false;
        } else {
            this.sortOrder[0].checked = false;
            this.sortOrder[1].checked = true;
        }

        this.appliedFilters.sort = sortOrder;
        this.isLoading = true;
        this.getMySubscriptions();
    },

    MyPublicationsSVListView.prototype.tabOneSort = function(e) {
        var sortOrder = $("#" + e.currentTarget.id).val();

        if(this.sortOrder[0].id == sortOrder) {
            this.sortOrder[0].checked = true;
            this.sortOrder[1].checked = false;
        } else {
            this.sortOrder[0].checked = false;
            this.sortOrder[1].checked = true;
        }

        this.appliedFilters.sort = sortOrder;

        this.isLoading = true;
        this.getMyDigitalLibrary();
    },

    MyPublicationsSVListView.prototype.tabTwoCategoryChange = function(e) {
        var selectedCategory = $("#" + e.currentTarget.id).val();
        console.log(selectedCategory);
        this.publicationPagination.index=0;
        for(var i=0;i<this.filters.categories.length;i++) {
            if(this.filters.categories[i].id == selectedCategory) {
                this.filters.categories[i].checked = true;
            } else {
                this.filters.categories[i].checked = false;
            }
        }

        if(selectedCategory == 0) {
            this.appliedFilters.categories = [];
        } else {
            this.appliedFilters.categories[0] = selectedCategory;
        }

        this.isLoading = true;
        this.getMySubscriptions();
    },
    MyPublicationsSVListView.prototype.clearSubscriptionDate = function(e){
        this.$('#date-from-subscription').val(null)
        this.$('#date-to-subscription').val(null)
        this.appliedFilters.dates.fromDate = null
        this.appliedFilters.dates.toDate =null
       this.getMySubscriptions();
    }



    MyPublicationsSVListView.prototype.tabOneCategoryChange = function(e) {
        var selectedCategory = $("#" + e.currentTarget.id).val();
        console.log(selectedCategory);

        for(var i=0;i<this.filters.categories.length;i++) {
            if(this.filters.categories[i].id == selectedCategory) {
                this.filters.categories[i].checked = true;
            } else {
                this.filters.categories[i].checked = false;
            }
        }

        if(selectedCategory == 0) {
            this.appliedFilters.categories = [];
        } else {
            this.appliedFilters.categories[0] = selectedCategory;
        }

        console.log('applied filters : ', this.appliedFilters);

        this.isLoading = true;



    },

    MyPublicationsSVListView.prototype.tabTwoMediaChange = function(e) {	
        var selectedMedia = $("#" + e.currentTarget.id).val();
        this.publicationPagination.index=0;
        for(var i=0;i<this.filters.media.length;i++) {
            if(this.filters.media[i].id == selectedMedia) {
                this.filters.media[i].checked = true;
            } else {
                this.filters.media[i].checked = false;
            }
        }

        if(selectedMedia == 0) {
            this.appliedFilters.media = [];
        } else {
            this.appliedFilters.media[0] = selectedMedia;
        }

        this.isLoading = true;
        this.getMySubscriptions();
    },

    MyPublicationsSVListView.prototype.tabOneMediaChange = function(e) {	
        var selectedMedia = $("#" + e.currentTarget.id).val();

        for(var i=0;i<this.filters.media.length;i++) {
            if(this.filters.media[i].id == selectedMedia) {
                this.filters.media[i].checked = true;
            } else {
                this.filters.media[i].checked = false;
            }
        }

        if(selectedMedia == 0) {
            this.appliedFilters.media = [];
        } else {
            this.appliedFilters.media[0] = selectedMedia;
        }

        this.isLoading = true;
        this.getMyDigitalLibrary();
    },

    MyPublicationsSVListView.prototype.tabOneEditionChange = function(e) {
        var selectedEdition = $("#" + e.currentTarget.id).val();
        console.log(selectedEdition);

        for(var i=0;i<this.filters.types.length;i++) {
            if(this.filters.types[i].id == selectedEdition) {
                this.filters.types[i].checked = true;
            } else {
                this.filters.types[i].checked = false;
            }
        }

        if(selectedEdition == 0) {
            this.appliedFilters.types = [];
        } else {
            this.appliedFilters.types[0] = selectedEdition;
        }

        this.isLoading = true;
        this.getMyDigitalLibrary();
    },

    MyPublicationsSVListView.prototype.updateTab = function(e) {
        this.clearAppliedFilters();
        this.appliedFilters.searchText = ''
        if(e.currentTarget.id == 'tab1') {
            this.parent.activeTab = 'tab1'
            this.isLoading = true;
            this.getMyDigitalLibrary();
        } else {
            this.parent.activeTab = 'tab2'
            this.isLoading = true;
            this.getMySubscriptions();
        }
    },

    MyPublicationsSVListView.prototype.getMySubscriptions = function() {
        var self = this;
        console.log(this.appliedFilters)
        this.parent.mySubscriptionFilters = this.appliedFilters
        this.model.save({
            customerId: this.customerId,
            pageSize: this.publicationPagination.pageSize,
            index: this.publicationPagination.index,
            today: new Date().getTime(),
            fetchOnlyActive: false,
            activeFilters: this.appliedFilters,
            publicationPagination: this.publicationPagination,
            action: "get_subscription_list"
        }).done(function(res) {
            console.log(res);
            if(!res.hasError) {
                self.publications = res.publications;

                if(self.filters.length == 0) {
                    self.filters = res.filters;
                }
                
                self.hasPublications = false;
                if(self.publications.length > 0) {
                    self.hasPublications = true;
                }

                self.totalMySubPages = res.totalPages;
                self.totalMySubs = self.publications.length;
                self.isLoading = false;

                self.render();
                self.populateFilterValuesSubscription()
                self.tabTwoPaginate();
                $("#tab-2-pagination-cnt").html(Utils.translate('Showing $(0) out of $(1) results', self.totalMySubs, res.count));
                $(".tabs").removeClass("active");
                $(".tabs div").remove();
                $("#tab2").append("<div></div>");
                $("#tab2").addClass("active");

                $("#tab1-body").hide();
                $("#tab2-body").show();
            } else {
                self.isLoading = false;
            }
        });
    },
        MyPublicationsSVListView.prototype.populateFilterValuesSubscription = function() {
            console.log('inside populateFilterValues');
            console.log(this.appliedFilters.dates);
            if(this.appliedFilters.dates) {
                if(this.appliedFilters.dates.fromDate) {
                    this.$('#date-from-subscription').val(this.appliedFilters.dates.fromDate);
                }
                if(this.appliedFilters.dates.toDate) {
                    this.$('#date-to-subscription').val(this.appliedFilters.dates.toDate);
                }
                if(this.appliedFilters.categories.length > 0) {
                    this.$('#publication-category-2').val(this.appliedFilters.categories[0]);
                }

                if(this.appliedFilters.media.length > 0) {
                    var self = this
                    this.appliedFilters.media.forEach(function(mediaId){
                        self.$('#sub-media-select-'+mediaId).attr('selected',true);
                    })

                }

                if(this.appliedFilters.searchText != '') {
                    this.$('#m360-library-tab-2-search-string').val(this.appliedFilters.searchText);
                }
                if(this.appliedFilters.searchText != '') {
                    this.$('#publication-sort-2').val(this.appliedFilters.sort);
                }

            }
        }

    // Function for fetching digital library
    MyPublicationsSVListView.prototype.getMyDigitalLibrary = function() {
        var self = this;

        console.log('digital library pagination : ', this.digitalLibraryPagination);

        this.model.save({
            customerId: this.customerId,
            pageSize: 10,
            index: 0,
            today: this.getFormattedDate(),
            fetchOnlyActive: true,
            activeFilters: this.appliedFilters,
            digitalLibraryPagination: this.digitalLibraryPagination,
            action: "get_list"
        }).done(function(res) {
            console.log('get list response : ', res);
            if(!res.hasError) {
                
                self.digitalLibrary = res.digitalLibraryData.digitalLibrary;

                for (var i = 0; i < self.digitalLibrary.length; i++) {
                    for (var j = 0; j < self.digitalLibrary[i].media.length; j++) {
                        if(j != self.digitalLibrary[i].media.length-1) {
                            self.digitalLibrary[i].media[j].notLastElement = true;
                        }
                        else {
                            self.digitalLibrary[i].media[j].notLastElement = false;
                        }
                    }
                    console.log('media : ', self.digitalLibrary[i].media);
                }


                self.digitalLibraryPagination.count = res.digitalLibraryData.count;
                self.digitalLibraryPagination.totalPages = Math.ceil(self.digitalLibraryPagination.count/self.digitalLibraryPagination.pageSize);
                self.digitalLibraryPagination.from = (self.digitalLibraryPagination.index * self.digitalLibraryPagination.pageSize) + 1;
                self.digitalLibraryPagination.to = (self.digitalLibraryPagination.from + self.digitalLibrary.length) - 1;

                self.generatePages();

                console.log('digital library : ', self.digitalLibrary);
                self.activePublications = res.publications;
                if(self.filters.length == 0) {
                    self.filters = res.filters;
                }

                self.hasActivePublications = false;
                if(self.activePublications.length > 0) {
                    self.hasActivePublications = true;
                }

                console.log(self.hasActivePublications);

                self.totalMyDigiLibPages = res.totalPages;
                self.totalMyDigiLibs = self.activePublications.length;
                
                self.isLoading = false;
                self.render();

                self.populateFilterValues();

                self.tabOnePaginate();
                $("#tab-1-pagination-cnt").html(Utils.translate('Showing $(0) out of $(1) results', self.totalMyDigiLibs, res.count));
                $(".tabs").removeClass("active");
                $(".tabs div").remove();
                $("#tab1").append("<div></div>");
                $("#tab1").addClass("active");

                $("#tab2-body").hide();
                $("#tab1-body").show();
            } else {
                self.isLoading = false;
            }
        });
    },


    MyPublicationsSVListView.prototype.populateFilterValues = function() {
        console.log('inside populateFilterValues');
        console.log(this.appliedFilters.dates);
        if(this.appliedFilters.dates) {
            if(this.appliedFilters.dates.fromDate) {
                this.$('#date-from').val(this.appliedFilters.dates.fromDate);
            }
            if(this.appliedFilters.dates.toDate) {
                this.$('#date-to').val(this.appliedFilters.dates.toDate);
            }
            if(this.appliedFilters.categories.length > 0) {
                this.$('#publication-category').val(this.appliedFilters.categories[0]);
            }
            if(this.appliedFilters.searchText != '') {
                this.$('#m360-library-search-string').val(this.appliedFilters.searchText);
            }
            if(this.appliedFilters.searchText != '') {
                this.$('#publication-sort').val(this.appliedFilters.sort);
            }

        }
    }
    
    MyPublicationsSVListView.prototype.tabTwoPaginate = function() {
        var content = "";
        if(this.publicationPagination.index>0){
            content = "<button class='page-no previous' data-action='page-change' id='publication-page-"+(this.publicationPagination.index-1)+"' data-index='"+(this.publicationPagination.index-1)+"'><i class='fa fa-angle-left' aria-hidden='true'></i></button>";
        }
        var showDots = false,truncated=false;
        for(var i=0;i<this.totalMySubPages;i++) {


            if(showDots && !truncated)
            {
                content += "<button class=\"transparent-bg page-no\">...</button>"
                showDots = false;
                truncated = true;
            }

            if( i<3
                || i>this.totalMySubPages-4
                || i==this.publicationPagination.index-1
                || i == this.publicationPagination.index+1
                || i ==this.publicationPagination.index
            ){
                truncated = false;
                content += "<button class='page-no "+(this.publicationPagination.index==(i)?"active-page":"")+"' data-action='page-change' id='publication-page-"+(i)+"' data-index='"+(i)+"' >"+(i+1)+"</button>";
            }
            else if(!truncated){
                showDots = true;
            }

        }
        if(this.publicationPagination.index<this.totalMySubPages-1){
            content += "<button class='page-no previous' data-action='page-change' id='publication-page-"+(this.publicationPagination.index+1)+"' data-index='"+(this.publicationPagination.index+1)+"'><i class='fa fa-angle-right' aria-hidden='true'></i></button>";
        }

        $("#tab-2-pagination").html(content);
    },

    MyPublicationsSVListView.prototype.tabOnePaginate = function() {
        var content = "<button class='page-no previous'><i class='fa fa-angle-left' aria-hidden='true'></i></button>";
        for(var i=0;i<this.totalMyDigiLibPages;i++) {
            if(i == 0) {
                content += "<button class='page-no active-page'>1</button>";
            } else {
                content += "<button class='page-no'>"+(i+1)+"</button>";
            }
        }
        content += "<button class='page-no previous'><i class='fa fa-angle-right' aria-hidden='true'></i></button>";
        
        $("#tab-1-pagination").html(content);
    },

    MyPublicationsSVListView.prototype.getFormattedDate = function() {
        var date = new Date().toJSON().slice(0, 10); 
        var formattedDate = date.slice(5, 7) + '/'  
                    + date.slice(8, 10) + '/'  
                    + date.slice(0, 4); 
        console.log('formatted date : ', formattedDate);

        return formattedDate;
    },

    MyPublicationsSVListView.prototype.openDigitalPublication = function (e) {
        console.log('inside openDigitalPublication');

        this.selectedPublicationId = e.currentTarget.id;
        this.parent.selectedPublicationId = e.currentTarget.id;
        console.log('current id : ', this.parent.selectedPublicationId);
        this.parent.activeView = 'MyPublicationsSV.SinglePublication.View';
        this.parent.render();
        jQuery(window).scrollTop(0);
    },

    MyPublicationsSVListView.prototype.showDetails = function (e) {
        console.log("test")

        this.selectedSubcriptionPublicationId = this.$(e.currentTarget).attr('data-subscription-id');
        this.parent.selectedSubcriptionPublicationId = this.$(e.currentTarget).attr('data-subscription-id');
        this.parent.activeView = 'MyPublicationsSV.Details.View';
       // this.parent.mySubscriptionFilters = this.filters
        this.parent.mySubscriptionFilters = this.appliedFilters
        this.parent.subscriptionLisingPageIndex = this.publicationPagination.index
        this.parent.publicationPagination  = {
                digitalPagination:this.parent.defaultPagination,
                printPagination:this.parent.defaultPagination
            }
        this.parent.render();
        jQuery(window).scrollTop(0);
    },
    
    MyPublicationsSVListView.prototype.generatePages = function () {
        var self = this;

        self.digitalLibraryPagination.pages = [];
        var index = self.digitalLibraryPagination.index;
        var totalPages = self.digitalLibraryPagination.totalPages;
            
        for(var i = 0; i < totalPages; i++) {
            self.digitalLibraryPagination.pages.push({
                index: i,
                number: (i+1),
                isActive: (index == i)?true:false
            });
        }
    },

    MyPublicationsSVListView.prototype.goToPageDigitalLibrary = function(e) {
        this.digitalLibraryPagination.index = this.$('#' + e.currentTarget.id).attr('data-index');
        this.getMyDigitalLibrary();
    },

        MyPublicationsSVListView.prototype.goToNextPagePublication = function(e) {
            var index = this.$('#' + e.currentTarget.id).attr('data-index');
            this.publicationPagination.index = index?parseInt(index):0
            this.getMySubscriptions();
        },

    
    MyPublicationsSVListView.prototype.goToPrevDigitalLibrary = function(e) {
        var previousPage = this.$('.active-page').prev().attr('data-index');
        if(previousPage) {
            this.$('.active-page').prev().trigger('click');
        }
    },

    MyPublicationsSVListView.prototype.goToNextDigitalLibrary = function(e) {
        var nextPage = this.$('.active-page').next().attr('data-index');
        if(nextPage) {
            this.$('.active-page').next().trigger('click');
        }
    },
    
    MyPublicationsSVListView.prototype.applySubscriptionDate = function(e) {

        var fromDate = this.$('#date-from-subscription').val()
        var toDate = this.$('#date-to-subscription').val()

        // var fromDate = this.$('#date-from').val();
        // var toDate = this.$('#date-to').val();
        console.log('from date : ', fromDate);
        console.log('to date : ', toDate);
        if(fromDate && fromDate != ""){
            this.appliedFilters.dates.fromDate = fromDate;
        }
        if(toDate && toDate != "") {
            this.appliedFilters.dates.toDate = toDate;
        }

        console.log('applied filters : ', this.appliedFilters);

        this.isLoading = true;
        this.getMySubscriptions();
    },

        MyPublicationsSVListView.prototype.validatSubscriptionDate = function(e){
            var fromDate = this.$('#date-from-subscription').val()
            var toDate = this.$('#date-to-subscription').val()
            this.$('#apply-date-subscription-bttn').attr("disabled",false)
            if(fromDate !="" & toDate !="")
            {
                var fromDateTime =  new Date(fromDate).getTime()
                var toDateTime =  new Date(toDate).getTime()

                if(fromDateTime>toDateTime){
                    this.$('#apply-date-subscription-bttn').attr("disabled",true)
                    console.log("validatSubscriptionDate")
                }
            }


        },

    MyPublicationsSVListView.prototype.applyDateFilter = function(e) {   
        var fromDate = this.$('#date-from').val();
        var toDate = this.$('#date-to').val();
     
        if(fromDate && fromDate != ""){
            this.appliedFilters.dates.fromDate = fromDate;
        }
        if(toDate && toDate != "") {
            this.appliedFilters.dates.toDate = toDate;
        }

        this.isLoading = true;
        this.getMyDigitalLibrary();
    },
    
    MyPublicationsSVListView.prototype.getContext = function () {
        return {
            message: "My Publications SV",

            isLoading: this.isLoading,

            appliedFilters: this.appliedFilters,
            digitalLibrary: this.digitalLibrary,
            digitalLibraryPagination: this.digitalLibraryPagination,

            publications: this.publications,
            hasPublications: this.hasPublications,

            activePublications: this.activePublications,
            hasActivePublications: this.hasActivePublications,

            totalMyDigiLibPages: this.totalMyDigiLibPages,
            totalMySubPages: this.totalMySubPages,

            totalMyDigiLibs: this.totalMyDigiLibs,
            totalMySubs: this.totalMySubs,

            filters: this.filters,

            sortOrder: this.sortOrder,

            publicationDetails: this.publicationDetails,

            icnCategory: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-category.png")),
            icnStatusActive: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-status-active.png")),
            icnStatusPending: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-status-pending.png")),
            icnStatusExpired: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-status-expired.png')),
            icnFormat: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-format.png')),
            icnType: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-type.png')),
            icnPurchaseDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-purchasedate.png')),
            icnCoverPortrait: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-cover-portrait.png')),
            icnIssueActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-issues-active.png')),
            icnIssue: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-issues.png')),
            icnOrderActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-order-active.png')),
            icnOrder: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-order.png')),
            icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
            icnDigitalActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-digital-active.png')),
            icnDigital: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-digital.png')),
            icnSubscriptionActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-subscriptions-active.png')),
            icnSubscription: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-subscriptions.png')),
            icnBlueCategory: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-blue-category.png')),
            icnBlueMedia: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-blue-media.png')),
            icnBlueDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-blue-date.png')),
            icnDownloadSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/img-download-blue.png')),
            icnDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-date.png')),
            icnTrashSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-remove-sm.png')),
        };
    }

    return MyPublicationsSVListView
});


define("Saralux.Core.MyPublicationsSV.SS2Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelModule,
    Utils
) {
    "use strict";

    var SCModel = SCModelModule.SCModel;

    function MyPublicationsSV2Model () {
        SCModel.call(this);

        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/MyPublicationsSV/SuiteScript2/MyPublicationsSV.Service.ss"
                ), true
            );
        }
    }

    MyPublicationsSV2Model.prototype = Object.create(SCModel.prototype);
    MyPublicationsSV2Model.prototype.constructor = MyPublicationsSV2Model;
 
    return MyPublicationsSV2Model;

    // return Backbone.Model.extend({
	// 	urlRoot: Utils.getAbsoluteUrl(
    //         getExtensionAssetsPath(
    //             "Modules/MyPublicationsSV/SuiteScript2/MyPublicationsSV.Service.ss"
    //         ),
    //         true
    //     )
	// });
});

define('Saralux.Core.MyPublicationsSV.SinglePublication.View',	[
	'saralux_core_mypublicationssv_single_publication.tpl',

	'Saralux.Core.MyPortal.Context.Model',

	'Saralux.Core.MyPublicationsSV.SS2Model',
	
	'Backbone',
	'Utils',
	'underscore',
    'SCView'
], function (
	saralux_core_mypublicationssv_single_publication_tpl,

	MyPortalContextModel,
	
	MyPublicationsSS2Model,

	Backbone,
	Utils,
	_,
	SCViewModule,
)
{
    'use strict';

    var SCView = SCViewModule.SCView;

    function MyPublicationsSVSinglePublicationView(options) {
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.template = saralux_core_mypublicationssv_single_publication_tpl;

        this.parent = options.parent;
        this.selectedPublicationId = options.selectedPublicationId;
        this.digitalLibraryDetails = {};
        
        this.model = new MyPublicationsSS2Model();

        this.mpContextModel = MyPortalContextModel.getInstance();
        this.customerId = this.mpContextModel.get('m360CustomerId');

        this.getDigitalPublicationDetails();
    }


    MyPublicationsSVSinglePublicationView.prototype = Object.create(SCView.prototype);
	MyPublicationsSVSinglePublicationView.prototype.constructor = MyPublicationsSVSinglePublicationView;
	
    MyPublicationsSVSinglePublicationView.prototype.getEvents = function() {
        return {
        }
    },

    MyPublicationsSVSinglePublicationView.prototype.getDigitalPublicationDetails = function () {
        var self = this;

        console.log('inside getDigitalPublicationDetails : ', this.selectedPublicationId);
        this.isLoading = true;
        this.model.save({ 
            publicationSubId: this.selectedPublicationId,
            action: "get_digital_library_details"
        }).done(function(res) {
            console.log('digital library details response : ', res);
            if(!res.hasError) {
                self.digitalLibraryDetails = res.digitalLibraryDetails;

                for (var j = 0; j < self.digitalLibraryDetails.media.length; j++) {
                    if(j != self.digitalLibraryDetails.media.length-1) {
                        self.digitalLibraryDetails.media[j].notLastElement = true;
                    }
                    else {
                        self.digitalLibraryDetails.media[j].notLastElement = false;
                    }
                }
            }
            self.isLoading = false;
            self.render();
        });    
    }
    
    MyPublicationsSVSinglePublicationView.prototype.getContext = function () {
        return {
            message: "My Publications Details SV",
            digitalLibraryDetails: this.digitalLibraryDetails,
            isLoading: this.isLoading,

            icnStatusActive: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-status-active.png")),
			icnStatusPending: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-status-pending.png")),
			icnStatusExpired: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-status-expired.png')),
            icnPublicationUnavailable: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-emptyinvoice2.png')),

        }
    }
		
    return MyPublicationsSVSinglePublicationView;
});




define('Saralux.Core.MyPublicationsSV.View',	[

	'Saralux.Core.MyPublicationsSV.List.View',
	'Saralux.Core.MyPublicationsSV.Details.View',
	'Saralux.Core.MyPublicationsSV.SinglePublication.View',

	'saralux_core_mypublicationssv.tpl',
	'saralux_core_mypublicationssv_list.tpl',
	'saralux_core_mypublicationssv_single_publication.tpl',
	'saralux_core_mypublicationssv_details.tpl',

	'Saralux.Core.MyPortal.Context.Model',

	'Utils',
	'underscore',
	'SCView'

], function (

	MyPublicationsSVListView,
	MyPublicationsSVDetailsView,
	MyPublicationsSVSinglePublicationView,

	saralux_core_mypublicationssv_tpl,
	saralux_core_mypublicationssv_list_tpl,
	saralux_core_mypublicationssv_single_publication_tpl,
	saralux_core_mypublicationssv_details_tpl,

	MyPortalContextModel,
	
	Utils,
	_,
	SCViewModule,
){
    'use strict';

	var SCView = SCViewModule.SCView;

	function MyPublicationsSVView(options) {
		console.log('inside MyPublicationsSVView');
		SCView.call(this, options);
		var self = this;
		jQuery(window).scrollTop(0);
		this.defaultPagination = {
			pageSize: 10,
			index: 0
		}
		this.mySubscriptionFilters = {}
		this.subscriptionLisingPageIndex = 0
		this.publicationPagination  = {
			digitalPagination:this.defaultPagination,
			printPagination:this.defaultPagination
		}
		this.template = saralux_core_mypublicationssv_tpl;
		this.container = options.container;
		this.activeTab = 'tab1'
		this.childViews = {
			'MyPublicationsSV.List.View': function () {
				return new MyPublicationsSVListView({
					container: this.container,
					parent: this,
				});
			},
			'MyPublicationsSV.Details.View': function () {
				return new MyPublicationsSVDetailsView({
					container: this.container,
					parent: this,
					selectedPublicationId : this.selectedPublicationId
				});
			},
			'MyPublicationsSV.SinglePublication.View': function () {
				return new MyPublicationsSVSinglePublicationView({
					container: this.container,
					parent: this,
					selectedPublicationId : this.selectedPublicationId
				});
			},
		};
		this.activeView = "MyPublicationsSV.List.View";
 	}

	MyPublicationsSVView.prototype = Object.create(SCView.prototype);
	MyPublicationsSVView.prototype.constructor = MyPublicationsSVView;

	MyPublicationsSVView.prototype.getEvents = function () {
		return {
			// "click [data-action='to-single-publication']": "showSinglePublication",
			// "click [data-action='to-details']": "showDetails",
			// "click [data-action='to-list']": "showList",
			// "click [data-action='m360-slxc-mps-update-tab']": "updateTab",
			// "change [data-action='m360-slxc-mps-tab-1-category-change']": "tabOneCategoryChange",
			// "change [data-action='m360-slxc-mps-tab-1-media-change']": "tabOneMediaChange",
			// "change [data-action='m360-slxc-mps-tab-1-edition-change']": "tabOneEditionChange",
			// "change [data-action='m360-slxc-mps-tab-1-sort']": "tabOneSort",
			// "click [data-action='m360-slxc-mps-tab-1-search']": "tabOneSearch",
			// "change [data-action='m360-slxc-mps-tab-2-category-change']": "tabTwoCategoryChange",
			// "change [data-action='m360-slxc-mps-tab-2-media-change']": "tabTwoMediaChange",
			// "change [data-action='m360-slxc-mps-tab-2-sort']": "tabTwoSort",
			// "click [data-action='m360-slxc-mps-tab-2-search']": "tabTwoSearch",
			// "click [data-action='tab-click']": "tabClick",
			"click [data-action='slxc-show-publication-list']": "showPublicationList",
			"click [data-action='slxc-show-subscription-list']": "showSubscriptionPublicationList",
		}
	}

	MyPublicationsSVView.prototype.tabClick = function (e) {
		this.$(".tabs").removeClass("active");
		this.$(".tabs div").remove();
		this.$(e.currentTarget).append("<div></div>");
		this.$(e.currentTarget).addClass("active");

		this.$(".tab-body").hide();
		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		this.$("." + clickedtab).show();
	},

	MyPublicationsSVView.prototype.clearAppliedFilters = function() {
		this.sortOrder[0].checked = true;
		this.sortOrder[1].checked = false;
		
		for(var i=0;i<this.filters.categories.length;i++) {
			this.filters.categories[i].checked = false;
		}
		this.appliedFilters.categories = [];

		for(var i=0;i<this.filters.media.length;i++) {
			this.filters.media[i].checked = false;
		}
		this.appliedFilters.media = [];

		for(var i=0;i<this.filters.types.length;i++) {
			this.filters.types[i].checked = false;
		}
		this.appliedFilters.types = [];
	},

	MyPublicationsSVView.prototype.tabTwoSearch = function(e) {
		this.appliedFilters.searchText = $("#m360-library-tab-2-search-string").val();
		
		this.clearAppliedFilters();

		this.isLoading = true;
		this.getMySubscriptions();
	},

	MyPublicationsSVView.prototype.tabOneSearch = function(e) {
		this.appliedFilters.searchText = $("#m360-library-search-string").val();
		
		this.clearAppliedFilters();

		this.isLoading = true;
		this.getMyDigitalLibrary();
	},

	MyPublicationsSVView.prototype.tabTwoSort = function(e) {
		var sortOrder = $("#" + e.currentTarget.id).val();

		if(this.sortOrder[0].id == sortOrder) {
			this.sortOrder[0].checked = true;
			this.sortOrder[1].checked = false;
		} else {
			this.sortOrder[0].checked = false;
			this.sortOrder[1].checked = true;
		}

		this.appliedFilters.sort = sortOrder;

		this.isLoading = true;
		this.getMySubscriptions();
	},

	MyPublicationsSVView.prototype.tabOneSort = function(e) {
		var sortOrder = $("#" + e.currentTarget.id).val();

		if(this.sortOrder[0].id == sortOrder) {
			this.sortOrder[0].checked = true;
			this.sortOrder[1].checked = false;
		} else {
			this.sortOrder[0].checked = false;
			this.sortOrder[1].checked = true;
		}

		this.appliedFilters.sort = sortOrder;

		this.isLoading = true;
		this.getMyDigitalLibrary();
	},

	MyPublicationsSVView.prototype.tabTwoCategoryChange = function(e) {
		var selectedCategory = $("#" + e.currentTarget.id).val();
		console.log(selectedCategory);

		for(var i=0;i<this.filters.categories.length;i++) {
			if(this.filters.categories[i].id == selectedCategory) {
				this.filters.categories[i].checked = true;
			} else {
				this.filters.categories[i].checked = false;
			}
		}

		if(selectedCategory == 0) {
			this.appliedFilters.categories = [];
		} else {
			this.appliedFilters.categories[0] = selectedCategory;
		}

		this.isLoading = true;
		this.getMySubscriptions();
	},

	MyPublicationsSVView.prototype.tabOneCategoryChange = function(e) {
		var selectedCategory = $("#" + e.currentTarget.id).val();
		console.log(selectedCategory);

		for(var i=0;i<this.filters.categories.length;i++) {
			if(this.filters.categories[i].id == selectedCategory) {
				this.filters.categories[i].checked = true;
			} else {
				this.filters.categories[i].checked = false;
			}
		}

		if(selectedCategory == 0) {
			this.appliedFilters.categories = [];
		} else {
			this.appliedFilters.categories[0] = selectedCategory;
		}

		this.isLoading = true;
		this.getMyDigitalLibrary();
	},

	MyPublicationsSVView.prototype.tabTwoMediaChange = function(e) {	
		var selectedMedia = $("#" + e.currentTarget.id).val();

		for(var i=0;i<this.filters.media.length;i++) {
			if(this.filters.media[i].id == selectedMedia) {
				this.filters.media[i].checked = true;
			} else {
				this.filters.media[i].checked = false;
			}
		}

		if(selectedMedia == 0) {
			this.appliedFilters.media = [];
		} else {
			this.appliedFilters.media[0] = selectedMedia;
		}

		this.isLoading = true;
		this.getMySubscriptions();
	},

	MyPublicationsSVView.prototype.tabOneMediaChange = function(e) {	
		var selectedMedia = $("#" + e.currentTarget.id).val();

		for(var i=0;i<this.filters.media.length;i++) {
			if(this.filters.media[i].id == selectedMedia) {
				this.filters.media[i].checked = true;
			} else {
				this.filters.media[i].checked = false;
			}
		}

		if(selectedMedia == 0) {
			this.appliedFilters.media = [];
		} else {
			this.appliedFilters.media[0] = selectedMedia;
		}

		this.isLoading = true;
		this.getMyDigitalLibrary();
	},

	MyPublicationsSVView.prototype.tabOneEditionChange = function(e) {
		var selectedEdition = $("#" + e.currentTarget.id).val();
		console.log(selectedEdition);

		for(var i=0;i<this.filters.types.length;i++) {
			if(this.filters.types[i].id == selectedEdition) {
				this.filters.types[i].checked = true;
			} else {
				this.filters.types[i].checked = false;
			}
		}

		if(selectedEdition == 0) {
			this.appliedFilters.types = [];
		} else {
			this.appliedFilters.types[0] = selectedEdition;
		}

		this.isLoading = true;
		this.getMyDigitalLibrary();
	},

	MyPublicationsSVView.prototype.updateTab = function(e) {
		this.clearAppliedFilters();
		if(e.currentTarget.id == 'tab1') {
			this.isLoading = true;
			this.getMyDigitalLibrary();
		} else {
			this.isLoading = true;
			this.getMySubscriptions();
		}
	},

	MyPublicationsSVView.prototype.getMySubscriptions = function() {
		var self = this;

		this.model.save({
			customerId: this.customerId,
			pageSize: 10,
			index: 0,
			today: this.getFormattedDate(),
			fetchOnlyActive: false,
			activeFilters: this.appliedFilters,
			digitalLibraryPagination: this.digitalLibraryPagination,
			action: "get_list"
		}).done(function(res) {
			console.log(res);
			if(!res.hasError) {
				self.publications = res.publications;

				if(self.filters.length == 0) {
					self.filters = res.filters;
				}
				
				self.hasPublications = false;
				if(self.publications.length > 0) {
					self.hasPublications = true;
				}

				self.totalMySubPages = res.totalPages;
				self.totalMySubs = self.publications.length;
				self.isLoading = false;

				self.render();

				self.tabTwoPaginate();
				$("#tab-2-pagination-cnt").html(Utils.translate('Showing $(0) out of $(1) results', self.totalMySubs, res.count));
				$(".tabs").removeClass("active");
				$(".tabs div").remove();
				$("#tab2").append("<div></div>");
				$("#tab2").addClass("active");

				$("#tab1-body").hide();
				$("#tab2-body").show();
			} else {
				self.isLoading = false;
			}
		});
	},

	MyPublicationsSVView.prototype.getMyDigitalLibrary = function() {
		var self = this;

		console.log('digital library pagination : ', this.digitalLibraryPagination);

		this.model.save({
			customerId: this.customerId,
			pageSize: 10,
			index: 0,
			today: this.getFormattedDate(),
			fetchOnlyActive: true,
			activeFilters: this.appliedFilters,
			digitalLibraryPagination: this.digitalLibraryPagination,
			action: "get_list"
		}).done(function(res) {
			console.log('get list response : ', res);
			if(!res.hasError) {
				
				self.digitalLibrary = res.digitalLibraryData.digitalLibrary;

				for (var i = 0; i < self.digitalLibrary.length; i++) {
					for (var j = 0; j < self.digitalLibrary[i].media.length; j++) {
						if(j != self.digitalLibrary[i].media.length-1) {
							self.digitalLibrary[i].media[j].notLastElement = true;
						}
						else {
							self.digitalLibrary[i].media[j].notLastElement = false;
						}
					}
					console.log('media : ', self.digitalLibrary[i].media);
				}


				self.digitalLibraryPagination.count = res.digitalLibraryData.count;
				self.digitalLibraryPagination.totalPages = Math.ceil(self.digitalLibraryPagination.count/self.digitalLibraryPagination.pageSize);
				self.digitalLibraryPagination.from = (self.digitalLibraryPagination.index * self.digitalLibraryPagination.pageSize) + 1;
				self.digitalLibraryPagination.to = (self.digitalLibraryPagination.from + self.digitalLibrary.length) - 1;

				self.generatePages();

				console.log('digital library : ', self.digitalLibrary);
				self.activePublications = res.publications;
				if(self.filters.length == 0) {
					self.filters = res.filters;
				}

				self.hasActivePublications = false;
				if(self.activePublications.length > 0) {
					self.hasActivePublications = true;
				}

				console.log(self.hasActivePublications);

				self.totalMyDigiLibPages = res.totalPages;
				self.totalMyDigiLibs = self.activePublications.length;
				
				self.isLoading = false;
				self.render();

				self.tabOnePaginate();
				$("#tab-1-pagination-cnt").html(Utils.translate('Showing $(0) out of $(1) results', self.totalMyDigiLibs, res.count));
				$(".tabs").removeClass("active");
				$(".tabs div").remove();
				$("#tab1").append("<div></div>");
				$("#tab1").addClass("active");

				$("#tab2-body").hide();
				$("#tab1-body").show();
			} else {
				self.isLoading = false;
			}
		});
	},

	MyPublicationsSVView.prototype.tabTwoPaginate = function() {
		var content = "<button class='page-no previous'><i class='fa fa-angle-left' aria-hidden='true'></i></button>";
		for(var i=0;i<this.totalMySubPages;i++) {
			if(i == 0) {
				content += "<button class='page-no active-page'>1</button>";
			} else {
				content += "<button class='page-no'>"+(i+1)+"</button>";
			}
		}
		content += "<button class='page-no previous'><i class='fa fa-angle-right' aria-hidden='true'></i></button>";
		
		$("#tab-2-pagination").html(content);
	},

	MyPublicationsSVView.prototype.tabOnePaginate = function() {
		var content = "<button class='page-no previous'><i class='fa fa-angle-left' aria-hidden='true'></i></button>";
		for(var i=0;i<this.totalMyDigiLibPages;i++) {
			if(i == 0) {
				content += "<button class='page-no active-page'>1</button>";
			} else {
				content += "<button class='page-no'>"+(i+1)+"</button>";
			}
		}
		content += "<button class='page-no previous'><i class='fa fa-angle-right' aria-hidden='true'></i></button>";
		
		$("#tab-1-pagination").html(content);
	},

	MyPublicationsSVView.prototype.getFormattedDate = function() {
		var date = new Date().toJSON().slice(0, 10); 
		var formattedDate = date.slice(5, 7) + '/'  
					+ date.slice(8, 10) + '/'  
					+ date.slice(0, 4); 
		return formattedDate;
	},

	// MyPublicationsSVView.prototype.showSinglePublication = function (e) {
	// 	this.activePubSubscriptionId = e.currentTarget.id;
	// 	this.isLoading = true;
	// 	var self = this;

	// 	this.model.save({
	// 		publicationSubId: this.activePubSubscriptionId,
	// 		action: "get_details"
	// 	}).done(function(res) {
	// 		console.log(res);
	// 		if(!res.hasError) {
	// 			self.publicationDetails = res.publicationDetails;
	// 		}

	// 		self.template = saralux_core_mypublicationssv_single_publication_tpl;
	// 		self.isLoading = false;
	// 		self.render();

	// 		jQuery(window).scrollTop(0);
	// 	});
	// },

	MyPublicationsSVView.prototype.showPublicationList = function(e) {

		this.activeTab =  this.activeTab || 'tab1'
		if (this.activeTab == 'tab2'){
		//	this.activeView = 'MyPublicationsSV.List.View';
			console.log('483')
			this.activeView = 'MyPublicationsSV.Details.View';
		}
		else {
			this.activeView = 'MyPublicationsSV.List.View';
		}
		this.render();
		console.log("publicationPagination" , this.publicationPagination)
	},
		MyPublicationsSVView.prototype.showSubscriptionPublicationList = function(e) {
			this.activeView = 'MyPublicationsSV.List.View';
			this.activeTab = 'tab2'
			this.render();
		},
		
	MyPublicationsSVView.prototype.getContext = function getContext() {
		return {
			activeView: this.activeView,

			isLoading: this.isLoading,

			digitalLibrary: this.digitalLibrary,
			digitalLibraryPagination: this.digitalLibraryPagination,

			publications: this.publications,
			hasPublications: this.hasPublications,

			activePublications: this.activePublications,
			hasActivePublications: this.hasActivePublications,

			totalMyDigiLibPages: this.totalMyDigiLibPages,
			totalMySubPages: this.totalMySubPages,

			totalMyDigiLibs: this.totalMyDigiLibs,
			totalMySubs: this.totalMySubs,

			filters: this.filters,

			sortOrder: this.sortOrder,

			publicationDetails: this.publicationDetails,

			icnCategory: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-category.png")),
			icnFormat: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-format.png')),
			icnType: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-type.png')),
			icnPurchaseDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-purchasedate.png')),
			icnCoverPortrait: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-cover-portrait.png')),
			icnIssueActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-issues-active.png')),
			icnIssue: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-issues.png')),
			icnOrderActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-order-active.png')),
			icnOrder: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-order.png')),
			icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
			icnDigitalActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-digital-active.png')),
			icnDigital: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-digital.png')),
			icnSubscriptionActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-subscriptions-active.png')),
			icnSubscription: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-subscriptions.png')),
			icnBlueCategory: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-blue-category.png')),
			icnBlueMedia: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-blue-media.png')),
			icnBlueDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-blue-date.png')),
			icnDownloadSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/img-download-blue.png')),
		};
	}
	// });

	return MyPublicationsSVView;

});


define('Saralux.Core.MyPublicationsSV',   [
	'Saralux.Core.MyPublicationsSV.View'
],   function (
	MyPublicationsSVView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0007', function() {
						return new MyPublicationsSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.MyPublicationsSVView', ex.toString());
			}
		}
	};
});


// @module Saralux.MyTestsSV
define('Saralux.Core.MyTestsSV.View',	[
	'saralux_core_mytestssv.tpl',
	'saralux_core_mytestssv_list.tpl',
	
	'Utils',
	'SCView'
], function (
	saralux_core_mytestssv_tpl,
	saralux_core_mytestssv_list_tpl,
	Utils,
	SCViewModule
){
	'use strict';

	var SCView = SCViewModule.SCView;

	function MyTestsSVView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.template = saralux_core_mytestssv_list_tpl;
	}

	MyTestsSVView.prototype = Object.create(SCView.prototype);
	MyTestsSVView.prototype.constructor = MyTestsSVView;

	MyTestsSVView.prototype.getContext = function () {
		return {
			message: "My Tests",
			imgContriLanding: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
			icons:{
				icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
			}
			
		}
	}

	MyTestsSVView.prototype.getEvents = function () {
		return {
			// 'click [data-action=""]': 'functionName',
		}
	}

	// MyTestsSVView.prototype.functionName = function(e) {
	// 	this.template = saralux_tpl;
	// 	jQuery(window).scrollTop(0);
	// 	this.render();
	// }

	return MyTestsSVView;
});



define('Saralux.Core.MyTestsSV', [
	'Saralux.Core.MyTestsSV.View'
], function (
	MyTestsSVView
){
	'use strict';

	return  {
		mountToApp: function mountToApp(container) {
			try {
				var Layout = container.getComponent('Layout');

				if (Layout) {
					Layout.registerView('SLXC0013', function () {
						return new MyTestsSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.MyTestsSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.OrdersSV.View',	[
	'saralux_core_orderssv.tpl',
	'Utils',
	'Backbone',
	'jQuery',
	'underscore'
],	function (
	saralux_core_orderssv_tpl,
	Utils,
	Backbone,
	jQuery,
	_
) {

	'use strict';

	return Backbone.View.extend({

		template: saralux_core_orderssv_tpl,

		initialize: function (options) {

		},

		getContext: function getContext() {
			return {
				message: "My Orders"
			};
		}
	});
});

define('Saralux.Core.OrdersSV',   [
	'Saralux.Core.OrdersSV.View'
],   function (
	OrdersSVView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0004', function() {
						return new OrdersSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.OrdersSVView', ex.toString());
			}
		}
	};
});


define('Saralux.Core.PaymentDueSV.Checkout.View',	[
    'saralux_core_paymentduesv_checkout.tpl',

    // 'Saralux.Core.PaymentDueSV.Model',
    // 'Saralux.Core.PaymentDueSV.SS2Model',

    'Utils',
    'SCView'
],	function (
    saralux_core_paymentduesv_checkout_tpl,

    // PaymentDueSVModel,
    // PaymentDueSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function PaymentDueSVCheckout (options) {
        var self = this;
        SCView.call(this, options);
        jQuery(window).scrollTop(0);

        this.template = saralux_core_paymentduesv_checkout_tpl;
        // this.model = new PaymentDueSVSS2Model();

        this.container = options.container;
        this.parent = options.parent;

        this.isLoading = true;
        self.getData();
    }

    PaymentDueSVCheckout.prototype = Object.create(SCView.prototype);
    PaymentDueSVCheckout.prototype.constructor = PaymentDueSVCheckout;

    PaymentDueSVCheckout.prototype.getEvents = function () {
        return {
            "click [data-action='m360-slxc-pay-details-next']": "payDetailsNext",
        };
    }

    PaymentDueSVCheckout.prototype.payDetailsNext = function(e) {
        //$(".donation-amount-section #standard-error").hide();
        $(".pay-details-box").hide();
        $(".confirmation-section").show();
    }


    PaymentDueSVCheckout.prototype.getData = function () {
        var self = this;

        self.isLoading = false;
        self.render();
    }

    PaymentDueSVCheckout.prototype.getContext = function () {
        return {
            icnReviewInfo: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-review-info.png')),
            imgCard: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/master-card.png')),
            icons: {
                icnCardtip: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-cardtip.png')),
                icnTnC: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-info-tool-tip.png')),
                icnLearnMore: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-secure.png')),
                icnDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-date.png')),
                icnDownload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download-primary.png')),
            }
        }
    }
    return PaymentDueSVCheckout;
});

define('Saralux.Core.PaymentDueSV.Model', [
	'Backbone',
	'Utils',
  	'underscore'
],	function(
	Backbone,
	Utils,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(getExtensionAssetsPath('services/PaymentDueSV.Service.ss'))
	});
});

define('Saralux.Core.PaymentDueSV.View',	[
	'saralux_core_paymentduesv.tpl',

	'Saralux.Core.PaymentDueSV.Checkout.View',

	'Saralux.Core.PaymentDueSV.Model',
	'Saralux.Core.PaymentDueSV.SS2Model',

	'Saralux.Core.CommonLibraries.General',

	'Saralux.Core.ExternalLibraries.CryptoJS',

	'Utils',
	'Backbone',
	'jQuery',
	'underscore'
],	function (
	saralux_core_paymentduesv_tpl,

	paymentDueCheckoutView,

	PaymentDueSVModel,
	PaymentDueSVSS2Model,

	CoreCLGeneral,

	CryptoJS,

	Utils,
	Backbone,
	jQuery,
	_
) {

	'use strict';

	return Backbone.View.extend({

		template: saralux_core_paymentduesv_tpl,

		events: {
			"change [data-change='m360-mp-pd-change-filter']": "changeFilter",
			"click [data-action='m360-mp-pd-view-invoice']": "viewInvoice",
			"click [data-action='m360-mp-pd-view-all-invoices']": "viewAllInvoices",
			"click [data-action='m360-mp-pd-pay-invoice']": "payInvoice",
			'click [data-action="cc-method-click"]': "ccMethodClick",
			'click [data-action="to-invoice-payment-form"]': "toInvoicePaymentForm",
			'click [data-action="to-invoice-info-form2"]': "toInvoiceInfoForm2",
			'click [data-action="payment-form-next-button"]': "paymentFormNextButton",
			'click [data-action="m360-mp-pd-download-invoice"]': "downloadInvoice",
			'click [data-action="m360-mp-pd-get-installment-history"]': 'getInstallmentHistory',
			'click [data-action="m360-mp-pd-show-pay-invoice-modal"]': 'showPayInvoiceModal',
			'click [data-action="m360-mp-pd-process-payment"]': 'processPayment',
			'focusout [data-focusout="cc-name-focusout"]': 'ccNameFocusout',
			'focusout [data-focusout="cc-number-focusout"]': 'ccNumberFocusout',
			'focusout [data-focusout="cc-exp-focusout"]': 'ccExpFocusout',
			'focusout [data-focusout="cc-code-focusout"]': 'ccCodeFocusout',
			'keyup [data-keyup="cc-exp-keyup"]': 'ccExpKeyUpDown',
			'keydown [data-keydown="cc-exp-keydown"]': 'ccExpKeyUpDown',
			'click [data-action="invoice-form-submit-pre"]': 'invoiceFormSubmitPre',
			'focusout [data-focusout="form-compulsory-focusout"]': 'formCompulsoryFocusout',
			'focusout [data-focusout="form-zip-focusout"]': 'formZipFocusout',
			'focusout [data-focusout="input-required-focusout"]': "inputRequiredFocusout",
			'change [data-action="handle-redirect-external-url-checkbox"]': 'handleExternalLinkCheckbox',
			'change [data-action="m360-mp-pd-pay-type"]': 'payTypeChanged'
		},

		initialize: function (options) {
			jQuery(window).scrollTop(0);

			this.container = options.container;

			this.isDevEnv = false;
			try {
				var companyId = SC.ENVIRONMENT.companyId;

				if(companyId == "TSTDRV2097137") {
					this.isDevEnv = true;
				}
			} catch (error) {
				console.error("Error", error.toString());
			}

			var arkFsXCsv = 'kin5wtp20a';

			var self = this;
			this.m360Context = SC.m360Context;
			// this.states = this.m360Context.states;
			this.states = [];

			var currentPermissions = this.m360Context.currentPermissions;
			currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissions, arkFsXCsv));
			
			this.parentRecordId = currentPermissions.servicePositionForId;

			this.icnDownload = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-download.png'));
			this.cardSelectedImage = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-select-card.png'));
			
			this.icnDownloadPrimary = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download-primary.png'));
			this.icnDownloadGray = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download.png'));

			var paymentMethods = this.m360Context.environment_component.getSiteSetting('paymentmethods');
			this.paymentMethods = CoreCLGeneral.formatPaymentMethods(paymentMethods);

			this.environment_component = this.container.getComponent('Environment');

			this.creditCardMap = {
				mastercard: this.environment_component.getConfig('pmIdMastercard'),
				visa: this.environment_component.getConfig('pmIdVisa'),
				amex: this.environment_component.getConfig('pmIdAmericanExpress'),
				discover: this.environment_component.getConfig('pmIdDiscover')
			};
			
			this.listMode = true;
			this.paidSuccessfully = false;
			this.paymentData = null;

			this.installments = [];
			this.nextDueAmount = null;
			this.balAmount = null;

			this.invoices = [];

			this.activeInvoice = null;
			this.invoiceCount = 0;

			this.isLoading = true;
			this.activeView = null;

			this.parentInvoices = false;

			this.model = new PaymentDueSVModel();
			this.ss2Model = new PaymentDueSVSS2Model();

			this.userprofile_component = this.container.getComponent('UserProfile');
			this.userProfile = null;

			this.customerInfo = {
				id: "",
				firstName: "",
				lastName: "",
				emailId: "",
				phoneNo: "",
				addr1: "",
				addr2: "",
				city: "",
				state: "",
				country: "",
				zip: ""
			};

			this.userprofile_component.getUserProfile().then(function(res) {
				self.userProfile = res;
				self.initCustomerInfo();
				self.getInvoices();
			});
		},

		childViews: {
			'PaymentDue.Checkout': function() {
				return new paymentDueCheckoutView({
					container: this.container,
					parent: this
				});
			}
		},

		downloadInvoice: function(e) {
			var invoiceId = this.$(e.currentTarget).attr("data-id");
			var self = this;

			if(invoiceId) {
				this.$(e.currentTarget).find("img").attr("src", this.icnDownloadGray);
				this.$(e.currentTarget).find("span").html("<span class='disabled-btn'>" + Utils.translate("Downloading...") + "</span>");
				this.$(e.currentTarget).attr("data-action", "");

				var data = {
					action: 'download_invoice',
					invoiceId: invoiceId
				};
		
				//console.log({data});
		
				this.ss2Model.clear({ silent: true });
				this.ss2Model.save(data).then(function (res) {
					self.$(e.currentTarget).find("img").attr("src", self.icnDownloadPrimary);
					self.$(e.currentTarget).find("span").html(Utils.translate("Download Invoice"));
					self.$(e.currentTarget).attr("data-action", 'm360-mp-pd-download-invoice');
					
					//console.log({res});
					
					if(!res.hasError) {
						self.$("#embedded-document").attr("src", 'data:application/pdf;base64,' + res.invoiceData);
						self.$("#download-file-modal").modal("show");
					}
				});
			} else {
				this.$(e.currentTarget).find("img").attr("src", this.icnDownloadPrimary);
				this.$(e.currentTarget).find("span").html(Utils.translate("Download Invoice"));
				this.$(e.currentTarget).attr("data-action", 'm360-mp-pd-download-invoice');
				console.error("Invoice ID is null");
			}
		},

		getInstallmentHistory: function (e) {
			this.$(e.currentTarget).prop('disabled', true);
			var self = this;
			var invoiceId = this.$(e.currentTarget).attr('data-id');

			var data = {
				action: 'get_installment_history',
				invoiceId: invoiceId
			}
			console.log('get_installment_history Request', data);

			this.ss2Model.save(data).then(function (res) {
				console.log('get_installment_history Response', res);

				if (!res.hasError) {
					self.installments = res.installments;
				} else {
					self.installments = [];
				}

				self.render();
				self.$('#installment-history-modal').modal('show');
			});
		},

		showPayInvoiceModal: function (e) {
			this.$(e.currentTarget).prop('disabled', true);
			var self = this;
			var invoiceId = this.$(e.currentTarget).attr('data-id');

			this.nextDueAmount = null;
			this.balAmount = null;

			var data = {
				action: 'get_installment_history',
				invoiceId: invoiceId
			}
			console.log('get_installment_history Request', data);

			this.ss2Model.save(data).then(function (res) {
				console.log('get_installment_history Response', res);

				if (!res.hasError) {
					var installments = res.installments;
					for (var i = 0; i < installments.length; i++) {
						if (installments[i].status != 'Paid') {
							if (!self.nextDueAmount) {
								self.nextDueAmount = installments[i].amountRemaining;
							}

							if (!self.balAmount) {
								self.balAmount = parseFloat( installments[i].amountRemaining );
							} else {
								self.balAmount += parseFloat( installments[i].amountRemaining );
							}
						}
					}

					if (installments.length == 0) {
						self.balAmount = res.balAmount;
					}

					if (self.balAmount) {
						self.balAmount = parseFloat(self.balAmount).toFixed(2);
					}
				}

				self.render();
				self.$('#proceed-payment').attr('data-invoice-id', invoiceId);
				self.$('#pay-invoice-modal').modal('show');
			});
		},

		processPayment: function () {
			this.$('#proceed-payment').prop('disabled', true);
			var self = this;
			var canProceed = true;
			var invoiceId = this.$('#proceed-payment').attr('data-invoice-id');
			var paymentAmount = null;

			if (this.$('#pay-installment-1').is(':checked')) {
				paymentAmount = this.nextDueAmount;
			} else if (this.$('#pay-installment-2').is(':checked')) {
				paymentAmount = this.balAmount;
			} else {
				paymentAmount = this.$('#form-field-custom-amt').val();
			}

			if (!paymentAmount || this.$('#amount-error').hasClass('err')) {
				canProceed = false;
			}

			if (canProceed) {
				//comment this code before pushing it to repo
				// this.$("#pay-invoice-modal").modal('hide');
				// $('.modal-backdrop').remove();
				// $(document.body).removeClass("modal-open");
				// // $(document.body).css("padding", "0");
				// setTimeout(function () {
				// 	self.activeView = 'PaymentDue.Checkout';
				// 	self.render();
				// }, 300);
				//comment this code before pushing it to repo

				//uncomment this code before pushing it to repo
				var data = {
					action: 'process_invoice_payment',
					invoiceId: invoiceId,
					paymentAmount: paymentAmount
				};
				console.log('process_invoice_payment Request', data);

				this.ss2Model.clear({ silent: true });
				this.ss2Model.save(data).then(function (res) {
					console.log('process_invoice_payment Response', res);

					if (!res.hasError) {

					}

					self.$("#pay-invoice-modal").modal('hide');
					$('.modal-backdrop').remove();
					$(document.body).removeClass("modal-open");
					$(document.body).css("padding", "0");
					setTimeout(function () {
						self.isLoading = true;
						self.render();
						self.getInvoices();
					}, 300);
				});
				//uncomment this code before pushing it to repo
			}
		},

		getInvoices: function() {
			var self = this;
			this.model.fetch({
				data: {
					parentInvoices: this.parentInvoices,
					parentId: this.parentRecordId
				}
			}).done(function() {
				// //console.log('inv-mdl', self.model);
				
				self.invoices = self.model.get('invoices');
				self.activeInvoice = (self.invoices.length>0)?self.invoices[0]:null;
				self.invoiceCount = self.model.get('count');
				self.isLoading = false;
				self.render();
			});
		},

		changeFilter: function(e) {
			var filterOption = jQuery("#payment-due-filter").val();

			if(filterOption == 'company-invoices') {
				this.parentInvoices = true;
			} else {
				this.parentInvoices = false;
			}

			this.getInvoices();
		},

		initCustomerInfo: function initCustomerInfo() {			
			this.customerInfo.id = this.userProfile.internalid;
			this.customerInfo.firstName = this.userProfile.firstname;
			this.customerInfo.lastName = this.userProfile.lastname;
			this.customerInfo.emailId = this.userProfile.email;
			
			var addressBook = this.userProfile.addressbook;
			for(var i = 0; addressBook && i < addressBook.length; i++) {
				if(addressBook[i].defaultbilling === "T") {
					this.customerInfo.addr1 = addressBook[i].addr1;
					this.customerInfo.addr2 = addressBook[i].addr2;
					this.customerInfo.city = addressBook[i].city;
					this.customerInfo.state = addressBook[i].state;
					this.customerInfo.zip = addressBook[i].zip;
					this.customerInfo.country = addressBook[i].country;
				}
			}

			/* if(this.customerInfo.state != "") {
				for(var i = 0; i < this.states.length; i++) {
					if(this.states[i].code == this.customerInfo.state) {
						this.states[i].selected = true;
					} else {
						this.states[i].selected = false;
					}
				}
			} */
		},

		viewAllInvoices: function viewAllInvoices(e) {
			var self = this;
			
			this.listMode = true;
			this.isLoading = true;
			this.render();
			
			this.model.fetch({
				data: {
					parentInvoices: this.parentInvoices,
					parentId: this.parentRecordId
				}
			}).done(function() {
				self.isLoading = false;
				self.invoices = self.model.get('invoices');
				self.activeInvoice = (self.invoices.length>0)?self.invoices[0]:null;
				self.invoiceCount = self.model.get('count');
				self.render();
			});
		},

		viewInvoice: function viewInvoice(e) {
			var invoiceIndex = $("#"+e.currentTarget.id).attr('data-invoice-index');
			this.activeInvoice = this.invoices[invoiceIndex];
			this.listMode = false;
			this.paidSuccessfully = false;
			this.render();
			//console.log(this.activeInvoice);
			
			jQuery(window).scrollTop(0);
		},

		inputRequiredFocusout: function () {
			var self = this;
			
			setTimeout(function(){
				var amountInputEl = self.$('#form-field-custom-amt');
				var errorEl = self.$('#amount-error');
				var proceedButtonEl = self.$('#proceed-payment');

				if (amountInputEl.val() == '') {
					errorEl.text( Utils.translate('Amount is required') );
					errorEl.addClass('err');
					proceedButtonEl.prop('disabled', true);
				} else if (parseFloat(amountInputEl.val()) > parseFloat(self.balAmount)) {
					errorEl.text( Utils.translate('Cannot process amount greater than $') + self.balAmount );
					errorEl.addClass('err');
					proceedButtonEl.prop('disabled', true);
				} else {
					errorEl.removeClass('err');
					proceedButtonEl.prop('disabled', false);
				}
			}, 300);
		},

		handleExternalLinkCheckbox: function (e) {
			if (e.currentTarget.checked) {
			  document.getElementById("custom-installment").style.display = "block"
			}
			else {
			  document.getElementById("custom-installment").style.display = "none"
			}
		},

		payTypeChanged: function (e) {
			var currentTarget = this.$(e.currentTarget);
			var amountInputEl = this.$('#form-field-custom-amt');
			var errorEl = this.$('#amount-error');
			var proceedButtonEl = this.$('#proceed-payment');

			if (currentTarget.hasClass('pay-installment-1') || currentTarget.hasClass('pay-installment-2')) {
				proceedButtonEl.prop('disabled', false);
			} else {
				var amount = amountInputEl.val();
				if (amount && !errorEl.hasClass('err')) {
					proceedButtonEl.prop('disabled', false);
				} else {
					proceedButtonEl.prop('disabled', true);
				}
			}
		},
	
		payInvoice: function payInvoice(e) {
			var self = this;

			var isDisabled = jQuery("#invoice-form-submit-pre").attr("disabled");
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				//console.log('Note: submit button disabled');
				jQuery("#invoice-form-submit-pre").attr("disabled", true);
			}

			var addr1 = this.customerInfo.addr1;
			var addr2 = this.customerInfo.addr2;
			var city = this.customerInfo.city;
			var state = this.customerInfo.state;
			var zip = this.customerInfo.zip;
			var paymentMethod = this.$('#invoice-form-payment-method:checked').val();
			var cardHolderName = this.$('#invoice-form-card-holders-name').val();
			var cardNumber = this.$('#invoice-form-card-number').val();
			var cardExp = this.$('#invoice-form-card-exp').val();
			var cardCode = this.$('#invoice-form-card-code').val();
			
			var data = {
				invoiceId: this.activeInvoice.id,
				addr1: addr1,
				addr2: addr2,
				city: city,
				state: state,
				zip: zip,
				paymentMethod: paymentMethod,
				cardHolderName: cardHolderName,
				cardNumber: cardNumber,
				cardExp: cardExp,
				cardCode: cardCode
			}
			this.model.save(data).done(function(response) {
				//console.log('response', response);
				if(response.hasError) {
					self.paidSuccessfully = false;
					jQuery("#invoice-form-submit-pre").removeAttr("disabled");
					jQuery(".record-details .paymentform-screen").prepend('<div class="global-error-msg" style="display: block; position: unset;">\
					<div>\
						<i class="fa fa-exclamation-triangle" aria-hidden="true"></i>&nbsp;<span>Failure! Error:\
							'+ response.errorMessage +'</span>\
					</div>\
				</div>');
				} else {
					self.paymentData = JSON.parse(response.paymentData);
					if(self.paymentData.paymentId && self.paymentData.paymentDate) {
						self.paidSuccessfully = true;
					} else {
						self.paidSuccessfully = false;
					}
					self.render();
				}
				jQuery(window).scrollTop(0);
			});
		},
		
		ccMethodClick: function ccMethodClick(e) {
			this.$('.methods input[type="radio"]').attr('checked', false);
			this.$(e.currentTarget).find('input[type="radio"]').attr('checked', true);
			this.$(".methods").removeClass('selected');

			if(this.$(e.currentTarget).find('input[type="radio"]').is(':checked')){
				this.$(e.currentTarget).addClass('selected');
			}
		},

		toInvoicePaymentForm: function toInvoicePaymentForm(e) {
			this.$("#invoice-info-form-address-1").trigger("focusout");
			this.$("#invoice-info-form-city").trigger("focusout");
			this.$("#invoice-info-form-zip").trigger("focusout");
			this.$('#invoice-info-form-state').trigger("change");

			if (this.$("#rm-your-info").find('.err').length != 0) {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").show();
			}
			else {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").hide();
				this.$("#rm-your-info").css("display", "none");
				this.$("#rm-payment").css("display", "block");
			}
		},

		toInvoiceInfoForm2: function toInvoiceInfoForm2(e) {
			this.$("#rm-your-info").css("display", "block");
			this.$("#rm-payment").css("display", "none");
		},

		paymentFormNextButton: function paymentFormNextButton(e) {
			this.$(".page-two").css("display", "none");
			this.$(".page-one").css("display", "block");
		},

		ccNameFocusout: function ccNameFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-holders-name').siblings("p").addClass("err");
			}
			else {
				var regex = /^[a-zA-Z]+([\sa-zA-Z]+)?[a-zA-Z]+$/;

				if (!regex.test(this.$(e.currentTarget).val())) {
					this.$('#invoice-form-card-holders-name').siblings("p").addClass("err");
				} else {
					this.$('#invoice-form-card-holders-name').siblings("p").removeClass("err");
				}
			}
		},

		ccNumberFocusout: function ccNumberFocusout(e) {
			this.$('#invoice-form-card-number').siblings("p").removeClass("err");
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-number').siblings("p.err-1").addClass("err");
			}
			else {
				if (this.$('#invoice-form-payment-method:checked').is(':checked')) {
					this.$('#invoice-form-card-number').siblings("p").removeClass("err");
					var cardNumber = this.$(e.currentTarget).val().replace(/ /g, '');
					this.$(e.currentTarget).val(cardNumber);

					var dataCardType = this.$('#invoice-form-payment-method:checked').attr('data-card-type');
					dataCardType = dataCardType?dataCardType.toLowerCase():"";
					var pmId = this.$('#invoice-form-payment-method:checked').val();

					var regex = /^[0-9]{16}$/;
					if(parseInt(pmId) == parseInt(this.creditCardMap.discover)) { // discover
						regex = /^65[4-9][0-9]{13}|64[4-9][0-9]{13}|6011[0-9]{12}|(622(?:12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[01][0-9]|92[0-5])[0-9]{10})$/;
					} else if (parseInt(pmId) == parseInt(this.creditCardMap.mastercard)) { // mastercard
						regex = /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/;
					} else if (parseInt(pmId) == parseInt(this.creditCardMap.visa)) { // visa
						regex = /^4[0-9]{12}(?:[0-9]{3})?$/;
					} else if (parseInt(pmId) == parseInt(this.creditCardMap.amex)) { // american express
						regex = /^3[47][0-9]{13}$/;
					}

					if (!regex.test(cardNumber)) {
						this.$('#invoice-form-card-number').siblings("p.err-1").addClass("err");
					} else {
						this.$('#invoice-form-card-number').siblings("p").removeClass("err");
					}
				}
				else {
					this.$('#invoice-form-card-number').siblings("p.err-2").addClass("err");
				}
			}
		},

		ccExpFocusout: function ccExpFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-exp').siblings("p").addClass("err");
				// this.$('#invoice-form-card-exp').focus();
			}
			else {
				var regex = /^(0[1-9]|1[0-2])\/([0-9]{4}|[0-9]{2})$/;

				var flag = 0;
				var currentYear = new Date().getFullYear();
				var currentMonth = new Date().getMonth() + 1;
				var temp = this.$(e.currentTarget).val().split("/");

				if (temp[1] === undefined || temp[1] === null) {
					this.$('#invoice-form-card-exp').siblings("p").addClass("err");
				}
				else {
					if (temp[1].length === 2) {
						var newVal = temp[0] + '/20' + temp[1];
						this.$(e.currentTarget).val(newVal);
					}

					var newTemp = this.$(e.currentTarget).val().split("/");

					if (newTemp[0] < currentMonth || newTemp[1] < currentYear) {
						flag = 1;
					}
					if (newTemp[0] < currentMonth && newTemp[1] == currentYear) {
						flag = 1;
					}
					if (newTemp[0] < currentMonth && newTemp[1] > currentYear) {
						flag = 0;
					}

					if (!regex.test(this.$(e.currentTarget).val()) || flag == 1) {
						this.$('#invoice-form-card-exp').siblings("p").addClass("err");
						// this.$('#invoice-form-card-exp').focus();
					} else {
						this.$('#invoice-form-card-exp').siblings("p").removeClass("err");
					}
				}
			}
		},

		ccExpKeyUpDown: function ccExpKeyUpDown(e) {
			var inputLength = e.target.value.length;
	
			if(e.keyCode == 8 && inputLength === 2){
				var thisVal1 = e.target.value.slice(0,-1);
				$(e.target).val(thisVal1);
			} else {
				if(inputLength === 2){
					var thisVal2 = e.target.value;
					thisVal2 += '/';
					$(e.target).val(thisVal2);
				}
			}
		},

		ccCodeFocusout: function ccCodeFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-code').siblings("p").addClass("err");
			}
			else {
				var pmId = this.$('#invoice-form-payment-method:checked').val();
				if (parseInt(pmId) == parseInt(this.creditCardMap.amex)) {
					var regex = /^[0-9]{4}$/;
				}
				else {
					var regex = /^[0-9]{3}$/;
				}

				if (!regex.test(this.$(e.currentTarget).val())) {
					this.$('#invoice-form-card-code').siblings("p").addClass("err");
				} else {
					this.$('#invoice-form-card-code').siblings("p").removeClass("err");
				}
			}
		},

		invoiceFormSubmitPre: function invoiceFormSubmitPre(e) {
			e.preventDefault();

			this.$("#invoice-form-card-code").trigger("focusout");
			this.$("#invoice-form-card-holders-name").trigger("focusout");
			this.$("#invoice-form-card-exp").trigger("focusout");
			this.$("#invoice-form-card-number").trigger("focusout");

			if (this.$('#invoice-form-payment-method:checked').length != 0) {
				this.$('.invoice-form-payment-method-p').removeClass("err");
			} else {
				this.$('.invoice-form-payment-method-p').addClass("err");
			}

			if (this.$("#rm-payment").find('.err').length != 0) {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").show();
			}
			else {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").hide();
				this.$("#invoice-form-submit").trigger("click");
			}
		},

		formCompulsoryFocusout: function formCompulsoryFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			}
			else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		},

		formZipFocusout: function formZipFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-info-form-zip').siblings("p").addClass("err");
			}
			else {
				var selectedCountryCode = this.$("#invoice-info-form-country").val();
				if(selectedCountryCode == 'US') {
					var regex = /^[0-9]{5}(?:-[0-9]{4})?$/;

					if (!regex.test(this.$(e.currentTarget).val())) {
						this.$('#invoice-info-form-zip').siblings("p").addClass("err");
					} else {
						this.$('#invoice-info-form-zip').siblings("p").removeClass("err");
					}
				} else {
					this.$('#invoice-info-form-zip').siblings("p").removeClass("err");
				}
			}
		},

		getContext: function getContext() {
			this.invoiceCountText = "invoices";
			if(this.invoiceCount) {
				if(this.invoiceCount == 0) {
					this.invoiceCountText = "invoices";
				} else if(this.invoiceCount == 1) {
					this.invoiceCountText = "invoice";
				} else {
					this.invoiceCountText = "invoices";
				}
			}
			return {
				isLoading: this.isLoading,
				activeView: this.activeView,

				parentInvoices: this.parentInvoices,
				listMode: this.listMode,
				paidSuccessfully: this.paidSuccessfully,
				paymentData: this.paymentData,

				addr1: this.customerInfo.addr1,
				addr2: this.customerInfo.addr2,
				city: this.customerInfo.city,
				state: this.customerInfo.state,
				country: this.customerInfo.country,
				zip: this.customerInfo.zip,
				
				states: this.states,
				paymentMethods: this.paymentMethods,

				invoiceCount: this.invoiceCount,
				invoiceCountText: this.invoiceCountText,
				invoices: this.invoices,
				activeInvoice: this.activeInvoice,

				installments: this.installments,
				nextDueAmount: this.nextDueAmount,
				balAmount: this.balAmount,
				showPayInvoiceBody: this.nextDueAmount || this.balAmount,

				icnDownload: this.icnDownload,

				isPhoneDevice: Utils.isPhoneDevice(),

				isDevEnv: this.isDevEnv,

				cardSelectedImage: this.cardSelectedImage,
				imgPendingPayment: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-pending-payment.png')),
				imgNoPendingPayment: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-no-pending-payment.png')),
				imgEmptyInvoice: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-emptyinvoice.png')),
				imgInstallmentHistory: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-history.png')),
				icons:{
					icnDownloadGray: this.icnDownloadGray,
					icnDownloadPrimary: this.icnDownloadPrimary
				}
			};
		}
	});
});

// Model.js
// -----------------------
// @module Case
define("Saralux.Core.PaymentDueSV.SS2Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/PaymentDueSV/SuiteScript2/PaymentDueSV.Service.ss"
            ),
            true
        )
    });
});


define('Saralux.Core.PaymentDueSV',   [
	'Saralux.Core.PaymentDueSV.View'
],   function (
	PaymentDueSVView
){
	
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0005', function() {
						return new PaymentDueSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.PaymentDueSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.PaymentDueSVNew.Checkout.View', [
    'saralux_core_paymentduesvnew_checkout.tpl',

    'Saralux.Core.Forms.CreditCard.View',
    'Saralux.Core.Forms.Address.View',
    'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.CAPI.Model',
    'Saralux.Core.PaymentDueSVNew.SS2Model',
    'Saralux.Core.ExternalLibraries.CryptoJS',

    'Utils',
    'jQuery',
    'SCView'
], function (
    saralux_core_paymentduesv_checkout_tpl,

    FormsCreditCardView,
    FormsAddressView,
    CoreCLGeneral,
    CoreCLCAPIModel,
    PaymentDueSVNewSS2Model,
    CryptoJS,

    Utils,
    jQuery,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function PaymentDueSVCheckout(options) {
        var self = this;
        SCView.call(this, options);
        jQuery(window).scrollTop(0);

        this.template = saralux_core_paymentduesv_checkout_tpl;
        this.model = new PaymentDueSVNewSS2Model();
        this.capiModel = new CoreCLCAPIModel();

        this.container = options.container;
        this.parent = options.parent;
        this.invoiceId = options.invoiceId;
        this.paymentAmount = options.paymentAmount;

        this.environmentComponent = this.container.getComponent('Environment');

        this.creditCardMap = {
            mastercard: this.environmentComponent.getConfig('pmIdMastercard'),
            visa: this.environmentComponent.getConfig('pmIdVisa'),
            amex: this.environmentComponent.getConfig('pmIdAmericanExpress'),
            discover: this.environmentComponent.getConfig('pmIdDiscover')
        };

        var paymentMethods = this.environmentComponent.getSiteSetting('paymentmethods');
        this.paymentMethods = CoreCLGeneral.formatPaymentMethods(paymentMethods);

        this.invoice = null;
        this.customer = null;
        this.creditCards = [];
        this.addresses = [];
        this.countries = [];
        this.allStates = [];

        this.isLoading = true;
        this.getData();
    }

    PaymentDueSVCheckout.prototype = Object.create(SCView.prototype);
    PaymentDueSVCheckout.prototype.constructor = PaymentDueSVCheckout;

    PaymentDueSVCheckout.prototype.getEvents = function () {
        return {
            'change [data-action="m360-slxc-cc-selected"]': 'ccSelected',
            'focusout [data-action="m360-slxc-cvv-focusout"]': 'validateCardSecCode',
            'click [data-action="m360-slxc-add-new-cc"]': 'addNewCc',

            // 'focusout [data-focusout="input-required-focusout"]': "inputRequiredFocusout",
            // 'change [data-change="change-required-focusout"]': "changeRequiredFocusout",

            'change [data-action="m360-slxc-addr-selected"]': 'addrSelected',
            'click [data-action="m360-slxc-set-add-address-modal"]': 'setAddAddr',
            'click [data-action="m360-slxc-set-edit-address-modal"]': 'setEditAddr',
            'click [data-action="m360-slxc-add-edit-address"]': 'addEditAddr',
            'click [data-action="m360-slxc-remove-addr"]': 'removeAddr',

            'click [data-action="m360-slxc-download-invoice"]': 'downloadInvoice',

            "click [data-action='m360-slxc-pay-details-next']": "payDetailsNext",
            "click [data-action='m360-slxc-pay-details-prev']": "payDetailsPrev",

            'click [data-action="m360-slxc-process-payment"]': 'processPayment'
        };
    }

    PaymentDueSVCheckout.prototype.ccSelected = function (e) {
        this.$('#no-cc-selected-err').removeClass('err');
        this.$('.saved-cards .card-box').removeClass('selected-method');
        this.$(e.currentTarget).closest('.card-box').addClass('selected-method');
    }

    PaymentDueSVCheckout.prototype.validateCardSecCode = function (e) {
        var secCodeInputEl = this.$(e.currentTarget);

        if ($(secCodeInputEl).val() == '') {
            $(secCodeInputEl).closest('.saved-cards-cvv-container').find("p").addClass("err");
        } else {
            var pmId = $(secCodeInputEl).data('pmId');
            var regex = null;

            if (parseInt(pmId) == parseInt(this.creditCardMap.amex)) {
                regex = /^[0-9]{4}$/;
            } else {
                regex = /^[0-9]{3}$/;
            }

            if(!regex.test($(secCodeInputEl).val())) {
                $(secCodeInputEl).closest('.saved-cards-cvv-container').find("p").addClass("err");
            } else {
                $(secCodeInputEl).closest('.saved-cards-cvv-container').find("p").removeClass("err");
            }
        }
    }

    PaymentDueSVCheckout.prototype.addNewCc = function () {
        var self = this;
        var canProceed = true;

        var selectedCardType = this.$('.payment-method .forms-creditcard-payment-method:checked');
        if (selectedCardType.length == 0) {
            this.$('.forms-creditcard-payment-method-p').addClass("err");
        }

        this.$('#forms-creditcard-card-holders-name').trigger('focusout');
        this.$('#forms-creditcard-card-number').trigger('focusout');
        this.$('#forms-creditcard-card-exp').trigger('focusout');

        if (this.$('#add-new-card .err').length) {
            canProceed = false;
            this.$('#standard-error-add-cc').show();
        } else {
            this.$('#standard-error-add-cc').hide();
        }

        if (canProceed) {
            this.$('#add-new-cc').prop('disabled', true);

            var expDate = this.$("#forms-creditcard-card-exp").val();
            expDate = expDate.replace(/\s/g,''); //removing all whitespaces for exp string
            var cardExp = expDate.split('/');

            var isDefault = this.$('#forms-creditcard-card-default').prop('checked');

            var cardNumber = this.$("#forms-creditcard-card-number").val();
            cardNumber = cardNumber.replace(/\s/g,''); //removing all whitespaces for cardNumber string

            var data = {
                action: "add_credit_card",
                cardNumber: cardNumber,
                cardName: this.$('#forms-creditcard-card-holders-name').val(),
                paymentMethod: $(selectedCardType).val(),
                expiryMonth: cardExp[0],
                expiryYear: cardExp[1],
                isDefault: isDefault
            }

            this.model.clear({ silent: true });
            this.model.save(data).done(function (res) {
                if(!res.hasError) {
                    $("#add-new-card").modal('hide');
                    $('.modal-backdrop').remove();
                    $(document.body).removeClass("modal-open");

                    setTimeout(function () {
                        self.isLoading = true;
                        self.render();
                        self.getData();
                    }, 300);
                } else {
                    self.$('#add-new-cc').prop('disabled', false);
                    console.error("error", res.message);
                }
            });
        }
    }

    // PaymentDueSVCheckout.prototype.inputRequiredFocusout = function (e) {
	// 	var self = this;
	//
	// 	setTimeout(function(){
	// 		if(self.$(e.currentTarget).val() == '') {
	// 			self.$(e.currentTarget).siblings('p').addClass('err');
	// 		} else {
	// 			self.$(e.currentTarget).siblings('p').removeClass('err');
	// 		}
	// 	}, 300);
	// }

    // PaymentDueSVCheckout.prototype.changeRequiredFocusout = function (e) {
    //     if (this.$(e.currentTarget).val() == "select" || this.$(e.currentTarget).val() == "" || this.$(e.currentTarget).val() == null) {
    //         this.$(e.currentTarget).siblings("p").addClass("err");
    //     } else {
    //         this.$(e.currentTarget).siblings("p").removeClass("err");
    //     }
    // }

    PaymentDueSVCheckout.prototype.addrSelected = function (e) {
        this.$('#no-addr-selected-err').removeClass('err');
        this.$('.saved-address .address-box').removeClass('selected-addr');
        this.$('.saved-address .address-box .addr-radio-text').text( Utils.translate('Select') );
        this.$(e.currentTarget).closest('.address-box').addClass('selected-addr');
        this.$(e.currentTarget).find('.addr-radio-text').text( Utils.translate('Selected') );
    }

    PaymentDueSVCheckout.prototype.setAddAddr = function () {
        this.$('#forms-address-full-name').val('');
        this.$('#forms-address-company').val('');
        this.$('#forms-address-phone').val('');
        this.$('#forms-address-address-1').val('');
        this.$('#forms-address-address-2').val('');
        this.$('#forms-address-country').val('select');
        this.$('#forms-address-state').val('select');
        this.$('#forms-address-city').val('');
        this.$('#forms-address-zip').val('');
        this.$('#forms-address-is-residential-address').prop('checked', false);

        this.$('#add-new-address .err').hide();
        this.$('#standard-error-add-addr').hide();
        this.$('#save-address').data('mode', 'add');
    }

    PaymentDueSVCheckout.prototype.setEditAddr = function (e) {
        var selectedAddrIndex = this.$(e.currentTarget).data('index');
        var selectedAddr = this.addresses[selectedAddrIndex];

        this.$('#forms-address-full-name').val(selectedAddr.fullname);
        this.$('#forms-address-company').val(selectedAddr.company);
        this.$('#forms-address-phone').val(selectedAddr.phone);
        this.$('#forms-address-address-1').val(selectedAddr.addr1);
        this.$('#forms-address-address-2').val(selectedAddr.addr2);
        this.$('#forms-address-country').val(selectedAddr.country);
        this.$('#forms-address-country').trigger('change');
        this.$('#forms-address-state').val(selectedAddr.state);
        this.$('#forms-address-city').val(selectedAddr.city);
        this.$('#forms-address-zip').val(selectedAddr.zip);
        this.$('#forms-address-is-residential-address').prop('checked', selectedAddr.isresidential);

        this.$('#add-new-address .err').hide();
        this.$('#standard-error-add-addr').hide();
        this.$('#save-address').data('mode', 'edit');
        this.$('#save-address').data('addrId', selectedAddr.internalid);
    }

    PaymentDueSVCheckout.prototype.addEditAddr = function () {
        var self = this;

        this.$('#forms-address-full-name').trigger('focusout');
        this.$('#forms-address-phone').trigger('focusout');
        this.$('#forms-address-address-1').trigger('focusout');

        var countryIp = this.$('#forms-address-country');
        if (!$(countryIp).val() || $(countryIp).val() == 'select') {
            $(countryIp).siblings("p").addClass("err");
        }

        var stateIp = this.$('#forms-address-state');
        if (!$(stateIp).val() || $(stateIp).val() == 'select') {
            $(stateIp).siblings("p").addClass("err");
        }

        this.$('#forms-address-city').trigger('focusout');
        this.$('#forms-address-zip').trigger('focusout');


        if (this.$('.err').length) {
            this.$('#standard-error-add-addr').show();
        } else {
            this.$('#standard-error-add-addr').hide();
            this.$('#save-address').prop('disabled', true);

            var data = null;
            var addressData = {
                fullname: this.$("#forms-address-full-name").val(),
                company: this.$("#forms-address-company").val(),
                phone: this.$("#forms-address-phone").val(),
                addr1: this.$("#forms-address-address-1").val(),
                addr2: this.$("#forms-address-address-2").val(),
                country: this.$("#forms-address-country").val(),
                countryText: this.$("#forms-address-country option:checked").text(),
                state: this.$("#forms-address-state").val(),
                city: this.$("#forms-address-city").val(),
                zip: this.$("#forms-address-zip").val(),
                isresidential: this.$("#forms-address-is-residential-address").prop("checked")
            };

            var mode = this.$('#save-address').data('mode');
            if (mode == 'edit') {
                addressData.internalid = this.$('#save-address').data('addrId');

                data = {
                    action: 'edit_address',
                    addressData: addressData
                };
            } else {
                addressData.defaultshipping = true;
                addressData.defaultbilling = false;

                data = {
                    action: 'add_address',
                    addressData: addressData
                };
            }

            this.model.clear({ silent: true });
            this.model.save(data).then(function (res) {
                if (!res.hasError) {
                    self.addresses = res.addresses;

                    $("#add-new-address").modal('hide');
                    $('.modal-backdrop').remove();
                    $(document.body).removeClass("modal-open");
                    setTimeout(function () {
                        self.render();
                    }, 300);
                } else {
                    self.$('#save-address').prop('disabled', false);
                    console.error('Error on add/edit address. ', res.message);
                }
            })
        }
    }

    PaymentDueSVCheckout.prototype.removeAddr = function (e) {
        var self = this;
        var currentTarget = this.$(e.currentTarget);
        $(currentTarget).prop('disabled', true);

        var selectedAddrIndex = $(currentTarget).data('index');
        var selectedAddr = this.addresses[selectedAddrIndex];

        if (!selectedAddr.internalid) {
            return;
        }

        var data = {
            action: "remove_address",
            addressData: {
                internalid: selectedAddr.internalid
            }
        };

        this.model.clear({ silent: true });
        this.model.save(data).then(function (res) {
            if (!res.hasError) {
                self.addresses = res.addresses;

                self.render();
            } else {
                $(currentTarget).prop('disabled', false);
                console.error('Error on removing address. ', res.message);
            }
        });
    }

    PaymentDueSVCheckout.prototype.downloadInvoice = function () {
        var self = this;

        var data = {
            action: 'download_invoice',
            invoiceId: this.invoiceId
        };

        this.model.clear({ silent: true });
        this.model.save(data).then(function (res) {
            if (!res.hasError) {
                var byteCharacters = atob(res.invoiceData);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var file = new Blob([byteArray], { type: 'application/pdf;base64' });
                var fileURL = window.URL.createObjectURL(file);
                var link = document.createElement("a");
                link.setAttribute('download', self.invoiceId);
                link.href = fileURL;
                link.click();
                window.URL.revokeObjectURL(fileURL);
            }
        });
    }

    PaymentDueSVCheckout.prototype.payDetailsNext = function (e) {
        var canProceed = this.validatePayDetails();

        if (canProceed) {
            var ccImg = null, ccLast4Digits = null;
            if (this.creditCards.length) {
                var selectedCcIndex = this.$('.saved-cards .selected-method').data('index');
                var selectedCc = this.creditCards[selectedCcIndex];

                ccImg = selectedCc.cardImage;
                ccLast4Digits = selectedCc.last4Digits;
            } else {
                var selectedPmId = this.$('.payment-method .forms-creditcard-payment-method:checked').val();

                for (var i = 0; i < this.paymentMethods.length; i++) {
                    if (selectedPmId == this.paymentMethods[i].internalid) {
                        ccImg = this.paymentMethods[i].primaryImage;
                        break;
                    }
                }

                var ccNumber = this.$('#forms-creditcard-card-number').val();
                ccNumber = ccNumber.replace(/\s/g, '');     //removes spaces from the string
                ccLast4Digits = ccNumber.slice(-4);
            }

            var name = null, email = null, phone = null, addr1 = null, addr2 = null, city = null, state = null, zipcode = null;
            if (this.addresses.length) {
                var selectedAddrIndex = this.$('.saved-address .selected-addr').data('index');
                var selectedAddr = this.addresses[selectedAddrIndex];

                name = selectedAddr.fullname;
                email = this.customer.email;
                phone = selectedAddr.phone;
                addr1 = selectedAddr.addr1;
                addr2 = selectedAddr.addr2;
                city = selectedAddr.city;
                state = selectedAddr.state;
                zipcode = selectedAddr.zip;
            } else {
                name = this.$('#forms-address-full-name').val();
                email = this.customer.email;
                phone = this.$('#forms-address-phone').val();
                addr1 = this.$('#forms-address-address-1').val();
                addr2 = this.$('#forms-address-address-2').val();
                city = this.$('#forms-address-city').val();
                state = this.$('#forms-address-state').val();
                zipcode = this.$('#forms-address-zip').val();
            }

            var addr = addr1 + ',\n';
            if (addr2 && addr2.length) {
                addr += addr2 + ',\n';
            }
            addr += city + ',\n';
            addr += state + ', ' + zipcode;

            this.$('#confirm-name').text( Utils.translate(name) );
            this.$('#confirm-email').text(email);
            this.$('#confirm-phone').text(phone);
            this.$('#confirm-addr').text( Utils.translate(addr) );
            this.$('#confirm-cc-img').attr('src', ccImg);
            this.$('#confirm-cc-last-4-digits').text(ccLast4Digits);

            $(".pay-details-box").hide();
            $(".confirmation-section").show();
            $(window).scrollTop(0);
        }
    }

    PaymentDueSVCheckout.prototype.validatePayDetails = function () {
        if (this.creditCards.length) {
            var selectedCardBox = this.$('.saved-cards .selected-method');
            if (selectedCardBox.length == 0) {
                this.$('#no-cc-selected-err').addClass('err');
            } else {
                $(selectedCardBox[0]).find('.saved-cards-cvv').trigger('focusout');
            }
        } else {
            var selectedCardType = this.$('.payment-method .forms-creditcard-payment-method:checked');
            if (selectedCardType.length == 0) {
                this.$('.forms-creditcard-payment-method-p').addClass("err");
            }

            this.$('#forms-creditcard-card-holders-name').trigger('focusout');
            this.$('#forms-creditcard-card-number').trigger('focusout');
            this.$('#forms-creditcard-card-exp').trigger('focusout');
            this.$('#forms-creditcard-card-code').trigger('focusout');
        }

        if (this.addresses.length) {
            var selectedAddr = this.$('.address-box.selected-addr');
            if (selectedAddr.length == 0) {
                this.$('#no-addr-selected-err').addClass('err');
            }
        } else {
            this.$('#forms-address-full-name').trigger('focusout');
            this.$('#forms-address-phone').trigger('focusout');
            this.$('#forms-address-address-1').trigger('focusout');

            var countryIp = this.$('#forms-address-country');
            if (!$(countryIp).val() || $(countryIp).val() == 'select') {
                $(countryIp).siblings("p").addClass("err");
            }

            var stateIp = this.$('#forms-address-state');
            if (!$(stateIp).val() || $(stateIp).val() == 'select') {
                $(stateIp).siblings("p").addClass("err");
            }

            this.$('#forms-address-city').trigger('focusout');
            this.$('#forms-address-zip').trigger('focusout');
        }

        if (this.$('.err').length) {
            this.$('#standard-error').show();
            return false;
        } else {
            this.$('#standard-error').hide();
            return true;
        }
    }

    PaymentDueSVCheckout.prototype.payDetailsPrev = function (e) {
        $(".pay-details-box").show();
        $(".confirmation-section").hide();
        $(window).scrollTop(0);
    }

    PaymentDueSVCheckout.prototype.processPayment = function (e) {
        var self = this;
        var currentTarget = this.$(e.currentTarget);
        $(currentTarget).prop('disabled', true);

        var kgPpiMFQ = CoreCLGeneral.getEncryptionKey();
        var encryptedCc = null;
        if(this.creditCards.length == 0) {
            var expDate = this.$("#forms-creditcard-card-exp").val();
            expDate = expDate.replace(/\s/g,''); //removing all whitespaces for expDate string
            var cardExp = expDate.split('/');

            var cardNumber = this.$("#forms-creditcard-card-number").val();
            cardNumber = cardNumber.replace(/\s/g,''); //removing all whitespaces for cardNumber string

            var pmId = this.$('.payment-method .forms-creditcard-payment-method:checked').val();

            var ccProcessor = null;
            for(var i = 0; this.paymentMethods && (i < this.paymentMethods.length); i++) {
                if(parseInt(this.paymentMethods[i].internalid) == parseInt(pmId)) {
                    ccProcessor = this.paymentMethods[i].merchantid;
                    break;
                }
            }

            var ccDetails = {
                cardNumber: cardNumber,
                cardName: this.$('#forms-creditcard-card-holders-name').val(),
                paymentMethod: pmId,
                expiryMonth: cardExp[0],
                expiryYear: cardExp[1],
                isDefault: true,
                cvv: this.$('#forms-creditcard-card-code').val(),
                ccProcessor: ccProcessor
            };

            encryptedCc = CryptoJS.encryptValue(JSON.stringify(ccDetails), kgPpiMFQ);
        } else {
            var selectedCc = this.$('.saved-cards .selected-method');
            var selectedCcIndex = $(selectedCc).data('index');

            var ccDetails = {
                id: this.creditCards[selectedCcIndex].id,
                cvv: $(selectedCc).find('.saved-cards-cvv').val(),
                ccProcessor: this.creditCards[selectedCcIndex].ccProcessor
            };

            encryptedCc = CryptoJS.encryptValue(JSON.stringify(ccDetails), kgPpiMFQ);
        }

        var addAddr = null;
        if (this.addresses.length == 0) {
            addAddr = {
                fullname: this.$("#forms-address-full-name").val(),
                company: this.$("#forms-address-company").val(),
                phone: this.$("#forms-address-phone").val(),
                addr1: this.$("#forms-address-address-1").val(),
                addr2: this.$("#forms-address-address-2").val(),
                country: this.$("#forms-address-country").val(),
                countryText: this.$("#forms-address-country option:checked").text(),
                state: this.$("#forms-address-state").val(),
                city: this.$("#forms-address-city").val(),
                zip: this.$("#forms-address-zip").val(),
                isresidential: this.$("#forms-address-is-residential-address").prop("checked"),
                defaultshipping: true,
                defaultbilling: false
            };
        }

        var data = {
            action: 'process_invoice_payment',
            invoiceId: this.invoiceId,
            paymentAmount: this.paymentAmount,
            encryptedCc: encryptedCc,
            addAddr: addAddr
        };

        this.model.clear({ silent: true });
        this.model.save(data).then(function (res) {
            if (!res.hasError) {
                self.$('.invoice-payment-container').hide();
                self.$('.invoice-payment-success').show();
                $(window).scrollTop(0);
            } else {
                $('#error-message-confirmation').text(res.errorMessage);
                $('#standard-error-confirmation').show();
                $(currentTarget).prop('disabled', false);
                console.error('Error on processing invoice payment. ', res.errorMessage);
            }
        });
    }

    PaymentDueSVCheckout.prototype.getData = function () {
        var self = this;
        var getCreditCardsReq = {
            data: {
                action: "GET_CREDIT_CARDS"
            }
        };
        var getInvoiceDetailsReq = {
            action: 'get_invoice_details',
            invoiceId: this.invoiceId
        };

        this.model.clear({ silent: true });

        jQuery.when(
            this.capiModel.fetch(),
            this.capiModel.fetch(getCreditCardsReq),
            this.model.save(getInvoiceDetailsReq)
        ).then(function (
            getCountriesAndStatesRes,
            getCreditCardsRes,
            getInvoiceDetailsRes
        ) {
            if (getCountriesAndStatesRes && (getCountriesAndStatesRes.length > 0) && getCountriesAndStatesRes[0]) {
                self.countries = getCountriesAndStatesRes[0].countries;
                self.allStates = getCountriesAndStatesRes[0].states;
            } else {
                self.countries = [];
                self.allStates = [];
            }

            if (getCreditCardsRes && (getCreditCardsRes.length > 0) && getCreditCardsRes[0]) {
                self.formatCreditCardInfo(getCreditCardsRes[0]);
            } else {
                self.creditCards = [];
            }

            if (getInvoiceDetailsRes && (getInvoiceDetailsRes.length > 0) && !getInvoiceDetailsRes[0].hasError) {
                self.invoice = getInvoiceDetailsRes[0].invoice;
                self.customer = getInvoiceDetailsRes[0].customer;
                self.addresses = getInvoiceDetailsRes[0].addresses;
            } else {
                self.invoice = null;
                self.customer = null;
                self.addresses = [];
            }

            self.childViews = {
                'Saralux.Forms.CreditCard': function() {
                    return new FormsCreditCardView({
                        container: self.container,
                        customerInfo: self.customer,
                        firstCard: (self.creditCards.length > 0) ? false : true
                    });
                },
                'Saralux.Forms.Address': function() {
                    return new FormsAddressView({
                        container: self.container,
                        countries: self.countries,
                        allStates: self.allStates,
                        states: [],
                        customerInfo: self.customer,
                        calculateShippingEstimate: false,
                        firstAddress: true
                    });
                }
            };

            self.isLoading = false;
            self.render();
        });
    }

    PaymentDueSVCheckout.prototype.formatCreditCardInfo = function (creditCards) {
        this.creditCards = [];

        for(var i = 0; i < creditCards.length; i++) {
            var thisCard = creditCards[i];

            if(thisCard.paymentmethod && thisCard.ccname && thisCard.ccnumber) {
                var cardImgArr = thisCard.paymentmethod.imagesrc;

                var expiryMonth = thisCard.expmonth;
                if(expiryMonth.length != 2) {
                    expiryMonth = "0"+expiryMonth;
                }

                var dateObj = new Date();
                var month = dateObj.getUTCMonth() + 1;
                var year = dateObj.getUTCFullYear();

                var isCardExpired = true;
                if(thisCard.expyear > year || (thisCard.expyear == year && thisCard.expmonth >= month)) {
                    isCardExpired = false;
                }

                var maskedCardNumber = CoreCLGeneral.formatMaskedCreditCardNumber(thisCard.ccnumber);

                var thisCard = {
                    id: thisCard.internalid,
                    isDefault: (thisCard.ccdefault == "T"),
                    cardName: thisCard.ccname,
                    cardNumber: thisCard.ccnumber,
                    maskedCardNumber: maskedCardNumber,
                    last4Digits: thisCard.ccnumber.substr(thisCard.ccnumber.length - 4),
                    expiryMonth: expiryMonth,
                    expiryYear: thisCard.expyear,
                    paymentMethod: thisCard.paymentmethod.internalid,
                    ccProcessor: thisCard.paymentmethod.merchantid,
                    cardType: thisCard.paymentmethod.name,
                    cardImage: (cardImgArr && (cardImgArr.length > 0))?cardImgArr[0]:null,
                    isCardExpired: isCardExpired
                };

                this.creditCards.push(thisCard);
            }
        }
    }

    PaymentDueSVCheckout.prototype.getContext = function () {
        var termsAndConditionsDocLableText = this.environmentComponent.getConfig('termsAndConditionsLabelText');
        var termsAndConditionsDocLinkText = this.environmentComponent.getConfig('termsAndConditionsLinkText');
        var termsAndConditionsDocLink = this.environmentComponent.getConfig('termsAndConditionsDoc');
        var safeAndSecureDocLableText = this.environmentComponent.getConfig('safeAndSecureShoppingLabelText');
        var safeAndSecureDocLinkText = this.environmentComponent.getConfig('safeAndSecureShoppingLinkText');
        var safeAndSecureDocLink = this.environmentComponent.getConfig('safeAndSecureShoppingDoc');

        return {
            isLoading: this.isLoading,
            paymentAmount: this.paymentAmount,
            invoice: this.invoice,
            addresses: this.addresses,
            creditCards: this.creditCards,
            termsAndConditionsDocLableText: termsAndConditionsDocLableText,
            termsAndConditionsDocLinkText: termsAndConditionsDocLinkText,
            termsAndConditionsDocLink: termsAndConditionsDocLink,
            safeAndSecureDocLableText: safeAndSecureDocLableText,
            safeAndSecureDocLinkText: safeAndSecureDocLinkText,
            safeAndSecureDocLink: safeAndSecureDocLink,
            icnReviewInfo: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-review-info.png')),
            imgCard: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/master-card.png')),
            imgPaymentSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received.png')),
            imgCardTooltip1: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-debit-card-back-visa.png')),
			imgCardTooltip2: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-debit-card-back-american-exp.png')),
            icons: {
                icnCardtip: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-cardtip.png')),
                icnTnC: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-info-tool-tip.png')),
                icnLearnMore: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-secure.png')),
                icnDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-date.png')),
                icnDownload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download-primary.png')),
                icnBell: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-bell.png')),
                icnEdit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-edit-black-sm.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-close-blk-sm.png'))
            }
        }
    }

    return PaymentDueSVCheckout;
});

define('Saralux.Core.PaymentDueSVNew.View',	[
	'saralux_core_paymentduesvnew.tpl',

	'Saralux.Core.PaymentDueSVNew.Checkout.View',

	'Saralux.Core.PaymentDueSV.Model',
	'Saralux.Core.PaymentDueSVNew.SS2Model',

	'Saralux.Core.CommonLibraries.General',

	'Saralux.Core.ExternalLibraries.CryptoJS',

	'Utils',
	'Backbone',
	'jQuery',
	'underscore'
],	function (
	saralux_core_paymentduesv_tpl,

	paymentDueCheckoutView,

	PaymentDueSVModel,
	PaymentDueSVSS2Model,

	CoreCLGeneral,

	CryptoJS,

	Utils,
	Backbone,
	jQuery,
	_
) {

	'use strict';

	return Backbone.View.extend({

		template: saralux_core_paymentduesv_tpl,

		events: {
			"change [data-change='m360-mp-pd-change-filter']": "changeFilter",
			"click [data-action='m360-mp-pd-view-invoice']": "viewInvoice",
			"click [data-action='m360-mp-pd-view-all-invoices']": "viewAllInvoices",
			"click [data-action='m360-mp-pd-pay-invoice']": "payInvoice",
			'click [data-action="cc-method-click"]': "ccMethodClick",
			'click [data-action="to-invoice-payment-form"]': "toInvoicePaymentForm",
			'click [data-action="to-invoice-info-form2"]': "toInvoiceInfoForm2",
			'click [data-action="payment-form-next-button"]': "paymentFormNextButton",
			'click [data-action="m360-mp-pd-download-invoice"]': "downloadInvoice",
			'click [data-action="m360-mp-pd-get-installment-history"]': 'getInstallmentHistory',
			'click [data-action="m360-mp-pd-show-pay-invoice-modal"]': 'showPayInvoiceModal',
			'click [data-action="m360-mp-pd-process-payment"]': 'processPayment',
			'focusout [data-focusout="cc-name-focusout"]': 'ccNameFocusout',
			'focusout [data-focusout="cc-number-focusout"]': 'ccNumberFocusout',
			'focusout [data-focusout="cc-exp-focusout"]': 'ccExpFocusout',
			'focusout [data-focusout="cc-code-focusout"]': 'ccCodeFocusout',
			'keyup [data-keyup="cc-exp-keyup"]': 'ccExpKeyUpDown',
			'keydown [data-keydown="cc-exp-keydown"]': 'ccExpKeyUpDown',
			'click [data-action="invoice-form-submit-pre"]': 'invoiceFormSubmitPre',
			'focusout [data-focusout="form-compulsory-focusout"]': 'formCompulsoryFocusout',
			'focusout [data-focusout="form-zip-focusout"]': 'formZipFocusout',
			'focusout [data-focusout="m360-slxc-amount-focusout"]': "amountFocusout",
			'change [data-action="handle-redirect-external-url-checkbox"]': 'handleExternalLinkCheckbox',
			'change [data-action="m360-mp-pd-pay-type"]': 'payTypeChanged',
			'click [data-action="to-invoice"]': 'toInvoice',
			'click [data-action="back-to-invoice-list-from-invoice-payment"]': 'toInvoiceListFromInvoicePayment'
		},

		initialize: function (options) {
			jQuery(window).scrollTop(0);

			this.container = options.container;

			this.isDevEnv = false;
			try {
				var companyId = SC.ENVIRONMENT.companyId;

				if(companyId == "TSTDRV2097137") {
					this.isDevEnv = true;
				}
			} catch (error) {
				console.error("Error", error.toString());
			}

			var arkFsXCsv = 'kin5wtp20a';

			var self = this;
			this.m360Context = SC.m360Context;
			// this.states = this.m360Context.states;
			this.states = [];

			var currentPermissions = this.m360Context.currentPermissions;
			currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissions, arkFsXCsv));
			
			this.parentRecordId = currentPermissions.servicePositionForId;

			this.icnDownload = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-download.png'));
			this.cardSelectedImage = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-select-card.png'));
			
			this.icnDownloadPrimary = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download-primary.png'));
			this.icnDownloadGray = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-download.png'));

			var paymentMethods = this.m360Context.environment_component.getSiteSetting('paymentmethods');
			this.paymentMethods = CoreCLGeneral.formatPaymentMethods(paymentMethods);

			this.environment_component = this.container.getComponent('Environment');

			this.creditCardMap = {
				mastercard: this.environment_component.getConfig('pmIdMastercard'),
				visa: this.environment_component.getConfig('pmIdVisa'),
				amex: this.environment_component.getConfig('pmIdAmericanExpress'),
				discover: this.environment_component.getConfig('pmIdDiscover')
			};
			
			this.listMode = true;
			this.paidSuccessfully = false;
			this.paymentData = null;

			this.installments = [];
			this.nextDueAmount = null;
			this.balAmount = null;

			this.invoices = [];

			this.activeInvoice = null;
			this.invoiceCount = 0;

			this.isLoading = true;
			this.activeView = null;

			this.parentInvoices = false;

			this.model = new PaymentDueSVModel();
			this.ss2Model = new PaymentDueSVSS2Model();

			this.userprofile_component = this.container.getComponent('UserProfile');
			this.userProfile = null;

			this.customerInfo = {
				id: "",
				firstName: "",
				lastName: "",
				emailId: "",
				phoneNo: "",
				addr1: "",
				addr2: "",
				city: "",
				state: "",
				country: "",
				zip: ""
			};

			this.selectedInvoiceId = null;
			this.selectedPaymentAmount = null;

			this.userprofile_component.getUserProfile().then(function(res) {
				self.userProfile = res;
				self.initCustomerInfo();
				self.getInvoices();
			});
		},

		childViews: {
			'PaymentDue.Checkout': function() {
				return new paymentDueCheckoutView({
					container: this.container,
					parent: this,
					invoiceId: this.selectedInvoiceId,
					paymentAmount: this.selectedPaymentAmount
				});
			}
		},

		toInvoiceListFromInvoicePayment: function (e) {
			var hardReload = this.$(e.currentTarget).data('hardReload');

			this.selectedInvoiceId = null;
			this.selectedPaymentAmount = null;
			this.activeView = null;

			if (hardReload) {
				this.isLoading = true;
				this.render();
				this.getInvoices();
			} else {
				this.render();
				$(window).scrollTop(0);
			}
		},

		toInvoice: function (e) {
			var self = this;
			var invoiceId = this.$('#proceed-payment').attr('data-invoice-id');

			var paymentAmount = null;
			if (this.$('#pay-installment-1').is(':checked')) {
				paymentAmount = this.nextDueAmount;
			} else if (this.$('#pay-installment-2').is(':checked')) {
				paymentAmount = this.balAmount;
			} else {
				paymentAmount = this.$('#form-field-custom-amt').val();
			}

			var canProceed = true;
			if (!paymentAmount || this.$('#amount-error').hasClass('err')) {
				canProceed = false;
			}

			if (canProceed) {
				this.$("#pay-invoice-modal").modal('hide');
				$('.modal-backdrop').remove();
				$(document.body).removeClass("modal-open");

				setTimeout(function () {
					self.selectedInvoiceId = invoiceId;
					self.selectedPaymentAmount = paymentAmount;
					self.activeView = 'PaymentDue.Checkout';
					self.render();
					$(window).scrollTop(0);
				}, 300);
			}
		},

		downloadInvoice: function(e) {
			var invoiceId = this.$(e.currentTarget).attr("data-id");
			var self = this;

			if(invoiceId) {
				this.$(e.currentTarget).find("img").attr("src", this.icnDownloadGray);
				this.$(e.currentTarget).find("span").html("<span class='disabled-btn'>" + Utils.translate("Downloading...") + "</span>");
				this.$(e.currentTarget).attr("data-action", "");

				var data = {
					action: 'download_invoice',
					invoiceId: invoiceId
				};
		
				//console.log({data});
		
				this.ss2Model.clear({ silent: true });
				this.ss2Model.save(data).then(function (res) {
					self.$(e.currentTarget).find("img").attr("src", self.icnDownloadPrimary);
					self.$(e.currentTarget).find("span").html(Utils.translate("Download Invoice"));
					self.$(e.currentTarget).attr("data-action", 'm360-mp-pd-download-invoice');
					
					//console.log({res});
					
					if(!res.hasError) {
						self.$("#embedded-document").attr("src", 'data:application/pdf;base64,' + res.invoiceData);
						self.$("#download-file-modal").modal("show");
					}
				});
			} else {
				this.$(e.currentTarget).find("img").attr("src", this.icnDownloadPrimary);
				this.$(e.currentTarget).find("span").html(Utils.translate("Download Invoice"));
				this.$(e.currentTarget).attr("data-action", 'm360-mp-pd-download-invoice');
				console.error("Invoice ID is null");
			}
		},

		getInstallmentHistory: function (e) {
			this.$(e.currentTarget).prop('disabled', true);
			var self = this;
			var invoiceId = this.$(e.currentTarget).attr('data-id');

			var data = {
				action: 'get_installment_history',
				invoiceId: invoiceId
			}
			console.log('get_installment_history Request', data);

			this.ss2Model.save(data).then(function (res) {
				console.log('get_installment_history Response', res);

				if (!res.hasError) {
					self.installments = res.installments;
				} else {
					self.installments = [];
				}

				self.render();
				self.$('#installment-history-modal').modal('show');
			});
		},

		showPayInvoiceModal: function (e) {
			this.$(e.currentTarget).prop('disabled', true);
			var self = this;
			var invoiceId = this.$(e.currentTarget).attr('data-id');

			this.nextDueAmount = null;
			this.balAmount = null;

			var data = {
				action: 'get_installment_history',
				invoiceId: invoiceId
			}
			console.log('get_installment_history Request', data);

			this.ss2Model.save(data).then(function (res) {
				console.log('get_installment_history Response', res);

				if (!res.hasError) {
					var installments = res.installments;
					for (var i = 0; i < installments.length; i++) {
						if (installments[i].status != 'Paid') {
							if (!self.nextDueAmount) {
								self.nextDueAmount = installments[i].amountRemaining;
							}

							if (!self.balAmount) {
								self.balAmount = parseFloat( installments[i].amountRemaining );
							} else {
								self.balAmount += parseFloat( installments[i].amountRemaining );
							}
						}
					}

					if (installments.length == 0) {
						self.balAmount = res.balAmount;
					}

					if (self.balAmount) {
						self.balAmount = parseFloat(self.balAmount).toFixed(2);
					}
				}

				self.render();
				self.$('#proceed-payment').attr('data-invoice-id', invoiceId);
				self.$('#pay-invoice-modal').modal('show');
			});
		},

		// processPayment: function () {
		// 	this.$('#proceed-payment').prop('disabled', true);
		// 	var self = this;
		// 	var canProceed = true;
		// 	var invoiceId = this.$('#proceed-payment').attr('data-invoice-id');
		// 	var paymentAmount = null;

		// 	if (this.$('#pay-installment-1').is(':checked')) {
		// 		paymentAmount = this.nextDueAmount;
		// 	} else if (this.$('#pay-installment-2').is(':checked')) {
		// 		paymentAmount = this.balAmount;
		// 	} else {
		// 		paymentAmount = this.$('#form-field-custom-amt').val();
		// 	}

		// 	if (!paymentAmount || this.$('#amount-error').hasClass('err')) {
		// 		canProceed = false;
		// 	}

		// 	if (canProceed) {
		// 		//comment this code before pushing it to repo
		// 		// this.$("#pay-invoice-modal").modal('hide');
		// 		// $('.modal-backdrop').remove();
		// 		// $(document.body).removeClass("modal-open");
		// 		// // $(document.body).css("padding", "0");
		// 		// setTimeout(function () {
		// 		// 	self.activeView = 'PaymentDue.Checkout';
		// 		// 	self.render();
		// 		// }, 300);
		// 		//comment this code before pushing it to repo

		// 		//uncomment this code before pushing it to repo
		// 		var data = {
		// 			action: 'process_invoice_payment',
		// 			invoiceId: invoiceId,
		// 			paymentAmount: paymentAmount
		// 		};
		// 		console.log('process_invoice_payment Request', data);

		// 		this.ss2Model.clear({ silent: true });
		// 		this.ss2Model.save(data).then(function (res) {
		// 			console.log('process_invoice_payment Response', res);

		// 			if (!res.hasError) {

		// 			}

		// 			self.$("#pay-invoice-modal").modal('hide');
		// 			$('.modal-backdrop').remove();
		// 			$(document.body).removeClass("modal-open");
		// 			$(document.body).css("padding", "0");
		// 			setTimeout(function () {
		// 				self.isLoading = true;
		// 				self.render();
		// 				self.getInvoices();
		// 			}, 300);
		// 		});
		// 		//uncomment this code before pushing it to repo
		// 	}
		// },

		getInvoices: function() {
			var self = this;
			this.model.fetch({
				data: {
					parentInvoices: this.parentInvoices,
					parentId: this.parentRecordId
				}
			}).done(function() {
				// //console.log('inv-mdl', self.model);
				
				self.invoices = self.model.get('invoices');
				self.activeInvoice = (self.invoices.length>0)?self.invoices[0]:null;
				self.invoiceCount = self.model.get('count');
				self.isLoading = false;
				self.render();
				$(window).scrollTop(0);
			});
		},

		changeFilter: function(e) {
			var filterOption = jQuery("#payment-due-filter").val();

			if(filterOption == 'company-invoices') {
				this.parentInvoices = true;
			} else {
				this.parentInvoices = false;
			}

			this.getInvoices();
		},

		initCustomerInfo: function initCustomerInfo() {			
			this.customerInfo.id = this.userProfile.internalid;
			this.customerInfo.firstName = this.userProfile.firstname;
			this.customerInfo.lastName = this.userProfile.lastname;
			this.customerInfo.emailId = this.userProfile.email;
			
			var addressBook = this.userProfile.addressbook;
			for(var i = 0; addressBook && i < addressBook.length; i++) {
				if(addressBook[i].defaultbilling === "T") {
					this.customerInfo.addr1 = addressBook[i].addr1;
					this.customerInfo.addr2 = addressBook[i].addr2;
					this.customerInfo.city = addressBook[i].city;
					this.customerInfo.state = addressBook[i].state;
					this.customerInfo.zip = addressBook[i].zip;
					this.customerInfo.country = addressBook[i].country;
				}
			}

			/* if(this.customerInfo.state != "") {
				for(var i = 0; i < this.states.length; i++) {
					if(this.states[i].code == this.customerInfo.state) {
						this.states[i].selected = true;
					} else {
						this.states[i].selected = false;
					}
				}
			} */
		},

		viewAllInvoices: function viewAllInvoices(e) {
			var self = this;
			
			this.listMode = true;
			this.isLoading = true;
			this.render();
			
			this.model.fetch({
				data: {
					parentInvoices: this.parentInvoices,
					parentId: this.parentRecordId
				}
			}).done(function() {
				self.isLoading = false;
				self.invoices = self.model.get('invoices');
				self.activeInvoice = (self.invoices.length>0)?self.invoices[0]:null;
				self.invoiceCount = self.model.get('count');
				self.render();
			});
		},

		viewInvoice: function viewInvoice(e) {
			var invoiceIndex = $("#"+e.currentTarget.id).attr('data-invoice-index');
			this.activeInvoice = this.invoices[invoiceIndex];
			this.listMode = false;
			this.paidSuccessfully = false;
			this.render();
			//console.log(this.activeInvoice);
			
			jQuery(window).scrollTop(0);
		},

		amountFocusout: function () {
			var self = this;

			var amountInputEl = self.$('#form-field-custom-amt');
			var errorEl = self.$('#amount-error');
			var proceedButtonEl = self.$('#proceed-payment');

			if (amountInputEl.val() == '') {
				errorEl.text( Utils.translate('Amount is required') );
				errorEl.addClass('err');
				proceedButtonEl.prop('disabled', true);
			} else if (parseFloat(amountInputEl.val()) > parseFloat(self.balAmount)) {
				errorEl.text( Utils.translate('Cannot process amount greater than $') + self.balAmount );
				errorEl.addClass('err');
				proceedButtonEl.prop('disabled', true);
			} else {
				errorEl.removeClass('err');
				proceedButtonEl.prop('disabled', false);
			}
		},

		handleExternalLinkCheckbox: function (e) {
			if (e.currentTarget.checked) {
			  document.getElementById("custom-installment").style.display = "block"
			}
			else {
			  document.getElementById("custom-installment").style.display = "none"
			}
		},

		payTypeChanged: function (e) {
			var currentTarget = this.$(e.currentTarget);
			var amountInputEl = this.$('#form-field-custom-amt');
			var errorEl = this.$('#amount-error');
			var proceedButtonEl = this.$('#proceed-payment');

			if (currentTarget.hasClass('pay-installment-1') || currentTarget.hasClass('pay-installment-2')) {
				proceedButtonEl.prop('disabled', false);
			} else {
				var amount = amountInputEl.val();
				if (amount && !errorEl.hasClass('err')) {
					proceedButtonEl.prop('disabled', false);
				} else {
					proceedButtonEl.prop('disabled', true);
				}
			}
		},
	
		payInvoice: function payInvoice(e) {
			var self = this;

			var isDisabled = jQuery("#invoice-form-submit-pre").attr("disabled");
			if(isDisabled) {
				console.error('ERROR: submit button disabled');
				return;
			} else {
				//console.log('Note: submit button disabled');
				jQuery("#invoice-form-submit-pre").attr("disabled", true);
			}

			var addr1 = this.customerInfo.addr1;
			var addr2 = this.customerInfo.addr2;
			var city = this.customerInfo.city;
			var state = this.customerInfo.state;
			var zip = this.customerInfo.zip;
			var paymentMethod = this.$('#invoice-form-payment-method:checked').val();
			var cardHolderName = this.$('#invoice-form-card-holders-name').val();
			var cardNumber = this.$('#invoice-form-card-number').val();
			var cardExp = this.$('#invoice-form-card-exp').val();
			var cardCode = this.$('#invoice-form-card-code').val();
			
			var data = {
				invoiceId: this.activeInvoice.id,
				addr1: addr1,
				addr2: addr2,
				city: city,
				state: state,
				zip: zip,
				paymentMethod: paymentMethod,
				cardHolderName: cardHolderName,
				cardNumber: cardNumber,
				cardExp: cardExp,
				cardCode: cardCode
			}
			this.model.save(data).done(function(response) {
				//console.log('response', response);
				if(response.hasError) {
					self.paidSuccessfully = false;
					jQuery("#invoice-form-submit-pre").removeAttr("disabled");
					jQuery(".record-details .paymentform-screen").prepend('<div class="global-error-msg" style="display: block; position: unset;">\
					<div>\
						<i class="fa fa-exclamation-triangle" aria-hidden="true"></i>&nbsp;<span>Failure! Error:\
							'+ response.errorMessage +'</span>\
					</div>\
				</div>');
				} else {
					self.paymentData = JSON.parse(response.paymentData);
					if(self.paymentData.paymentId && self.paymentData.paymentDate) {
						self.paidSuccessfully = true;
					} else {
						self.paidSuccessfully = false;
					}
					self.render();
				}
				jQuery(window).scrollTop(0);
			});
		},
		
		ccMethodClick: function ccMethodClick(e) {
			this.$('.methods input[type="radio"]').attr('checked', false);
			this.$(e.currentTarget).find('input[type="radio"]').attr('checked', true);
			this.$(".methods").removeClass('selected');

			if(this.$(e.currentTarget).find('input[type="radio"]').is(':checked')){
				this.$(e.currentTarget).addClass('selected');
			}
		},

		toInvoicePaymentForm: function toInvoicePaymentForm(e) {
			this.$("#invoice-info-form-address-1").trigger("focusout");
			this.$("#invoice-info-form-city").trigger("focusout");
			this.$("#invoice-info-form-zip").trigger("focusout");
			this.$('#invoice-info-form-state').trigger("change");

			if (this.$("#rm-your-info").find('.err').length != 0) {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").show();
			}
			else {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").hide();
				this.$("#rm-your-info").css("display", "none");
				this.$("#rm-payment").css("display", "block");
			}
		},

		toInvoiceInfoForm2: function toInvoiceInfoForm2(e) {
			this.$("#rm-your-info").css("display", "block");
			this.$("#rm-payment").css("display", "none");
		},

		paymentFormNextButton: function paymentFormNextButton(e) {
			this.$(".page-two").css("display", "none");
			this.$(".page-one").css("display", "block");
		},

		ccNameFocusout: function ccNameFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-holders-name').siblings("p").addClass("err");
			}
			else {
				var regex = /^[a-zA-Z]+([\sa-zA-Z]+)?[a-zA-Z]+$/;

				if (!regex.test(this.$(e.currentTarget).val())) {
					this.$('#invoice-form-card-holders-name').siblings("p").addClass("err");
				} else {
					this.$('#invoice-form-card-holders-name').siblings("p").removeClass("err");
				}
			}
		},

		ccNumberFocusout: function ccNumberFocusout(e) {
			this.$('#invoice-form-card-number').siblings("p").removeClass("err");
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-number').siblings("p.err-1").addClass("err");
			}
			else {
				if (this.$('#invoice-form-payment-method:checked').is(':checked')) {
					this.$('#invoice-form-card-number').siblings("p").removeClass("err");
					var cardNumber = this.$(e.currentTarget).val().replace(/ /g, '');
					this.$(e.currentTarget).val(cardNumber);

					var dataCardType = this.$('#invoice-form-payment-method:checked').attr('data-card-type');
					dataCardType = dataCardType?dataCardType.toLowerCase():"";
					var pmId = this.$('#invoice-form-payment-method:checked').val();

					var regex = /^[0-9]{16}$/;
					if(parseInt(pmId) == parseInt(this.creditCardMap.discover)) { // discover
						regex = /^65[4-9][0-9]{13}|64[4-9][0-9]{13}|6011[0-9]{12}|(622(?:12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[01][0-9]|92[0-5])[0-9]{10})$/;
					} else if (parseInt(pmId) == parseInt(this.creditCardMap.mastercard)) { // mastercard
						regex = /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/;
					} else if (parseInt(pmId) == parseInt(this.creditCardMap.visa)) { // visa
						regex = /^4[0-9]{12}(?:[0-9]{3})?$/;
					} else if (parseInt(pmId) == parseInt(this.creditCardMap.amex)) { // american express
						regex = /^3[47][0-9]{13}$/;
					}

					if (!regex.test(cardNumber)) {
						this.$('#invoice-form-card-number').siblings("p.err-1").addClass("err");
					} else {
						this.$('#invoice-form-card-number').siblings("p").removeClass("err");
					}
				}
				else {
					this.$('#invoice-form-card-number').siblings("p.err-2").addClass("err");
				}
			}
		},

		ccExpFocusout: function ccExpFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-exp').siblings("p").addClass("err");
				// this.$('#invoice-form-card-exp').focus();
			}
			else {
				var regex = /^(0[1-9]|1[0-2])\/([0-9]{4}|[0-9]{2})$/;

				var flag = 0;
				var currentYear = new Date().getFullYear();
				var currentMonth = new Date().getMonth() + 1;
				var temp = this.$(e.currentTarget).val().split("/");

				if (temp[1] === undefined || temp[1] === null) {
					this.$('#invoice-form-card-exp').siblings("p").addClass("err");
				}
				else {
					if (temp[1].length === 2) {
						var newVal = temp[0] + '/20' + temp[1];
						this.$(e.currentTarget).val(newVal);
					}

					var newTemp = this.$(e.currentTarget).val().split("/");

					if (newTemp[0] < currentMonth || newTemp[1] < currentYear) {
						flag = 1;
					}
					if (newTemp[0] < currentMonth && newTemp[1] == currentYear) {
						flag = 1;
					}
					if (newTemp[0] < currentMonth && newTemp[1] > currentYear) {
						flag = 0;
					}

					if (!regex.test(this.$(e.currentTarget).val()) || flag == 1) {
						this.$('#invoice-form-card-exp').siblings("p").addClass("err");
						// this.$('#invoice-form-card-exp').focus();
					} else {
						this.$('#invoice-form-card-exp').siblings("p").removeClass("err");
					}
				}
			}
		},

		ccExpKeyUpDown: function ccExpKeyUpDown(e) {
			var inputLength = e.target.value.length;
	
			if(e.keyCode == 8 && inputLength === 2){
				var thisVal1 = e.target.value.slice(0,-1);
				$(e.target).val(thisVal1);
			} else {
				if(inputLength === 2){
					var thisVal2 = e.target.value;
					thisVal2 += '/';
					$(e.target).val(thisVal2);
				}
			}
		},

		ccCodeFocusout: function ccCodeFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-form-card-code').siblings("p").addClass("err");
			}
			else {
				var pmId = this.$('#invoice-form-payment-method:checked').val();
				if (parseInt(pmId) == parseInt(this.creditCardMap.amex)) {
					var regex = /^[0-9]{4}$/;
				}
				else {
					var regex = /^[0-9]{3}$/;
				}

				if (!regex.test(this.$(e.currentTarget).val())) {
					this.$('#invoice-form-card-code').siblings("p").addClass("err");
				} else {
					this.$('#invoice-form-card-code').siblings("p").removeClass("err");
				}
			}
		},

		invoiceFormSubmitPre: function invoiceFormSubmitPre(e) {
			e.preventDefault();

			this.$("#invoice-form-card-code").trigger("focusout");
			this.$("#invoice-form-card-holders-name").trigger("focusout");
			this.$("#invoice-form-card-exp").trigger("focusout");
			this.$("#invoice-form-card-number").trigger("focusout");

			if (this.$('#invoice-form-payment-method:checked').length != 0) {
				this.$('.invoice-form-payment-method-p').removeClass("err");
			} else {
				this.$('.invoice-form-payment-method-p').addClass("err");
			}

			if (this.$("#rm-payment").find('.err').length != 0) {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").show();
			}
			else {
				this.$(e.currentTarget).parents(".navigation").siblings(".global-error-msg").hide();
				this.$("#invoice-form-submit").trigger("click");
			}
		},

		formCompulsoryFocusout: function formCompulsoryFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			}
			else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		},

		formZipFocusout: function formZipFocusout(e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$('#invoice-info-form-zip').siblings("p").addClass("err");
			}
			else {
				var selectedCountryCode = this.$("#invoice-info-form-country").val();
				if(selectedCountryCode == 'US') {
					var regex = /^[0-9]{5}(?:-[0-9]{4})?$/;

					if (!regex.test(this.$(e.currentTarget).val())) {
						this.$('#invoice-info-form-zip').siblings("p").addClass("err");
					} else {
						this.$('#invoice-info-form-zip').siblings("p").removeClass("err");
					}
				} else {
					this.$('#invoice-info-form-zip').siblings("p").removeClass("err");
				}
			}
		},

		getContext: function getContext() {
			this.invoiceCountText = "invoices";
			if(this.invoiceCount) {
				if(this.invoiceCount == 0) {
					this.invoiceCountText = "invoices";
				} else if(this.invoiceCount == 1) {
					this.invoiceCountText = "invoice";
				} else {
					this.invoiceCountText = "invoices";
				}
			}
			return {
				isLoading: this.isLoading,
				activeView: this.activeView,

				parentInvoices: this.parentInvoices,
				listMode: this.listMode,
				paidSuccessfully: this.paidSuccessfully,
				paymentData: this.paymentData,

				addr1: this.customerInfo.addr1,
				addr2: this.customerInfo.addr2,
				city: this.customerInfo.city,
				state: this.customerInfo.state,
				country: this.customerInfo.country,
				zip: this.customerInfo.zip,
				
				states: this.states,
				paymentMethods: this.paymentMethods,

				invoiceCount: this.invoiceCount,
				invoiceCountText: this.invoiceCountText,
				invoices: this.invoices,
				activeInvoice: this.activeInvoice,

				installments: this.installments,
				nextDueAmount: this.nextDueAmount,
				balAmount: this.balAmount,
				showPayInvoiceBody: this.nextDueAmount || this.balAmount,

				icnDownload: this.icnDownload,

				isPhoneDevice: Utils.isPhoneDevice(),

				isDevEnv: this.isDevEnv,

				cardSelectedImage: this.cardSelectedImage,
				imgPendingPayment: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-pending-payment.png')),
				imgNoPendingPayment: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-no-pending-payment.png')),
				imgEmptyInvoice: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-emptyinvoice.png')),
				imgInstallmentHistory: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-history.png')),
				icons:{
					icnDownloadGray: this.icnDownloadGray,
					icnDownloadPrimary: this.icnDownloadPrimary
				}
			};
		}
	});
});

// Model.js
// -----------------------
// @module Case
define("Saralux.Core.PaymentDueSVNew.SS2Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/PaymentDueSVNew/SuiteScript2/PaymentDueSVNew.Service.ss"
            ),
            true
        )
    });
});


define('Saralux.Core.PaymentDueSVNew',   [
	'Saralux.Core.PaymentDueSVNew.View'
],   function (
	PaymentDueSVView
){
	
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0005', function() {
						return new PaymentDueSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.PaymentDueSVNew', ex.toString());
			}
		}
	};
});


define('Saralux.Core.PublicationSubscription.Checkout.View',	[
	'saralux_core_publicationsubscription_checkout.tpl',

	'Saralux.Core.PublicationSubscription.SS2Model',
	
	'Saralux.Core.CommonLibraries.Order.SS2Model',
	'Saralux.Core.CommonLibraries.CAPI.Model',
	'Saralux.Core.CommonLibraries.General',

	'Saralux.Core.ExternalLibraries.MomentJS',
	
	'Utils',
	'Backbone'
], function (
	saralux_core_publicationsubscription_checkout_tpl,
	
	PSModel,
	
	CLOrderSS2Model,
	CAPIModel,
	CoreCLGeneral,

	MomentJS,
	
	Utils,
	Backbone
) {
	'use strict';
	
	return Backbone.View.extend({

		template: saralux_core_publicationsubscription_checkout_tpl,

		getBreadcrumbPages: function() {
			return this.breadcrumbs;
		},
		
		events: {
			"click [data-action='to-publication-details']": "showDetails",
			'click [data-action="m360-slxc-ps-account-info-next"]': "accountInfoNext",
			'click [data-action="m360-slxc-ps-select-shipping-addr"]': "selectShippingAddr",
			'click [data-action="m360-slxc-ps-edit-shipping-addr"]': "editShippingAddr",
			'click [data-action="m360-slxc-ps-add-new-shipping-addr"]': "addNewShippingAddr",
			'click [data-action="m360-slxc-ps-close-address-form"]': "closeAddressForm",
			'click [data-action="m360-slxc-ps-shipping-info-next"]': "shippingInfoNext",
			'change [data-change="m360-slxc-ps-same-as-shipping-addr"]': "copyShippingAddress",
			'click [data-action="m360-slxc-ps-payment-info-next"]': "paymentInfoNext",
			'click [data-action="m360-slxc-ps-submit-form"]': "submitForm",
			'change [data-change="m360-slxc-ps-sel-country"]': "selectCountry",
			'focusout [data-action="m360-slxc-ps-zip-validation"]': 'zipCodeValidation'
		},

		initialize: function (options) {
			var self = this;

			this.parent = options.parent;

			this.environment_component = options.environment_component;
			this.publicationDetails = options.publicationDetails;
			this.userDetails = options.userDetails;
			this.selectedMediaStr = options.selectedMediaStr;
			this.activePricing = options.activePricing;
			this.subStartDate = options.subStartDate;
			this.subEndDate = MomentJS(this.subStartDate, "MM/DD/YYYY").add(parseInt(this.activePricing.duration), 'months').format('MM/DD/YYYY');
			this.activePricing.startDate = this.subStartDate;
			this.activePricing.endDate = this.subEndDate;
			
			this.breadcrumbs = options.breadcrumbs;
			this.defaultPublicationImage = options.defaultPublicationImage;

			this.selectedCountryCode = "";
			this.countries = options.countries;
			this.allStates = options.states;
			this.states = [];

			this.targetShippingAddress = null;
			this.targetShippingAddressIndex = null;
			this.targetBillingAddress = null;

			this.addAddressMode = false;
			this.editAddressMode = false;
			this.sameAsShippingAddress = false;
			
			this.loginURL = CoreCLGeneral.getLoginURL(this.environment_component);

			var subsidiaries = this.environment_component.getSiteSetting('subsidiaries');
			this.defaultSubsidiary = CoreCLGeneral.getDefaultSubsidiary(subsidiaries);

			var paymentMethods = this.environment_component.getSiteSetting('paymentmethods');
			this.paymentMethods = CoreCLGeneral.formatPaymentMethods(paymentMethods);

			this.isLoggedIn = this.userDetails.id?true:false;

			this.customerInfo = {
				id: "",
				firstName: "",
				lastName: "",
				emailId: "",
				phoneNo: "",
				addresses: [],
				shippingAddress: {
					id: null,
					addr1: "",
					addr2: "",
					country: "",
					state: "",
					stateText: "",
					countryText: "",
					city: "",
					zip: ""
				},
				billingAddress: {
					id: null,
					addr1: "",
					addr2: "",
					country: "",
					state: "",
					stateText: "",
					countryText: "",
					city: "",
					zip: ""
				}
			};
			if(this.isLoggedIn) {
				this.customerInfo.id = this.userDetails.id;
				this.customerInfo.firstName =this.userDetails.firstName;
				this.customerInfo.lastName =this.userDetails.lastName;
				this.customerInfo.emailId =this.userDetails.email;

				this.customerInfo.addresses = this.publicationDetails.userAddresses;

				for(var i = 0; this.customerInfo.addresses && i < this.customerInfo.addresses.length; i++) {
					if(this.customerInfo.addresses[i].isDefaultShipping) {
						this.customerInfo.shippingAddress.id = this.customerInfo.addresses[i].id;
						this.customerInfo.shippingAddress.addr1 = this.customerInfo.addresses[i].addr1;
						this.customerInfo.shippingAddress.addr2 = this.customerInfo.addresses[i].addr2;
						this.customerInfo.shippingAddress.city = this.customerInfo.addresses[i].city;
						this.customerInfo.shippingAddress.state = this.customerInfo.addresses[i].state;
						this.customerInfo.shippingAddress.stateText = this.customerInfo.addresses[i].stateText;
						this.customerInfo.shippingAddress.country = this.customerInfo.addresses[i].country;
						this.customerInfo.shippingAddress.countryText = this.customerInfo.addresses[i].countryText;
						this.customerInfo.shippingAddress.zip = this.customerInfo.addresses[i].zip;
					}
					if(this.customerInfo.addresses[i].isDefaultBilling) {
						this.customerInfo.billingAddress.id = this.customerInfo.addresses[i].id;
						this.customerInfo.billingAddress.addr1 = this.customerInfo.addresses[i].addr1;
						this.customerInfo.billingAddress.addr2 = this.customerInfo.addresses[i].addr2;
						this.customerInfo.billingAddress.city = this.customerInfo.addresses[i].city;
						this.customerInfo.billingAddress.state = this.customerInfo.addresses[i].state;
						this.customerInfo.billingAddress.stateText = this.customerInfo.addresses[i].stateText;
						this.customerInfo.billingAddress.country = this.customerInfo.addresses[i].country;
						this.customerInfo.billingAddress.countryText = this.customerInfo.addresses[i].countryText;
						this.customerInfo.billingAddress.zip = this.customerInfo.addresses[i].zip;
					}
				}
			}

			if(this.isLoggedIn) {
				this.customerInfo.isMember = this.userDetails.isMember;
				this.customerInfo.membershipId = this.userDetails.membershipId;
				this.customerInfo.membershipIdStr = this.userDetails.membershipIdStr;
			} else {
				this.customerInfo.isMember = false;
				this.customerInfo.membershipId = null;
				this.customerInfo.membershipIdStr = "";
			}

			if(this.customerInfo.isMember) {
				this.activePricing.effectivePrice = this.activePricing.pricing.member;
				this.activePricing.effectivePriceStr = this.activePricing.pricing.memberStr;
			} else {
				this.activePricing.effectivePrice = this.activePricing.pricing.nonMember;
				this.activePricing.effectivePriceStr = this.activePricing.pricing.nonMemberStr;
			}

			this.model = new PSModel();
			this.orderModel = new CLOrderSS2Model();
			this.CAPIModel = new CAPIModel();
		},

		zipCodeValidation: function(e) {
			var targetSelect = jQuery("#"+e.currentTarget.id).attr('data-target-select');
			var targetZip = targetSelect + "-zip";
			var targetCountry = targetSelect + "-country";

			if($("#"+targetZip).val()=='') {  
				$('#'+targetZip).siblings("p").text(Utils.translate("Please enter zip code."));
				$('#'+targetZip).siblings("p").addClass("err");
			} else {
				var selectedCountryCode = jQuery("#"+targetCountry).val();
				
				if(selectedCountryCode == 'US') {
					var regex = /^[0-9]{5}(?:-[0-9]{4})?$/;
		  
					if(!regex.test($("#"+targetZip).val())) {
						$('#'+targetZip).siblings("p").text(Utils.translate("Please enter valid zip code."));
						$('#'+targetZip).siblings("p").addClass("err");
						// $('#'+targetZip).focus();
					} else {
						$('#'+targetZip).siblings("p").removeClass("err");
					}
				} else {
					$('#'+targetZip).siblings("p").removeClass("err");
				}
			}
		},

		setCountryAndStateDropdowns: function(thisAddress, targetCountriesSelect, targetStatesSelect) {
			/* console.log('thisAddress', thisAddress);
			console.log('targetCountriesSelect', targetCountriesSelect);
			console.log('targetStatesSelect', targetStatesSelect); */

			if(thisAddress) {
				// Generate countries select list
				var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
				for(var i = 0; i < this.countries.length; i++) {
					countriesHtml = countriesHtml + "<option value='" + this.countries[i].code +"'";
					if(this.countries[i].code == thisAddress.country) {
						this.countries[i].selected = true;
						countriesHtml = countriesHtml +" selected";
					} else {
						this.countries[i].selected = false;
					}
					countriesHtml = countriesHtml +">" + this.countries[i].name + "</option>";
				}
				jQuery("#"+targetCountriesSelect).html(countriesHtml);
	
				// Generate states select list
				for(var i = 0; i < this.allStates.length; i++) {
					// console.log("thisAddress.country: " + thisAddress.country);
					
					if(this.allStates[i].countrycode == thisAddress.country) {
						this.states = this.allStates[i].states;
						
						if(this.states.length > 0) {
							// var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
							var statesHtml = "";
							for(var j = 0; j < this.states.length; j++) {
								statesHtml = statesHtml + "<option value='" + this.states[j].code +"'";
								if(this.states[j].code == thisAddress.state) {
									this.states[j].selected = true;
									statesHtml = statesHtml +" selected";
								} else {
									this.states[j].selected = false;
								}
								statesHtml = statesHtml +">" + this.states[j].name + "</option>";
							}
							jQuery("#"+targetStatesSelect).parent().html(
								"<select name='"+targetStatesSelect+"' id='"+targetStatesSelect+"' class='form-control' required>" +
								"<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
							);
							jQuery("#"+targetStatesSelect).html(statesHtml);
						} else {
							var statesHtml = "<input type='text' placeholder='"+Utils.translate('Enter State name')+"' name='"+targetStatesSelect+"' id='"+targetStatesSelect+"' class='form-control' required />";
							jQuery("#"+targetStatesSelect).parent().html(
								statesHtml +
								"<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
							);
						}

						break;
					}
				}
			} else {
				var countriesHtml = "<option value='select'>"+Utils.translate('Select Country')+"</option>";
				for(var i = 0; i < this.countries.length; i++) {
					this.countries[i].selected = false;
					countriesHtml = countriesHtml + "<option value='" + this.countries[i].code + "'>" + this.countries[i].name + "</option>";
				}
				jQuery("#"+targetCountriesSelect).html(countriesHtml);

				jQuery("#"+targetStatesSelect).parent().html(
					"<select name='"+targetStatesSelect+"' id='"+targetStatesSelect+"' class='form-control' required>" +
					"<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
				);
				var statesHtml = "<option value='select'>"+Utils.translate('Select State')+"</option>";
				jQuery("#"+targetStatesSelect).html(statesHtml);
			}
		},

		selectCountry: function(e) {
			var selectedCountryCode = jQuery("#"+e.currentTarget.id).val();
			// console.log('selectedCountryCode', selectedCountryCode);

			var targetSelect = jQuery("#"+e.currentTarget.id).attr('data-target-select');
			var targetStatesSelect = targetSelect + "-state";
			
			this.states = [];
			
			for(var i = 0; i < this.allStates.length; i++) {
				if(this.allStates[i].countrycode == selectedCountryCode) {
					this.states = this.allStates[i].states;
					break;
				}
			}

			// console.log('states', this.states);

			if(selectedCountryCode != 'select' && this.states.length == 0) {
				jQuery("#"+targetStatesSelect).parent().html(
					"<input type='text' placeholder='"+Utils.translate('Enter State name')+"' name='"+targetStatesSelect+"' id='"+targetStatesSelect+"' class='form-control' required />" +
					"<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
				);
			} else {
				jQuery("#"+targetStatesSelect).parent().html(
					"<select name='"+targetStatesSelect+"' id='"+targetStatesSelect+"' class='form-control' required>" +
					"<p data-validation-error='block'>"+Utils.translate('Please select State.')+"</p>"
				);
				var stateOptions = "";
				for(var i = 0; i < this.states.length; i++) {
					stateOptions = stateOptions + "<option value='"+this.states[i].code+"'>" + this.states[i].name + "</option>";
				}

				jQuery("#"+targetStatesSelect).html(stateOptions);
			}
		},

		accountInfoNext: function accountInfoNext(e) {
			jQuery("#subscription-form-first-name").trigger("focusout");
			jQuery("#subscription-form-last-name").trigger("focusout");
			jQuery("#subscription-form-email").trigger("focusout");

			if(!this.isLoggedIn) {
				jQuery("#subscription-form-password").trigger("focusout");
				jQuery("#subscription-form-re-password").trigger("focusout");
			}
			
			if(jQuery(".account-info").find('.err').length != 0){
				jQuery(".account-info .standard-error").show();
			} else {				
				jQuery(".account-info .standard-error").hide();
				if(this.isLoggedIn) {
					if(this.customerInfo.addresses.length == 0) {
						jQuery("#add-new-shipping-addr").click();
						jQuery(".new-address-form .close-form-container").hide();
					}
					jQuery(".account-info").hide();
					jQuery(".shipping-info").show();
					jQuery(window).scrollTop(0);
				} else {
					this.checkEmail();
				}
			}
		},

		selectShippingAddr: function selectShippingAddr(e) {
			var index = jQuery("#"+e.currentTarget.id).val();
			// console.log('index', index);
			
			var targetAddress = this.customerInfo.addresses[index];
			// console.log('targetAddress', targetAddress);

			this.targetShippingAddress = targetAddress.id;
			this.targetShippingAddressIndex = null;

			jQuery("#shipping-addr-form-addressee").val(targetAddress.addressee);
			jQuery("#shipping-addr-form-label").val(targetAddress.label);
			jQuery("#shipping-addr-form-addr1").val(targetAddress.addr1);
			jQuery("#shipping-addr-form-addr2").val(targetAddress.addr2);
			jQuery("#shipping-addr-form-city").val(targetAddress.city);
			jQuery("#shipping-addr-form-zip").val(targetAddress.zip);
			jQuery("#shipping-addr-form-phone").val(targetAddress.phone);
			
			this.setCountryAndStateDropdowns(targetAddress, "shipping-addr-form-country", "shipping-addr-form-state");
		},

		addNewShippingAddr: function addNewShippingAddr(e) {
			this.addAddressMode = true;
			
			this.targetShippingAddress = null;
			this.targetShippingAddressIndex = null;

			jQuery("#shipping-addr-form-addressee").val("");
			jQuery("#shipping-addr-form-label").val("");
			jQuery("#shipping-addr-form-addr1").val("");
			jQuery("#shipping-addr-form-addr2").val("");
			jQuery("#shipping-addr-form-city").val("");
			jQuery("#shipping-addr-form-zip").val("");
			jQuery("#shipping-addr-form-phone").val("");

			this.setCountryAndStateDropdowns(null, "shipping-addr-form-country", "shipping-addr-form-state")

			jQuery(".shipping-info #shipping-info-add-edit-addr-text").text(Utils.translate('Add a new address'));
			jQuery(".add-new-address").hide();
    		jQuery(".new-address-form").show();
		},

		editShippingAddr: function editShippingAddr(e) {
			this.editAddressMode = true;

			var index = jQuery("#"+e.currentTarget.id).attr('data-index');
			// console.log('index', index);

			var targetAddress = this.customerInfo.addresses[index];
			this.targetShippingAddress = targetAddress.id;
			this.targetShippingAddressIndex = index;

			jQuery("#shipping-addr-form-addressee").val(targetAddress.addressee);
			jQuery("#shipping-addr-form-label").val(targetAddress.label);
			jQuery("#shipping-addr-form-addr1").val(targetAddress.addr1);
			jQuery("#shipping-addr-form-addr2").val(targetAddress.addr2);
			jQuery("#shipping-addr-form-city").val(targetAddress.city);
			jQuery("#shipping-addr-form-zip").val(targetAddress.zip);
			jQuery("#shipping-addr-form-phone").val(targetAddress.phone);

			this.setCountryAndStateDropdowns(targetAddress, "shipping-addr-form-country", "shipping-addr-form-state");

			jQuery(".shipping-info #shipping-info-add-edit-addr-text").text(Utils.translate('Edit address'));
			jQuery(".add-new-address").hide();
    		jQuery(".new-address-form").show();
		},

		closeAddressForm: function closeAddressForm(e) {
			if(this.editAddressMode) {
				this.editAddressMode = false;
			}
			if(this.addAddressMode) {
				this.addAddressMode = false;
			}
		},

		shippingInfoNext: function shippingInfoNext(e) {
			if(this.isLoggedIn && !this.addAddressMode && !this.editAddressMode) {
				var index = jQuery("input[name='shipping-info-select-address']:checked").val();
				// console.log('selected addr index', index);
				
				if(!isNaN(index)) {
					this.customerInfo.shippingAddress = this.customerInfo.addresses[index];
					this.customerInfo.shippingAddress.lineId = index;
					jQuery("#shipping-info-address-select-box").siblings(".error-container").children("p").removeClass("err");
					jQuery("#shipping-info-address-select-box").siblings(".error-container").hide();
				} else {
					jQuery("#shipping-info-address-select-box").siblings(".error-container").children("p").addClass("err");
					jQuery("#shipping-info-address-select-box").siblings(".error-container").show();
				}

				if(jQuery(".shipping-info").find('.err').length != 0) {
					jQuery(".shipping-info .standard-error").show();
				} else {
					jQuery(".shipping-info .standard-error").hide();

					// console.log('shippingInfoNext', this.customerInfo.shippingAddress);
					
					jQuery(".shipping-info .standard-error").hide();
					jQuery(".shipping-info").hide();
					jQuery(".payment-info").show();
					jQuery(window).scrollTop(0);
				}
			} else {
				jQuery("#shipping-addr-form-addressee").trigger("focusout");
				jQuery("#shipping-addr-form-label").trigger("focusout");
				jQuery("#shipping-addr-form-addr1").trigger("focusout");
				jQuery("#shipping-addr-form-city").trigger("focusout");
				jQuery("#shipping-addr-form-zip").trigger("focusout");
				jQuery('#shipping-addr-form-phone').trigger("focusout");

				if(jQuery("#shipping-addr-form-state").val() == "select" || jQuery("#shipping-addr-form-state").val() == "") {
					jQuery("#shipping-addr-form-state").parent().siblings("p").addClass("err");
					jQuery("#shipping-addr-form-state").siblings("p").addClass("err");
				} else {
					jQuery("#shipping-addr-form-state").parent().siblings("p").removeClass("err");
					jQuery("#shipping-addr-form-state").siblings("p").removeClass("err");
				}

				if(jQuery("#shipping-addr-form-country").val() == "select" || jQuery("#shipping-addr-form-country").val() == "") {
					jQuery("#shipping-addr-form-country").siblings("p").addClass("err");
				} else {
					jQuery("#shipping-addr-form-country").siblings("p").removeClass("err");
				}

				if (jQuery(".shipping-info").find('.err').length != 0) {
					jQuery(".shipping-info .standard-error").show();
				} else {
					jQuery(".shipping-info .standard-error").hide();
					this.customerInfo.shippingAddress = {
						id: this.targetShippingAddress,
						lineId: this.targetShippingAddressIndex,
						addressee: jQuery("#shipping-addr-form-addressee").val(),
						label: jQuery("#shipping-addr-form-label").val(),
						addr1: jQuery("#shipping-addr-form-addr1").val(),
						addr2: jQuery("#shipping-addr-form-addr2").val(),
						city: jQuery("#shipping-addr-form-city").val(),
						zip: jQuery("#shipping-addr-form-zip").val(),
						state: jQuery("#shipping-addr-form-state").val(),
						country: jQuery("#shipping-addr-form-country").val(),
						countryText: jQuery("#shipping-addr-form-country option:checked").text(),
						phone: jQuery("#shipping-addr-form-phone").val()
					};
					// console.log('shippingInfoNext', this.customerInfo.shippingAddress);

					if(!this.isLoggedIn) {
						this.setCountryAndStateDropdowns(null, "billing-addr-form-country", "billing-addr-form-state");
					}
					
					jQuery(".shipping-info").hide();
					jQuery(".payment-info").show();
					jQuery(window).scrollTop(0);
				}
			}

			if(this.isLoggedIn) {
				var targetAddress = this.customerInfo.billingAddress;
				
				if(targetAddress.id) {
					jQuery("#billing-addr-form-addr1").val(targetAddress.addr1);
					jQuery("#billing-addr-form-addr2").val(targetAddress.addr2);
					jQuery("#billing-addr-form-city").val(targetAddress.city);
					jQuery("#billing-addr-form-zip").val(targetAddress.zip);
					jQuery("#billing-addr-form-phone").val(targetAddress.phone);
					this.setCountryAndStateDropdowns(targetAddress, "billing-addr-form-country", "billing-addr-form-state");
				} else {
					this.setCountryAndStateDropdowns(null, "billing-addr-form-country", "billing-addr-form-state");
				}
			}
		},

		copyShippingAddress: function copyShippingAddress(e) {
			var isChecked = jQuery("#"+e.currentTarget.id).prop('checked');
			// console.log('isChecked', isChecked);

			if(isChecked) {
				this.sameAsShippingAddress = true;
				
				var targetAddress = this.customerInfo.shippingAddress;
				// console.log('targetAddress', targetAddress);

				jQuery("#billing-addr-form-addr1").val(targetAddress.addr1);
				jQuery("#billing-addr-form-addr2").val(targetAddress.addr2);
				jQuery("#billing-addr-form-city").val(targetAddress.city);
				jQuery("#billing-addr-form-zip").val(targetAddress.zip);
				jQuery("#billing-addr-form-phone").val(targetAddress.phone);

				this.setCountryAndStateDropdowns(targetAddress, "billing-addr-form-country", "billing-addr-form-state");

				jQuery('.shipping-address-form input').attr('readonly', 'readonly');
				jQuery(".shipping-address-form input").attr("disabled", true);
				jQuery('.shipping-address-form select').attr('readonly', 'readonly');
				jQuery(".shipping-address-form select").attr("disabled", true);
				jQuery('.shipping-address-form p').removeClass("err");
			} else {
				this.sameAsShippingAddress = false;

				jQuery("#billing-addr-form-addr1").val("");
				jQuery("#billing-addr-form-addr2").val("");
				jQuery("#billing-addr-form-city").val("");
				jQuery("#billing-addr-form-zip").val("");
				jQuery("#billing-addr-form-phone").val("");

				this.setCountryAndStateDropdowns(null, "billing-addr-form-country", "billing-addr-form-state");

				jQuery('.shipping-address-form input').removeAttr('readonly');
				jQuery(".shipping-address-form input").removeAttr("disabled");
				jQuery('.shipping-address-form select').removeAttr('readonly');
				jQuery(".shipping-address-form select").removeAttr("disabled");
			}
		},

		paymentInfoNext: function paymentInfoNext(e) {
			jQuery("#subscription-form-card-code").trigger("focusout");
			jQuery("#subscription-form-card-holders-name").trigger("focusout");
			jQuery("#subscription-form-card-exp").trigger("focusout");
			jQuery("#subscription-form-card-number").trigger("focusout");

			if (jQuery('#subscription-form-payment-method:checked').length != 0) {
				jQuery('.subscription-form-payment-method-p').removeClass("err");
			} else {
				jQuery('.subscription-form-payment-method-p').addClass("err");
			}

			jQuery("#billing-addr-form-addr1").trigger("focusout");
			jQuery("#billing-addr-form-city").trigger("focusout");
			jQuery("#billing-addr-form-zip").trigger("focusout");
			
			if(jQuery("#billing-addr-form-state").val() == "select" || jQuery("#billing-addr-form-state").val() == "") {
				jQuery("#billing-addr-form-state").parent().siblings("p").addClass("err");
				jQuery("#billing-addr-form-state").siblings("p").addClass("err");
			} else {
				jQuery("#billing-addr-form-state").parent().siblings("p").removeClass("err");
				jQuery("#billing-addr-form-state").siblings("p").removeClass("err");
			}

			if(jQuery("#billing-addr-form-country").val() == "select" || jQuery("#billing-addr-form-country").val() == "") {
				jQuery("#billing-addr-form-country").siblings("p").addClass("err");
			} else {
				jQuery("#billing-addr-form-country").siblings("p").removeClass("err");
			}

			if (jQuery(".payment-info").find('.err').length != 0) {
				jQuery(".payment-info .standard-error").show();
			} else {
				jQuery(".payment-info .standard-error").hide();
				this.customerInfo.billingAddress.addr1 = jQuery("#billing-addr-form-addr1").val();
				this.customerInfo.billingAddress.addr2 = jQuery("#billing-addr-form-addr2").val();
				this.customerInfo.billingAddress.country = jQuery("#billing-addr-form-country").val();
				this.customerInfo.billingAddress.countryText = jQuery("#billing-addr-form-country option:checked").text();
				this.customerInfo.billingAddress.state = jQuery("#billing-addr-form-state").val();
				this.customerInfo.billingAddress.city = jQuery("#billing-addr-form-city").val();
				this.customerInfo.billingAddress.zip = jQuery("#billing-addr-form-zip").val();
				this.setConfirmationPage();
				jQuery(".payment-info").hide();
				jQuery(".confirmation-info").show();
				jQuery(window).scrollTop(0);
			}
		},

		setConfirmationPage: function setConfirmationPage() {
			jQuery("#confirmation-info-name").text(this.customerInfo.firstName + " " + this.customerInfo.lastName);
			jQuery("#confirmation-info-email").text(this.customerInfo.emailId);
			
			
			var shippingAddrHtml = "";
			if(this.customerInfo.shippingAddress.addressee) {
				shippingAddrHtml += this.customerInfo.shippingAddress.addressee + ",<br>";
			}
			if(this.customerInfo.shippingAddress.addr1) {
				shippingAddrHtml += this.customerInfo.shippingAddress.addr1 + ",<br>";
			}
			if(this.customerInfo.shippingAddress.addr2) {
				shippingAddrHtml += this.customerInfo.shippingAddress.addr2 + ",<br>";
			}
			shippingAddrHtml += this.customerInfo.shippingAddress.city + ", " + this.customerInfo.shippingAddress.state + " " + this.customerInfo.shippingAddress.zip + "<br>";
			shippingAddrHtml += this.customerInfo.shippingAddress.countryText;

			jQuery("#confirmation-info-shipping-address").html(shippingAddrHtml);

			
			jQuery("#confirmation-info-phone").text(
				this.customerInfo.shippingAddress.phone?this.customerInfo.shippingAddress.phone:"-"
			);


			var billingAddrHtml = "";
			if(this.customerInfo.billingAddress.addr1) {
				billingAddrHtml += this.customerInfo.billingAddress.addr1 + ",<br>";
			}
			if(this.customerInfo.billingAddress.addr2) {
				billingAddrHtml += this.customerInfo.billingAddress.addr2 + ",<br>";
			}
			billingAddrHtml += this.customerInfo.billingAddress.city + ", " + this.customerInfo.billingAddress.state + " " + this.customerInfo.billingAddress.zip + "<br>";
			billingAddrHtml += this.customerInfo.billingAddress.countryText;
			
			jQuery("#confirmation-info-billing-address").html(billingAddrHtml);


			var cardImg = jQuery('#subscription-form-payment-method:checked').siblings('#card-image').attr('src');
			
			var cardNumber = jQuery("#subscription-form-card-number").val();
			cardNumber = cardNumber.slice(cardNumber.length - 4);

			jQuery("#confirmation-info-payment-image").attr('src', cardImg);
			jQuery("#confirmation-info-payment-card").text(Utils.translate('card ending with') + ' ' + cardNumber);
		},

		checkEmail: function checkEmail() {
			var self = this;

			var emailId = jQuery('#subscription-form-email').val();
			
			var data = {
				action: "validate_email",
				emailId: emailId
			};
			
			this.model.set(data);
			this.model.save().done(function(response) {
				jQuery(".account-info .standard-error").hide();
				if(!response.hasError) {
					if(response.data.exists) {
						var message1 = Utils.translate('A user with e-mail ID $(0) already exists.', emailId);

						var message2 = Utils.translate("Click");
						message2 += ' <a href='+self.loginURL+'>';
						message2 += Utils.translate("here");
						message2 += '</a> ';
						message2 += Utils.translate("to login.");

						jQuery(".account-info .standard-error-message").html(
							' ' + message1 + '<br/>' + message2
						);
						
						jQuery(".account-info .standard-error").show();
					} else {
						jQuery(".account-info .standard-error").hide();
						self.customerInfo.firstName = jQuery("#subscription-form-first-name").val();
						self.customerInfo.lastName = jQuery("#subscription-form-last-name").val();
						self.customerInfo.emailId = jQuery("#subscription-form-email").val();
						jQuery(".account-info").hide();
						jQuery(".shipping-info").show();
						jQuery("#add-new-shipping-addr").click();
						jQuery(".new-address-form .close-form-container").hide();
						jQuery(window).scrollTop(0);
					}
				} else {
					console.error('error (checkEmail)', response.message);
				}
			});
		},

		submitForm: function submitForm(e) {
			e.preventDefault();

			var self = this,
			$target = this.$(e.target),	
			options = $target.serializeObject();

			var isDisabled = jQuery("#confirmation-form-submit").attr("disabled");
			if(isDisabled) {
				// console.error('ERROR: submit button disabled');
				return;
			} else {
				// console.log('Note: submit button disabled');
				jQuery("#confirmation-form-submit").attr("disabled", true);
			}

			var data = {
				orderSource: "Publication Subscription Order (Webstore)",
                isPublicationSubscriptionOrder: true,
                customerInformation: {
                    isExisting: this.isLoggedIn,
                    isPerson: true,
					hasContact: false,
					customerId: this.isLoggedIn?this.customerInfo.id:null,
					firstName: this.customerInfo.firstName,
					lastName: this.customerInfo.lastName,
					emailId: this.customerInfo.emailId,
					password: this.isLoggedIn?null:jQuery('#subscription-form-password').val(),
					editAddress: this.editAddressMode,
					addAddress: this.addAddressMode,
					sameAsShippingAddress: this.sameAsShippingAddress,
					shippingAddress: this.customerInfo.shippingAddress,
					billingAddress: this.customerInfo.billingAddress,
					defaultSubsidiary: this.defaultSubsidiary
                },
                orderInformation: {
                    currencyId: this.activePricing.pricing.currency.id,
                    currencyCode: this.activePricing.pricing.currency.code,
					payableAmount: this.activePricing.effectivePrice,
                    lines: [{
						itemId: this.activePricing.item,
						amount: this.activePricing.effectivePrice,
						transaction_type: "Publication Subscription",
						additionalData: {
							isPublicationSubscriptionOrder: true,
							isM360Line: true,
							scOptions: {
								lineId: 1,
								publicationId: this.publicationDetails.id,
								subscriptionPricingId: this.activePricing.id,
								applicableCurrency: this.activePricing.pricing.currency,
								applicablePrice: this.activePricing.effectivePrice,
								subStartDate: this.subStartDate
							}
						}
					}]
                },
                paymentInformation: {
                    getAuthorization: true,
                    getCapture: false,
                    acceptDeposit: false,
                    authSalesOrder: true,
					paymentMethod: jQuery('#subscription-form-payment-method:checked').val(),
					cardName: jQuery('#subscription-form-card-holders-name').val(),
					cardNumber: jQuery('#subscription-form-card-number').val(),
					cardExp: jQuery('#subscription-form-card-exp').val(),
					cardSecCode: jQuery('#subscription-form-card-code').val()
                }
            };

			this.orderModel.set(data);
			this.orderModel.save().done(function(orderResponse) {
				console.log('res1', orderResponse);
				if(!orderResponse.hasError) {
					jQuery("#publications-checkout-form-section").hide();
					jQuery("#publications-checkout-confirmed-section").show();
				} else {
					jQuery("#confirmation-form-submit").removeAttr("disabled");
					console.error('Registration failed ', orderResponse.message);
					jQuery('.confirmation-info #submit-error #submit-error-message').text(" "+orderResponse.message);
					jQuery('.confirmation-info #submit-error').show();
				}
			});
		},

		showDetails: function (e) {
			this.parent.showDetails();
		},

		getContext: function getContext() {
			return {
				isLoggedIn: this.isLoggedIn,
				loginURL: this.loginURL,

				activePricing: this.activePricing,
				selectedMediaStr: this.selectedMediaStr,
				publicationDetails: this.publicationDetails,

				customerInfo: this.customerInfo,

				paymentMethods: this.paymentMethods,
				countries: this.countries,
				states: this.states,

				icons: {
					edit: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-edit.png")),
					cardSelectedImage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-select-card.png'))
				}
			};
		}
	});
});

define('Saralux.Core.PublicationSubscription.Details.View',	[
	'saralux_core_publicationsubscription_details.tpl',
	
	'Saralux.Core.PublicationSubscription.Checkout.View',
	
	'Saralux.Core.ExternalLibraries.MomentJS',
	
	'Saralux.Core.PublicationSubscription.SS2Model',

	'Saralux.Core.CommonLibraries.CAPI.Model',
	'Saralux.Core.CommonLibraries.General',
	
	'Utils',
	'Backbone'
], function (
	saralux_core_publicationsubscription_details_tpl,

	PublicationSubscriptionCheckout,

	MomentJS,
	
	PSModel,
	
	CAPIModel,
	CoreCLGeneral,
	
	Utils,
	Backbone
) {
	'use strict';
	
	return Backbone.View.extend({

		template: saralux_core_publicationsubscription_details_tpl,

		getBreadcrumbPages: function() {
			return this.breadcrumbs;
		},

		events: {
			"click [data-action='m360-slxc-ps-select-media-type']": "selectMediaType",
			"change [data-action='m360-slxc-ps-change-start-date']": "changeStartDate",
			"change [data-action='m360-slxc-ps-change-duration']": "changeDuration",
			"click [data-action='m360-slxc-ps-checkout']": "showCheckout",
			"click [data-action='m360-slxc-ps-add-to-cart']": "addToCart",
			"click [data-action='expand-click']": "expandClick",
			"click [data-action='select-box-click']": "selectBoxClick",
			"click [data-action='date-trigger-click']": "dateTriggerClick",
			// "click [data-action='to-publication-details']": "showDetails"
			// "click [data-action='m360-slxc-ps-open-sub-modal']": "openSubModal"
		},

		childViews: {
			'PublicationSubscription.Checkout': function() {
				return new PublicationSubscriptionCheckout({
					environment_component: this.environment_component,
					publicationDetails: this.publicationDetails,
					userDetails: this.userDetails,
					selectedMediaStr: this.selectedMediaStr,
					activePricing: this.activePricing,
					subStartDate: this.subStartDate,
					breadcrumbs: this.breadcrumbs,
					defaultPublicationImage: this.defaultPublicationImage,
					countries: this.countries,
					states: this.states,
					parent: this
				});
			}
		},

		initialize: function (options) {
			var self = this;

			this.countries = [];
			this.states = [];

			this.environment_component = options.container.getComponent('Environment');
			this.cart_component = options.container.getComponent('Cart');
			this.defaultPublicationImage = this.environment_component.getConfig('defaultPublicationImage');

			var isSCCartCheckout = CoreCLGeneral.isSCCartCheckout(this.environment_component);
			var isM360CartCheckout = CoreCLGeneral.isM360CartCheckout(this.environment_component);
			this.addToCartEnabled = (isSCCartCheckout || isM360CartCheckout);

			this.publicationId = options.routerArguments[0];

			this.breadcrumbs = [
				{ text: Utils.translate('Publications'), href: "/publications" }
			];

			this.publicationDetails = null;
			this.relatedPublications = [];
			this.userDetails = null;

			this.activePricingGroup = [];
			this.activePricing = null;
			this.selectedMediaStr = "";

			this.isLoading = false;
			this.showError = false;
			this.isCheckoutView = false;

			this.subStartDate = MomentJS().format('MM/DD/YYYY');

			this.isLoggedIn = false;
			this.customerId = null;

			this.model = new PSModel();
			this.CAPIModel = new CAPIModel();
		},

		beforeShowContent: function beforeShowContent() {
			var self = this;

			return this.model.save({
				action: "get_details",
				publicationId: this.publicationId
			}).then(function(res) {
				// console.log('res', res);
				if(!res.hasError && res.data) {
					self.publicationDetails = res.data;
					self.userDetails = res.data.userDetails;

					if(self.userDetails.id) {
						self.isLoggedIn = true;
						self.customerId = self.userDetails.id;
					}
					
					if(!self.publicationDetails.image) {
						self.publicationDetails.image = self.defaultPublicationImage;
					}

					self.relatedPublications = self.publicationDetails.relatedPublications.slice(0, 4);

					self.breadcrumbs.push({
						text: self.publicationDetails.name
					});
					
					/* self.isLoading = false;
					self.render(); */

					// jQuery('#main-data-box #subscription-date').datepicker('setDate', new Date(self.subStartDate));
				} else {
					self.showError = true;
				}
			});
		},

		dateTriggerClick: function (e) {
			this.$(e.currentTarget).siblings(".jQDatePicker").focus();
		},

		selectBoxClick: function (e) {
			if (!this.$(e.currentTarget).hasClass("active")) {
				this.$(e.currentTarget).addClass("active");
				this.$(e.currentTarget).find("i").removeClass("fa-angle-down");
				this.$(e.currentTarget).find("i").addClass("fa-angle-up");
				this.$(e.currentTarget).siblings(".checkboxes").css("display","block");
			} else {
				this.$(e.currentTarget).removeClass("active");
				this.$(e.currentTarget).find("i").removeClass("fa-angle-up");
				this.$(e.currentTarget).find("i").addClass("fa-angle-down");
				this.$(e.currentTarget).siblings(".checkboxes").css("display","none");
			}
		},

		expandClick: function (e) {
			var h = this.$(e.currentTarget).siblings(".publication-info")[0].scrollHeight;

			if (!this.$(e.currentTarget).hasClass("more")) {
				this.$(e.currentTarget).siblings(".publication-info").animate({
					'height': '50px'
				});
				this.$(e.currentTarget).hide();
				this.$(e.currentTarget).siblings(".more").show();
			} else {
				this.$(e.currentTarget).siblings(".publication-info").animate({
					'height': h
				});
				this.$(e.currentTarget).siblings(".less").show();
				this.$(e.currentTarget).hide();
			}
		},

		changeStartDate: function(e) {
			var startDate = jQuery("#"+e.currentTarget.id).val();
			startDate = MomentJS(startDate, "MM/DD/YYYY");
			var yesterday = MomentJS(new Date(), "MM/DD/YYYY").subtract(1, 'days');

			console.log('startDate', startDate);
			console.log('yesterday', yesterday);

			if(startDate.isAfter(yesterday)) {
				this.subStartDate = MomentJS(startDate).format('MM/DD/YYYY');
				jQuery("#main-data-box #subscription-date-standard-error").removeClass("err");
			} else {
				jQuery("#main-data-box #subscription-date-standard-error").addClass("err");
			}
		},

		selectMediaType: function (e) {
			/* var dataId = jQuery("#"+e.currentTarget.id).attr('data-id');
			console.log('dataId', dataId); */

			if(jQuery("#"+e.currentTarget.id).find("input[type='checkbox']").prop("checked") == true) {
				jQuery("#"+e.currentTarget.id).find("input[type='checkbox']").prop("checked", false);
			} else if (jQuery("#"+e.currentTarget.id).find("input[type='checkbox']").prop("checked") == false) {
				jQuery("#"+e.currentTarget.id).find("input[type='checkbox']").prop("checked", true);
			}

			var count = 0;
			jQuery("[name='main-label-mediaType']:checked").each(function() {
				count++;
			});

			var checkedArr = [], checkedStrArr = [];
			if(count > 1) {
				jQuery("[name='main-label-mediaType']:checked").each(function() {
					checkedArr.push(jQuery(this).val());
					checkedStrArr.push(jQuery(this).attr("data-str"));
				});
				
				var activePricing = this.publicationDetails.subscriptionPricing[checkedArr.join()];
				if(!activePricing) {
					var siblingId = jQuery("#"+e.currentTarget.id).siblings("label")[0].id;
					jQuery("#"+siblingId).find("input[type='checkbox']").prop("checked", false);

					checkedArr = [];
					checkedStrArr = [];
				}
			}

			if(checkedArr.length == 0) {
				jQuery("[name='main-label-mediaType']:checked").each(function() {
					checkedArr.push(jQuery(this).val());
					checkedStrArr.push(jQuery(this).attr("data-str"));
				});
			}
			
			console.log('checkedArr', checkedArr);
			console.log('checkedStrArr', checkedStrArr);

			if(checkedArr && (checkedArr.length > 0)) {
				var checkedStr = checkedArr.join();
				console.log('checkedStr', checkedStr);

				this.activePricingGroup = this.publicationDetails.subscriptionPricing[checkedStr];

				if(this.activePricingGroup && (this.activePricingGroup.length > 0)) {
					this.activePricing = this.activePricingGroup[0];
				} else {
					this.activePricingGroup = [];
					this.activePricing = null;
				}
				console.log('activePricingGroup', this.activePricingGroup);
				console.log('activePricing', this.activePricing);

				if(this.activePricing) {
					this.setActivePricing(checkedStrArr);

					var durationHTML = "";
					for(var i in this.activePricingGroup) {
						if(i == 0) {
							durationHTML += "<option value='"+i+"'>"+this.activePricingGroup[i].duration+"</option>";
						} else {
							durationHTML += "<option value='"+i+"'>"+this.activePricingGroup[i].duration+"</option>";
						}
					}
					jQuery("#main-data-box #publication-duration").html(durationHTML);

					if(this.addToCartEnabled) {
						jQuery("#main-data-box #add-to-cart-action-button").prop("disabled", false);
					} else {
						jQuery("#main-data-box #subscribe-action-button").prop("disabled", false);
					}
				} else {
					jQuery("#pricing-not-available").show();
					jQuery("#pricing-not-available #pricing-not-available-text").text(
						Utils.translate('Pricing not available. Please select a different media type.')
					);

					jQuery("#pricing-not-available").siblings(".sub-data-box").each(function() {
						jQuery(this).hide();
					});

					if(this.addToCartEnabled) {
						jQuery("#main-data-box #add-to-cart-action-button").prop("disabled", true);
					} else {
						jQuery("#main-data-box #subscribe-action-button").prop("disabled", true);
					}
				}
			} else {
				this.activePricing = null;
				console.log('activePricing', this.activePricing);

				jQuery("#main-pricing-box #number-of-issues").text("-");
				jQuery("#main-pricing-box #non-member-price").text("-");
				jQuery("#main-pricing-box #member-price").text("-");

				jQuery("#main-label-parent .selected-text").text("");
				jQuery("#main-label-parent .default-text").show();
				jQuery("#main-label-parent .selected-text").hide();
				
				jQuery("#pricing-not-available").show();
				jQuery("#pricing-not-available #pricing-not-available-text").text(
					Utils.translate('Please select your subscription preferences.')
				);
				jQuery("#pricing-not-available").siblings(".sub-data-box").each(function() {
					jQuery(this).hide();
				});

				jQuery("#main-data-box #publication-duration").html(
					"<option value='-1'>"+Utils.translate('Select Duration')+"</option>"
				);

				if(this.addToCartEnabled) {
					jQuery("#main-data-box #add-to-cart-action-button").prop("disabled", true);
				} else {
					jQuery("#main-data-box #subscribe-action-button").prop("disabled", true);
				}
			}
		},

		changeDuration: function (e) {
			var index = jQuery("#"+e.currentTarget.id).val();
			this.activePricing = this.activePricingGroup[index];

			console.log('index', index);
			console.log('this.activePricing', this.activePricing);
			this.setActivePricing(null);
		},

		setActivePricing: function(mediaStrArr) {
			jQuery("#pricing-not-available").hide();
			jQuery("#pricing-not-available").siblings(".sub-data-box").each(function() {
				jQuery(this).show();
			});

			jQuery("#main-pricing-box #number-of-issues").text(this.activePricing.numberOfIssues + " " + Utils.translate('issues'));
			jQuery("#main-pricing-box #non-member-price").text(this.activePricing.pricing.nonMemberStr);
			jQuery("#main-pricing-box #member-price").text(this.activePricing.pricing.memberStr);

			if(mediaStrArr) {
				this.selectedMediaStr = mediaStrArr.join(" + ");
				jQuery("#main-label-parent .selected-text").text(this.selectedMediaStr);
				jQuery("#main-label-parent .selected-text").show();
				jQuery("#main-label-parent .default-text").hide();
			}
		},
		
		showDetails: function () {
			// this.template = saralux_core_publicationsubscription_details_tpl;
			this.isCheckoutView = false;
			this.render();

			this.subStartDate = MomentJS().format('MM/DD/YYYY');
			jQuery('#main-data-box #subscription-date').datepicker('setDate', new Date(this.subStartDate));

			jQuery(window).scrollTop(0);
		},
		
		showCheckout: function (e) {
			var self = this;
			/* jQuery('#subscription-modal').modal('hide');
			jQuery('.modal-backdrop').remove();
			jQuery(document.body).removeClass("modal-open"); */

			if(!this.activePricing) {
				jQuery("#media-type-standard-error").addClass("err");
				jQuery("#media-type-standard-error").addClass("err");
			}

			if(jQuery("#main-data-box").find('.err').length == 0) {
				// this.template = saralux_core_publicationsubscription_checkout_tpl;
				this.isCheckoutView = true;

				if(this.countries.length == 0) {
					this.CAPIModel.fetch().done(function(response) {
						self.countries = response.countries;
						self.states = response.states;
						self.render();
						jQuery(window).scrollTop(0);
					});
				} else {
					this.render();
					jQuery(window).scrollTop(0);
				}
			}
		},

		addToCart: function(e) {
			var self = this;

			if(this.addToCartEnabled) {
				if(this.isLoggedIn) {
					var data = {
						action: "ADD_TO_CART",
						itemId: this.activePricing.item,
						additionalData: {
							isPublicationSubscriptionOrder: true,
							applyScriptableCart: true,
							transaction_type: "Publication Subscription",
							isM360Line: true,
							scOptions: {
								publicationId: this.publicationDetails.id,
								subscriptionPricingId: this.activePricing.id,
								applicableCurrency: this.activePricing.pricing.currency,
								applicablePrice: this.activePricing.effectivePrice,
								subStartDate: this.subStartDate
							}
						}
					};

					console.log('data', data);

					this.cartLines = [
						{
							quantity: 1,
							item: {
								internalid: this.activePricing.item,
							},
							options: [{
								cartOptionId: 'custcol_slxc_additional_data',
								value: {
									internalid: JSON.stringify(data.additionalData)
								}
							}]
						}
					];

					var addShippingItem = true;

					// FRONTEND EXTENSIBILITY API:
					this.cart_component.getLines().then(function(lines) {
						for(var i = 0; i < lines.length; i++) {
							if((lines[i].item.itemtype == "InvtPart") || (lines[i].item.extras.isfulfillable)) {
								addShippingItem = false;
								break;
							}
						}

						// "Shipping info required" scenario temp solution:
						if(addShippingItem) {
							self.cartLines.push({
								quantity: 1,
								item: {
									internalid: '2015'
								}
							})
						}

						self.cart_component.addLines({
							lines: self.cartLines
						}).then(function() {
							alert(Utils.translate('Publication Subscription was added to cart.'));
						});
					});
				} else {
					alert(Utils.translate("You need to be logged in to perform this action."));
					window.location.href = CoreCLGeneral.getLoginURL(self.environment_component);
				}
			} else {
				return;
			}
		},

		getContext: function getContext() {
			return {
				isLoading: this.isLoading,
				isCheckoutView: this.isCheckoutView,
				showError: this.showError,

				addToCartEnabled: this.addToCartEnabled,

				publicationDetails: this.publicationDetails,
				relatedPublications: this.relatedPublications,

				defaultPublicationImage: this.defaultPublicationImage,

				isPhoneDevice: Utils.isPhoneDevice(),
				imgCoverPotrait: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/img-cover-portrait.png")),
				imgCoverLandscape: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/img-cover-landscape.png")),
				icons: {
					icnType: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-type.png")),
					icnCategory: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-category.png")),
					icnFormat: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-format.png")),
					
					icnDate: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-date.png")),
				}
			};
		}
	});
});

define('Saralux.Core.PublicationSubscription.List.View',	[
	'saralux_core_publicationsubscription_list.tpl',

	'Saralux.Core.PublicationSubscription.SS2Model',
	
	'Utils',
	'Backbone'
], function (
	saralux_core_publicationsubscription_list_tpl,
	
	PSModel,
	
	Utils,
	Backbone
) {
	'use strict';
	
	return Backbone.View.extend({

		template: saralux_core_publicationsubscription_list_tpl,

		getBreadcrumbPages: function() {
			return [
				{ text: Utils.translate('Publications') }
			];
		},

		events: {
			'change [data-change="m360-slxc-ps-trigger-query"]': "triggerQuery",
			'click [data-action="m360-slxc-ps-trigger-query"]': "triggerQuery",
			'click [data-action="m360-slxc-ps-clear-filters"]': "clearAllFilters",
			'click [data-action="m360-slxc-ps-clear-search-text"]': "clearSearchText",
			'click [data-action="m360-slxc-ps-show-filter-items"]': "showFilterItems",
			'click [data-action="m360-slxc-ps-hide-filter-items"]': "hideFilterItems",
			'click [data-action="m360-slxc-ps-goto-prev"]': "gotoPrev",
			'click [data-action="m360-slxc-ps-goto-page"]': "gotoPage",
			'click [data-action="m360-slxc-ps-goto-next"]': "gotoNext"
		},

		initialize: function (options) {
			var self = this;

			this.environment_component = options.container.getComponent('Environment');
			this.defaultPublicationImage = this.environment_component.getConfig('defaultPublicationImage');

			this.publications = [];
			this.filters = {
				categories: [],
				media: [],
				types: []
			};
			this.isLoading = true;

			this.clearFilters = false;

			this.activeFilters = {
				showAll: true,
				searchText: "",
				categories: [],
				media: [],
				types: []
			};

			this.showViewMore = {
				categories: false,
				media: false,
				types: false
			};
			this.showViewLess = {
				categories: false,
				media: false,
				types: false
			};
			this.filterItemsLimit = 3;

			this.defaultPagination = {
				index: 0,
				pageSize: 10,
				count: 0,
				from: 0,
				to: 0,
				totalPages: 0,
				displayWindow: 1,
				pages: []
			};
			this.pagination = JSON.parse(JSON.stringify(this.defaultPagination));

			this.model = new PSModel();
		},

		beforeShowContent: function beforeShowContent() {
			var self = this;

			return this.model.save({
				action: "get_list",
				getFilters: true,
				activeFilters: this.activeFilters,
				pagination: this.pagination
			}).then(function(res) {
				console.log('res', res);
				if(!res.hasError) {
					self.publications = res.data.publications;
					self.filters = res.data.filters;
					self.pagination.count = res.data.count;
					self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.publications.length) - 1;

					self.showViewMore = {
						categories: (self.filters.categories.length > self.filterItemsLimit)?true:false,
						media: (self.filters.media.length > self.filterItemsLimit)?true:false,
						types: (self.filters.types.length > self.filterItemsLimit)?true:false
					};

					self.generatePages();
					self.hideAllFilterItems();
					
					self.isLoading = false;
					self.render();
				}
			});
		},

		generatePages: function generatePages() {
			this.pagination.pages = [];

			var index = this.pagination.index;
			var totalPages = this.pagination.totalPages;

			for(var i = 0; i < totalPages; i++) {
				this.pagination.pages.push({
					index: i,
					number: (i+1),
					isActive: (index == i)?true:false
				});
			}

			console.log('pages', this.pagination.pages);
		},

		clearAllFilters: function clearAllFilters(e) {
			this.clearFilters = true;
			this.triggerQuery(e);
		},

		clearSearchText: function clearSearchText(e) {
			jQuery("#publications-search-text").val('');
			this.triggerQuery(e);
		},

		triggerQuery: function triggerQuery(e) {
			var self = this;

			console.log('activeFilters', this.activeFilters);
			console.log('filters', this.filters);

			this.generateFilters();

			console.log('pagination', this.pagination);

			return this.model.save({
				action: "get_list",
				getFilters: false,
				activeFilters: this.activeFilters,
				pagination: this.pagination
			}).done(function(res) {
				console.log('res', res);

				if(res.hasError) {
					console.error('error', res.errorMessage);
				} else {
					self.publications = res.data.publications;
					self.pagination.count = res.data.count;
					self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.publications.length) - 1;

					self.generatePages();
				}

				self.render();
				jQuery(window).scrollTop(0);
			});
		},

		generateFilters: function generateFilters() {
			var self = this;
			
			if(this.clearFilters) {
				this.activeFilters.showAll = true;
				
				this.pagination = JSON.parse(JSON.stringify(this.defaultPagination));

				this.clearFilters = false;

				this.activeFilters.searchText = "";
				this.activeFilters.categories = [];
				this.activeFilters.media = [];
				this.activeFilters.types = [];
				this.activeFilters.levels = [];

				_.each(this.filters.categories, function (filter) {
					filter.checked = false;
				});
				
				_.each(this.filters.media, function (filter) {
					filter.checked = false;
				});
				
				_.each(this.filters.types, function (filter) {
					filter.checked = false;
				});
			} else {
				// this.getFilters = false;
				this.activeFilters.showAll = false;

				var searchText = jQuery("#publications-search-text").val();
				this.activeFilters.searchText = searchText;

				this.activeFilters.categories = [];
				jQuery('input[name="publications-categories"]:checked').each(function () {
					self.activeFilters.categories.push(parseInt(jQuery(this).val()));
				});
				for(var i in this.filters.categories) {
					if(this.activeFilters.categories.indexOf(this.filters.categories[i].id) != -1) {
						this.filters.categories[i].checked = true;
					} else {
						this.filters.categories[i].checked = false;
					}
				}
				
				this.activeFilters.media = [];
				jQuery('input[name="publications-media"]:checked').each(function () {
					self.activeFilters.media.push(parseInt(jQuery(this).val()));
				});
				for(var i in this.filters.media) {
					if(this.activeFilters.media.indexOf(this.filters.media[i].id) != -1) {
						this.filters.media[i].checked = true;
					} else {
						this.filters.media[i].checked = false;
					}
				}

				this.activeFilters.types = [];
				jQuery('input[name="publications-types"]:checked').each(function () {
					self.activeFilters.types.push(parseInt(jQuery(this).val()));
				});
				for(var i in this.filters.types) {
					if(this.activeFilters.types.indexOf(this.filters.types[i].id) != -1) {
						this.filters.types[i].checked = true;
					} else {
						this.filters.types[i].checked = false;
					}
				}
			}
		},

		hideAllFilterItems: function hideAllFilterItems() {
			for(var i in this.filters.categories) {
				if(i >= this.filterItemsLimit) {
					this.filters.categories[i].hide = true;
				} else {
					this.filters.categories[i].hide = false;
				}
			}
			
			for(var i in this.filters.media) {
				if(i >= this.filterItemsLimit) {
					this.filters.media[i].hide = true;
				} else {
					this.filters.media[i].hide = false;
				}
			}
			
			for(var i in this.filters.types) {
				if(i >= this.filterItemsLimit) {
					this.filters.types[i].hide = true;
				} else {
					this.filters.types[i].hide = false;
				}
			}
		},

		showFilterItems: function showFilterItems(e) {
			var filterId = jQuery("#"+e.currentTarget.id).attr('data-filter');

			if(filterId == "categories") {
				for(var i in this.filters.categories) {
					this.filters.categories[i].hide = false;
				}
				this.showViewLess.categories = true;
				this.showViewMore.categories = false;
			} else if(filterId == "media") {
				for(var i in this.filters.media) {
					this.filters.media[i].hide = false;
				}
				this.showViewLess.media = true;
				this.showViewMore.media = false;
			} else if(filterId == "types") {
				for(var i in this.filters.types) {
					this.filters.types[i].hide = false;
				}
				this.showViewLess.types = true;
				this.showViewMore.types = false;
			}

			this.render();
		},

		hideFilterItems: function hideFilterItems(e) {
			var filterId = jQuery("#"+e.currentTarget.id).attr('data-filter');

			if(filterId == "categories") {
				for(var i in this.filters.categories) {
					if(i >= this.filterItemsLimit) {
						this.filters.categories[i].hide = true;
					} else {
						this.filters.categories[i].hide = false;
					}
				}
				this.showViewLess.categories = false;
				this.showViewMore.categories = true;
			} else if(filterId == "media") {
				for(var i in this.filters.media) {
					if(i >= this.filterItemsLimit) {
						this.filters.media[i].hide = true;
					} else {
						this.filters.media[i].hide = false;
					}
				}
				this.showViewLess.media = false;
				this.showViewMore.media = true;
			} else if(filterId == "types") {
				for(var i in this.filters.types) {
					if(i >= this.filterItemsLimit) {
						this.filters.types[i].hide = true;
					} else {
						this.filters.types[i].hide = false;
					}
				}
				this.showViewLess.types = false;
				this.showViewMore.types = true;
			}

			this.render();
		},

		gotoPrev: function gotoPrev(e) {
			var self = this;

			if((this.pagination.index - 1) >= 0) {
				this.pagination.index--;

				return this.model.save({
					action: "get_list",
					getFilters: false,
					activeFilters: this.activeFilters,
					pagination: this.pagination
				}).done(function(res) {
					console.log('res', res);
	
					if(res.hasError) {
						console.error('error', res.errorMessage);
					} else {
						self.publications = res.data.publications;
						self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
						self.pagination.to = (self.pagination.from + self.publications.length) - 1;
						self.generatePages();
					}
	
					self.render();
					jQuery(window).scrollTop(0);
				});
			}
		},

		gotoPage: function gotoPage(e) {
			var self = this;

			var index = jQuery("#"+e.currentTarget.id).attr('data-index');
			this.pagination.index = parseInt(index);

			return this.model.save({
				action: "get_list",
				getFilters: false,
				activeFilters: this.activeFilters,
				pagination: this.pagination
			}).done(function(res) {
				console.log('res', res);

				if(res.hasError) {
					console.error('error', res.errorMessage);
				} else {
					self.publications = res.data.publications;
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.publications.length) - 1;
					self.generatePages();
				}

				self.render();
				jQuery(window).scrollTop(0);
			});
		},

		gotoNext: function gotoNext(e) {
			var self = this;

			if((this.pagination.index + 1) < this.pagination.totalPages) {
				this.pagination.index++;

				return this.model.save({
					action: "get_list",
					getFilters: false,
					activeFilters: this.activeFilters,
					pagination: this.pagination
				}).done(function(res) {
					console.log('res', res);
	
					if(res.hasError) {
						console.error('error', res.errorMessage);
					} else {
						self.publications = res.data.publications;
						self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
						self.pagination.to = (self.pagination.from + self.publications.length) - 1;
						self.generatePages();
					}
	
					self.render();
					jQuery(window).scrollTop(0);
				});
			}
		},
		
		getContext: function getContext() {
			return {
				isLoading: this.isLoading,
				isPhoneDevice: Utils.isPhoneDevice(),
				
				publications: this.publications,

				filters: this.filters,
				activeFilters: this.activeFilters,
				pagination: this.pagination,
				showViewMore: this.showViewMore,
				showViewLess: this.showViewLess,
				
				defaultPublicationImage: this.defaultPublicationImage,

				icons: {
					eBook: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-e-book.png")),
					print: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-print.png")),
					icnType: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-type.png")),
					icnCategory: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-category.png")),
					icnFormat: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-format.png"))
				}
			};
		}
	});
});


define("Saralux.Core.PublicationSubscription.SS2Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelModule,
    Utils
) {
    "use strict";

    // return SCModelModule.SCModel.extend({
    return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/PublicationSubscription/SuiteScript2/PublicationSubscription.Service.ss"
            ),
            true
        )
	});
});

define('Saralux.Core.PublicationSubscription',   [
	'Saralux.Core.PublicationSubscription.List.View',
	'Saralux.Core.PublicationSubscription.Details.View'
],   function (
	PublicationSubscriptionListView,
	PublicationSubscriptionDetailsView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var pageType = container.getComponent('PageType');
				this.registerPublicPages(pageType);
			} catch (e) {
				console.error('ERROR: Saralux.Core.PublicationSubscription', e.toString());
			}
		},

		registerPublicPages: function registerPublicPages(pageType) {
			pageType.registerPageType({
				name: 'PublicationSubscriptionList',
				view: PublicationSubscriptionListView,
				routes: ['publications']
			});

			pageType.registerPageType({
				name: 'PublicationSubscriptionDetails',
				view: PublicationSubscriptionDetailsView,
				routes: ['publications/:id']
			});
		}
	};
});


define('Saralux.Core.ReportsSV.Details.View',	[
	'saralux_core_reportssv_details.tpl',

	'Saralux.Core.ReportsSV.SS2Model',
	
	'Saralux.Core.ExternalLibraries.CryptoJS',

	'Utils',
	'Backbone'
], function (
	saralux_core_reportssv_details_tpl,

	RSVSS2Model,

	CryptoJS,
	
	Utils,
	Backbone
) {
	'use strict';
	
	return Backbone.View.extend({

		template: saralux_core_reportssv_details_tpl,

		events: {
			"click [data-action='m360-slxc-mp-rsv-apply-filters']": "applyFilters",
			"click [data-action='m360-slxc-mp-rsv-clear-filters']": "clearFilters",
			"click [data-action='m360-slxc-mp-rsv-next-page']": "gotoNext",
			"click [data-action='m360-slxc-mp-rsv-previous-page']": "gotoPrev",
			"click [data-action='m360-slxc-mp-rsv-to-page']": "gotoPage",
			"click [data-action='m360-slxc-mp-rsv-download-csv']": "downloadCSV"
		},
		
		initialize: function (options) {
			var self = this;
			jQuery(window).scrollTop(0);

			this.m360Context = options.m360Context;
			this.parent = options.parent;
			this.activeReportId = options.activeReportId;
			// console.log('activeReportId', this.activeReportId);

			var IhIByvhasYD = 'kin5wtp20a';

			var currentPermissions = this.m360Context.currentPermissions;
			currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissions, IhIByvhasYD));

			// console.log('currentPermissions', currentPermissions);
			
			this.servicePositionInternalId = currentPermissions.servicePositionInternalId;
			this.parentRecordId = currentPermissions.servicePositionForId;

			this.reportData = null;
			this.headerData = [];
			this.rowsData = [];
			this.filtersData = [];
			this.rowCount = 0;

			this.activeFilters = [];
			this.defaultPagination = {
				index: 0,
				pageSize: 10,
				count: 0,
				from: 0,
				to: 0,
				totalPages: 0,
				displayWindow: 1,
				pages: []
			};
			this.pagination = Utils.deepCopy(this.defaultPagination);

			this.model = new RSVSS2Model();
			
			this.isLoading = true;

			this.model.clear({ silent: true });
			this.model.save({
				action: "GET_DETAILS",
				reportId: this.activeReportId,
				servicePositionId: this.servicePositionInternalId,
				parentRecordId: this.parentRecordId,
				getFilters: true,
				activeFilters: [],
				pagination: this.pagination
			}).then(function(res) {
				// console.log('res', res);
				if(!res.hasError) {
					self.reportData = res.data.reportData;
					self.headerData = res.data.headerData;
					self.rowsData = res.data.rowsData;
					self.filtersData = res.data.filtersData;

					self.pagination.count = res.data.rowCount;
					self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.rowsData.length) - 1;

					self.generatePages();

					self.resetActiveFilters();
				}

				self.isLoading = false;
				self.render();
			});
		},

		generatePages: function generatePages() {
			this.pagination.pages = [];

			var index = this.pagination.index;
			var totalPages = this.pagination.totalPages;

			var windowSize = 2, windowSet = false;

			for(var i = 0; i < totalPages; i++) {
				if(((i >= (index - windowSize)) && (i <= index)) ||
				((i <= (index + windowSize)) && (i >= index))) {
					this.pagination.pages.push({
						index: i,
						number: (i+1),
						isActive: (index == i)?true:false,
						isWindow: false
					});
					windowSet = false;
				} else {
					if((i < windowSize) || (i >= (totalPages - windowSize))) {
						this.pagination.pages.push({
							index: i,
							number: (i+1),
							isActive: (index == i)?true:false,
							isWindow: false
						});
					} else {
						if(!windowSet) {
							this.pagination.pages.push({
								index: i,
								number: (i+1),
								isActive: (index == i)?true:false,
								isWindow: true
							});
							windowSet = true;
						}
					}
				}

			}
		},

		resetActiveFilters: function resetActiveFilters() {
			this.activeFilters = [];

			for(var i = 0; this.filtersData && (i < this.filtersData.length); i++) {
				var defaultVal = "";
				if((this.filtersData[i].type.isSelect) || this.filtersData[i].type.isCheckbox) {
					defaultVal = "-1";
				}
				this.activeFilters.push({
					id: this.filtersData[i].id,
					joinFieldId: this.filtersData[i].joinFieldId,
					value: defaultVal,
					values: null,
					isBoolean: this.filtersData[i].type.isCheckbox,
					isText: this.filtersData[i].type.isText,
					isSelect: this.filtersData[i].type.isSelect,
					isMultiselect: this.filtersData[i].type.isMultiselect
				});
			}
		},

		applyFilters: function applyFilters(e) {
			var self = this;

			for(var i = 0; self.activeFilters && (i < self.activeFilters.length); i++) {
				var thisActiveFilter = self.activeFilters[i];
				if((thisActiveFilter.isSelect) || (thisActiveFilter.isBoolean)) {
					var value = this.$("#report-filter-"+thisActiveFilter.id+" option:selected").val();
					if(parseInt(value) != -1) {
						thisActiveFilter.value = value;
					} else {
						thisActiveFilter.value = null;
					}
				} else if(thisActiveFilter.isMultiselect) {
					var values = [];
					this.$("#report-filter-"+thisActiveFilter.id).find("option:selected").each(function() {
						if(parseInt(this.value) != -1) {
							values.push(this.value);
						}
					});
					thisActiveFilter.values = values;
				} else {
					thisActiveFilter.value = this.$("#report-filter-"+thisActiveFilter.id).val();
				}
			}

			this.pagination = Utils.deepCopy(this.defaultPagination);

			this.model.clear({ silent: true });
			this.model.save({
				action: "GET_DETAILS",
				reportId: this.activeReportId,
				servicePositionId: this.servicePositionInternalId,
				parentRecordId: this.parentRecordId,
				getFilters: false,
				activeFilters: this.activeFilters,
				pagination: this.pagination
			}).then(function(res) {
				// console.log('res', res);
				if(!res.hasError) {
					self.reportData = res.data.reportData;
					self.headerData = res.data.headerData;
					self.rowsData = res.data.rowsData;
					// self.filtersData = res.data.filtersData;

					self.pagination.count = res.data.rowCount;
					self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.rowsData.length) - 1;

					self.generatePages();
				}

				for(var i = 0; self.filtersData && (i < self.filtersData.length); i++) {
					var thisFilter = self.filtersData[i];
					var selectOptions = thisFilter.selectOptions;
					var thisActiveFilter = self.activeFilters[i];

					if((thisFilter.type.isSelect) || (thisFilter.type.isMultiselect) || (thisFilter.type.isCheckbox)) {
						for(var j = 0; selectOptions && (j < selectOptions.length); j++) {
							selectOptions[j].selected = false;
						}
						for(var j = 0; selectOptions && (j < selectOptions.length); j++) {
							if(thisFilter.type.isCheckbox) {
								if(selectOptions[j].id.indexOf(thisActiveFilter.value) != -1) {
									selectOptions[j].selected = true;
								}
							} else if(thisFilter.type.isMultiselect) {
								for(var k = 0; thisActiveFilter.values && k < thisActiveFilter.values.length; k++) {
									if(parseInt(selectOptions[j].id) == parseInt(thisActiveFilter.values[k])) {
										selectOptions[j].selected = true;
										break;
									}
								}
							} else if(thisFilter.type.isSelect) {
								if(parseInt(selectOptions[j].id) == parseInt(thisActiveFilter.value)) {
									selectOptions[j].selected = true;
								}
							}
						}
					} else {
						thisFilter.value = thisActiveFilter.value;
					}
				}
				
				self.render();
			});
		},

		clearFilters: function clearFilters(e) {
			var self = this;

			this.pagination = Utils.deepCopy(this.defaultPagination);

			this.model.clear({ silent: true });
			this.model.save({
				action: "GET_DETAILS",
				reportId: this.activeReportId,
				servicePositionId: this.servicePositionInternalId,
				parentRecordId: this.parentRecordId,
				getFilters: true,
				activeFilters: [],
				pagination: this.pagination
			}).then(function(res) {
				// console.log('res', res);
				if(!res.hasError) {
					self.reportData = res.data.reportData;
					self.headerData = res.data.headerData;
					self.rowsData = res.data.rowsData;
					self.filtersData = res.data.filtersData;
					
					self.pagination.count = res.data.rowCount;
					self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.rowsData.length) - 1;

					self.generatePages();

					self.resetActiveFilters();
				}
				
				self.render();
			});
		},

		gotoPrev: function gotoPrev(e) {
			var self = this;

			if((this.pagination.index - 1) >= 0) {
				this.pagination.index--;

				this.model.clear({ silent: true });
				return this.model.save({
					action: "GET_DETAILS",
					reportId: this.activeReportId,
					servicePositionId: this.servicePositionInternalId,
				parentRecordId: this.parentRecordId,
					getFilters: false,
					activeFilters: this.activeFilters,
					pagination: this.pagination
				}).done(function(res) {
					// console.log('res', res);
					if(!res.hasError) {
						self.reportData = res.data.reportData;
						self.headerData = res.data.headerData;
						self.rowsData = res.data.rowsData;
						// self.filtersData = res.data.filtersData;

						self.pagination.count = res.data.rowCount;
						self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
						self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
						self.pagination.to = (self.pagination.from + self.rowsData.length) - 1;

						self.generatePages();
					}
	
					self.render();
				});
			}
		},

		gotoPage: function gotoPage(e) {
			var self = this;

			var index = this.$(e.currentTarget).attr('data-index');
			this.pagination.index = parseInt(index);

			this.model.clear({ silent: true });
			return this.model.save({
				action: "GET_DETAILS",
				reportId: this.activeReportId,
				servicePositionId: this.servicePositionInternalId,
				parentRecordId: this.parentRecordId,
				getFilters: false,
				activeFilters: this.activeFilters,
				pagination: this.pagination
			}).done(function(res) {
				// console.log('res', res);
				if(!res.hasError) {
					self.reportData = res.data.reportData;
					self.headerData = res.data.headerData;
					self.rowsData = res.data.rowsData;
					// self.filtersData = res.data.filtersData;

					self.pagination.count = res.data.rowCount;
					self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.rowsData.length) - 1;

					self.generatePages();
				}

				self.render();
			});
		},

		gotoNext: function gotoNext(e) {
			var self = this;

			if((this.pagination.index + 1) < this.pagination.totalPages) {
				this.pagination.index++;

				this.model.clear({ silent: true });
				return this.model.save({
					action: "GET_DETAILS",
					reportId: this.activeReportId,
					servicePositionId: this.servicePositionInternalId,
				parentRecordId: this.parentRecordId,
					getFilters: false,
					activeFilters: this.activeFilters,
					pagination: this.pagination
				}).done(function(res) {
					// console.log('res', res);
					if(!res.hasError) {
						self.reportData = res.data.reportData;
						self.headerData = res.data.headerData;
						self.rowsData = res.data.rowsData;
						// self.filtersData = res.data.filtersData;

						self.pagination.count = res.data.rowCount;
						self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
						self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
						self.pagination.to = (self.pagination.from + self.rowsData.length) - 1;

						self.generatePages();
					}
	
					self.render();
				});
			}
		},

		downloadCSV: function downloadCSV(e) {
			var self = this;
			this.$('.download-report').prop('disabled', true)
			this.$('.m360-download-report-download-message').show();

			this.modifyDownloadReportButton('Downloading...')
			
			this.model.clear({ silent: true });
			return this.model.save({
				action: "DOWNLOAD_CSV",
				reportId: this.activeReportId,
				servicePositionId: this.servicePositionInternalId,
				parentRecordId: this.parentRecordId,
				getFilters: false,
				activeFilters: this.activeFilters,
				pagination: this.pagination
			}).done(function(res) {
				if(!res.hasError) {
					self.$('.download-report').prop('disabled', false)
					self.$('.m360-download-report-download-message').hide();

					self.modifyDownloadReportButton('Download Report');

					var blob = new Blob([res.csvString], { type: 'text/csv' });

					// URL for the Blob object
					var url = URL.createObjectURL(blob);

					// link element
					var link = document.createElement('a');

					// link's href attribute set to the URL of the Blob object
					link.href = url;

					link.download = 'mydata.csv';
					link.click();
					URL.revokeObjectURL(url);
				}
			});
		},

		modifyDownloadReportButton: function modifyDownloadReportButton(buttonText) {
			this.$('.download-report').text(buttonText)
			this.$('.download-report').prepend($('<img alt="" align="top" class="reportsv-detail-css5"></img>'));
			this.$('.download-report').children('img').attr('src', Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-cloud-download.png')))
		},

		getContext: function getContext() {
			return {
				isLoading: this.isLoading,

				reportData: this.reportData,
				headerData: this.headerData,
				rowsData: this.rowsData,

				filtersData: this.filtersData,
				pagination: this.pagination,
				colSpan: this.headerData.length,

				icons: {
					sortHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-hover.png')),
					sortAsc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-desc.png')),
					sortDesc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-asc.png')),
					date: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-date.png')),
					icnDownload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-cloud-download.png')),
				}
			};
		}
	});
});


define('Saralux.Core.ReportsSV.List.View',	[
	'saralux_core_reportssv_list.tpl',

	'Saralux.Core.ReportsSV.SS2Model',

	'Saralux.Core.ExternalLibraries.CryptoJS',
	
	'Utils',
	'Backbone'
], function (
	saralux_core_reportssv_list_tpl,

	RSVSS2Model,

	CryptoJS,
	
	Utils,
	Backbone
) {
	'use strict';
	
	return Backbone.View.extend({

		template: saralux_core_reportssv_list_tpl,

		events: {
			"click [data-action='m360-mp-rsv-show-details']": "showDetails",
			"click [data-action='m360-mp-rsv-search-reports']": "searchReports",
			"keyup [data-key='m360-mp-rsv-search-reports']": "searchReports"
		},
		
		initialize: function (options) {
			var self = this;
			jQuery(window).scrollTop(0);

			this.m360Context = options.m360Context;
			this.parent = options.parent;

			var IhIByvhasYD = 'kin5wtp20a';
			var currentPermissions = this.m360Context.currentPermissions;
			currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissions, IhIByvhasYD));

			this.myPortalReports = [];

			this.searchText = "";

			this.model = new RSVSS2Model();
			
			this.isLoading = true;
			this.model.save({
				action: "GET_LIST",
				servicePosition: currentPermissions.servicePositionId?currentPermissions.servicePositionId:-1
			}).then(function(res) {
				// console.log('res', res);
				if(!res.hasError) {
					self.myPortalReports = res.data.myPortalReports;
				}

				self.isLoading = false;
				self.render();
			});
		},

		searchReports: function (e) {
			var searchString = jQuery("#reports-search-text").val();
			$('.report-row:icontains("'+searchString+'")').show();
			$('.report-row:not(:icontains("'+searchString+'"))').hide();
		},

		showDetails: function (e) {
			var index = jQuery("#"+e.currentTarget.id).attr('data-index');
			var activeReportId = this.myPortalReports[index].id;
			this.parent.showDetails(activeReportId);
		},

		getContext: function getContext() {
			return {
				isLoading: this.isLoading,
				searchText: this.searchText,

				myPortalReports: this.myPortalReports,

				icons: {
					view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
					icnSortHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-hover.png')),
					icnSortDesc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-desc.png')),
					icnSortAsc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-asc.png')),
				}
			};
		}
	});
});


define("Saralux.Core.ReportsSV.SS2Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelModule,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/ReportsSV/SuiteScript2/ReportsSV.Service.ss"
            ),
            true
        )
	});
});

define('Saralux.Core.ReportsSV.View',	[
	'saralux_core_reportssv.tpl',

	'Saralux.Core.ReportsSV.List.View',
	'Saralux.Core.ReportsSV.Details.View',
	
	'Backbone'
], function (
	saralux_core_reportssv_tpl,

	RSVListView,
	RSVDetailsView,
	
	Backbone
) {
	'use strict';
	
	return Backbone.View.extend({

		template: saralux_core_reportssv_tpl,

		events: {
			"click [data-action='m360-mp-rsv-show-list']": "showList",
			"click [data-action='date-click']": "dateClick",
		},

		childViews: {
			'ReportsSV.List': function() {
				return new RSVListView({
					m360Context: this.m360Context,
					parent: this
				});
			},
			'ReportsSV.Detail': function() {
				return new RSVDetailsView({
					m360Context: this.m360Context,
					activeReportId: this.activeReportId,
					parent: this
				});
			}
		},
		
		initialize: function (options) {
			var self = this;

			this.m360Context = SC.m360Context;

			this.listMode = true;
			this.activeReportId = null;
		},

		showList: function (e) {
			this.listMode = true;
			this.activeReportId = null;
			this.render();
		},

		dateClick: function (e) {
			this.$(e.currentTarget).siblings(".jQDatePicker").focus();
		},

		showDetails: function (activeReportId) {
			this.listMode = false;
			this.activeReportId = activeReportId;
			this.render();
		},

		getContext: function getContext() {
			return {
				isLoading: this.isLoading,
				listMode: this.listMode
			};
		}
	});
});


define('Saralux.Core.ReportsSV',   [
	'Saralux.Core.ReportsSV.View',
	'Saralux.Core.ReportsSV.Details.View'
],   function (
	ReportsSVView,
	ReportsSVDetailsView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0009', function() {
						return new ReportsSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.ReportsSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.SSO.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function SSOSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/SSO/SuiteScript2/SSO.Service.ss"
                ), true
            );
        }
    }

    SSOSS2Model.prototype = Object.create(SCModel.prototype);
    SSOSS2Model.prototype.constructor = SSOSS2Model;
 
    return SSOSS2Model;
});

define('Saralux.Core.SSO.View',	[
	'saralux_core_sso.tpl',

    'Saralux.Core.SSO.SS2Model',

    'Saralux.Core.CommonLibraries.General',

    'Saralux.Core.ExternalLibraries.CryptoJS411',
	
	'PageType.Base.View',
], function (
	saralux_core_sso_tpl,

    SSOSS2Model,
    
    CoreCLGeneral,

    CryptoLib,
	
	PageTypeBaseView
) {
    'use strict';

    return PageTypeBaseView.PageTypeBaseView.extend({

        template: saralux_core_sso_tpl,

        initialize: function(options) {
            var self = this;

            this.model = new SSOSS2Model();
            this.integrationData = null;
            this.isLoggedIn = false;
        },

        beforeShowContent: function beforeShowContent() {
            var self = this;

            this.container = this.options.container;

            this.environment_component = this.container.getComponent('Environment');
            this.userprofile_component = this.options.container.getComponent('UserProfile');

			this.stSSOredirectURL = this.environment_component.getConfig('stSSOredirectURL');
			this.stSSOpassphrase = this.environment_component.getConfig('stSSOpassphrase');
			this.stSSOsharedSecret = this.environment_component.getConfig('stSSOsharedSecret');
            
			// this.stSSOpassphrase = "8056483646328763";
			// this.stSSOsharedSecret = "1036b33cc76b1ea5c73092ec493c2251";

            this.events = {
                'click [data-action="test-sso"]': 'testSSO'
            };

            return this.model.save().done(function(res) {
                // console.log('res', res);
                if(!res.hasError) {
                    self.isLoggedIn = res.isLoggedIn;
                    if(self.isLoggedIn) {
                        if(res.integrationData) {
                            self.integrationData = res.integrationData;
                            if(self.stSSOredirectURL) {
                                self.generateSourceURL();
                            } else {
                                console.error("Source URL not set up correctly");
                            }
                        }
                    } else {
                        self.redirectToLogin();
                    }
                }
            });
        },

        generateSourceURL: function() {
            var data = {
                id: this.integrationData.id+"",
                email: this.integrationData.email,
                firstName: this.integrationData.firstName,
                lastName: this.integrationData.lastName,
                isMember: this.integrationData.isMember,
                sharedSecret: this.stSSOsharedSecret
            };

            var strData = JSON.stringify(data);

            var key = CryptoLib.CryptoJS().enc.Utf8.parse(this.stSSOpassphrase);
            var iv = CryptoLib.CryptoJS().enc.Utf8.parse(this.stSSOpassphrase);
            var encryptedData = CryptoLib.CryptoJS().AES.encrypt(CryptoLib.CryptoJS().enc.Utf8.parse(strData), key, {
                keySize: 128/8,
                iv: iv,
                mode: CryptoLib.CryptoJS().mode.CBC,
                padding: CryptoLib.CryptoJS().pad.Pkcs7
            }).toString();

            this.stSSOredirectURL += encodeURIComponent(encryptedData);

            window.location.href = this.stSSOredirectURL;
        },

        redirectToLogin: function() {
			window.location.href = CoreCLGeneral.getLoginURL(this.environment_component, null);
        },

        getContext: function () {
            return {
                isLoggedIn: this.isLoggedIn,
                integrationData: this.integrationData,
                stSSOredirectURL: this.stSSOredirectURL,
                encryptedVal: this.encryptedVal,
                encodedVal: encodeURIComponent(this.encryptedVal)
            }
        }

    });
});

define('Saralux.Core.SSO',   [
	'Saralux.Core.SSO.View'
], function (
	SSOView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp(container) {
			try {
				var pageType = container.getComponent('PageType');
				this.registerPublicPages(pageType);
			} catch (e) {
				console.error('ERROR: Saralux.Core.SSO', e.toString());
			}
		},

		registerPublicPages: function registerPublicPages(pageType) {
			pageType.registerPageType({
				name: 'M360SSO',
				view: SSOView,
				routes: ['m360-sso']
			});
		}
	};
});


define('Saralux.Core.Sponsorship',   [
	'Saralux.Core.Sponsorship.List.View',
	'Saralux.Core.Sponsorship.Details.View',
	'Saralux.Core.Sponsorship.Sponsor.Profile.Details.View',
	'Saralux.Core.Sponsorship.Our.Sponsors.View',
	'Saralux.Core.Sponsorship.Checkout.View',
],   function (
	SponsorshipListView,
	SponsorshipDetailsView,
	SponsorshipSponsorProfileDetailsView,
	SponsorshipOurSponsorsView,
	SponsorshipCheckoutView,
) {
	'use strict';

	return  {
		mountToApp: function mountToApp(container) {
			try {
				var pageType = container.getComponent('PageType');
				this.registerPublicPages(pageType);
			} catch (e) {
				console.error('ERROR: Saralux.Core.Sponsorship', e.toString());
			}
		},

		registerPublicPages: function registerPublicPages(pageType) {
			pageType.registerPageType({
				name: 'Sponsorship',
				view: SponsorshipListView,
				routes: ['sponsorships']
			});

			pageType.registerPageType({
				name: 'SponsorshipDetails',
				view: SponsorshipDetailsView,
				routes: ['sponsorship/:id']
			});

			pageType.registerPageType({
				name: 'SponsorshipSponsorProfileDetails',
				view: SponsorshipSponsorProfileDetailsView,
				routes: ['profile/:id']
			});

			pageType.registerPageType({
				name: 'SponsorshipOurSponsors',
				view: SponsorshipOurSponsorsView,
				routes: ['our-sponsors']
			});
			pageType.registerPageType({
				name: 'SponsorshipCheckout',
				view: SponsorshipCheckoutView,
				routes: ['sponsorship-checkout/:id']
			});
		}
	};
});


define('Saralux.Core.Sponsorship.Checkout.View', [
    'saralux_core_sponsorship_checkout.tpl',
    
    'PageType.Base.View',
    
	'Saralux.Core.SponsorshipTabs.Confirmation.View',

	'Saralux.Core.SponsorshipTabs.Organization.View',

	'Saralux.Core.SponsorshipTabs.OrganizationAddress.View',
    
    'Saralux.Core.WebForms.View',
    
    'Saralux.Core.Cart.Context.Model',

	'Saralux.Core.ExternalLibraries.CryptoJS',

    'Saralux.Core.WebForms.General',

	'Saralux.Core.CommonLibraries.General',

    'Saralux.Core.Sponsorship.SS2Model',

	'Saralux.Core.CommonLibraries.CAPI.Model', // CAPI = Commerce API
  
    'Utils',
    'jQuery'
], function (
    saralux_core_sponsorship_checkout_tpl,
    
    PageTypeBaseView,
    
	SponsorshipTabsConfirmation,

	SponsorshipTabsOrganization,

	SponsorshipTabsOrganizationAddress,
    
    WebFormsView,
    
    CartContextModel,
    
	CryptoJS,
    
    WebFormsGeneral,

	CoreCLGeneral,
    
    SponsorshipSS2Model,

	CoreCLCAPIModel,

    Utils,
    jQuery
) {
    return PageTypeBaseView.PageTypeBaseView.extend({
        template: saralux_core_sponsorship_checkout_tpl,

        initialize: function(options) {
            var self = this;
	
			this.model = new SponsorshipSS2Model();
			this.cartContextModel = CartContextModel.getInstance();
    
			this.showPrevious = false;
			this.lastTab = false;

			this.webFormId = null;
			this.webFlowType = null;
			this.webProcessFlowId = null;
			this.customerObject = {};
			this.sponsorshipId = null;
			this.transactionDefaultBodyId = null;
			this.transactionDefaultLineId = null;
            this.defaultOrgCrmTags = null;
			this.sponsorshipPrice = null;
			this.organization = {
				id: null,
				name: null
			}
			this.orgAddresses = null;
			this.newOrgAdded = false;
			this.newAddressData = {};
			this.addressId;
			this.dataView = null;
			this.paymentTerm = null;
			this.orgAddressViewObj = null;
			this.userHasSelectedAddress = false;
			this.selectedAddressIndex = null;
			this.encryptedPrice = null;

			this.countries = [];
			this.states = [];
			this.CAPIModel = new CoreCLCAPIModel();

			this.$('#submit-order-button').hide();
        },

        beforeShowContent: function beforeShowContent() {
            var self = this;

			this.container = this.options.container;
			this.user_profile = this.container.getComponent('UserProfile');
            this.cart_component = this.container.getComponent("Cart");
            this.environment_component = this.options.container.getComponent("Environment");
			this.placeholderItemID = this.environment_component.getConfig('placeholderItemID');

			if(this.options.routerArguments[0]) {
				this.sponsorshipId = this.options.routerArguments[0];
			}

			var subsidiaries = this.environment_component.getSiteSetting('subsidiaries');
			this.defaultSubsidiary = CoreCLGeneral.getDefaultSubsidiary(subsidiaries);
			
			this.session = this.environment_component.getSession();
			var currency = {
				id: this.session.currency.internalid,
				code: this.session.currency.code
			};

			this.tabsSection = [
				{
					tabNo: 1,
					section: 'organization',
					title: Utils.translate('Organization'),
					dataView : 'SponsorshipTabs.Organization.View',
					visibility : true,
					isWebForm : false,
					inProgress : true,
					stepClass: 'first-step',
					searchAddresses: true,
				},
				{
					tabNo: 2,
					section: 'organization-address',
					title: Utils.translate('Organization Address'),
					dataView : 'SponsorshipTabs.OrganizationAddress.View',
					visibility : true,
					isWebForm : false,
					inProgress : false,
					stepClass: 'second-step',
					searchAddresses: false,
					newOrganizationAddressForm: false
				},
				{
					tabNo: 3,
					section: 'basic-information',
					title: Utils.translate('Profile'),
					dataView : 'Sponsorship.Details.WebForm',
					visibility : true,
					stepClass: 'third-step',
					isWebForm : true,
					inProgress : true,
					searchAddresses: false
				},
				{
					tabNo: 4,
					section: 'confirmation',
					title: Utils.translate('Confirmation'),
					dataView : 'SponsorshipTabs.Confirmation.View',
					visibility : true,
					isWebForm : false,
					inProgress : false,
					stepClass: 'last-step',
					searchAddresses: false
				},
				
			];

            this.pageView = {
            	webForm: false
        	}

            // Declare events (if any):
            this.events = {
				"click [data-action='m360-slxc-sponsorship-submit-order']": "submitOrder",
                "click [data-action='m360-slxm-checkout-flow-next']": "checkoutFlowNext",
                "click [data-action='m360-slxm-checkout-flow-previous']": "checkoutFlowPrevious",
                "click [data-action='m360-spnsrshp-chkout-back-button']": "backButtonClick",
                "click [data-action='m360-spnsrshp-chkout-continue-browsing-button']": "continueBrowsingButton",
            };

			this.childViews = {
                'SponsorshipTabs.Organization.View' : function() {
                    return new SponsorshipTabsOrganization({
                        container : self.container,
                        isLoading : self.isLoading,
                        parent    : self
                    })
                }
            }
			
			if(this.options.routerArguments[0]) {
				this.encryptedPrice = decodeURIComponent(this.options.routerArguments[1].split("price").pop().substring(1)); 
				var hFNcaSCN = "?D(G+KbPeShVmYq3s6v9y$B&E)H@McQfTjWnZr4u7w!z%C*F-JaNdRgUkXp2s5v7";
				this.sponsorshipPrice = JSON.parse(CryptoJS.decryptValue(this.encryptedPrice, hFNcaSCN)).price; 
				return jQuery.when(this.getSponsorshipDetails(this.sponsorshipId), this.getConuntryAndStates());
			}
			else {
				return jQuery.Deferred().resolve();
			}
        },

		getConuntryAndStates: function getConuntryAndStates(e) {
			var self = this;

			return this.CAPIModel.fetch().done(function(response) {
                if(response.countries && response.states) {
                    self.countries = response.countries;
                    for (var i = 0; i < self.countries.length; i++) {
                        self.countries[i].selected = false;
                    }
                    self.states = response.states;
                    for (var i = 0; i < self.states.length; i++) {
                        self.states[i].selected = false;
                    }
                }
            });
		},

		backButtonClick: function backButtonClick() {
			window.location.href = '/sponsorship/'+this.sponsorshipId;
		},	

        checkoutFlowPrevious: function checkoutFlowPrevious(e) {
			var self = this;
			
			for (var i = this.tabsSection.length-1; i > -1; i--) {
				if(this.tabsSection[i].inProgress) {
					this.tabsSection[i].inProgress = false;
					if(i > 0) {
						var previousTab = this.tabsSection[(i-1)].tabNo;
						var currentTab = this.tabsSection[i].tabNo;

						this.$('.tab-' + previousTab).show(); 
						this.$('.tab-' + currentTab).hide();

						this.$('.tab-info-'+currentTab).addClass('process-notstarted');
						this.$('.tab-info-'+currentTab).removeClass('in-process');
						this.$('.tab-info-'+previousTab).addClass('in-process')
						this.$('.tab-info-'+previousTab).removeClass('process-completed');

						this.tabsSection[(i-1)].inProgress = true;
						this.tabsSection[(i-1)].completed = false;

						if(i == 1){
							
							if(!this.tabsSection[i].newOrganizationAddressForm) {
								jQuery(".validation-err .global-error-msg").hide();
								this.userHasSelectedAddress = false;
								this.$('.organization-info').find('p').removeClass('err')
								for (var j = 0; j < this.orgAddresses.length; j++) {
									
									if(this.$('#address-card-box-'+j).parent().hasClass('selected-card')) {
										this.userHasSelectedAddress = true;
										this.selectedAddressIndex = this.$('#address-card-box-'+j).attr('data-index');
										this.addressId = this.orgAddresses[this.selectedAddressIndex].internalid;
										break;
									}
								}
							}
							else {
								this.getNewOrgAddressFormData();	
							}

							this.$('.select-org').fadeOut(200);
							this.$('.selected-org').fadeIn(200);
							this.$('.overlaybox').hide();
							this.$('#selected-organization').text(this.organization.name);
							this.$('.modal-backdrop').hide()
							this.$('#previous-button').hide();
							this.showPrevious = false;
						}

						if(i == 2) {
							if(Object.keys(this.newAddressData).length == 0) {
								this.orgAddressViewObj.setStates(this.newAddressData.country);
							}
						}

						this.$('#submit-order-button').hide() // add to cart button
						this.$('#next-button').show();
						break;
					}
				}
			}
		},

        checkoutFlowNext: function checkoutFlowNext(e) {
			var self = this;

			for (var i = 0; i < this.tabsSection.length; i++) {
				if(this.tabsSection[i].inProgress) {
					if(this.tabsSection[i].isWebForm) {
						this.$(".global-error-msg").hide();
						this.webFormData = WebFormsGeneral.getFormData(this.webFormObject, true);	
						if(!this.webFormData.otherFieldsValidationStatus || !this.webFormData.loginFieldsValidationStatus) {
							this.$(".global-error-msg").show();
							break;
						}	
						else {							
							if (this.tabsSection[i].inProgress) {
								this.model.save({
									action: "save_web_form_data",
									formData: this.webFormData ,
									sponsorshipId: this.sponsorshipId
								}).then(function(res) {
									if (!res.hasError) {
										self.webFormDataId = res.webFormDataId;
										self.navigateToNextView(i);
									}
								});
							}
							break;
						}
					}	
					if(this.tabsSection[i].tabNo == 1) {
						if(this.organization.id == null && this.newOrgAdded == false) {
							this.$('#organization-name').siblings('p').addClass('err');
							break;
						}
						if(this.organization.id != null ) {
							if(this.orgAddresses == null){
								this.model.save({
									action: 'get_addresses',
									orgId: this.organization.id
								}).then(function(res){
									if(!res.hasError) {
										self.orgAddresses = res.addresses;									
									}
									self.orgAddressViewObj = new SponsorshipTabsOrganizationAddress({
										newAddress: false,
										orgId: self.organization.id,
										orgAddresses : self.orgAddresses,
										container : self.container,
										isLoading : self.isLoading,
										parent    : self,
									})
									self.childViews['SponsorshipTabs.OrganizationAddress.View'] = function() {
										return self.orgAddressViewObj;
									};
									self.render();
									
									self.navigateToNextView(i);
									self.orgAddressViewObj.preselectDefaultAddress(self.orgAddresses);
									
								});
							}
							else {
								this.navigateToNextView(i);
							}
						}

						else {
							this.tabsSection[1].newOrganizationAddressForm = true;
							this.orgAddressViewObj = new SponsorshipTabsOrganizationAddress({
								newAddress: true,
								orgId: self.organization.id,
								orgAddresses : self.orgAddresses,
								container : self.container,
								isLoading : self.isLoading,
								parent    : self,
							})
							this.childViews['SponsorshipTabs.OrganizationAddress.View'] = function() {
								return self.orgAddressViewObj
							};
							this.render();
							this.navigateToNextView(i);
							this.orgAddressViewObj.setFormValues(this.newAddressData);
						}
					}
					if(this.tabsSection[i].tabNo == 2){
						if(this.tabsSection[i].newOrganizationAddressForm) {
							if(Object.keys(this.newAddressData).length == 0) {
								this.getNewOrgAddressFormData()
							}
							this.navigateToNextView(i);
						}
						else {
							jQuery(".validation-err .global-error-msg").hide();
							this.userHasSelectedAddress = false;
							this.$('.organization-info').find('p').removeClass('err')
							for (var j = 0; j < this.orgAddresses.length; j++) {
								if(this.$('#address-card-box-'+j).parent().hasClass('selected-card')) {
									this.userHasSelectedAddress = true;
									this.selectedAddressIndex = this.$('#address-card-box-'+j).attr('data-index');
									this.addressId = this.orgAddresses[this.selectedAddressIndex].internalid;
									break;
								}
							}
							if(this.userHasSelectedAddress) {
								this.navigateToNextView(i);
							}
							else {
								jQuery(".validation-err .global-error-msg").show();
							}
						}
					}
					else {
						this.navigateToNextView(i);
					}
					break;
				}
			}
		},

		getNewOrgAddressFormData: function getNewOrgAddressFormData() {
			console.log('inside getNewOrgAddressFormData');
			this.$('#new-address-form-full-name').trigger('focusout');
			this.$('#new-address-form-phone').trigger('focusout');
			this.$('#new-address-form-address-1').trigger('focusout');
			this.$('#new-address-form-country').trigger('focusout');
			this.$('#new-address-form-city').trigger('focusout');
			this.$('#new-address-form-state').trigger('focusout');
			this.$('#new-address-form-zip').trigger('focusout');
			
			if(this.$('#m360-spnsrshp-new-addr-form').find('.err').length == 0 ) {
				this.newAddressData.addressee = this.$('#new-address-form-full-name').val();
				this.newAddressData.attention = this.$('#new-address-form-company').val();
				this.newAddressData.addr1 = this.$('#new-address-form-address-1').val();
				this.newAddressData.addr2 = this.$('#new-address-form-address-2').val();
				this.newAddressData.country = this.$('#new-address-form-country').val();
				this.newAddressData.state = this.$('#new-address-form-state').val();
				this.newAddressData.zip = this.$('#new-address-form-zip').val();
				this.newAddressData.phone = this.$('#new-address-form-phone').val();
				this.newAddressData.city = this.$('#new-address-form-city').val();
				this.orgAddressViewObj.setFormValues(this.newAddressData);
				return true;
			}
			return false;
		},

		getSponsorshipDetails: function getSponsorshipDetails (id) {
            var self = this;
            this.isLoading = true;
            this.model.clear({ silent: true });
            return this.model.save({
                action: 'get_sponsorship_details',
                id: id,
            }).then(function(res){
                if(!res.hasError){
					self.$("#submit-order").modal('show');
					if(!res.isLoggedIn) {
						self.redirectToLogin();
					}
					else if(res.redirectToListPage) {
						window.location.href = '/sponsorships';
					}
					else {
						self.paymentTerm = res.data.preferredTerm;
						self.sponsorship = res.data.sponsorshipDetails;
						self.sponsorship.price = self.sponsorshipPrice
						
						var confirmationPageDataObj =  {
							name: self.sponsorship.name,
							category: self.sponsorship.category,
							price: self.sponsorship.price,
							image: self.sponsorship.image
						}
			
						self.childViews['SponsorshipTabs.Confirmation.View'] = function () {
							return new SponsorshipTabsConfirmation({
								selectedSponsorshipDetails : confirmationPageDataObj,
								container : self.container,
								isLoading : self.isLoading,
								parent    : self
							});
						};

						if(self.sponsorship.defaultOrgCrmTag && self.sponsorship.defaultOrgCrmTag.length > 0 && self.sponsorship.defaultOrgCrmTag != null) {
							self.defaultOrgCrmTags = self.sponsorship.defaultOrgCrmTag.split(',');
						}
						
						if(self.sponsorship.webForm){
							self.webFormId = self.sponsorship.webForm;
							self.webFlowType = self.sponsorship.webFlowType;
							self.webProcessFlowId = self.sponsorship.webProcessFlowId;
							self.transactionDefaultBodyId = self.sponsorship.transactionDefaultBodyId;
							self.transactionDefaultLineId = self.sponsorship.transactionDefaultLineId;
	
							self.isUserLoggedIn = self.sponsorship.isUserLoggedIn;
							if(self.sponsorship.webForm){

								self.user_profile.getUserProfile().then(function(profile) {
									self.isLoggedIn = profile.isloggedin;
									self.isRecognized = profile.isrecognized;
						
									if(self.isLoggedIn && self.isRecognized) {
										if(profile) {
											self.customerObject.firstName = profile.firstname;
											self.customerObject.lastName = profile.lastname;
											self.customerObject.email = profile.email;
											self.customerObject.customerId = profile.internalid;
										}   
									}
								});
	
								self.childViews['Sponsorship.Details.WebForm'] = function () {
									self.webFormObject = new WebFormsView({
										container: self.container,
										webProcessFlowId: self.webProcessFlowId,
										customerObject: self.customerObject, // 
										isLoggedIn: self.isUserLoggedIn,
										requiredLoginBox: true,
										additionalFields: [],
										orderSource: 'Sponsorship Order (Webstore)',
										addressRequired: false,
										parent: self
									});
									return self.webFormObject;
								};
							}
						}
					}
                }
            });
        },

		redirectToLogin: function redirectToLogin() {
            var link = this.getLoginUrl(this.environment_component);
            window.location.href = link;
        },

		getLoginUrl: function getLoginUrl(environment_component) {
            var login = environment_component.getSiteSetting('touchpoints.login');
            var currentTouchpoint = environment_component.getConfig('currentTouchpoint');
            var originHash = "/sponsorship-checkout/"+this.id;
            originHash += encodeURIComponent('?price='+this.encryptedPrice);
            return login + '&origin=' + currentTouchpoint + '&origin_hash=' + originHash;
        },

		navigateToNextView: function navigateToNextView(i) {
			this.tabsSection[i].inProgress = false;
			this.tabsSection[i].completed = true;
			this.tabsSection[i+1].inProgress = true;

			var nextTab = this.tabsSection[i+1].tabNo;
			var currentTab = this.tabsSection[i].tabNo;

			this.$('.tab-collection').hide();
			this.$('.tab-' + nextTab).show();
			this.$('.tab-' + nextTab).removeClass('display-none');

			for (var j = 1; j <= currentTab; j++) {
				this.$('.tab-info-'+j).addClass('process-completed');				
				this.$('.tab-info-'+j).removeClass('process-notstarted');
			}

			this.$('.tab-info-'+nextTab).addClass('in-process');
			this.$('.tab-info-'+nextTab).removeClass('process-notstarted');

			this.$('#previous-button').show();
			if(i == this.tabsSection.length-2){
				this.$('#next-button').hide();
				this.$('#submit-order-button').show();
			}
		},

		processAddToCart: function (additionalData) {
            var self = this;

            var itemId = this.sponsorship.itemId;
            var itemAmount = this.sponsorship.price;
            
            var itemAddURL = "/app/site/backend/additemtocart.nl?buyid="+itemId+"&qty=1&amount="+itemAmount+"&custcol_slxc_additional_data="+encodeURIComponent(JSON.stringify(additionalData));
        
            jQuery.post(itemAddURL, function(res) {
                setTimeout(function() {
                    self.cart_component.addLine({
                        line: {
                            quantity: 1,
                            item: {
                                internalid: self.placeholderItemID
                            }
                        }
                    }).then(function(line) {
                        setTimeout(function() {
                            self.cart_component.removeLine({
                                line_id: line
                            }).then(function(res) {
                                console.log('removeLine res', res);
                                self.cartContextModel.set('forcePopup', true);
                                // self.render();
                            });
                        }, 500);
                    });
                }, 500);
            });
        },

		submitOrder: function () {
			var self = this;

			this.$('#confirmation-form-submit').prop('disabled', true);
			this.$('#previous-button').prop('disabled', true);

			var webOrderJSON = this.createWebOrderJSON();

			this.model.save({
				action: 'create_web_order',
				data: webOrderJSON
			}).then(function(res){
				self.$("#submit-order").modal('show');
			})
		},

		createWebOrderJSON: function () {
			return {
				orderSource: "Sponsorship Order (Webstore)",
				customerInformation: {
					isExisting: this.organization.id ? true : false, // true for existing, false for new
					forOrganization: true,
					company: {
						customerId: this.organization.id ? this.organization.id : null, // some value for exsiting, null for new
						companyName: this.organization.name,
						shippingMethod: null,
						billingAddress: this.newOrgAdded ? this.newAddressData : null,
						shippingAddress: null,
						defaultSubsidiary: this.defaultSubsidiary ? this.defaultSubsidiary : null, 
						defaultCRMTags: this.defaultOrgCrmTags
					},
					individual: {
						isExisting: true,
						customerId: this.customerObject.customerId ? parseInt(this.customerObject.customerId) : null,
						firstName: this.customerObject.firstName ? this.customerObject.firstName : null,
						lastName: this.customerObject.lastName ? this.customerObject.lastName : null,
						defaultSubsidiary: this.defaultSubsidiary ? this.defaultSubsidiary : null
					}
				},
				orderInformation: {
					currencyId: this.session.currency.internalid,
					currencyCode: this.session.currency.code,
					lines: [
						{
							itemId: this.sponsorship.itemId ? parseInt(this.sponsorship.itemId) : null,
							quantity: "1",
							amount: this.sponsorship.price ? parseFloat(this.sponsorship.price) : null,
							rate: this.sponsorship.price ? parseFloat(this.sponsorship.price) : null,
							additionalData : 
							{
								isSponsorshipOrder: true,
								isM360Line: true,
								transaction_type: "Sponsorship",
								descriptionText: this.sponsorship.name,
								webFormDataId: this.webFormDataId,
								scOptions: {
									id: this.sponsorship.id,
									itemId: this.sponsorship.itemId ? parseInt(this.sponsorship.itemId) : null,
									playerId: this.sponsorship.userDetails.id,
									price: this.sponsorship.price,
									transactionDefaultLineId: this.transactionDefaultLineId,
									startDate: this.sponsorship.startDate,
									endDate: this.sponsorship.endDate
								},
								webInfo: {
									id: this.sponsorship.id,
									name: this.sponsorship.name,
								}
							},
							installmentEnabled: false // To be kept false for now
						}
					],
					promotions: [],
					shippingMethod: null,
					shippingAddressId: null,
					billingAddressId: this.newOrgAdded ? null : this.addressId, // selected address id to be added
					transactionDefaultBodyId: this.transactionDefaultBodyId 
				},
				paymentInformation: {
					payViaInvoice: true,
					payViaCard: false,
					paymentTerms: this.paymentTerm, // TODO for existing company get terms from customer record, for new company get default terms from netsuite
					paymentMethod: null,
					creditCard: null,
					creditCardId: null,
					ccProcessor: null,
					giftCertificates: [],
					installmentTerms: null,
					installmentsProcessingFee: null
				}
			}
		},

		continueBrowsingButton: function () {
			window.location.href = '/my-portal';
		},

        getContext: function () {
            return {
                sponsorship: this.sponsorship,
                lastTab: this.lastTab,
				tabsSection: this.tabsSection,
				showPrevious: this.showPrevious,
                isLoading: this.isLoading,
				newAddressData: this.newAddressData,
                
                defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-cover-sponsorship.png')),
                imgDetailsReceived: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received-3.png')),
                imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),
                imgReviewProceed: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-review.png')),

                icons: {
                    icnTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-tick.png')),
                    icnTickGreen: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
                    icnContactUs: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-contact-us.png')),
                    icnEdit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-md.png')),
					icnReviewOrder: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-img-review.png')),
                }
            }
        }
    });
});


define('Saralux.Core.Sponsorship.Details.View', [
    'saralux_core_sponsorship_details.tpl',
    
    'PageType.Base.View',
    
    'Saralux.Core.WebForms.View',
    
    'Saralux.Core.Cart.Context.Model',

	'Saralux.Core.ExternalLibraries.CryptoJS',
    
    'Saralux.Core.WebForms.General',
    'Saralux.Core.CommonLibraries.General',

    'Saralux.Core.Sponsorship.SS2Model',
  
    'Utils',
    'jQuery'
], function (
    saralux_core_sponsorship_details_tpl,
    
    PageTypeBaseView,
    
    WebFormsView,
    
    CartContextModel,
	
    CryptoJS,
    
    WebFormsGeneral,
    CoreCLGeneral,
    
    SponsorshipSS2Model,

    Utils,
  jQuery
) {
    return PageTypeBaseView.PageTypeBaseView.extend({
        template: saralux_core_sponsorship_details_tpl,

        initialize: function(options) {
            var self = this;
            
            this.model = new SponsorshipSS2Model();
            console.log('after details model object');
            this.cartContextModel = CartContextModel.getInstance();

            this.isLoggedIn = false;
            this.isRecognized = false;

            this.transactionDefaultBodyId = null;
			this.transactionDefaultLineId = null;

            this.webFormAction;
        },

        beforeShowContent: function beforeShowContent() {
            var self = this;

            this.sponsorship = {};
            this.features = [];
            this.packages = [];
            
            this.id = this.options.routerArguments[0];

            this.pageView = {
                webForm: false
            }

            this.customerObject = {
                customerId: null,
                firstName: '',
                lastName: '',
                email: '',
                password: '',
                billingAddress: null
            }
        
            this.getSponsorshipDetails();

            this.getBreadcrumbPages = function () {
                return [{
                    text: Utils.translate('Sponsorship Details')
                }]
            };
            
            this.container = this.options.container;

            this.cart_component = this.options.container.getComponent("Cart");
            this.environment_component = this.options.container.getComponent("Environment");
            this.placeholderItemID = this.environment_component.getConfig('placeholderItemID');

            var subsidiaries = this.environment_component.getSiteSetting('subsidiaries');
            this.defaultSubsidiary = CoreCLGeneral.getDefaultSubsidiary(subsidiaries);

            this.userprofile_component = this.container.getComponent('UserProfile');

            this.userprofile_component.getUserProfile().then(function(profile) {
                self.isLoggedIn = profile.isloggedin;
                self.isRecognized = profile.isrecognized;
                
                if(self.isLoggedIn && self.isRecognized) {
                    self.customerObject.firstName = profile.firstname;
                    self.customerObject.lastName = profile.lastname;
                    self.customerObject.email = profile.email;
                    self.customerObject.customerId = profile.internalid;
    
                    if(profile.addressbook){
                        for(var i=0;i<profile.addressbook.length;i++) {
                            if(profile.addressbook[i].defaultbilling == 'T') {
                                self.customerObject.billingAddress = profile.addressbook[i];
                                break;
                            }
                        }
                    }
    
                    console.log('customer object : ', self.customerObject);
                }
            });

            // Declare events (if any):
            this.events = {
                'focusout [data-focusout="input-required-focusout"]': "inputRequiredFocusout",
                "focusout [data-focusout='email-focusout']": "emailFocusout",
                "focusout [data-focusout='phone-focusout']": "phoneFocusout",
                    
                'click [data-action="m360-slxc-s-set-sponsorship-amount"]' : "setSponsorshipAmount",
                'click [data-action="filter-btn-click"]' : 'filterBtnClick',
                'click [data-action="overlaybox-click"]' : 'overlayboxClick',
                'click [data-action="option-click"]' : "optionClick",

                'click [data-action="m360-slxc-s-add-to-cart"]' : "addToCart",
                "click [data-action='m360-slxr-s-wf-add-to-cart']": "",
                "click [data-action='m360-slxc-s-clear-sponsorship-amt-modal-on-open']": "clearSponsorshipAmountModalOnOpen",

                'click [data-action="m360-sponsorship-save-or-submit"]' : "submitApplicationForm",
                'click [data-action="m360-sponsorship-app-save-submit"]': 'submitApplicationForm',
                'click [data-action="m360-slxs-submit-web-form-data"]': 'submitApplicationForm',
                
                'click [data-action="m360-slxs-submit-contact-us-form"]': 'submitContactUsForm'
            };

            return jQuery.Deferred().resolve();
        },

		clearSponsorshipAmountModalOnOpen: function(e) {
			console.log('inside modal open');
			$('#sponsorship-amount-required-err').removeClass('err');
			$('#sponsorship-amount-validation-err').removeClass('err');
			$('#form-field-sponsorship-amount').val("");
			$('#set-sponsorship-amout').modal('show');
		},

        setSponsorshipAmount: function(e) {
			$('#sponsorship-amount-required-err').removeClass('err');
			$('#sponsorship-amount-validation-err').removeClass('err');

            if ($('#form-field-sponsorship-amount').val() == "") {
                $('#sponsorship-amount-required-err').addClass('err');
            }
            else if($('#form-field-sponsorship-amount').val() < this.sponsorship.price) {
                $('#sponsorship-amount-validation-err').addClass('err');
            }
            else {
				console.log(typeof(parseFloat($('#form-field-sponsorship-amount').val())));
                this.sponsorship.price = parseFloat($('#form-field-sponsorship-amount').val()).toFixed(2);
				$("#set-sponsorship-amout").modal('hide');
                $('.modal-backdrop').remove();
                $(document.body).removeClass("modal-open");
				this.addToCart(null,null);
            }
        },

        submitApplicationForm: function(e) {
            validationRequired = false;
            
            this.webFormAction = this.$(e.currentTarget).attr('data-todo');
            console.log('inside submitApplicationForm : ', this.webFormAction);

            var webFormData = WebFormsGeneral.getFormData(this.webFormObject, validationRequired);

            var canProceed = false;

            if(validationRequired){
                if(webFormData.otherFieldsValidationStatus && webFormData.loginFieldsValidationStatus){
                    canProceed = true;
                }   
                else{
                    $("#confirm-modal").modal('hide');
                    $('.modal-backdrop').remove();
                    $(document.body).removeClass("modal-open");
                    $(document.body).css("padding", "0");
                    
                    $("#form-submit").prop('disabled', false);  
                    $("#form-save-draft").prop('disabled', false);
                }           
            }
            else{
                console.log('inside else');
                var object = {
                    recordType: webFormData.recordType,
                    fields: webFormData.fields,
                    transactionType: "Sponsorship"
                }
                console.log({object});
                this.addToCart(null, object);
            }


        },

        saveOrSubmit: function(e){
            this.webFormAction = this.$(e.currentTarget).attr('data-todo');

            console.log('inside saveOrSubmit');
            console.log('webFormAction : ', this.webFormAction);

            if(this.webFormAction == "submit") {
                $("#confirm-modal-title").html(Utils.translate("Are you sure you want to submit the application?"));    
                $("#confirm-modal-subtitle").html(Utils.translate("You can also save this application as a draft and complete it later in My Portal"));    
                $("#form-submit-button").html(Utils.translate("Save for later"));
                $("#form-submit-button-2").html(Utils.translate("Submit"));
    
                $("#form-submit-button").attr("data-action", "m360-slxs-submit-web-form-data");
                $("#form-submit-button").attr("data-todo", "save");
    
                $("#form-submit-button-2").attr("data-action", "m360-slxs-submit-web-form-data");
                $("#form-submit-button-2").attr("data-todo", "submit");
            } else {
                $("#confirm-modal-title").html(Utils.translate("Are you sure you want to save the application?"));    
                $("#confirm-modal-subtitle").html(Utils.translate("Your application will be saved as a draft.") + "<br>" + Utils.translate("Please log into My Portal to complete the application and submit it"));    
                $("#form-submit-button").html(Utils.translate("Yes, I am sure"));
                $("#form-submit-button-2").html(Utils.translate("No, take me back"));
    
                $("#form-submit-button").attr("data-action", "m360-slxs-submit-web-form-data");
                $("#form-submit-button").attr("data-todo", "save");
    
                $("#form-submit-button-2").attr("data-action", "m360-slxs-close-confirmation-modal");
                $("#form-submit-button-2").attr("data-todo", "");
            }

            $("#confirm-modal .confirm-box").show();
            $("#confirm-modal .success-submit").hide();
            $("#confirm-modal").modal('show');
        },

        redirectToLogin: function() {
            var link = this.getLoginUrl(this.environment_component);
            console.log('link : ', link);
            window.location.href = link;
            // var additionalParams = "?addToCart=T";
            // window.location.href = CoreCLGeneral.getLoginURL(this.environment_component, additionalParams);
        },

        getLoginUrl: function (environment_component) {
            var login = environment_component.getSiteSetting('touchpoints.login');
            var currentTouchpoint = environment_component.getConfig('currentTouchpoint');
            var encryptedPrice = this.getEncryptedPrice();
            // var originHash = "/sponsorship-checkout/"+this.id+"?price="+ encodeURIComponent(encryptedPrice);
            var originHash = "/sponsorship-checkout/"+this.id;
            // var originHash = "/scs/shopping-local.ssp#sponsorship-checkout/"+this.id;
            originHash += encodeURIComponent('?price='+encryptedPrice);
            return login + '&origin=' + currentTouchpoint + '&origin_hash=' + originHash;
        },

        getSponsorshipDetails: function (e) {
            var self = this;

            this.isLoading = true;
            this.model.clear({ silent: true });
            this.model.save({
                action: 'get_sponsorship_details_for_details_page',
                id: this.id,
            }).then(function(res){
                console.log({res});
                if(!res.hasError){
                    self.sponsorship = res.data.sponsorshipDetails;
                    self.features = res.data.features;
                    self.packages = res.data.packages;
                    self.transactionDefaultBodyId = self.sponsorship.transactionDefaultBodyId;
                    self.transactionDefaultLineId = self.sponsorship.transactionDefaultLineId;

                    self.isUserLoggedIn = self.sponsorship.isUserLoggedIn;
                    if(self.sponsorship.webForm){
                        self.childViews = {
                            'Sponsorship.Details.WebForm': function () {
                                self.webFormObject = new WebFormsView({
                                    container: self.container,
                                    webProcessFlowId: self.sponsorship.webProcessFlowId,
                                    customerObject: self.customerObject,
                                    isLoggedIn: self.isUserLoggedIn,
                                    requiredLoginBox: true,
                                    additionalFields: [],
                                    orderSource: 'Sponsorship Order (Webstore)',
                                    draftStatus: "Pending Approval",
                                    submissionStatus: "Pending Approval",
                                    parent: self
                                });
                                return self.webFormObject;
                            },
                        };
                    }
                }
                self.isLoading = false;
                self.render();
                if(!self.sponsorship.allowToSponsorThisSponsorship) {
                    self.$('.edit-box').hide();
                    self.$('.proceed-button').prop('disabled', true);
                    self.$('#disabled-status-msg').show();
                    //self.$('.tooltip-wrapper').tooltip({position: "bottom"});
                   // $('[data-toggle="tooltip"]').tooltip()
                }
            });
        },

        inputRequiredFocusout: function (e) {
            var self = this;
            
            setTimeout(function(){
                if(self.$(e.currentTarget).val() == '') {
                    self.$(e.currentTarget).siblings('p').addClass('err');
                } else {
                    self.$(e.currentTarget).siblings('p').removeClass('err');
                }
            }, 300);
        },

        phoneFocusout: function phoneFocusout(e) {
            var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;

            if (!regex.test(this.$(e.currentTarget).val()) || this.$(e.currentTarget).val() == '') {
                this.$(e.currentTarget).siblings("p").addClass("err");
            } else {
                this.$(e.currentTarget).siblings("p").removeClass("err");
            }
        },

        emailFocusout: function emailFocusout(e) {
            if (this.$(e.currentTarget).val() == '') {
                this.$(e.currentTarget).siblings("p").addClass("err");
            } else {
                var regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,6})$/;

                if (!regex.test(this.$(e.currentTarget).val())) {
                    this.$(e.currentTarget).siblings("p").addClass("err");
                } else {
                    this.$(e.currentTarget).siblings("p").removeClass("err");
                }
            }
        },

        overlayboxClick : function (e) {
            this.$(".overlaybox").hide();
            this.$(".options-set").hide();
            this.$(".filter-btn").removeClass("activefilter");
        },

        filterBtnClick: function (e) {
            if(!this.$(e.currentTarget).hasClass("activefilter")){
                if(this.$(e.currentTarget).parents('div').hasClass('modal-body')){
                    this.$(e.currentTarget).parents('.modal-body').find(".overlaybox").show();
                }
                else{
                    this.$(".overlaybox").show();
                }
                this.$(e.currentTarget).siblings(".options-set").show();
                this.$(e.currentTarget).addClass("activefilter");
            }
        },

        optionClick: function (e) {
            var self = this;
            self.$(e.currentTarget).parents('.options-set').find('input[type="checkbox"]').prop('checked', false);
            
                self.$(e.currentTarget).parents('.options-set').find('label').removeClass('active-option');
                self.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', true);
                self.$(e.currentTarget).addClass('active-option');
                
                self.$(e.currentTarget).parents('.option-box').find('.selected-txt').text(self.$(e.currentTarget).attr('old-label'));
                self.$(".overlaybox").trigger('click');
                this.$('#pref-moc-err').removeClass('err');
            },
            
        submitContactUsForm: function (e) {
            var self = this;

            this.$("#contact-us").find(".global-error-msg").hide();
            this.$("#Addtocart").find(".global-error-msg").hide();
            this.$("#contact-us").find('#form-field-first-name').trigger('focusout');
            this.$("#Addtocart").find('#form-field-sponsorship-amount').trigger('focusout');
            this.$("#contact-us").find('#form-field-last-name').trigger('focusout');
            this.$("#contact-us").find('#form-field-email').trigger('focusout');
            this.$("#contact-us").find('#form-field-phone').trigger('focusout');
            this.$("#contact-us").find('#form-field-organization').trigger('focusout');
            this.$("#contact-us").find('#form-field-job-title').trigger('focusout');

            if (this.$("#form-field-prefered-mode").parents('.option-box').find('input[type="radio"]:checked').length > 0) {
                this.$("#form-field-prefered-mode").parents('.option-box').siblings("p").removeClass("err");
                console.log('if');
            }
            else {
                this.$("#form-field-prefered-mode").parents('.option-box').siblings("p").addClass("err");
                console.log('els');
            }

            setTimeout(function () {
                if (self.$("#contact-us").find('.err').length != 0) {
                    self.$("#contact-us").find(".global-error-msg").show();
                }
                else {
                    // self.$("#form-box").hide();
                    // self.$("#success-box").removeClass('display-none');
                    self.$("#contact-us").modal('hide');
                    jQuery('.modal-backdrop').remove();
                    jQuery(document.body).removeClass("modal-open");  
                    setTimeout(function(){
                        self.$("#form-success").modal('show');
                    },200);

                    var contactUsData = {
                        firstName : self.$('#form-field-first-name').val(),
                        lastName : self.$('#form-field-last-name').val(),
                        email : self.$('#form-field-email').val(),
                        phone : self.$('#form-field-phone').val(),
                        organization : self.$('#form-field-organization').val(),
                        jobTitle : self.$('#form-field-job-title').val(),
                        sponsorshipName: self.sponsorship.name,
                        sponsorshipAmount: self.sponsorship.price ? self.sponsorship.price : null,
                        defaultSubsidiary: self.defaultSubsidiary ? parseInt(self.defaultSubsidiary) : null,
                        preferredModeOfCommunication : parseInt(self.$('.form-field-preferred-communication-mode:checked').val()),
                        transactionDefaultBodyId: self.transactionDefaultBodyId,
			            transactionDefaultLineId: self.transactionDefaultLineId,
                        sponsorshipItemId : parseInt(self.sponsorship.itemId),
                        notes: self.$('#form-field-note').val() != "" ? self.$('#form-field-note').val() : ""
                    }
                    console.log('contact us data : ', contactUsData);

                    self.model.clear({ silent: true });
                    self.model.save({
                        action: 'sponsorship_contact_us',
                        data: contactUsData
                    }).then(function(res){
                        console.log({res});
                    });
                }
            },500);
        },

        addToCart: function addToCart() {
            var self = this;
            if(!this.isLoggedIn){
                this.redirectToLogin();
            }
            else {
                var encryptedPrice = this.getEncryptedPrice();
                // var location = '/scs/shopping-local.ssp#sponsorship-checkout/' + this.sponsorship.id + '?price=' + encodeURIComponent(encryptedPrice);
                var location = '/sponsorship-checkout/' + this.sponsorship.id + '?price=' + encodeURIComponent(encryptedPrice);
                console.log('href : ', location);
                window.location.href = location;
            }
        },

        getEncryptedPrice: function () {
            var hFNcaSCN = "?D(G+KbPeShVmYq3s6v9y$B&E)H@McQfTjWnZr4u7w!z%C*F-JaNdRgUkXp2s5v7";
            var priceObj = { price: this.sponsorship.price };
            return CryptoJS.encryptValue(JSON.stringify(priceObj), hFNcaSCN);
        },

        validateContactUsForm: function () {
            var formIsValid = true;

            this.$('#first-name-err').removeClass('err');
            if (this.$('#form-field-first-name').val() == '') {
                this.$('#first-name-err').addClass("err");
                formIsValid = false;
            }

            this.$('#last-name-err').removeClass('err');
            if (this.$('#form-field-last-name').val() == '') {
                this.$('#last-name-err').addClass("err");
                formIsValid = false;
            } 
            
            this.$('#email-err').removeClass('err');
            if (this.$('#form-field-email').val() == '') {
                this.$('#email-err').addClass("err");
                formIsValid = false;
            }

            this.$('#phone-err').removeClass('err');
            var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
            if (this.$('#form-field-phone').val() == '' || !regex.test(this.$('#form-field-phone').val())) {
                this.$('#phone-err').addClass("err");
                formIsValid = false;
            }

            this.$('#org-name-err').removeClass('err');
            if (this.$('#form-field-organization').val() == '') {
                this.$('#org-name-err').addClass("err");
                formIsValid = false;
            }
            
            this.$('#job-title-err').removeClass('err');
            if (this.$('#form-field-job-title').val() == '') {
                this.$('#job-title-err').addClass("err");
                formIsValid = false;
            }

            this.$('#pref-moc-err').removeClass('err');
            if(
                !this.$('#pref-moc-any').is(':checked')   &&
                !this.$('#pref-moc-email').is(':checked') &&
                !this.$('#pref-moc-phone').is(':checked') 
            ) {
                this.$('#pref-moc-err').addClass("err");
                formIsValid = false;
            }

            return formIsValid;
        },

        getContext: function () {
            return {
                sponsorship: this.sponsorship,
                packages: this.packages,
                features: this.features,
                pageView: this.pageView,

                isLoading: this.isLoading,
                
                defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-cover-sponsorship.png')),
                imgDetailsReceived: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received-3.png')),
                imgSucess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),

                icons: {
                    icnTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-tick.png')),
                    icnTickGreen: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
                    icnContactUs: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-contact-us.png')),
                    icnEdit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-md.png')),
                }
            }
        }
    });
});


define('Saralux.Core.Sponsorship.List.View',	[
	'saralux_core_sponsorship_list.tpl',
	
	'PageType.Base.View',

	'Saralux.Core.Sponsorship.SS2Model',
  
	'Utils',
  'jQuery'
], function (
	saralux_core_sponsorship_list_tpl,
	
	PageTypeBaseView,

	SponsorshipSS2Model,

	Utils,
  jQuery
) {
	return PageTypeBaseView.PageTypeBaseView.extend({
		template: saralux_core_sponsorship_list_tpl,

		initialize: function(options) {
			var self = this;

			this.model = new SponsorshipSS2Model();
			this.categories = [];
			this.sponsorships = [];
			this.sponsorshipsCount = 0;
			this.categoryFilter = null; 
			this.showScrollArrows;

			this.defaultPagination = {
				index	 	  : 0,
				pageSize 	  : 10,
				count    	  : 0,
				from     	  : 0,
				to            : 0,
				totalPages 	  : 0,
				displayWindow : 1,
				pages		  : []
			}
			this.pagination = Utils.deepCopy(this.defaultPagination);
		
			this.getSponsorships();
		},

		beforeShowContent: function beforeShowContent() {
			var self = this;

			this.getBreadcrumbPages = function () {
				return [{
					text: Utils.translate('Sponsorship')
				}]
			};

			this.environment_component = this.options.container.getComponent("Environment");

			// Declare events (if any):
			this.events = {
				'click [data-action="sponsorship-type-box-click"]': 'sponsorshipTypeBoxClick',
				'click [data-action="scroll-left-right"]': 'scrollLeftRight',
				"click [data-action='m360-slxh-sponsorship-goto-prev']" : "goToPrev",
				"click [data-action='m360-slxh-sponsorship-goto-next']" : "goToNext",
				"click [data-action='m360-slxh-sponsorship-goto-page']" : "goToPage",
	            "click [data-action='m360-slxh-sponsorship-activetabs']": "activeElement" ,
				'click [data-action="m360-change-tab-view"]': 'changeTabView',
			};

			this.sponsorshipTypes = [{
				title: 'Event Sponsorship',
				bgClr: '#27b998',
				isChecked: false,
			},{
				title: 'Training Programs',
				bgClr: '#0091ff',
				isChecked: false,
			},{
				title: 'Scholarship',
				bgClr: '#f5315d',
				isChecked: false,
			},{
				title: 'Other Type',
				bgClr: '#5631f5',
				isChecked: false,
			}];

			this.sponsorship = [{
				id: 1,
				sponsorshipBanner: '',
				sponsorshipType: {
					title: 'Event Sponsorship',
					bgClr: '#27b998',
				},
				sponsorshipTitle: 'Title of the sponsorship goes here and can be a longer one',
				sponsorshipDetails: 'If you are looking for great ways to decorate your home or office, then you know as well as I do that you have nearly countless options. There are so many ways to decorate that it can easily be very overwhelming to find the right things that are in the right budget. As an interior designer, I am often meeting with clients who are overwhelmed',
				sponsorshipPrice: '$35,000',
			},{
				id: 2,
				sponsorshipBanner: '',
				sponsorshipType: {
					title: 'Training Programs',
					bgClr: '#0091ff',
				},
				sponsorshipTitle: 'Title of the sponsorship goes here and can be a longer two',
				sponsorshipDetails: 'If you are looking for great ways to decorate your home or office, then you know as well as I do that you have nearly countless options. There are so many ways to decorate that it can easily be very overwhelming to find the right things that are in the right budget. As an interior designer, I am often meeting with clients who are overwhelmed',
				sponsorshipPrice: '$35,000',
			},{
				id: 3,
				sponsorshipBanner: '',
				sponsorshipType: {
					title: 'Scholarship',
					bgClr: '#f5315d',
				},
				sponsorshipTitle: 'Title of the sponsorship goes here and can be a longer three',
				sponsorshipDetails: 'If you are looking for great ways to decorate your home or office, then you know as well as I do that you have nearly countless options. There are so many ways to decorate that it can easily be very overwhelming to find the right things that are in the right budget. As an interior designer, I am often meeting with clients who are overwhelmed',
				sponsorshipPrice: '$35,000',
			}];
			
			return jQuery.Deferred().resolve();
		},


		getSponsorships: function(e) {
			var self = this;
			
			var data = {
				action: 'get_sponsorships',
				pagination: this.pagination,
				categoryFilter: this.categoryFilter
			};
	
			this.isLoading = true;
			this.model.clear({ silent: true });
			this.model.save(data).then(function(res){
				console.log({res});
				if(!res.hasError){
					self.sponsorships = res.data.sponsorships;
					self.categories = res.data.categories;
					self.showScrollArrows = res.data.showScrollArrows;

					self.pagination.count = res.data.count;
					self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
					self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
					self.pagination.to = (self.pagination.from + self.sponsorships.length) - 1;
					self.generatePages();

					console.log(self.pagination);

					self.isLoading = false;
					self.render();

					if(self.categoryFilter){
						self.$('.m360-spnsrshp-chkout-category-type-all').removeClass('active');
						for (var i = 0; i < self.categories.length; i++) {
							if(self.categories[i].id == self.categoryFilter) {
								self.$('#sposorship-filter-box-'+i).addClass('active');
							}

						}
					}
				}
			});
		},

		scrollLeftRight: function (e) {
			if (this.$(e.currentTarget).hasClass("scroll-left")) {
				this.$('.tab-header').animate({
					scrollLeft: "-=200px"
				}, "medium");
			}
			else {
				this.$('.tab-header').animate({
					scrollLeft: "+=200px"
				}, "medium");
			}
		},

		changeTabView: function changeTabView(e) {
			this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
			this.$(e.currentTarget).addClass("active");

			// this.$("#tab1-body").hide();
			// this.$("#tab2-body").hide();
			// this.$("#tab3-body").hide();
			// this.$("#tab4-body").hide();
			// this.$("#tab5-body").hide();
			// this.$("#tab6-body").hide();
			// this.$("#tab7-body").hide();

			var clickedtab = this.$(e.currentTarget).attr('tab-name');
			
			this.$("." + clickedtab).show();
		},

		activeElement: function(e){
				this.$(".box").removeClass("active");
				this.$(".box").addClass("opacity");
				this.$(e.currentTarget).addClass("active"); 
				this.$(e.currentTarget).removeClass("opacity"); 	
		},

		sponsorshipTypeBoxClick: function (e) {
			this.$('.m360-spnsrshp-chkout-category-type-all').removeClass('active');
			this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
			this.$(e.currentTarget).addClass("active");

			if (this.$(e.currentTarget).hasClass("select-all")) {
				console.log('all selected');
				if (this.$(e.currentTarget).find('input[type="checkbox"]').is(":checked")) {
					this.$('.sponsorship-type-box').find('input[type="checkbox"]').prop('checked', false);
					this.$('.sponsorship-type-box').removeClass('active');
				} else {
					this.$('.sponsorship-type-box').find('input[type="checkbox"]').prop('checked', true);
					this.$('.sponsorship-type-box').addClass('active');
					this.categoryFilter = null;
					this.getSponsorships();
				}
			}
			else {
				console.log(this.categories[this.$(e.currentTarget).find('input[type="checkbox"]').attr('data-index')]);
				if (this.$(e.currentTarget).find('input[type="checkbox"]').is(":checked")) {
					this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', false);
					this.$(e.currentTarget).removeClass('active');
				} else {
					this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', true);
					this.$(e.currentTarget).addClass('active');
					this.categoryFilter = this.categories[this.$(e.currentTarget).find('input[type="checkbox"]').attr('data-index')].id;
					console.log('category filter : ', this.categoryFilter);
					this.getSponsorships();
				}

				var totalTypeCount = this.$('.sponsorship-types-box').find('.sponsorship-type-box input[type="checkbox"]').length - 1;
				var selectedTypeCount = this.$('.sponsorship-types-box').find('.sponsorship-type-box input[type="checkbox"]:checked').length;

				if (selectedTypeCount >= totalTypeCount) {
					var checkAll = true;
				}

				if (typeof checkAll !== 'undefined') {
					if (!this.$(e.currentTarget).find('input[type="checkbox"]').is(":checked")) {
						this.$('.select-all').find('input[type="checkbox"]').prop('checked', false);
						this.$('.select-all').removeClass('active');
					} else {
						this.$('.select-all').find('input[type="checkbox"]').prop('checked', true);
						this.$('.select-all').addClass('active');
					}
				}
			}	
		},

		generatePages: function generatePages() {
			this.pagination.pages = [];

			var index = this.pagination.index;
			var totalPages = this.pagination.totalPages;

			for(var i = 0; i < totalPages; i++) {
				this.pagination.pages.push({
					index: i,
					number: (i+1),
					isActive: (index == i)?true:false
				});
			}
		},

		goToPage: function goToPage(e) {
			this.pagination.index = this.$('#' + e.currentTarget.id).attr('data-index');
		
			this.getData(true, null);
		},
		
		goToPrev: function goToPrev(e) {
			var previousPage = this.$('.active-page').prev().attr('data-index');
			if(previousPage) {
				this.$('.active-page').prev().trigger('click');
			}
		},

		goToNext: function goToNext(e) {
			var nextPage = this.$('.active-page').next().attr('data-index');
			if(nextPage) {
				this.$('.active-page').next().trigger('click');
			}
		},

		getContext: function () {
			return {
				sponsorship: this.sponsorship,
				sponsorships: this.sponsorships,
				sponsorshipsCount: this.sponsorshipsCount,
				pagination: this.pagination,
				categories: this.categories,
				categoryFilter: this.categoryFilter,
				showScrollArrows: this.showScrollArrows,

				isLoading: this.isLoading,

				sponsorshipTypes: this.sponsorshipTypes,
				
				defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-test-thumbnail.png')),
			}
		}
	});
});

define('Saralux.Core.Sponsorship.Our.Sponsors.View', [
    'saralux_core_sponsorship_our_sponsors.tpl',
    
    'PageType.Base.View',

    'Saralux.Core.Sponsorship.SS2Model',
  
    'Utils',
  'jQuery'
], function (
    saralux_core_sponsorship_our_sponsors_tpl,
    
    PageTypeBaseView,
            
    SponsorshipSS2Model,

    Utils,
  jQuery
) {
    return PageTypeBaseView.PageTypeBaseView.extend({
        template: saralux_core_sponsorship_our_sponsors_tpl,

        initialize: function(options) {
            var self = this;
            
            this.model = new SponsorshipSS2Model();
        },

        beforeShowContent: function beforeShowContent() {
            this.container = this.options.container;

            this.sponsorsList = [];
            this.getSponsorsList();

            // Declare events (if any):
            this.events = {
                'click [data-action="slxc-sponsor-open-details"]': "openSponsorDetails",
            };
            return jQuery.Deferred().resolve();
        },

        // overlayboxClick : function (e) {
        //     this.$(".overlaybox").hide();
        //     this.$(".options-set").hide();
        //     this.$(".filter-btn").removeClass("activefilter");
        // },

        getSponsorsList: function () {
            var self = this;

            this.isLoading = true;
            this.model.save({
                action: 'get_sponsors_list'
            }).then(function(res) {
                console.log('get sponsor list res : ', res);
                if(!res.hasError){
                    self.sponsorsList = res.sponsorsList;
                }

                self.isLoading = false;
                self.render();
            })
            console.log('inside get sponsor list');
        },

        openSponsorDetails: function(e) {
            window.location.href = '/profile/' + this.sponsorsList[this.$(e.currentTarget).attr('data-index')].id.toString();
        },

        getContext: function () {
            return {
                sponsorship: this.sponsorship,
                sponsorsList: this.sponsorsList,
                isLoading: this.isLoading,
                
                defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-cover-sponsorship.png')),
                defaultThumbnailSponsorship: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received-3.png')),
                icons: {
                    sponsorPlaceholder: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-details-received-3.png')),
                    icnTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-tick.png')),
                }
            }
        }
    });
});


define("Saralux.Core.Sponsorship.SS2Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelModule,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/Sponsorship/SuiteScript2/Sponsorship.Service.ss"
            ),
            true
        )
	});
});

define('Saralux.Core.Sponsorship.Sponsor.Profile.Details.View',	[
	'saralux_core_sponsorship_sponsor_profile_details.tpl',

	'Saralux.Core.Sponsorship.SS2Model',
	
	'PageType.Base.View',
  
	'Utils',
  'jQuery'
], function (
	saralux_core_sponsorship_sponsor_profile_details_tpl,

	SponsorshipSS2Model,
	
	PageTypeBaseView,

	Utils,
  jQuery
) {
	return PageTypeBaseView.PageTypeBaseView.extend({
		template: saralux_core_sponsorship_sponsor_profile_details_tpl,

		initialize: function(options) {
			var self = this;
			this.model = new SponsorshipSS2Model();
		},

		beforeShowContent: function beforeShowContent() {
			var self = this;
			this.container = this.options.container;
			this.environment_component = this.container.getComponent("Environment");

			this.sponsorshipProfile = null;
			this.galleryImgCounter = 0;
			this.showFilesSection = false;
			this.showMediaSection = false;

			this.sppConfig = {
				enableProfileGalleryForSPP: this.environment_component.getConfig("enableProfileGalleryForSPP"),
				enableProfileVideoForSPP: this.environment_component.getConfig("enableProfileVideoForSPP"),
				enableProfileDocumentsForSPP: this.environment_component.getConfig("enableProfileDocumentsForSPP"),

				visitWebsiteLabelForSPP: this.environment_component.getConfig("visitWebsiteLabelForSPP"),
				mediaLabelForSPP: this.environment_component.getConfig("mediaLabelForSPP"),
				aboutLabelForSPP: this.environment_component.getConfig("aboutLabelForSPP"),
				contactLabelForSPP: this.environment_component.getConfig("contactLabelForSPP"),
				weblinksLabelForSPP: this.environment_component.getConfig("weblinksLabelForSPP"),
				filesLabelForSPP: this.environment_component.getConfig("filesLabelForSPP"),

				profileNotAvailable: this.environment_component.getConfig("profileNotAvailableTitle"),
				profileNotAvailableSubTitle: this.environment_component.getConfig("profileNotAvailableSubTitle")
			};

			this.getBreadcrumbPages = function () {
				return [{
					text: Utils.translate('Company Profile')
				}]
			};

			this.visitWebsiteButtonLabel = (this.sppConfig.visitWebsiteLabelForSPP.length > 0) ? this.sppConfig.visitWebsiteLabelForSPP : 'Visit Website';
			this.mediaLabel = (this.sppConfig.mediaLabelForSPP.length > 0) ? this.sppConfig.mediaLabelForSPP : 'Media';
			this.aboutTheCompanyLabel = (this.sppConfig.aboutLabelForSPP.length > 0) ? this.sppConfig.aboutLabelForSPP : 'About the company';
			this.contactDetailsLabel = (this.sppConfig.contactLabelForSPP.length > 0) ? this.sppConfig.contactLabelForSPP : 'Contact Details';
			this.webLinksLabel = (this.sppConfig.weblinksLabelForSPP.length > 0) ? this.sppConfig.weblinksLabelForSPP : 'Web Links';
			this.filesLabel = (this.sppConfig.filesLabelForSPP.length > 0) ? this.sppConfig.filesLabelForSPP : 'Files';

			this.environment_component = this.options.container.getComponent("Environment");

			this.sponsor = {
				id: 1,
				sponsorBanner: '',
				sponsorThumbnail: '',
				sponsorTitle: '',
				sponsorslogan: '',
				sponsorDetails: '_',
				sponsorMedia: [],
				sponsorContact:{
					person: '_',
					number: '_',
					mobile: '_',
					address: '_',
					email: '_',
				},
				sponsorWebLinks:{
					website: '_',
					twitter: '_',
					instagram: '_',
					facebook: '_',
					linkedin: '_',
				},
				multimediaConfigurations:{
					videoConfiguration: false,
					galleryConfiguration: false,
					documentConfiguration: false
				},
				sponsorFiles:[],
				savedSponsorProfileStatus: false
			};
			
			// Declare events (if any):
			this.events = {
				'click [data-action="scroll-left-right"]': 'scrollLeftRight'
			};

			var id = this.options.routerArguments[0];
			return this.model.save({
				action: "get_sponsor_details",
				id: id
			}).done(function(res) {
				
				self.sponsor.sponsorBanner = res.sponsorshipProfile.profilecoverImage;
				self.sponsor.sponsorThumbnail = res.sponsorshipProfile.profileImage;

				self.sponsor.sponsorTitle = res.sponsorshipProfile.basicDetails.companyName;
				self.sponsor.sponsorslogan = res.sponsorshipProfile.basicDetails.tagLine;
				self.sponsor.sponsorDetails = res.sponsorshipProfile.basicDetails.aboutCompany;

				self.sponsor.sponsorContact.person = res.sponsorshipProfile.contactDetails.contactPerson;
				var addr1 = '';
				var addr2 = '';
				var city = '';
				var state = '';
				var zipcode = '';
				var country = '';

				if( res.sponsorshipProfile.addressDetails.country[0] && res.sponsorshipProfile.addressDetails.country[0] != undefined ){
					country = res.sponsorshipProfile.addressDetails.country[0].text+', ';
				}
				if(res.sponsorshipProfile.addressDetails.addressLine1){
					addr1 = res.sponsorshipProfile.addressDetails.addressLine1 + ', ';
				}
				if(res.sponsorshipProfile.addressDetails.addressLine2){
					addr2 = res.sponsorshipProfile.addressDetails.addressLine2 + ', ';
				}
				if(res.sponsorshipProfile.addressDetails.city){
					city = res.sponsorshipProfile.addressDetails.city + ', ';
				}
				if(res.sponsorshipProfile.addressDetails.state){
					state = res.sponsorshipProfile.addressDetails.state + ', ';
				}
				if(res.sponsorshipProfile.addressDetails.zipCode){
					zipcode = res.sponsorshipProfile.addressDetails.zipCode + '.';
				}
				self.sponsor.sponsorContact.address = addr1+ addr2+	city+ country+ state+ zipcode;
				//self.sponsor.sponsorContact.address = res.sponsorshipProfile.addressDetails.addressLine1;
				self.sponsor.sponsorContact.number = res.sponsorshipProfile.contactDetails.phoneNumber;
				self.sponsor.sponsorContact.mobile = res.sponsorshipProfile.contactDetails.mobileNumber;
				self.sponsor.sponsorContact.email = res.sponsorshipProfile.contactDetails.emailID;

				self.sponsor.multimediaConfigurations.videoConfiguration = res.sponsorshipProfile.multimediaConfigurations.videoConfiguration;
				self.sponsor.multimediaConfigurations.galleryConfiguration = res.sponsorshipProfile.multimediaConfigurations.galleryConfiguration;
				self.sponsor.multimediaConfigurations.documentConfiguration = res.sponsorshipProfile.multimediaConfigurations.documentConfiguration;

				if(self.sppConfig.enableProfileVideoForSPP && !self.sponsor.multimediaConfigurations.videoConfiguration){
					self.sponsor.sponsorMedia.push({
						type: 'video',
						url: res.sponsorshipProfile.videoLink
					});
				}

				if(self.sppConfig.enableProfileGalleryForSPP && !self.sponsor.multimediaConfigurations.galleryConfiguration){
					for(var i=0; i<res.sponsorshipProfile.gallery.length; i++){
						var gallery_image = res.sponsorshipProfile.gallery[i];
						if(gallery_image != null){
							self.sponsor.sponsorMedia.push({
								type: 'image',
								url: gallery_image.text
							});
							self.galleryImgCounter++;
						}
					}
				}

				self.sponsor.sponsorWebLinks.website = res.sponsorshipProfile.contactDetails.website;
				self.socialMediaSites = res.sponsorshipProfile.userSelectedSocialMedia;
				/*for(var i=0; i<res.sponsorshipProfile.userSelectedSocialMedia.length; i++){
					socialMediaObj = res.sponsorshipProfile.userSelectedSocialMedia[i];
					if(socialMediaObj.socialMediaItem == "Facebook"){
						self.sponsor.sponsorWebLinks.facebook = socialMediaObj.socialMediaLink
					}else if(socialMediaObj.socialMediaItem == "Instagram"){
						self.sponsor.sponsorWebLinks.instagram = socialMediaObj.socialMediaLink
					}else if(socialMediaObj.socialMediaItem == "LinkedIn"){
						self.sponsor.sponsorWebLinks.linkedin = socialMediaObj.socialMediaLink
					}else if(socialMediaObj.socialMediaItem == "Twitter"){
						self.sponsor.sponsorWebLinks.twitter = socialMediaObj.socialMediaLink
					}else if(socialMediaObj.socialMediaItem == "YouTube"){
						self.sponsor.sponsorWebLinks.youtube = socialMediaObj.socialMediaLink
					}
				}*/
				for(var i=0; i<res.sponsorshipProfile.documents.length; i++){
					var sponsorDocument = res.sponsorshipProfile.documents[i];
					if(sponsorDocument != null){
						var fileDisplayName = '';
						var fileName = sponsorDocument.text.split(".")[0].split("-");
						if(fileName.length > 3){
							for(j=2; j<fileName.length; j++){
								fileDisplayName = fileDisplayName.concat(fileName[j]);
								if(fileName[j+1]){
									fileDisplayName = fileDisplayName.concat("-");
								}
							}
						}
						else{
							fileDisplayName = fileName[2];
						}
						self.sponsor.sponsorFiles.push({
							title: fileDisplayName,
							fileName: sponsorDocument.text.split(".")[0],
							url: sponsorDocument.url
						});
						self.showFilesSection = true;
					}	
				}
				if(res.sponsorshipProfile.savedSponsorProfileStatus.length > 0){
					if(res.sponsorshipProfile.savedSponsorProfileStatus[0].text == 'Published'){
						self.sponsor.savedSponsorProfileStatus = true;
					}
					else{
						self.sponsor.savedSponsorProfileStatus = false;
					}
				}

				self.showMediaSection = self.sponsor.sponsorMedia.length > 0;
				
			});	
		},
			
		scrollLeftRight: function (e) {
			if (this.$(e.currentTarget).hasClass("left-arrow")) {
				this.$('.media-types').animate({
					scrollLeft: "-=255px"
				}, "medium");
			}
			else {
				this.$('.media-types').animate({
					scrollLeft: "+=255px"
        }, "medium");
			}
		},

		getContext: function () {
			return {
				sponsor: this.sponsor,
				sppConfig: this.sppConfig,
				visitWebsiteButtonLabel: this.visitWebsiteButtonLabel,
				mediaLabel: this.mediaLabel,
				aboutTheCompanyLabel: this.aboutTheCompanyLabel,
				contactDetailsLabel: this.contactDetailsLabel,
				webLinksLabel: this.webLinksLabel,
				filesLabel: this.filesLabel,
				showMediaSection: this.showMediaSection,
				showFilesSection: this.showFilesSection,
				socialMediaSites: this.socialMediaSites,
				defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-cover-sponsorship.png')),
				defaultThumbnail: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-thumbnail-sponsorship.png')),
				emptyState: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-profile-empty.png')),
				icons: {
					icnDownload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-download.png')),
					icnFile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-file-md.png')),
				}
			}
		}
	});
});

// Model.js
// -----------------------
// @module Case
define("Saralux.Core.SponsorshipTabs.Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";

    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({

        
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "services/SponsorshipTabs.Service.ss"
            )
        )
        
});
});


define('Saralux.Core.SponsorshipTabs',   [
	'Saralux.Core.SponsorshipTabs.View'
],   function (
		SponsorshipTabsView
	)
{
	'use strict';

	return  {
		mountToApp: function mountToApp(container) {
			try {
				var pageType = container.getComponent('PageType');
				this.registerPublicPages(pageType);
			} catch (e) {
				console.error('ERROR: Saralux.Core.Sponsorship', e.toString());
			}
		},
		// registerPublicPages: function registerPublicPages(pageType) {
		// 	pageType.registerPageType({
		// 		name: 'Sponsorship',
		// 		view: SponsorshipListView,
		// 		routes: ['sponsorships']
		// 	});

		// 	pageType.registerPageType({
		// 		name: 'SponsorshipDetails',
		// 		view: SponsorshipDetailsView,
		// 		routes: ['sponsorship/:id']
		// 	});
		// }
	};
});


define('Saralux.Core.SponsorshipTabs.Confirmation.View', [
	'saralux_core_sponsorshiptabs_confirmation.tpl',
	
	'PageType.Base.View',
    
    'Saralux.Core.Sponsorship.SS2Model',

	'Utils',
	'SCView',
	'jQuery'
], function (
	saralux_core_sponsorshiptabs_confirmation_tpl,
	
	PageTypeBaseView,
    
    SponsorshipSS2Model,
     
	Utils,
	SCViewModule,
	jQuery
) {

    'use strict';

    var SCView = SCViewModule.SCView;

    function SponsorshipTabsConfirmation (options) {
        SCView.call(this, options);
        
        this.template = saralux_core_sponsorshiptabs_confirmation_tpl;

		this.model = new SponsorshipSS2Model();

        this.parent = options.parent;
        this.container = options.container;
		this.environment_component = this.container.getComponent("Environment");

        this.selectedSponsorshipDetails = options.selectedSponsorshipDetails;
        console.log('sponsorships tab conformation options : ', options);

		this.sppConfig = {
			singleCheckoutTaxMessage: this.environment_component.getConfig("singleCheckoutTaxMessage")
        }
        if(this.sppConfig.singleCheckoutTaxMessage == '') {
            this.sppConfig.singleCheckoutTaxMessage = "Taxes & fees may apply";
        }
    }

    SponsorshipTabsConfirmation.prototype = Object.create(SCView.prototype);
    SponsorshipTabsConfirmation.prototype.constructor = SponsorshipTabsConfirmation;

    SponsorshipTabsConfirmation.prototype.getEvents = function () {
        return {
            "click [data-action='m360-slxc-remove-img-question-img']" : "removeImageQuestionOptionImage",
        }
    }

    SponsorshipTabsConfirmation.prototype.getContext = function () {
        return {
            sppConfig: this.sppConfig,
            data: this.selectedSponsorshipDetails,
            icons: {
                icnReviewOrder: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-img-review.png')),
                defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-test-thumbnail.png')),
			},
        }
    }

    return SponsorshipTabsConfirmation;
});

define('Saralux.Core.SponsorshipTabs.Organization.View', [
	'saralux_core_sponsorshiptabs_organization.tpl',
	
	'PageType.Base.View',
    
    'Saralux.Core.Sponsorship.SS2Model',

	'Utils',
	'SCView',
	'jQuery'
], function (
	saralux_core_sponsorshiptabs_organization_tpl,
	
	PageTypeBaseView,
    
    SponsorshipSS2Model,
     
	Utils,
	SCViewModule,
	jQuery
) {

    'use strict';

    var SCView = SCViewModule.SCView;

    function SponsorshipTabsOrganization (options) {
        SCView.call(this, options);
        
        this.template = saralux_core_sponsorshiptabs_organization_tpl;

		this.model = new SponsorshipSS2Model();

        this.parent = options.parent;

        this.selectedSponsorshipDetails = options.selectedSponsorshipDetails;

        this.organizations = [];
    }

    SponsorshipTabsOrganization.prototype = Object.create(SCView.prototype);
    SponsorshipTabsOrganization.prototype.constructor = SponsorshipTabsOrganization;

    SponsorshipTabsOrganization.prototype.getEvents = function () {
        return {
			'click [data-action="overlay-click"]': 'overlayClick',
            'click [data-action="selected-org-show"]': 'selectOrgFromDropdown',
            'click [data-action="select-org-hide"]': 'selectOrgHide',
            'keyup [data-keyup="organization-name"]' : 'orgNameChange',
            'click [data-action="add-new-org"]': 'addNewOrg',
            'focusout [data-focusout="input-required-focusout"]': "inputRequiredFocusout"
        }
    }

    SponsorshipTabsOrganization.prototype.inputRequiredFocusout = function (e) {
		var self = this;
		
		setTimeout(function(){
			if(self.$(e.currentTarget).val() == '') {
				self.$(e.currentTarget).siblings('p').addClass('err');
			} else {
				self.$(e.currentTarget).siblings('p').removeClass('err');
			}
		}, 300);
	}

    SponsorshipTabsOrganization.prototype.orgNameChange = function (e) {
        var self = this;
        var timeout = null;
        clearTimeout(timeout);

        var searchText = this.$(e.currentTarget).val()
        if(searchText.length > 2) {
         
                timeout = setTimeout(function () {
                    var data = {
                        action: "search_organization",
                        searchText: searchText,
                    };
                    
                    
                    self.model.save(data).then(function (res) {
                        console.log('get organization response : ', res);
                        if(!res.hasError) {
                            if(res.organizations.length > 0) {
                                self.organizations = res.organizations;
                                var values = ""
                                for (var i = 0; i < res.organizations.length; i++) {
                                    values += '<label class="option"><div data-index='+i+' data-action="selected-org-show">' + res.organizations[i].name + '</div></label> ';
                                    if(i != (res.organizations.length-1)) {
                                        values += '<div class="divider divider-1"></div>';
                                    }
                                }
                                self.$('.scroll-org').css('height', 180)
                                self.$('.scroll-org').html(values)                                
                            } else {
                                self.$('.scroll-org').css('height', 0);
                            }
                            
                            self.$(".option-default").show();
                            self.$(".overlaybox").show();
                            self.$(e.currentTarget).siblings(".options-set").show();
                            self.$(e.currentTarget).addClass("activefilter");
                        }
                    });
                }, 800);
                
        }
    }
    
    SponsorshipTabsOrganization.prototype.addNewOrg = function (e) {
        var self = this;
        this.$(e.currentTarget).siblings('p').removeClass('err');
        if(this.$('#new-org').val().trim().length == 0) {
            setTimeout(function(){
                this.$(e.currentTarget).siblings('p').addClass('err');
            }, 300);
        }
        else {
            this.$('#new-org').trigger('focusout')
            if(this.$('#new-org').val() != "") {
                this.parent.organization.name = this.$('#new-org').val();
                this.parent.newOrgAdded = true;
                console.log('new org added : ', this.$('#new-org').val());
                this.parent.render();
        
                this.showSelectedOrganization(this.$('#new-org').val());
                jQuery(document.body).removeClass("modal-open");
            }
            else{
                console.log('no org name entered');
            }
        }
    }
    
    SponsorshipTabsOrganization.prototype.selectOrgFromDropdown = function (e) {
        console.log('selected organization id : ', this.$(e.currentTarget).attr('data-index'));
	
        this.parent.organization.id = this.organizations[this.$(e.currentTarget).attr('data-index')].id;
        this.parent.organization.name = this.organizations[this.$(e.currentTarget).attr('data-index')].name;
        this.parent.paymentTerm = this.organizations[this.$(e.currentTarget).attr('data-index')].term;
        this.parent.render();

        this.showSelectedOrganization(this.organizations[this.$(e.currentTarget).attr('data-index')].name)
    }

    SponsorshipTabsOrganization.prototype.showSelectedOrganization = function (orgName) {
        jQuery('.select-org').fadeOut(200);
        jQuery('.selected-org').fadeIn(200);
        jQuery('.overlaybox').hide();
        jQuery('#selected-organization').text(orgName);
        jQuery('.modal-backdrop').hide()
    }
    
    SponsorshipTabsOrganization.prototype.selectOrgHide = function (e) {
		jQuery('.selected-org').fadeOut(200);
        jQuery('.select-org').fadeIn(200);
        jQuery('.overlaybox').show();
        jQuery(".options-set").hide();
        jQuery('.modal-backdrop').hide()
        this.parent.organization.id = null;
        this.parent.organization.name = null;
        this.parent.newOrgAdded = false;
        this.parent.orgAddresses = null;
        this.parent.render();
	}

    SponsorshipTabsOrganization.prototype.overlayClick = function (e) {
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".filter-btn").removeClass("activefilter");
	}

	SponsorshipTabsOrganization.prototype.filterBtnClick = function (e) {
		if(!this.$(e.currentTarget).hasClass("activefilter")){
			this.$(".overlaybox").show();
			this.$(e.currentTarget).siblings(".options-set").show();
			this.$(e.currentTarget).addClass("activefilter");
		}
	},

    SponsorshipTabsOrganization.prototype.getContext = function () {
        return {
            data: this.selectedSponsorshipDetails,
            icons: {
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-lg.png')),
			}
        }
    }

    return SponsorshipTabsOrganization;
});

define('Saralux.Core.SponsorshipTabs.OrganizationAddress.View', [
	'saralux_core_sponsorshiptabs_organization_address.tpl',
	
	'PageType.Base.View',
    
	'Saralux.Core.CommonLibraries.CAPI.Model', // CAPI = Commerce API

    'Saralux.Core.Sponsorship.SS2Model',

	'Utils',
	'SCView',
	'jQuery'
], function (
	saralux_core_sponsorshiptabs_organization_address_tpl,
	
	PageTypeBaseView,
	
    CoreCLCAPIModel,
	
    SponsorshipSS2Model,
     
	Utils,
	SCViewModule,
	jQuery
) {

    'use strict';

    var SCView = SCViewModule.SCView;

    function SponsorshipTabsOrganizationAddress (options) {
        var self = this;
        SCView.call(this, options);
        
        this.template = saralux_core_sponsorshiptabs_organization_address_tpl;

        this.CAPIModel = new CoreCLCAPIModel();

		this.model = new SponsorshipSS2Model();

        this.parent = options.parent;

        this.newAddress = options.newAddress;
        this.orgId = options.orgId;
        this.addresses = options.orgAddresses;
        this.defaultBillingAddrIndex = options.defaultBillingAddrIndex,
        this.addressToEdit = null;
		this.countries = this.parent.countries;
		this.states = this.parent.states;
        this.editAddressFlag = false;

        this.statesToDisplay = null;
        this.selectedCountry = null;
        this.newAddressData = null;
        
        this.selectedSponsorshipDetails = options.selectedSponsorshipDetails;
        
        // if(!this.newAddress) {            
        //     self.preselectDefaultAddress();
        // }
    }

    SponsorshipTabsOrganizationAddress.prototype = Object.create(SCView.prototype);
    SponsorshipTabsOrganizationAddress.prototype.constructor = SponsorshipTabsOrganizationAddress;

    SponsorshipTabsOrganizationAddress.prototype.preselectDefaultAddress = function (addresses) {
        console.log('inside preselectDefaultAddress : ', addresses);
        if(addresses) {
            for (var i = 0; i < addresses.length; i++) {
                if(addresses[i].defaultbilling) {
                    console.log('defaultbilling found : ', i);
                    this.$(".cc-box .radio-button span").text('Select');
                    this.$('#address-card-box-'+i).find('span').text('Selected')
                    this.$(".cc-box").removeClass('selected-card');
                    this.$('#address-card-box-'+i).parent().addClass('selected-card');
    
                    this.$(".cc-box .checkout-form-default-card").prop("checked", false);
                    this.$('#address-card-box-'+i).find(".checkout-form-default-card").prop("checked", true);
                    this.$('#address-card-box-'+i).parents(".step-view").find(".collapsable-box").addClass("completed");
                }
            }
        }

		// $("#"+e.currentTarget.id).parent().find(".radio-button span").text('Selected');
		
        // $(".cc-box").removeClass('selected-card');
		// $("#"+e.currentTarget.id).parent().addClass('selected-card');
		// $(".cc-box .checkout-form-default-card").prop("checked", false);
		// $("#"+e.currentTarget.id).parent().find(".checkout-form-default-card").prop("checked", true);
		// $("#"+e.currentTarget.id).parent().parents(".step-view").find(".collapsable-box").addClass("completed");
    }
    
    SponsorshipTabsOrganizationAddress.prototype.getEvents = function () {
        return {
            'click [data-action="m360-spnsrshp-chkout-select-address-btn"]': 'selectAddress',
            'click [data-action="m360-spnsrshp-chkout-edit-address-modal"]': 'editAddressModal',
            'click [data-action="m360-spnsrshp-chkout-submit-edit-addr"]': 'submitEditAddressForm',
            'click [data-action="m360-spnsrshp-chkout-remove-address"]': 'removeAddress',
            'click [data-action="m360-spnsrshp-chkout-add-new-addr"]': 'addNewAddress',
            'click [data-action="m360-spnsrshp-chkout-open-add-new-addr-modal"]': 'openAddNewAddrModal',
            // 'click [data-action="m360-spnsrshp-chkout-select-existing-addr"]': 'selectExistingAddress',
            'change [data-change="m360-spnsrshp-chkout-select-country"]': 'countrySelected',
            'change [data-focusout="change-required-focusout"]': "changeRequiredFocusout",
            'focusout [data-focusout="input-required-focusout"]': "inputRequiredFocusout",
            'focusout [data-focusout="phone-number-focusout"]': 'getUserEnteredPhoneNumber',
        }
    }
    
    SponsorshipTabsOrganizationAddress.prototype.openAddNewAddrModal = function (e) {
        this.$('.edit-address-modal').text('Add a new address');
        this.$('#edit-address-form-full-name').val('');
        this.$('#edit-address-form-company').val('');
        this.$('#edit-address-form-address-1').val('');
        this.$('#edit-address-form-address-2').val('');
        this.$('#edit-address-form-country').val('');
        this.$('#edit-address-form-state').val('');
        this.$('#edit-address-form-zip').val('');
        this.$('#edit-address-form-phone').val('');
        this.$('#edit-address-form-city').val('');
    }
   
    SponsorshipTabsOrganizationAddress.prototype.removeAddress = function (e) {
        var self = this;
        var index = this.$(e.currentTarget).attr('data-index');
        this.addressToEdit = this.addresses[index];

        this.model.save({
            action: 'remove_address',
            orgId: this.parent.organization.id,
            addressData: {
                internalid: this.addressToEdit.internalid
            }
        }).then(function(res){
            if(!res.hasError){
                self.addresses = res.addresses;
                self.render();
                self.addressToEdit = null;
            }
            jQuery('.modal-backdrop').remove();
        })
    }
    
    SponsorshipTabsOrganizationAddress.prototype.selectAddress = function (e) {
		$(".cc-box .radio-button span").text('Select');
		$("#"+e.currentTarget.id).parent().find(".radio-button span").text('Selected');
		$(".cc-box").removeClass('selected-card');
		$("#"+e.currentTarget.id).parent().addClass('selected-card');
		$(".cc-box .checkout-form-default-card").prop("checked", false);
		$("#"+e.currentTarget.id).parent().find(".checkout-form-default-card").prop("checked", true);
		$("#"+e.currentTarget.id).parent().parents(".step-view").find(".collapsable-box").addClass("completed");
    }

    SponsorshipTabsOrganizationAddress.prototype.changeRequiredFocusout = function (e) {
		var self = this;

		setTimeout(function(){
			if(self.$(e.currentTarget).val() == '-1') {
				self.$(e.currentTarget).siblings('p').addClass('err');
			} else {
			self.$(e.currentTarget).siblings('p').removeClass('err');
			}
		}, 300);
	}

    SponsorshipTabsOrganizationAddress.prototype.getUserEnteredPhoneNumber = function (e) {
		var regex = /^([\+][0-9]{1,2})?[-\s\.]?([(]?[0-9]{3}[)]?)?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
		if(this.$(e.currentTarget).val() == '' || !regex.test(this.$(e.currentTarget).val()) ) {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} 
		else{
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	},

    SponsorshipTabsOrganizationAddress.prototype.inputRequiredFocusout = function (e) {
		var self = this;
		
		setTimeout(function(){
			if(self.$(e.currentTarget).val() == '') {
				self.$(e.currentTarget).siblings('p').addClass('err');
			} else {
				self.$(e.currentTarget).siblings('p').removeClass('err');
			}
		}, 300);
	}

    SponsorshipTabsOrganizationAddress.prototype.editAddressModal = function (e) {
        var index = this.$(e.currentTarget).attr('data-index');
        this.addressToEdit = this.addresses[index];
        for (var i = 0; i < this.countries.length; i++) {
            if(this.addressToEdit.country == this.countries[i].code) {
                this.countries[i].selected = true;
            }
        }
        this.editAddressFlag = true;
        this.render();
        this.setStates(this.addressToEdit.country);
    }
    
    SponsorshipTabsOrganizationAddress.prototype.submitEditAddressForm = function (e) {
        var self = this;

        var addressData = {}

        this.$('#edit-address-form-full-name').trigger('focusout');
        this.$('#edit-address-form-company').trigger('focusout');
        this.$('#edit-address-form-address-1').trigger('focusout');
        this.$('#edit-address-form-address-2').trigger('focusout');
        this.$('#edit-address-form-country').trigger('focusout');
        this.$('#edit-address-form-state').trigger('focusout');
        this.$('#edit-address-form-zip').trigger('focusout');
        this.$('#edit-address-form-phone').trigger('focusout');
        this.$('#edit-address-form-city').trigger('focusout');

		if(this.$('.m360-spnsrshp-chkout-submit-edit-addr-form').find('.err').length == 0 ) {
            this.$('#edit-address-modal').modal('toggle');
            addressData.fullname = this.$('#edit-address-form-full-name').val();
            addressData.company = this.$('#edit-address-form-company').val();
            addressData.addr1 = this.$('#edit-address-form-address-1').val();
            addressData.addr2 = this.$('#edit-address-form-address-2').val();
            addressData.country = this.$('#edit-address-form-country').val();
            addressData.state = this.$('#edit-address-form-state').val();
            addressData.zip = this.$('#edit-address-form-zip').val();
            addressData.phone = this.$('#edit-address-form-phone').val();
            addressData.city = this.$('#edit-address-form-city').val();
            addressData.internalid = this.editAddressFlag ? this.addressToEdit.internalid : null;
        
            var addEditOrgApiObject = {
                addressData: addressData,
                orgId: this.orgId
            }

            if(this.editAddressFlag) {
                addEditOrgApiObject.action = "edit_org_address";
            }
            else {
                addEditOrgApiObject.action = "add_org_address";
            }

            this.model.save(addEditOrgApiObject).then(function(res) {
                console.log('add_edit_organization_address res : ', res);
                self.addresses = res.addresses;
                self.parent.orgAddresses = self.addresses;
                self.parent.render();
                self.parent.navigateToNextView(0);
                jQuery('.modal-backdrop').remove();
                self.editAddressFlag = false;
            })
        }
    }
    
    SponsorshipTabsOrganizationAddress.prototype.countrySelected = function (e) {
        var countryCode = this.$(e.currentTarget).val();
        this.setStates(countryCode);
    }

    SponsorshipTabsOrganizationAddress.prototype.setStates = function (countryCode) {
        for (var i = 0; i < this.states.length; i++) {
            if(this.states[i].countrycode == countryCode) {
                this.statesToDisplay = this.states[i].states;
                break;
            }
        }

        var options = null;
        if(this.statesToDisplay) {
            for (var i = 0; i < this.statesToDisplay.length; i++) {
                if(this.addressToEdit && this.addressToEdit.state == this.statesToDisplay[i].code){
                    options+="<option selected value="+this.statesToDisplay[i].code+">"+this.statesToDisplay[i].name+"</option>";
                }
                else if(this.newAddressData && this.newAddressData.state == this.statesToDisplay[i].code) {
                    console.log('matching state found');
                    options+="<option selected value="+this.statesToDisplay[i].code+">"+this.statesToDisplay[i].name+"</option>";
                }
                else {
                    options+="<option value="+this.statesToDisplay[i].code+">"+this.statesToDisplay[i].name+"</option>";
                }
            }
    
            this.$('#edit-address-form-state').html(options)
            this.$('#new-address-form-state').html(options)
        }
    }

    SponsorshipTabsOrganizationAddress.prototype.setFormValues = function (data) {
        console.log('in setFormValues');
        this.newAddressData = data;
        this.render();
        this.setStates(this.newAddressData.country)
    }

    SponsorshipTabsOrganizationAddress.prototype.getContext = function () {
        return {
            newAddress: this.newAddress,
            countries: this.countries,
            addresses: this.addresses,
            addressToEdit: this.addressToEdit,
            newAddressData: this.newAddressData,
            statesToDisplay: this.statesToDisplay,
            data: this.selectedSponsorshipDetails,
            icons: {
                icnEditBlack: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-edit-sm.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-close-sm.png')),
			}
        }
    }

    return SponsorshipTabsOrganizationAddress;
});

define('Saralux.Core.SponsorshipTabs.Profile.View', [
	'saralux_core_sponsorshiptabs_profile.tpl',
	
	'PageType.Base.View',
    
    'Saralux.Core.WebForms.View',
	
	'Utils',
	'SCView',
	'jQuery'
], function (
	saralux_core_sponsorshiptabs_profile_tpl,
	
	PageTypeBaseView,
    
    WebFormsView,
	
	Utils,
	SCViewModule,
	jQuery
) {
	return PageTypeBaseView.PageTypeBaseView.extend({
        template: saralux_core_sponsorshiptabs_profile_tpl,

        initialize: function(options) {
            var self = this;
        },

        beforeShowContent: function beforeShowContent() {
            var self = this;

            this.getBreadcrumbPages = function () {
                return [{
                    text: Utils.translate('SponsorshipTabs Profile')
                }]
            };

            // Declare events (if any):
            this.events = {
            };

            return jQuery.Deferred().resolve();
        },

        getContext: function () {
            return {
                isLoading: this.isLoading,
                
                defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-cover-sponsorship.png')),
                icons: {
                }
            }
        }
    });
});

define('Saralux.Core.SponsorshipTabs.View',	[
	'saralux_core_sponsorshiptabs_profile.tpl',
	
	'PageType.Base.View',

	'Saralux.Core.SponsorshipTabs.SS2Model',
	
	'Utils',
  	'jQuery'
    ]
, function (
	saralux_core_sponsorshiptabs_profile_tpl,
	
	PageTypeBaseView,
	
	SponsorshipTabsSS2Model,
	
	Utils,
  	jQuery
)
{
    'use strict';

	return PageTypeBaseView.PageTypeBaseView.extend({
		template: saralux_core_sponsorshiptabs_profile_tpl,

		initialize: function(options) {
			var self = this;
			this.getSponsorships();
		},

		beforeShowContent: function beforeShowContent() {
			var self = this;

			this.getBreadcrumbPages = function () {
				return [{
					text: Utils.translate('Sponsorship')
				}]
			};

			this.environment_component = this.options.container.getComponent("Environment");

			// Declare events (if any):
			this.events = {
			};
			return jQuery.Deferred().resolve();
		},

		getContext: function () {
			return {
				isLoading: this.isLoading,				
				defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-test-thumbnail.png')),
			}
		}
	});
});


define('Saralux.Core.Surveys',   [
	'Saralux.Core.Surveys.View',

	'Utils'
],   function (
	SurveysView,

	Utils
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var pageType = container.getComponent('PageType');
				this.registerPublicPages(pageType);
			} catch (e) {
				console.error('ERROR: Saralux.Core.PublicationSubscription', e.toString());
			}
		},

		registerPublicPages: function registerPublicPages(pageType) {
			pageType.registerPageType({
				name: 'SurveyDetails',
				view: SurveysView,
				routes: ['survey/:id','survey/defaultval']
			});
		}
	};
});


define('Saralux.Core.Surveys.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function SurveysSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/Surveys/SuiteScript2/Surveys.Service.ss"
                ), true
            );
        }
    }

    SurveysSS2Model.prototype = Object.create(SCModel.prototype);
    SurveysSS2Model.prototype.constructor = SurveysSS2Model;
 
    return SurveysSS2Model;
});

define('Saralux.Core.Surveys.View',	[
	'saralux_core_surveys_single_pager.tpl',
	'saralux_core_surveys_paginated.tpl',
	
	'Saralux.Core.ExternalLibraries.CryptoJS',

	'Saralux.Core.Surveys.SS2Model',

	'Saralux.Core.CommonLibraries.General',

	'PageType.Base.View',
	'Utils',

], function (
	saralux_core_surveys_single_pager_tpl,
	ssaralux_core_surveys_paginated_tpl,
	
	CryptoJS,
	
	SurveysSS2Model,
	CoreCLGeneral,
	PageTypeBaseView,
	Utils
) {
	'use strict';

	return PageTypeBaseView.PageTypeBaseView.extend({

		template: saralux_core_surveys_single_pager_tpl,

		initialize: function(options) {
			var self = this;

			// declare member objects
			this.model = new SurveysSS2Model();
			this.data = null;
		},

		beforeShowContent: function beforeShowContent() {
			var self = this;
			
			this.container = this.options.container;

			// var data = {
			//     surveyId : 255,
			//     customerId: 1667
			// };

			var iuJBaHNMb = '?D(G+KbPeShVmYq3s6v9y$B&E)H@McQfTjWnZr4u7w!z%C*F-JaNdRgUkXp2s5v8';
			// var encData = CryptoJS.encryptValue(JSON.stringify(data), iuJBaHNMb);

			// Encrypted URL string
			//https://dev.mem360.org/scs/shopping-local.ssp#survey/U2FsdGVkX1%2BsVe6aZYChkTCYy%2BJ5atk4JIdeydi5Q4UphL5pcukBNv9ccKYSO1MVtwkPsmXy9Pnz%2BsupEYrSOg%3D%3D

			// console.log( encodeURIComponent(encData));

			// var encryptedData = this.options.routerArguments[0];
			// var decryptedData = JSON.parse(CryptoJS.decryptValue(encryptedData, iuJBaHNMb));
			// console.log({decryptedData});

			var surveyId = this.options.routerArguments[0];

			// You can access components of the extensibility API using the container obj
			this.environment_component = this.container.getComponent('Environment');

			this.survey = null
			this.totalQuestions = 0;
			var data = {
				surveyId: surveyId
			}
			// this.surveyeeId = decryptedData.customerId;

			this.events = {
				'click [data-action="m360-submit-survey-response"]': 'submitSurveyResponse',
				'change [data-change="m360-submit-rsc"]': 'ranegSliderChange',
				"click [data-action='m360-slxc-single-pager-start-survey']" : 'startSurvey',
				"click [data-action='m360-slxc-single-pager-back-btn']" : 'TestTncInfo',
				"click [data-action='m360-slxc-single-pager-accept-tnc-btn']" : 'acceptTncBtn',
				"click .m360-slxc-single-pager-submit-survey" : 'submitSurvey',
				"click [data-action='m360-slxc-single-pager-option-box']" : 'optionBox',
				"keyup [data-keyup='m360-slxc-single-pager-brief-answer']" : 'briefAnswer',
				"keyup [data-keyup='m360-slxc-single-pager-short-answer']" : 'shortAnswer',
				"click [data-action='m360-slxc-sp-star-box']" : 'spStarBox',
				"mouseenter .m360-slxc-sp-data-mouseenter" : 'dataMouseenter',
				"mouseleave .m360-slxc-sp-data-mouseleave" : 'dataMouseleave',
				"change [data-change='m360-slxc-sp-slidecontainer']" : 'Slidecontainer'
			};

			console.log('inside public view');

			// return jQuery.Deferred().resolve();

			return this.model.save({
				action: "get_attempt_survey_details",
				data: data
			}).then(function(res) {
				console.log('survey details', res);
				if(!res.hasError) {
					self.survey = res.survey;

					for (let i = 0; i < self.survey.sections.length; i++) {
						for (let j = 0; j < self.survey.sections[i].questions.length; j++) {
							self.totalQuestions++;
						}
					}
				}
				else if(res.customerNotLoggedIn){
					var additionalParams = "?loadForm=T";
            		window.location.href = CoreCLGeneral.getLoginURL(self.environment_component, additionalParams);
				}
			}); 

		},

		submitSurveyResponse: function(e){
			console.log('inside submitSurveyResponse');
			
			var responseMaster = [];
			// [
			//     {
			//         sectionId:
			//         questions : [
			//             {
			//                 questionId : 
			//                 selectedOptionId :
			//                 text : 
			//             },
			//             {

			//             }
			//         ]
			//     },
			// ]

			// Iterate over each section
			for (var i = 0; i < this.survey.sections.length; i++) {

				// responseMaster.push({
				//     // sectionId: this.survey.sections[i].id,
				//     questions: []
				// });

				var section = this.$("#section-"+i).attr('data-index');
				// console.log({section});
				
				// iterate over each question in a section
				for (var j = 0; j < this.survey.sections[i].questions.length; j++) {
					if(this.survey.sections[i].questions[j].type  == 1){
						for (let k = 0; k < this.survey.sections[i].questions[j].options.length; k++) {
							if(this.$("#section-"+i+" #test-question-"+j+ " #option-"+k).prop("checked")){
								var selectedOption = this.survey.sections[i].questions[j].options[k]
								responseMaster.push({
									questionType: 1,
									questionId: this.survey.sections[i].questions[j].id,
									selectedOption: selectedOption.id,
									surveyId: this.survey.id
								});
							}
						}
					}                    
					if(this.survey.sections[i].questions[j].type  == 2){
						for (let k = 0; k < this.survey.sections[i].questions[j].options.length; k++) {
							if(this.$("#section-"+i+" #test-question-"+j+ " #option-"+k).prop("checked")){
								var selectedOption = this.survey.sections[i].questions[j].options[k]
								console.log({selectedOption});
								responseMaster.push({
									questionType: 2,
									questionId: this.survey.sections[i].questions[j].id,
									selectedOption: selectedOption.id,
									surveyId: this.survey.id
								});
							}
						}
						// get selected option
					}                    
					if(this.survey.sections[i].questions[j].type  == 3){
						var longTextAnswer = this.$("#section-"+i+" #test-question-"+j+ " textarea").val()
						responseMaster.push({
							questionType: 3,
							questionId: this.survey.sections[i].questions[j].id,
							answerText: longTextAnswer,
							surveyId: this.survey.id
						});
						// get the entered answer
					}                    
					if(this.survey.sections[i].questions[j].type  == 4){
						var shortTextAnswer = this.$("#section-"+i+" #test-question-"+j+ " input").val()
						console.log('short answer : ', shortTextAnswer);
						responseMaster.push({
							questionType: 4,
							questionId: this.survey.sections[i].questions[j].id,
							answerText: shortTextAnswer,
							surveyId: this.survey.id
						});
					}                    
					if(this.survey.sections[i].questions[j].type  == 5){
						if(this.$("#section-"+i+" #test-question-"+j+ " #option-yes").prop("checked")){
							responseMaster.push({
								questionType: 5,
								questionId: this.survey.sections[i].questions[j].id,
								yesNoOption: 1,
								surveyId: this.survey.id
							})
						}
						if(this.$("#section-"+i+" #test-question-"+j+ " #option-no").prop("checked")){
							responseMaster.push({
								questionType: 5,
								questionId: this.survey.sections[i].questions[j].id,
								yesNoOption: 2,
								surveyId: this.survey.id
							})
						}
					}                    
					if(this.survey.sections[i].questions[j].type  == 6){
						responseMaster.push({
							questionType: 6,
							questionId: this.survey.sections[i].questions[j].id,
							scaleValue: this.$("#section-"+i+" #test-question-"+j+ " #range-slider").val(),
							surveyId: this.survey.id
						})
					}                    
					if(this.survey.sections[i].questions[j].type  == 7){
						var selectedStarRating = 0;
						for (var k = 0; k < this.survey.sections[i].questions[j].ratingSteps.length; k++) {
							if(this.$("#section-"+i+" #test-question-"+j+ " #star-"+k).hasClass("checked")){
								selectedStarRating++;
							}
						}
						responseMaster.push({
							questionType: 7,
							questionId: this.survey.sections[i].questions[j].id,
							scaleValue: selectedStarRating,
							surveyId: this.survey.id
						})
						console.log({selectedStarRating});
					}                    
					if(this.survey.sections[i].questions[j].type  == 8){
						console.log('question type 8');
						console.log(this.survey.sections[i].questions[j].scaleCount.length);
						for (var k = 0; k < this.survey.sections[i].questions[j].scaleCount.length; k++) {
							if(this.$("#section-"+i+ " #test-question-"+j+ " #test-ans-option-"+k).hasClass('active-option')){
								var selectedOpinion = this.survey.sections[i].questions[j].scaleCount[k].key;
								responseMaster.push({
									questionType: 7,
									questionId: this.survey.sections[i].questions[j].id,
									scaleValue: selectedOpinion,
									surveyId: this.survey.id
								})
							}
						}

					}                    
				}

			}

			this.model.save({
				action: "save_survey_response",
				response: responseMaster,
				// surveyeeId: this.surveyeeId
			}).then(function(res) {
				console.log('survey details', res);
				if(!res.hasError) {
					// self.survey = res.survey;
				}
			}); 

			console.log({responseMaster});
		},

		ranegSliderChange: function(e){
			console.log(this.$("#range-slider").val());
			this.sliderSclaeValueFunctions(this.$(e.currentTarget));
		},

		sliderSclaeValueFunctions : function (thisObj){
			console.log("range slider 123");
			var calcVal = (thisObj.val() - thisObj.attr('min')) / (thisObj.attr('max') - thisObj.attr('min')) * 100;
			console.log(calcVal);
			thisObj.css('background', 'linear-gradient(to right, #000 0%, #000 ' + calcVal + '%, #ededed ' + calcVal + '%, #ededed 100%)');
		
			const val = thisObj.val();
			const min = thisObj.attr('min') ? thisObj.attr('min') : 0;
			const max = thisObj.attr('max') ? thisObj.attr('max') : 100;
			const newVal = Number(((val - min) * 100) / (max - min));
			
			thisObj.siblings('.range-val').find('span').text(thisObj.val());
			thisObj.siblings('.range-val').css('left', `calc(${newVal}% + (${10 - newVal * 0.19}px))`);
		},

		startSurvey : function(e){
			this.$(window).scrollTop(0);
			this.$(".survey-info-box").hide();
			this.$(".survey-tnc-box").show();
		},

		TestTncInfo : function(e){
			this.$(window).scrollTop(0);
			this.$(".survey-tnc-box").hide();
			this.$(".survey-info-box").show();
		},

		acceptTncBtn:function(e){
			this.$(window).scrollTop(0);
			this.$(".survey-tnc-box").hide();
			this.$(".survey-questions-box").show();
		},

		submitSurvey:function(e){
			console.log("submit responces");
			this.$(window).scrollTop(0);
			this.$(".survey-questions-box").hide();
			this.$(".survey-finish-box").show();
		},

		optionBox:function(e){
			e.stopImmediatePropagation();
			if(!this.$(e.currentTarget).parents(".answer-box").hasClass('multi-true')){
				this.$(e.currentTarget).parents('.answer-box').find(".options").attr('checked', false);
				this.$(e.currentTarget).find(".options").attr('checked', true);
				this.$(e.currentTarget).parents('.answer-box').find(".option-box").removeClass("active-option");
				this.$(e.currentTarget).addClass("active-option");
				this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").hide();
				this.$(e.currentTarget).parents('.answer-box').find(".option-box").css('opacity', '0.4');
			}
			else{
				if(this.$(e.currentTarget).find('.options').is(':checked')) {
					this.$(e.currentTarget).removeClass("active-option");
					this.$(e.currentTarget).find(".options").attr('checked', false);
				}
				else{
					this.$(e.currentTarget).addClass("active-option");
					this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").hide();
					this.$(e.currentTarget).find(".options").attr('checked', true);
				}
			}

			if(this.$(e.currentTarget).parents(".test-question-answer-box").find('.numerical-rating').length !== 0){
				this.$(".numerical-rating .selected-option span").text(this.$(e.currentTarget).find(".options").val());
				this.$(e.currentTarget).parents('.answer-box').find(".option-box").css('opacity', '1');
			}
		},

		briefAnswer:function(e){
			var left = 200 - this.$(e.currentTarget).val().length;

			if (this.$(e.currentTarget).val().length == 0){
				this.$(e.currentTarget).removeClass("active-option");
				this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").show();
			}
			else{
				this.$(e.currentTarget).addClass("active-option");
				this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").hide();
			}

			if (left < 0) {
				left = 0;
			}
			
			this.$(e.currentTarget).siblings('.word-counter').find('span').text(left);
		},

		shortAnswer: function(e){
			var left = 30 - this.$(e.currentTarget).val().length;

			if (this.$(e.currentTarget).val().length == 0){
				this.$(e.currentTarget).removeClass("active-option");
				this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").show();
			}
			else{
				this.$(e.currentTarget).addClass("active-option");
				this.$(e.currentTarget).parents(".answer-box").siblings(".global-error-msg").hide();
			}

			if (left < 0) {
				left = 0;
			}
			
			this.$(e.currentTarget).siblings('.word-counter').find('span').text(left);
		},

		spStarBox : function(e){
			this.$(".star-box").removeClass('checked');
			this.$(".star-box input:radio").attr("checked", false);
			this.$(e.currentTarget).find("input:radio").attr("checked", true);
			this.$(e.currentTarget).addClass('checked');
			this.$(e.currentTarget).prevAll().addClass('checked'); 
			this.$(".selected-star span").text($(e.currentTarget).find("input:radio").val());
		},

		dataMouseenter:function(e){
			this.$(e.currentTarget).addClass('to-check');
    	this.$(e.currentTarget).prevAll().addClass('to-check');
		},
		dataMouseleave:function(e){
			this.$(e.currentTarget).removeClass('to-check');
			this.$(e.currentTarget).prevAll().removeClass('to-check');
		},

		Slidecontainer:function(e){
			this.sliderSclaeValueFunctions(this.$(e.currentTarget).find('.range-slider'));
		},

		getContext: function () {
			return {
				survey: this.survey,
				totalQuestions: this.totalQuestions,
				icnOptionSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icn-option-selected.png')),
				surveyBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/survey-banner.png')),
				icons:{
					icnSurvey: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-survey-icn.png')),
					icnComplete: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-complete.png'))
				}
			}
		}

	});
});

define('Saralux.Core.SurveysSV',   [
	'Saralux.Core.SurveysSV.View'
],   function (
	SurveysSVView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var Layout = container.getComponent('Layout');

				if(Layout) {
					Layout.registerView('SLXC0011', function() {
						return new SurveysSVView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.SurveysSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.SurveysSV.ConfigureSurvey.View',	[
	'saralux_core_surveyssv_configure.tpl',

	'Saralux.Core.SurveysSV.Question.MultipleChoice.View',
	'Saralux.Core.SurveysSV.Question.ImageChoice.View',
	'Saralux.Core.SurveysSV.Question.Long.View',
	'Saralux.Core.SurveysSV.Question.Short.View',
	'Saralux.Core.SurveysSV.Question.YesNo.View',
	'Saralux.Core.SurveysSV.Question.OpinionScale.View',
	'Saralux.Core.SurveysSV.Question.RatingScale.View',
	'Saralux.Core.SurveysSV.Question.StarRating.View',
	'Saralux.Core.InvitePeopleSV.View',

	'Saralux.Core.SurveysSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_surveyssv_configure_tpl,
	
	MultipleChoiceQuestionView,
	ImageChoiceQuestionView,
	LongTextQuestionView,
	ShortTextQuestionView,
	YesNoChoiceQuestionView,
	OpinionScaleQuestionView,
	RatingScaleQuestionView,
	StarRatingQuestionView,
	SaraluxCoreInvitePeopleSVView,

	SurveysSVSS2Model,
	
	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function SurveysSVConfigureSurveyView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.model = new SurveysSVSS2Model();

		this.container = options.container;

		this.template = saralux_core_surveyssv_configure_tpl;

		this.parent = options.parent;

		this.surveyName = options.surveyName;
		this.activeSurveyId = options.activeSurveyId;
		this.activeModuleId = this.activeSurveyId;

		this.documentsToUpload = null;

		this.masterSectionArray = [];
		this.activeSection = null;

		this.activeSurvey = null;
		this.newCustomerEmailTemplateId = null;
		this.existingCustomerEmailTemplateId = null;
		this.moduleTableName = 'customrecord_slxc_survey_author';
		this.authorIdSelectedForRemoval = null;
		this.authorIndexSelectedForRemoval = null;

		this.addedEntriesFilters = [
			{
				id: 'custrecord_slxc_sa_author',
				operator: 'anyof',
				isCustomer: true,
				value: null
			},
			{
				id: 'custrecord_slxc_sa_survey',
				operator: 'anyof',
				isCustomer: false,
				value: this.activeModuleId
			}
		];


		console.log('activeSurveyId in configure:  ', this.activeSurveyId);

		this.getData();
		
		this.mcqChildView = new MultipleChoiceQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,
		});
		this.imagechildView = new ImageChoiceQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,
		});
		this.longTextChildView = new LongTextQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,
		});
		this.shortTextChildView = new ShortTextQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,
		});
		this.yesNoChildview = new YesNoChoiceQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,
		});
		this.opinionScaleChildview = new OpinionScaleQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,
		});
		this.ratingScaleChildview = new RatingScaleQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,

		});
		this.starRatingChildview = new StarRatingQuestionView({
			parent: this,
			container: this.container,
			activeSurveyId: this.activeSurveyId,

		});
		
		this.childViews = {
			'SurveysSV.QuestionType.MultipleChoice' : function() {
				return this.mcqChildView
			},   
			'SurveysSV.QuestionType.ImageChoice' : function() {
				return this.imagechildView
			},   
			'SurveysSV.QuestionType.LongText' : function() {
				return this.longTextChildView
			},   
			'SurveysSV.QuestionType.ShortText' : function() {
				return this.shortTextChildView
			},   
			'SurveysSV.QuestionType.YesNo' : function() {
				return this.yesNoChildview
			},   
			'SurveysSV.QuestionType.OpinionScale' : function() {
				return this.opinionScaleChildview
			},  
			'SurveysSV.QuestionType.RatingScale' : function() {
				return this.ratingScaleChildview
			},   
			'SurveysSV.QuestionType.StarRating' : function() {
				return this.starRatingChildview
			},
			'InvitePeopleSV.View': function () {
				return new SaraluxCoreInvitePeopleSVView({
					parent: this,
					container: this.container,
					// activeSurveyId: this.activeSurveyId,
					newCustomerEmailTemplateId: this.newCustomerEmailTemplateId,
					existingCustomerEmailTemplateId: this.existingCustomerEmailTemplateId
				});
			},   
		};
	}

	SurveysSVConfigureSurveyView.prototype = Object.create(SCView.prototype);
	SurveysSVConfigureSurveyView.prototype.constructor = SurveysSVConfigureSurveyView;

	SurveysSVConfigureSurveyView.prototype.postInvitePeopleProcessing = function(data) {
		var self = this;
		this.model.clear({ silent: true });
		this.model.save({
			action: 'add_new_authors',
			data: data,
			surveyId: this.activeSurveyId
		}).then(function(res) {
			if(!res.hasError){
		
			}
			self.render();
		})
	}

	SurveysSVConfigureSurveyView.prototype.getData = function(e) {
		var self = this;

		this.model.clear({ silent: true });
		this.model.save({
			action: 'get_survey_details',
			id: this.activeSurveyId
		}).then(function(res){
			console.log('survey details : ', res.survey);
			if(!res.hasError && res.survey){
				self.activeSurvey = res.survey;
				self.masterSectionArray = res.survey.sections;
				self.newCustomerEmailTemplateId = res.survey.newCustomerEmailTemplateId;
				self.existingCustomerEmailTemplateId = res.survey.existingCustomerEmailTemplateId;
			}
			self.render();
		})
	}
	
	SurveysSVConfigureSurveyView.prototype.openNewQuestion = function(e){
		jQuery(".question-type-selection").hide();
		jQuery(".question-type-form").hide();
		var dataType = parseInt(jQuery('#'+e.currentTarget.id).attr('data-type'));
		if(dataType == 1){
			this.mcqChildView.activeQuestion = null;
			this.mcqChildView.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#mcq-question-div").show();
			this.mcqChildView.render();
		} 
		if(dataType == 2){
			this.imagechildView.activeQuestion = null;
			this.imagechildView.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#image-question-div").show();
			this.imagechildView.render();
		} 
		if(dataType == 3){
			this.longTextChildView.activeQuestion = null;
			this.longTextChildView.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#long-question-div").show();
			this.longTextChildView.render();
		} 
		if(dataType == 4){
			this.shortTextChildView.activeQuestion = null;
			this.shortTextChildView.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#short-question-div").show();
			this.shortTextChildView.render();
		} 
		if(dataType == 5){
			this.yesNoChildview.activeQuestion = null;
			this.yesNoChildview.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#yesno-question-div").show();
			this.yesNoChildview.render();
		} 
		if(dataType == 6){
			this.opinionScaleChildview.activeQuestion = null;
			this.opinionScaleChildview.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#opinion-scale-question-div").show();
			this.opinionScaleChildview.render();
		} 
		if(dataType == 7){
			this.ratingScaleChildview.activeQuestion = null;
			this.ratingScaleChildview.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#rating-scale-question-div").show();
			this.ratingScaleChildview.render();
		} 
		if(dataType == 8){
			this.starRatingChildview.activeQuestion = null;
			this.starRatingChildview.nextSequenceNumber = this.activeSection.questionsCount + 1;
			jQuery("#star-rating-question-div").show();
			this.starRatingChildview.render();
		} 
	}


	SurveysSVConfigureSurveyView.prototype.saveSurveyDetails = function(e) {
		var self = this;
		this.$('#survey-title').trigger("focusout"); 
		this.$('#checkbox-text').trigger("focusout"); 
		this.$('#terms-and-conditions').trigger("focusout");
		
		console.log(this.$('#configure-tab').find('.err'));
			
		if(this.$('#configure-tab').find('.err').length == 0){
			var data = {};
			data.title = this.$('#survey-title').val();
			var style = null;
			if( jQuery('#survey-style-sectioned').hasClass('active') ){
				data.style = 'Sectioned'; 
			} 
			else if( jQuery('#survey-style-single-pager').hasClass('active') ){ 
				data.style = 'Single Pager'; 
			}
			data.surveyId = this.activeSurvey.id;
			data.displaySurveySummary = this.$('#survey-ans-on-result-page').prop('checked');
			data.randomizeQuestions = this.$('#randomize-questions-toggle').prop('checked');
			data.useCategoriesToRandomize = this.$('#use-categories').prop('checked');
			data.allowChangeAnswers = this.$('#change-ans').prop('checked'); 
			data.autoAdvance = this.$('#auto-advance').prop('checked');
			data.enableTermsAndConditions = this.$('#enable-terms-and-conditions').prop('checked');
			data.termsAndConditions = this.$('#terms-and-conditions').val();
			data.includeCheckBox = this.$('#include-checkbox').prop('checked');
			data.checkboxText = this.$('#checkbox-text').val();
	
			data.startScreenTitle = this.$('#starting-title').val()
			data.startScreenDescription = this.$('#starting-description').val()
			data.startButtonText = this.$('#starting-button-text').val();
			data.endScreenTitle = this.$('#ending-headline').val()
			data.endScreenDescription = this.$('#ending-description').val();
			data.coverImage = this.documentsToUpload;

			console.log({data});

			this.model.clear({ silent: true });
			this.model.save({
				action: 'save_survey_details',
				data: data
			}).then(function(res){
				console.log({res});
				if(!res.hasError){
					self.getData();
				}
			});
		}
		else {
				var activeTab = self.$('.survey-header').find('.active').attr('id');
                
				self.$('#' + activeTab).addClass('icn-err-warning-show');
                
				self.$('#'+activeTab+'-body'+' .right > .tab-body').each(function() {
					var sideTabBody = jQuery(this).attr('id');

					if (jQuery('#'+sideTabBody).find('.err').length > 0) {
						var tabName = jQuery(this).attr('class').split(' ')[0];

						var sideTabId = jQuery('#' + sideTabBody).parents('.right').siblings('.left').find("[tab-name='" + tabName + "']").attr('id');
						
						jQuery('#'+ sideTabId).addClass('icn-err-warning-show');
						jQuery('#'+ sideTabId +'-body').addClass('icn-err-warning-show');

						jQuery('#'+ sideTabBody +'-body').addClass('icn-err-warning-show');
					}
				}); 
		}		
	}

	SurveysSVConfigureSurveyView.prototype.hideShowContainer = function(e) {
		var targetContainer = this.$('#' + e.currentTarget.id).attr('data-target');
		if(this.$('#' + e.currentTarget.id).prop('checked')){
			this.$('#' + targetContainer).show();
		}
		else{
			this.$('#' + targetContainer).hide();
		}
	}


	SurveysSVConfigureSurveyView.prototype.validateCheckBoxText = function(e) {
		console.log("Text box focus out triggered.");

		this.$('#checkbox-text-required-error').removeClass('err')
		if(this.$('#include-checkbox').prop('checked') && this.$('#checkbox-text').val() == ''){
			console.log("Entered if");
			this.$('#checkbox-text-required-error').addClass('err')
		}
	}
	
	SurveysSVConfigureSurveyView.prototype.validateTermsAndConditions = function(e) {
		this.$('#terms-and-conditions-required-error').removeClass('err');
		if(this.$('#enable-terms-and-conditions').prop('checked') && this.$('#terms-and-conditions').val() == ''){
			this.$('#terms-and-conditions-required-error').addClass('err');
		}    
	}

	SurveysSVConfigureSurveyView.prototype.addNewQuestion = function(e){
		this.activeQuestion = null;

		this.$(".question-type-selection-empty").hide();
		this.$(".questions-list").hide();
		this.$(".question-type-selection-choice").show();
	}

	SurveysSVConfigureSurveyView.prototype.addNewSection = function(e){
		var self = this;
		
		// this.$('#'+e.currentTarget.id).removeClass("active");
		var currentTabCount = $(".dynamic-tabs > div").length + 1;

		
		this.isLoading = true;
		this.model.clear({ silent: true });
		this.model.save({
			action: 'add_new_section',
			surveyId: this.activeSurvey.id,
			sequenceNumber: currentTabCount
		}).then(function(res){
			console.log({res});
			if(!res.hasError){
				self.activeSection = {
					id: res.sectionId,
					name: 'Section '+currentTabCount,
					sequence: currentTabCount,
					isActive: true,
					questions: [],
				}
				for (var i = 0; i < self.masterSectionArray.length; i++) {
					self.masterSectionArray[i].isActive = false;
				}
				self.masterSectionArray.push(self.activeSection);
				self.isLoading = false;
				self.render();

				self.$('#tabsBlock2').click();

				// if ($(".dynamic-tabs > div").length == 0) {
				//     tabNo = tabNo + 1;
				// }
				// else {
				//   tabNo = currentTabCount + 1;
				// }
			
				// console.log({tabNo});
				// console.log({currentTabCount});
		
				// var questionString = "Page <span>" + currentTabCount + "</span>";
			
				// var activeTabImage = self.$('#'+e.currentTarget.id).attr('active-image-src');
				// var inactiveTabImage = self.$('#'+e.currentTarget.id).attr('inactive-image-src');
				
				// self.$('#'+e.currentTarget.id).parents(".tab-body").find(".tabsBlock").removeClass("active");
			
				// self.$(".dynamic-tabs").append('<div id="side-tab' + tabNo + '" class="q-tabs tabsBlock active" tab-name="tabsBlock' + tabNo + '" q-tab="' + tabNo + '">\
				//   <img src="'+ activeTabImage + '" class="active-image" alt="" align="top" style="margin: 7px 20px 0 10px;">\
				//   <img src="'+ inactiveTabImage + '" class="inactive-image" alt="" align="top" style="margin: 7px 19px 0 10px;">\
				//   <div class="right-data-box">'+ questionString + '</div>\
				// </div>');
			
				self.$(".question-type-form").hide();
				self.$(".question-type-selection-choice").hide();
				self.$(".question-type-selection-empty").show();
				self.$(".questions-list").hide();
				self.$(".question-page-header").hide();
				self.$(".question-type-selection").show();
				self.$(".add-new-section").hide();
			}
		})
	}
		


	SurveysSVConfigureSurveyView.prototype.showSectionQuestions = function (e) {
		var index = this.$('#'+e.currentTarget.id).attr('data-index');
		
		if(this.$('#'+e.currentTarget.id).attr('data-target') == 'section'){
			this.activeSection = this.masterSectionArray[index];
			this.render();
			this.$('#tabsBlock2').click();
			this.$(".question-type-form").hide();
			this.$(".question-type-selection-choice").hide();
			this.$(".question-page-header").hide();
			this.$(".question-type-selection-empty").show();
			this.$(".question-type-selection").show();
			this.$(".questions-list").show();
		}
		
		this.$(e.currentTarget).parents(".tab-body").find(".tabsBlock").removeClass("active");
  	this.$(e.currentTarget).addClass("active");
	}

	
	SurveysSVConfigureSurveyView.prototype.editQuestion = function (e) {
		jQuery(".question-type-selection").hide();
		jQuery(".question-type-form").hide()
		var index = this.$('#'+e.currentTarget.id).attr('data-index');
		console.log(this.activeSection.questions);
		var dataType = this.activeSection.questions[index].type;
		this.activeQuestion = this.activeSection.questions[index];
		console.log('active question : ', this.activeQuestion);
		if(dataType == 1){
			console.log('mcq type');
			this.mcqChildView.activeQuestion = this.activeQuestion;
			this.mcqChildView.editMode = true;
			jQuery("#mcq-question-div").show();
			this.mcqChildView.render();
		} 
		if(dataType == 2){
			console.log('image type');
			this.imagechildView.activeQuestion = this.activeQuestion;
			this.imagechildView.editMode = true;
			jQuery("#image-question-div").show();
			this.imagechildView.render();
		} 
		if(dataType == 3){
			this.longTextChildView.activeQuestion = this.activeQuestion;
			this.longTextChildView.editMode = true;
			jQuery("#long-question-div").show();
			this.longTextChildView.render();
		} 
		if(dataType == 4){
			this.shortTextChildView.activeQuestion = this.activeQuestion;
			this.shortTextChildView.editMode = true;
			jQuery("#short-question-div").show();
			this.shortTextChildView.render();
		} 
		if(dataType == 5){
			this.yesNoChildview.activeQuestion = this.activeQuestion;
			this.yesNoChildview.editMode = true;
			jQuery("#yesno-question-div").show();
			this.yesNoChildview.render();
		} 
		if(dataType == 8){
			this.opinionScaleChildview.activeQuestion = this.activeQuestion;
			this.opinionScaleChildview.editMode = true;
			jQuery("#opinion-scale-question-div").show();
			this.opinionScaleChildview.render();
			this.opinionScaleChildview.updatePreview();
		} 
		if(dataType == 6){
			this.ratingScaleChildview.activeQuestion = this.activeQuestion;
			this.ratingScaleChildview.editMode = true;
			jQuery("#rating-scale-question-div").show();
			this.ratingScaleChildview.render();
			this.ratingScaleChildview.updatePreview();
		} 
		if(dataType == 7){
			this.starRatingChildview.activeQuestion = this.activeQuestion;
			this.starRatingChildview.editMode = true;
			jQuery("#star-rating-question-div").show();
			this.starRatingChildview.render();
			this.starRatingChildview.updatePreview();
		} 
	}
	
	SurveysSVConfigureSurveyView.prototype.moveQuestionOneLevelUp = function (e) {
		var self = this;
		var sequence = parseInt(this.$('#'+e.currentTarget.id).attr('data-sequence'));
		var questionId = parseInt(this.$('#'+e.currentTarget.id).attr('data-id'));
		var index = parseInt(this.$('#'+e.currentTarget.id).attr('data-index'));
		console.log({sequence});
		console.log({questionId});
		if(sequence != 1){
			var previousQuestionId = parseInt(self.activeSection.questions[index-1].id);
			console.log({previousQuestionId});
			this.model.save({
				action: 'change_question_sequence_up_or_down',
				sequence: sequence,
				questionId: questionId,
				previousQuestionId: previousQuestionId,
				shift: 'up'
			}).then(function(res){
				if(!res.hasError){
					var question = self.activeSection.questions[index];
					self.activeSection.questions[index].sequenceNumber = sequence-1;
					self.activeSection.questions[index-1].sequenceNumber = sequence;
					self.activeSection.questions.splice(index,1);
					self.activeSection.questions.splice((index-1),0,question);
					self.render();
					self.parent.$('#tabsBlock2').trigger('click');
					self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
	
					self.$(".question-type-form").hide();
					self.$(".question-type-selection-empty").hide();
					self.$(".question-type-selection-choice").hide();
					self.$(".question-type-selection").show();
					self.$(".questions-list").show();
				}
			})
		}
	}
	SurveysSVConfigureSurveyView.prototype.moveQuestionOneLevelDown = function (e) {
		var self = this;
		var sequence = parseInt(this.$('#'+e.currentTarget.id).attr('data-sequence'));
		var questionId = parseInt(this.$('#'+e.currentTarget.id).attr('data-id'));
		var index = parseInt(this.$('#'+e.currentTarget.id).attr('data-index'));
		console.log({sequence});
		console.log({questionId});
		if(sequence != 1){
			var nextQuestionId = parseInt(self.activeSection.questions[index+1].id);
			console.log({nextQuestionId});
			this.model.save({
				action: 'change_question_sequence_up_or_down',
				sequence: sequence,
				questionId: questionId,
				nextQuestionId: nextQuestionId,
				shift: 'down'
			}).then(function(res){
				if(!res.hasError){
					var question = self.activeSection.questions[index];
					self.activeSection.questions[index].sequenceNumber = sequence+1;
					self.activeSection.questions[index+1].sequenceNumber = sequence;
					self.activeSection.questions.splice(index,1);
					self.activeSection.questions.splice((index+1),0,question);
					self.render();
					self.parent.$('#tabsBlock2').trigger('click');
					self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
	
					self.$(".question-type-form").hide();
					self.$(".question-type-selection-empty").hide();
					self.$(".question-type-selection-choice").hide();
					self.$(".question-type-selection").show();
					self.$(".questions-list").show();
				}
			})
		}
	}
	
	SurveysSVConfigureSurveyView.prototype.searchinArray = function (nameKey, arr) {
		for (var i=0; i < arr.length; i++) {
			if (arr[i].id === nameKey) {
				return arr[i];
			}
		}
	}

	SurveysSVConfigureSurveyView.prototype.moveQuestionToOtherSection = function (e) {
		var self = this;
		console.log('inside moveQuestionToOtherSection');
		var index = this.$('#'+e.currentTarget.id).attr('data-index');
		var questionIndex = this.$('#'+e.currentTarget.id).parent().attr('data-index');
		console.log('questionIndex : ', questionIndex);
		
		
		// current question id
		var questionId = this.$('#'+e.currentTarget.id).attr('data-question-index');
		var questionSequenceNumber = this.$('#'+e.currentTarget.id).attr('data-question-sequence');
		console.log('question id : ', questionId);
		
		var question = this.searchinArray(questionId, this.activeSection.questions);
		console.log('question : ', question); 

		// id of section to move to
		console.log('section to move to : ', this.masterSectionArray[index]);

		// id of current section
		console.log('section to move from : ', this.activeSection);

		// total question count of section to move to
		console.log('total questions in new section : ', this.masterSectionArray[index].questions.length);

		this.model.save({
			action: 'change_question_section',
			questionId : questionId,
			questionSequenceNumber : questionSequenceNumber,
			sectionToMoveToId : this.masterSectionArray[index].id,
			sectionToMoveFromId : this.activeSection.id,
			newSequenceNumber : this.masterSectionArray[index].questions.length+1,
		}).then(function(res){
			if(!res.hasError){
				self.activeSection.questions.splice(questionIndex,1)
				self.masterSectionArray[index].questions.push(question)
				self.render();
				self.parent.$('#tabsBlock2').trigger('click');
				self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');

				self.$(".question-type-form").hide();
				self.$(".question-type-selection-empty").hide();
				self.$(".question-type-selection-choice").hide();
				self.$(".question-type-selection").show();
				self.$(".questions-list").show();
			}
		})
	}
	
	SurveysSVConfigureSurveyView.prototype.setSectionTitle = function () {
		var self = this;
		var title = this.$('#section-title').val();
		console.log({title});
		this.model.save({
			action: 'set_section_title',
			title: title,
			sectionId: this.activeSection.id
		}).then(function(res){
			if(!res.hassError){
				self.activeSection.name = title
				self.render();
				self.parent.$('#tabsBlock2').trigger('click');
				self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');

				self.$(".question-type-form").hide();
				self.$(".question-type-selection-empty").hide();
				self.$(".question-type-selection-choice").hide();
				self.$(".question-type-selection").show();
				self.$(".questions-list").show();
			}
		});

		this.$(".question-type-selection .title-box").hide();
		this.$(".question-type-selection .edit-title-box").show();
	}
	
	SurveysSVConfigureSurveyView.prototype.removeSectionTitle = function (e) {
		var self = this;
		this.model.save({
			action: 'remove_section_title',
			sectionId: this.activeSection.id
		}).then(function(res){
			if(!res.hassError){
				self.activeSection.name = '(No Title)';
				self.render();
				self.parent.$('#tabsBlock2').trigger('click');
				self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');

				self.$(".question-type-form").hide();
				self.$(".question-type-selection-empty").hide();
				self.$(".question-type-selection-choice").hide();
				self.$(".question-type-selection").show();
				self.$(".questions-list").show();
			}
		});    
		
		this.$(".title-box").hide();
		this.$(e.currentTarget).parents(".title-box").find(".survey-section-title").val("");
		this.$(".add-title").show();
	}


	SurveysSVConfigureSurveyView.prototype.changeQuestionSequence = function (e) {
		var self = this;
		var newSequenceNumber = this.$('#change-question-sequence-input').val();
		var oldSequenceNumber = this.$('#'+e.currentTarget.id).attr("data-sequence");
		var questionIdToMove = this.$('#'+e.currentTarget.id).attr("data-question-id");
		var index = parseInt(this.$('#'+e.currentTarget.id).attr('data-index'));
		var questionToMove = this.activeSection.questions[index];

		this.model.clear({silent: true});
		this.model.save({
			action: 'change_question_sequence',
			newSequenceNumber: newSequenceNumber,
			oldSequenceNumber: oldSequenceNumber,
			questionId: questionIdToMove,
			surveyId: this.activeSurveyId,
			sectionId: this.activeSection.id
		}).then(function(res){
			if(!res.hasError){
				var question = self.activeSection.questions[index];
				if(newSequenceNumber < oldSequenceNumber){
					for (var i = newSequenceNumber-1; i < oldSequenceNumber-1; i++) {
						self.activeSection.questions[i].sequenceNumber++;
					}
				}
				if(newSequenceNumber > oldSequenceNumber){
					for (var i = oldSequenceNumber; i <= newSequenceNumber-1; i++) {
						self.activeSection.questions[i].sequenceNumber--;
					}
				}
				self.masterSectionArray[self.masterSectionArray.indexOf(self.activeSection)].questions[index].sequenceNumber = newSequenceNumber;

				self.masterSectionArray[self.masterSectionArray.indexOf(self.activeSection)].questions.splice(index, 1);
				self.masterSectionArray[self.masterSectionArray.indexOf(self.activeSection)].questions.splice((newSequenceNumber-1), 0, questionToMove);

				self.render();
				self.parent.$('#tabsBlock2').trigger('click');
				self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');

				self.$(".question-type-form").hide();
				self.$(".question-type-selection-empty").hide();
				self.$(".question-type-selection-choice").hide();
				self.$(".question-type-selection").show();
				self.$(".questions-list").show();
			}

		});

	}

	SurveysSVConfigureSurveyView.prototype.changeSectionSequence = function () {
		var self = this;
		var oldSequenceNumber = this.activeSection.sequence;

		var sectionToMove = this.searchinArray(this.activeSection.id, self.masterSectionArray);
		console.log(this.masterSectionArray.indexOf(this.activeSection));

		this.model.save({
			action: 'change_section_sequence',
			newSequenceNumber: newSequenceNumber,
			oldSequenceNumber: oldSequenceNumber,
			sectionId: this.activeSection.id,
			surveyId: this.activeSurveyId
		}).then(function(res){
			console.log({res});
			if(!res.hasError){
				// self.activeSection.name = '(No Title)';
				if(newSequenceNumber < oldSequenceNumber){
					for (var i = newSequenceNumber-1; i < oldSequenceNumber-1; i++) {
						console.log('section : ', self.masterSectionArray[i]);
						self.masterSectionArray[i].sequence++;
						console.log('section after sequence change: ', self.masterSectionArray[i]);
					}
				}
				if(newSequenceNumber > oldSequenceNumber){
					for (var i = oldSequenceNumber; i <= newSequenceNumber-1; i++) {
						console.log('section : ', self.masterSectionArray[i]);
						self.masterSectionArray[i].sequence--;
						console.log('section after sequence change: ', self.masterSectionArray[i]);
					}
				}
				self.masterSectionArray[self.masterSectionArray.indexOf(self.activeSection)].sequence = newSequenceNumber;
				// self.activeSection.sequenceNumber = newSequenceNumber;
				self.masterSectionArray.splice(self.masterSectionArray.indexOf(self.activeSection), 1);
				self.masterSectionArray.splice((newSequenceNumber-1), 0, sectionToMove);
				
				// var sectionToMove = self.searchinArray(this.activeSection.id, self.masterSectionArray);
				self.render();
				self.parent.$('#tabsBlock2').trigger('click');
				self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');

				self.$(".question-type-form").hide();
				self.$(".question-type-selection-empty").hide();
				self.$(".question-type-selection-choice").hide();
				self.$(".question-type-selection").show();
				self.$(".questions-list").show();
			}
		});
	}
	
	SurveysSVConfigureSurveyView.prototype.validateChangeSectionSequence = function () {
		console.log('inside validateChangeSectionSequence');
		this.$('#sequence-number-max-value-error').removeClass('err');
		var sequenceNumber = this.$('#survey-section-sequence').val();
		if(sequenceNumber > this.masterSectionArray.length+1){
			this.$('#sequence-number-max-value-error').addClass('err');
		}
	}
	
	SurveysSVConfigureSurveyView.prototype.deleteSection = function () {
		console.log(this.activeSection.id); 
		this.model.clear({ silent: true });
		this.model.save({
			action: 'delete_section',
			id: this.activeSection.id
		}).then(function(res){
			console.log({res});
			if(!res.hasError){
				
			}
		})
	}
	
	SurveysSVConfigureSurveyView.prototype.sendAuthorInvite = function (e) {
		// var index = 
		
		console.log('inside sendAuthorInvite');
		
		this.model.clear({ silent: true });
		this.model.save({
			action: 'send_author_invite',
			authorId: 3012,
			surveyId: this.activeSurvey.id 
		}).then(function(res){
			console.log({res});
		})
	}
	SurveysSVConfigureSurveyView.prototype.deleteQuestion = function (e) {
		
		var index = this.$('#'+e.currentTarget.id).attr('data-index');
		console.log(this.activeSection.questions);
		console.log({index});
		var questionType = this.activeSection.questions[index].type;
		var questionId = this.activeSection.questions[index].id;
		var questionSequence = this.activeSection.questions[index].sequenceNumber;

		console.log({questionType});
		console.log({questionId});
		console.log({questionSequence});

		// this.model.save({
		//     action: 'delete_question',
		//     questionId: questionId,
		//     questionType: questionType,
		// }).then(function (res){
		//         console.log({res});
		//     if(!res.hasError){

		//     }
		// })
	}

	SurveysSVConfigureSurveyView.prototype.removeAuthorSetId = function (e) {
		this.authorIndexSelectedForRemoval = this.$(e.currentTarget).attr('data-index');
		this.authorIdSelectedForRemoval = this.activeSurvey.authors[this.authorIndexSelectedForRemoval].id;
	}

	SurveysSVConfigureSurveyView.prototype.removeAuthor = function (e) {
		var self = this;

		this.isLoading = true;
		this.model.clear({ silent: true });
		this.model.save({
			action: 'remove_author',
			authorId: this.authorIdSelectedForRemoval,
			surveyId: this.activeSurveyId
		}).then(function(res){
			if(!res.hasError){
				self.activeSurvey.authors.splice(self.authorIndexSelectedForRemoval,1);
			}
			self.isLoading = false;
			self.authorIndexSelectedForRemoval = null;
			self.authorIdSelectedForRemoval = null;
			self.render();
			self.$('.authors-tab').trigger('click');
		});
	}

	
	SurveysSVConfigureSurveyView.prototype.getEvents = function () {
		return {
			// 'click [data-action="m360-survey-new-survey"]': 'newSurvey',
			"click [data-action='m360-survy-save-survey-details']" : 'saveSurveyDetails',
			
			// 'change [data-action="m360-surv-hide-show-container"]': 'hideShowContainer',

			"click [data-action='m360-open-new-question']"          : "openNewQuestion",
			"click [data-action='m360-survy-new-que']"              : "addNewQuestion",
			"click [data-action='m360-survy-add-section']"          : "addNewSection",
			"click [data-action='m360-survy-show-section-ques']"    : "showSectionQuestions",
			"click [data-action='m360-survy-edit-question']"        : "editQuestion",
			"click [data-action='m360-survy-del-question']"         : "deleteQuestion",
			"click [data-action='m360-survy-mv-que-lvl-up']"        : "moveQuestionOneLevelUp",
			"click [data-action='m360-survy-mv-que-lvl-down']"      : "moveQuestionOneLevelDown",
			"click [data-action='m360-survy-chng-que-section']"     : "moveQuestionToOtherSection",
			"click [data-action='m360-survy-set-section-title']"    : "setSectionTitle",
			"click [data-action='m360-survy-set-remove-title']"     : "removeSectionTitle",
			"click [data-action='m360-survy-change-section-seq']"   : "changeSectionSequence",
			"click [data-action='m360-survy-change-question-seq']"  : "changeQuestionSequence",
			"click [data-action='m360-survy-del-section']"          : "deleteSection",
			"click [data-action='m360-survy-send-invite-author']"   : "sendAuthorInvite",
			"click [data-action='m360-survy-remove-author-set-id']" : "removeAuthorSetId",
			"click [data-action='m360-survy-remove-author']"  	    : "removeAuthor",


			'focusout [data-focusout="m360-surv-val-tandc"]': 'validateTermsAndConditions',
			'focusout [data-focusout="m360-surv-val-chkbx-txt"]': 'validateCheckBoxText',
			'focusout [data-focusout="m360-surv-val-chng-section-seq"]': 'validateChangeSectionSequence',
			"click [data-action='M360-survy-switch']" : "survySwitch",
			"change [data-change='M360-survey-manual-switch']" : "surveyConfigureManualSwitch",
			"click [data-action='M360-survey-image-box']" : "surveyImageBox",
			'focusout [data-focusout="M360-survey-title"]': 'surveyTitle',
			"click [data-action='M360-survey-image-uploade']" : "surveyImageUpload",
			"click [data-action='M360-survey-add-section-title']" : "surveyAddSectionTitle",
			"click [data-action='M360-survey-more-option']" : "surveyMoreOption",
			"click [data-action='M360-survey-option-set']" : "surveyOptionSet",
			"click [data-action='M360-survey-duplicate-option-select']" : "surveyDuplicateOptionSelect",
			"click [data-action='M360-survey-move-options']" : "surveyMoveOption",
			"click [data-action='M360-survey-before-upload']" : "surveyBeforeUpload",
			"change [data-change='M360-survey-starting-cover-image']" : "surveyStartingCoverImage",
			"click [data-action='M360-survey-remove-file']" : "surveyRemoveFile",
			'focusout [data-focusout="M360-survey-starting-title"]': 'surveyStartingTitle',
			'focusout [data-focusout="M360-survey-starting-description"]': 'surveyStartingDescription',
			'focusout [data-focusout="M360-survey-starting-button-text"]': 'surveyStartingButtonText',
			'focusout [data-focusout="M360-survey-ending-headline"]': 'surveyEndingHeadline',
			'focusout [data-focusout="M360-survey-ending-description"]': 'surveyEndingDescription',
			"click [data-action='M360-survey-copy-link']" : "surveyCopyLink",
			"click [data-action='M360-survey-copy-test-link']" : "surveyCopyTestLink",
			"click [data-action='M360-survey-copy-code']" : "surveyCopyCode",
			"click [data-action='M360-survey-view-respondents-list']" : "surveyViewRespondentsList",
			"click [data-action='M360-survey-view-respondent']" : "surveyViewRespondents",
			"click [data-action='M360-survey-tabsBlock']" : "surveyTabsBlock",
			'focus .starting-title-focus': 'surveyStartingTitleFocus',
			'focus .starting-description-focus': 'surveyStartingDescriptionFocus',
			'focus .starting-button-text-focus': 'surveyStartingButtonTextFocus',
			'focus .ending-headline-focus': 'surveyEndingHeadlineFocus',
			'focus .ending-description-focus': 'surveyEndingDescriptionFocus',
			"mouseenter [data-mouseenter='M360-survey-question-box']" : "surveyQuestionBox",
			"mouseleave [data-mouseleave='M360-survey-question-box-mouse-leave']" : "surveyQuestionBoxMouseLeave",
			"click [data-action='M360-survey-options']" : "surveyOption",
			"click [data-action='M360-survey-overlayBox']" : "surveyOverlayBox",
			"click [data-action='M360-survey-status-button']" : "surveyStatusButton",
			"click [data-action='M360-slxc-survey-overlayBox']" : "coreSurveyOverlayBox",
			"change [data-change='m360-slxc-configure-survey-section-sequence']" : "configureSurveySectionSequence",
			"change [data-change='m360-slxc-configure-questionn-sequence-num']" : "configureQuestionnSequenceNum"
		}
	}

	SurveysSVConfigureSurveyView.prototype.getContext = function () {
		return {
			surveyName : this.surveyName,
			isLoading: this.isLoading,
			masterSectionArray: this.masterSectionArray,
			activeSection: this.activeSection,
			survey: this.activeSurvey,
			sectionCount: this.masterSectionArray.length+1,
			icnBlank: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icn-blank-section.png')),
			icons: {
				optionSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icn-option-selected.png')),
				greenTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
				default: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-draft.png')),
				published: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-published.png')),
				inactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-inactive.png')),
				pageActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-page-active.png')),
				pageInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-page-active.png')),
				pageDragdrop: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-dragdrop.png')),
				icnMoveInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-move.png')),
				icnMoveActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-move-active.png')),
				icnMoveUp: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-move-up.png')),
				icnMoveDown: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-move-down.png')),
				icnCurrentSection: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-page-current.png')),
				icnOtherSection: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-page-other.png')),
				icnDuplicateInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-duplicate.png')),
				icnDuplicateActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-duplicate-active.png')),
				icnLogic: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-logic.png')),
				icnEdit: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-edit.png')),
				icnTrash: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-trash-md.png')),
				icnConfigure: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-configure.png')),
				icnCrossRed: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-cross-red.png')),
				defaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.jpg')),
				icnErrorWarning : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-error-warning.png')),
				icnSidebarSettingsActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-basic-settings-active.png')),
				icnSidebarSettingsInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-basic-settings-inactive.png')),
				icnStartEndActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-start-end-active.png')),
				icnStartEndInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-start-end-inactive.png')),
				icnInstructionActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-sidebar-instructors-active.png')),
				icnInstructionInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-sidebar-instructors-inactive.png')),
				icnTcActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-tc-active.png')),
				icnTcInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-tc-inactive.png')),
				icnStyleSection : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-style-sectioned.png')),
				icnStyleSinglePaper : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-style-singlepager.png')),
				icnImgUpload : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png')),
				icnRemove : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
				icnStartWizardDefault : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-start-wizard-default.png')),
				icnStartWizardTitle : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-start-wizard-title.png')),
				icnStartWizardDescription : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-start-wizard-description.png')),
				icnStartWizardButton : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-start-wizard-button.png')),
				icnStartWizardCover : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-start-wizard-cover.png')),
				icnEndWizardDefault : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-end-wizard-default.png')),
				icnEndWizardTitle : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-end-wizard-title.png')),
				icnEndWizardDescription : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-end-wizard-description.png')),
				icnPageActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-page-active.png')),
				icnAdd : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-add.png')),
				icnOverflow : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-overflow.png')),
				icnDuplicate : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-duplicate.png')),
				icnTrash : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
				icnQuestionEmptyState : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-questions-empty-state.png')),
				icnAddSm : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-add-sm.png')),
				icnViewLG : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-views-lg.png')),
				icnResponces : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-responses.png')),
				icnTimer : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-timer.png')),
				icnPreviousDate : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-previous-date.png')),
				icnTestQMCActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-active.png')),
				icnTestQICActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-active.png')),
				icnTestQLAActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-long-answer-active.png')),
        icnTestQSActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-short-answer-active.png')),
        icnTestQRActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-rating-active.png')),
        icnTestQScaleActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-scale-active.png')),
        icnTestQStarActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-star-active.png')),
        icnTestQYesNoActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-yes-no-active.png')),
        icnCorrectMd : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-correct-md.png')),
        icnAlert : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-alert.png')),
        icnFacebook : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-facebook-colored.png')),
        icnTwitter : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-twitter-colored.png')),
        icnLinkedIn : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-linkedin-colored.png')),
        icnEmail : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-email-colored.png')),
        icnAnalysisActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-analysis-active.png')),
        icnAnalysisInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-analysis-inactive.png')),
        icnQuestionActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-question-setting-active.png')),
        icnQuestionInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-question-setting-inactive.png')),
        icnGradeActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-graders-active.png')),
        icnGradeInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-graders-inactive.png')),
        icnCSVDownload : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-csv-download.png')),
        icnSortHover : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-hover.png')),
        icnSortDesc : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-desc.png')),
        icnSortAsc : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-asc.png')),
        icnView : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
        icnQuestionTypeMultiple : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-multiple-choice.png')),
        icnQuestionTypeMultipleInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-inactive.png')),
        icnQuestionTypeImageChoice : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-image-choice.png')),
        icnQuestionTypeImageChoiceInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-inactive.png')),

        icnQuestionTypeLong : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-long-text.png')),
        icnQuestionTypeLongInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-long-answer-inactive.png')),
        icnQuestionTypeShortInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-short-answer-inactive.png')),
        icnQuestionTypeShort : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-short-text.png')),

        icnQuestionTypeOpinion : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-opinion-scale.png')),
        icnQuestionTypeOpinionInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-scale-inactive.png')),
        icnQuestionTypeRatingScale : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-rating-scale.png')),
        icnQuestionTypeRatingInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-rating-inactive.png')),

        icnQuestionTypeStarRating : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-star-rating.png')),
        icnQuestionTypeStarRatingInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-star-inactive.png')),

        icnQuestionTypeYes : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-yes-no.png')),
        icnQuestionTypeYesInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-yes-no-inactive.png')),
        imgContriLanding : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
				icnRespondents : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-respondents.png')),
        icnIncorrectMd : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-incorrect-md.png')),
				icnEditMd : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-edit-md.png'))
			}
		}
	}

	SurveysSVConfigureSurveyView.prototype.surveyConfigureManualSwitch = function (e) {
		var targetContainer = this.$(e.currentTarget).attr('data-target');
		if(targetContainer){
			if(this.$('.manual-switch').is(':checked')){
				this.$("#"+targetContainer).show();
			}else{
				this.$("#"+targetContainer).hide();
			}
		}
	}
	// SurveysSVConfigureSurveyView.prototype.surveyManualSwitch = function (e) {
	// 	var targetContainer = $(this).attr('data-target');
	// 	if(targetContainer){
	// 		if(this.checked){
	// 			$("#"+targetContainer).show()
	// 		}
	// 		else{
	// 			$("#"+targetContainer).hide()
	// 		}
	// 	}
	// }
	SurveysSVConfigureSurveyView.prototype.surveyImageBox = function (e) {
		this.$(e.currentTarget).parents(".option-select").find(".image-box").removeClass("active");
		this.$(e.currentTarget).addClass("active");
	}
	SurveysSVConfigureSurveyView.prototype.surveyTitle = function (e) {
		if(this.$(e.currentTarget).val()=='') {  
    	this.$(e.currentTarget).siblings("p").addClass("err");
     	this.$(e.currentTarget).focus();
  	} else {
    	this.$(e.currentTarget).siblings("p").removeClass("err");
  	}
	}
	SurveysSVConfigureSurveyView.prototype.surveyImageUpload = function (e) {
		e.stopImmediatePropagation();
  		this.$(e.currentTarget).siblings('.change-image').trigger('click');
	}
	SurveysSVConfigureSurveyView.prototype.surveyAddSectionTitle = function (e) {
		this.$(e.currentTarget).hide(); 
  	this.$(".question-type-selection .title-box").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyMoreOption = function (e) {
		this.$(".more-options").show();
		this.$(".overlaybox").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyOptionSet = function (e) {
		this.$(".more-options").hide();
		this.$(".overlaybox").hide();
		this.hideHoverOptions();
	}
	SurveysSVConfigureSurveyView.prototype.surveyDuplicateOptionSelect = function (e) {
		var self = this;
		this.hideHoverOptions();
		self.$(".overlaybox").show();
		self.$(e.currentTarget).addClass("active-options");
		self.$(e.currentTarget).siblings(".duplicate-options").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyMoveOption = function (e) {
		this.hideHoverOptions();
		$(".overlaybox").show();
		$(e.currentTarget).addClass("active-options");
		$(".move-options .innerTabsBlock1").trigger("click");
		$(e.currentTarget).siblings(".move-options").show();
	}
	SurveysSVConfigureSurveyView.prototype.hideHoverOptions = function (e){
		this.$(".duplicate-options").hide();
		this.$(".move-options").hide();
		this.$(".duplicate-options-select").removeClass("active-options");
		this.$(".move-options-select").removeClass("active-options");
	}
	
	SurveysSVConfigureSurveyView.prototype.surveyBeforeUpload = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-start-wizard-cover").show();
		e.stopImmediatePropagation();
		this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
		document.body.onfocus = focusOut;
	}
	function focusOut() {
		var self = this;
		setTimeout(function(){
			self.$("#starting-cover-image").parents(".parent-box").find(".preview-images img").hide();
			self.$("#starting-cover-image").parents(".parent-box").find(".preview-images .img-start-wizard-default").show();
	
			if (self.$("#starting-cover-image").val() == "") {
				self.$("#starting-cover-image").parents(".upload-image").find('.f-validation').show();
			} else {
				self.$("#starting-cover-image").parents(".upload-image").find('.f-validation').hide();
			}
	
			document.body.onfocus = null;
		}, 700);
	}

	SurveysSVConfigureSurveyView.prototype.surveyStartingCoverImage = function (e) {
		this.readName(this,this.$(e.currentTarget));
	}
	SurveysSVConfigureSurveyView.prototype.readName = function(input,thisObj) {
		var imgFiles = thisObj[0].files;
		var size = imgFiles[0].size;
		var self = this;

		const k = 1024;
		const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	
		const i = Math.floor(Math.log(size) / Math.log(k));
		var image_size = (size / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];
	
		var twentyMb = 20 * k;
		var kbSize = (size / k);
		kbSize = ((Math.round(kbSize * 100) / 100));
	
		if (thisObj && thisObj[0].files && kbSize <= twentyMb) {
			var image_src = window.URL.createObjectURL(new Blob(thisObj[0].files, { type: `image/jpeg` }));
			console.log(thisObj);
			thisObj.parents(".upload-image").find(".after-upload .prev-image").css("background-image", "url(" + image_src + ")");
			thisObj.parents(".upload-image").find(".after-upload .f-name").html(imgFiles[0].name);
			thisObj.parents(".upload-image").find(".after-upload .f-size").html(image_size);
			thisObj.parents(".upload-image").find(".before-upload").hide();
			thisObj.parents(".upload-image").find(".after-upload").show();

			var reader = new FileReader();
            reader.onloadend = function() {
				console.log(imgFiles[0]);
				var i = parseInt(Math.floor(Math.log(imgFiles[0].size) / Math.log(1024)));
				var size =  Math.round(imgFiles[0].size / Math.pow(1024, i), 2);
				var name = imgFiles[0].name;
                
				self.documentsToUpload = {
					imgFile: (reader.result).split('base64,')[1],
					name: name,
					size: size
				};

				console.log(self.documentsToUpload);
              
            }
            reader.readAsDataURL(imgFiles[0]);
		}
	}

	SurveysSVConfigureSurveyView.prototype.surveyRemoveFile = function (e) {
		this.$(e.currentTarget).parents(".upload-image").find('input[type="file"]').val('');
		this.$(e.currentTarget).parents(".upload-image").find(".after-upload").hide();
		this.$(e.currentTarget).parents(".upload-image").find(".before-upload").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyStartingTitle = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-start-wizard-default").show();
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	}
	SurveysSVConfigureSurveyView.prototype.surveyStartingDescription = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-start-wizard-default").show();
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	}
	SurveysSVConfigureSurveyView.prototype.surveyStartingButtonText = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-start-wizard-default").show();
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	}
	SurveysSVConfigureSurveyView.prototype.surveyEndingHeadline = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-end-wizard-default").show();
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	}
	SurveysSVConfigureSurveyView.prototype.surveyEndingDescription = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-end-wizard-default").show();
		if (this.$(e.currentTarget).val() == '') {
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	}
	SurveysSVConfigureSurveyView.prototype.surveyCopyLink = function (e) {
		/* Get the text field */
		var copyText = document.getElementById("link-url");

		/* Select the text field */
		copyText.select();

		/* Copy the text inside the text field */
		document.execCommand("copy");
		console.log(copyText.value);
	}
	SurveysSVConfigureSurveyView.prototype.surveyCopyTestLink = function (e) {
		/* Get the text field */
		var copyText = document.getElementById("test-link-url");

		/* Select the text field */
		copyText.select();
	
		/* Copy the text inside the text field */
		document.execCommand("copy");
		console.log(copyText.value);
	}
	SurveysSVConfigureSurveyView.prototype.surveyCopyCode = function (e) {
		/* Get the text field */
		var copyText = document.getElementById("embed-code");

		/* Select the text field */
		copyText.select();
	
		/* Copy the text inside the text field */
		document.execCommand("copy");
		console.log(copyText.value);
	}
	SurveysSVConfigureSurveyView.prototype.surveyViewRespondentsList = function (e) {
		this.$(".individual-respondent").hide();
		this.$(".respondents-list").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyViewRespondents = function (e) {
		this.$(".individual-respondent").show();
  	this.$(".respondents-list").hide();
	}
	SurveysSVConfigureSurveyView.prototype.surveyStartingTitleFocus = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-start-wizard-title").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyStartingDescriptionFocus = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
  	this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-start-wizard-description").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyStartingButtonTextFocus = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
  	this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-start-wizard-button").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyEndingHeadlineFocus = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
  	this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-end-wizard-title").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyEndingDescriptionFocus = function (e) {
		this.$(e.currentTarget).parents(".parent-box").find(".preview-images img").hide();
  	this.$(e.currentTarget).parents(".parent-box").find(".preview-images .img-end-wizard-description").show();
	}
	SurveysSVConfigureSurveyView.prototype.surveyQuestionBox = function (e) {
		this.$(e.currentTarget).find('.hover-options').addClass('show-hover-options');
	}
	SurveysSVConfigureSurveyView.prototype.surveyQuestionBoxMouseLeave = function (e) {
		if(this.$(e.currentTarget).find('.active-options').length == 0){
			this.hideHoverOptions();
			this.$(e.currentTarget).find('.hover-options').removeClass('show-hover-options');
		}
	}
	SurveysSVConfigureSurveyView.prototype.survySwitch = function (e) {
		
		//t-and-c-container
		if(this.$(e.currentTarget).find('input[type="checkbox"]').is(':checked')) {
			console.log("Checked");
			this.$("#t-and-c-container").show();
		} else {
			console.log("Unchecked");
			this.$("#t-and-c-container").hide();
		}
	}

	SurveysSVConfigureSurveyView.prototype.surveyOption = function (e) {
		var self = this;
		setTimeout(function () {
			self.closeOptionSet();
		}, 100);
	}

	SurveysSVConfigureSurveyView.prototype.surveyOverlayBox = function (e) {
		this.closeOptionSet();
	}

	SurveysSVConfigureSurveyView.prototype.closeOptionSet = function() {
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-down").show();
	}

	SurveysSVConfigureSurveyView.prototype.surveyStatusButton = function(e) {
		this.$(e.currentTarget).siblings(".options-set").show();
		this.$(".overlaybox").show();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-up").show();
	}

	SurveysSVConfigureSurveyView.prototype.surveyTabsBlock = function(e){
		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		if(!this.$(e.currentTarget).hasClass('q-tabs')){
			if(this.$(e.currentTarget).parents("div").hasClass('survey-header')){
				this.$(".survey-header .tabsBlock").removeClass("active");
				this.$(".tabsBlock div:not([class])").remove();
				this.$(e.currentTarget).append("<div></div>");
				this.$(".survey-body > .tab-body").hide();
				this.$(".survey-body > ." + clickedtab).show();
				
				if(!this.$(e.currentTarget).is("#tabsBlock4")){
					this.$(".survey-body .tabsBlock").removeClass("active");
					this.$(".survey-body .tab-header #side-tab1").addClass("active");
					this.$(".survey-body .right .tab-body").hide();
					this.$(".survey-body .right .tabsBlock1").show();
				}
		
				if(this.$(e.currentTarget).is("#tabsBlock2") ){
					this.$(".design-tab .tabsBlock").removeClass("active");
					
					this.$(".tabsBlock99999").show();
				}
			}
			else if(this.$(e.currentTarget).parents("div").hasClass('inner-tab-box')) {
				this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock").removeClass("active");
				this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock div:not([class])").remove();
				this.$(e.currentTarget).append("<div></div>");
				this.$(e.currentTarget).parents(".inner-tab-box").find(".tab-body").hide();
				this.$(e.currentTarget).parents(".inner-tab-box").find("." + clickedtab).show();
			}
			else{
				if (!this.$(e.currentTarget).hasClass('add-page')) {
					this.$(".survey-body .tabsBlock").removeClass("active");
				}
				this.$(".survey-body .right .tab-body").hide();
				this.$(e.currentTarget).parents(".tab-body").find("." + clickedtab).show();

				if(this.$(".survey-body .right .tab-body").children("div").hasClass('inner-tab-box')) {
					this.$(".survey-body .tab-header .innerTabsBlock1").addClass("active");
					this.$(".survey-body .tab-header .innerTabsBlock1").append("<div></div>");
					this.$(".survey-body .tab-header .innerTabsBlock1-body").show();
				}
			}
			
			if(this.$(e.currentTarget).hasClass('startEndScreen')){
				this.$(".startEndScreen").find('.innerTabsBlock1').trigger('click');
			}
			
			this.$(e.currentTarget).addClass("active");
		}
	}

	SurveysSVConfigureSurveyView.prototype.coreSurveyOverlayBox = function(e){
		this.$(".more-options").hide();
		this.$(".overlaybox").hide();
		this.hideHoverOptions();
		this.$('.hover-options').removeClass('show-hover-options');
	}

	SurveysSVConfigureSurveyView.prototype.hideHoverOptions = function (e){
		this.$(".duplicate-options").hide();
		this.$(".move-options").hide();
		this.$(".duplicate-options-select").removeClass("active-options");
		this.$(".move-options-select").removeClass("active-options");
	}

	SurveysSVConfigureSurveyView.prototype.configureSurveySectionSequence = function(value){
		return /^\d*$/.test(value);
	}
	SurveysSVConfigureSurveyView.prototype.configureQuestionnSequenceNum = function(value){
		return /^\d*$/.test(value);
	}

	return SurveysSVConfigureSurveyView;
});

define('Saralux.Core.SurveysSV.CreateSurvey.View',	[
	'saralux_core_surveyssv_create.tpl',
	
	'Saralux.Core.SurveysSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_surveyssv_create_tpl,

	SurveysSVSS2Model,
	
	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function SurveysSVCreateSurveyView(options) {
		console.log('inside create survey view');
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
		this.parent = options.parent;

		this.model = new SurveysSVSS2Model();

		this.container = options.container;

        this.template = saralux_core_surveyssv_create_tpl;

        this.selectedTemplateId = null;
        this.activeSurveyId = null;

        this.isLoading = true;
        this.model.clear({ silent: true });
        this.model.save({
            action: 'get_survey_templates'
        }).then(function(res){
            console.log({res});
            if(!res.hasError){
                self.surveyTemplates = res.data;
                self.isLoading = false;
                self.render();
            }
        })
    }

    SurveysSVCreateSurveyView.prototype = Object.create(SCView.prototype);
    SurveysSVCreateSurveyView.prototype.constructor = SurveysSVCreateSurveyView;


    SurveysSVCreateSurveyView.prototype.createSurveyWithTemplate = function(e) {
        var self = this;
        console.log('inside viewConfigureSurvey');
        var name = this.$('#survey-title').val();
        this.model.save({
            action: 'save_new_survey',
            name: name
        }).then(function(res){
            console.log({res});
            if(!res.hasError){
                self.parent.activeView = "SurveysSV.ConfigureSurvey";
                self.parent.surveyName = name;
                self.parent.selectedTemplate = self.surveyTemplates[self.selectedTemplateId];
                self.activeSurveyId = res.id;
                console.log('activeSurveyId : ', self.activeSurveyId);
                // this.template = saralux_core_surveyssv_configure_tpl;
                jQuery(window).scrollTop(0);
                self.parent.render();
            }
        });
    } 
    // SurveysSVCreateSurveyView.prototype.createSurvey = function(e) {
    //     var self = this;
    //     console.log('inside viewConfigureSurvey');
    //     var name = this.$('#survey-title').val();
    //     this.model.save({
    //         action: 'save_new_survey',
    //         name: name
    //     }).then(function(res){
    //         console.log({res});
    //         if(!res.hasError){
    //             self.parent.activeView = "SurveysSV.ConfigureSurvey";
    //             self.parent.surveyName = name;
    //             self.parent.activeSurveyId = res.id
    //             // this.template = saralux_core_surveyssv_configure_tpl;
    //             jQuery(window).scrollTop(0);
    //             self.parent.render();
    //         }
    //     });

        
	// 	this.template = saralux_core_surveyssv_create_tpl;

	// 	this.selectedTemplateId = null;

	// 	this.isLoading = true;
	// 	this.model.clear({ silent: true });
	// 	this.model.save({
	// 		action: 'get_survey_templates'
	// 	}).then(function(res){
	// 		console.log({res});
	// 		if(!res.hasError){
	// 			self.surveyTemplates = res.data;
	// 			self.isLoading = false;
	// 			self.render()
	// 		}
	// 	})
	// }
	SurveysSVCreateSurveyView.prototype = Object.create(SCView.prototype);
	SurveysSVCreateSurveyView.prototype.constructor = SurveysSVCreateSurveyView;
	// SurveysSVCreateSurveyView.prototype.createSurveyWithTemplate = function(e) {
	// 	var self = this;
	// 	console.log('inside viewConfigureSurvey');
	// 	var name = this.$('#survey-title').val();
	// 	this.model.save({
	// 		action: 'save_new_survey',
	// 		name: name
	// 	}).then(function(res){
	// 		console.log({res});
	// 		if(!res.hasError){
	// 			self.parent.activeView = "SurveysSV.ConfigureSurvey";
	// 			self.parent.surveyName = name;
	// 			self.parent.selectedTemplate = self.surveyTemplates[self.selectedTemplateId];
	// 			self.activeSurveyId = res.id;
    //             // this.template = saralux_core_surveyssv_configure_tpl;
	// 			jQuery(window).scrollTop(0);
	// 			self.parent.render();
	// 		}
	// 	});
	// }
	SurveysSVCreateSurveyView.prototype.createSurvey = function(e) {
		var self = this;
		console.log('inside viewConfigureSurvey');
		var name = this.$('#survey-title').val();
		this.model.save({
			action: 'save_new_survey',
			name: name
		}).then(function(res){
			console.log({res});
			if(!res.hasError){
				self.parent.activeView = "SurveysSV.ConfigureSurvey";
				self.parent.surveyName = name;
					self.parent.activeSurveyId = res.id;
					console.log('activeSurveyId in create: ', self.parent.activeSurveyId);
				// this.template = saralux_core_surveyssv_configure_tpl;
				self.parent.render();
				jQuery(window).scrollTop(0);
			}
		});
	}
	SurveysSVCreateSurveyView.prototype.selectSurveyTemplate = function(e){
		this.$(".templates-1 .template-list").hide();
		this.$(".templates-1 .selected-template").show();
		this.selectedTemplateId = this.$("#" + e.currentTarget.id).attr('data-index');
		this.$("#selected-template-name").text(this.surveyTemplates[this.selectedTemplateId].name);
		this.$("#selected-template-summary").text(this.surveyTemplates[this.selectedTemplateId].summary);
		this.$("#selected-template-section-count").text(this.surveyTemplates[this.selectedTemplateId].sections);
		this.$("#selected-template-question-count").text(this.surveyTemplates[this.selectedTemplateId].questions);
	}
	SurveysSVCreateSurveyView.prototype.surveyCreateTab = function(e){
		this.$(".tabs").removeClass("active");
		this.$(e.currentTarget).addClass("active");
		this.$(".tab-body").hide();
		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		this.$("." + clickedtab).show();
	}
	SurveysSVCreateSurveyView.prototype.surveyChangeTemplate = function(e){
		if(this.$(e.currentTarget).parents("div").hasClass('templates-1')){
			this.$(".templates-1 .selected-template").hide();
			this.$(".templates-1 .template-list").show();
		}else{
			this.$(".templates-2 .selected-template").hide();
			this.$(".templates-2 .existing-survey-list").show();
		}
	}
	SurveysSVCreateSurveyView.prototype.surveyTitle = function(e){
		if(this.$(e.currentTarget).val()=='') {
			this.$(e.currentTarget).siblings("p").addClass("err");
			// this.$(e.currentTarget).focus();
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	}
	SurveysSVCreateSurveyView.prototype.surveyButton = function(e){
		this.$(e.currentTarget).siblings(".options-set").show();
		this.$(".overlaybox").show();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-up").show();
	}
	SurveysSVCreateSurveyView.prototype.surveyOption = function(e){
		setTimeout(function () {
			closeOptionSet();
		}, 100);
	}
	SurveysSVCreateSurveyView.prototype.surveyOverlayBox = function(e){
		closeOptionSet();
	}
	SurveysSVCreateSurveyView.prototype.closeOptionSet = function(e){
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-down").show();
	}
	SurveysSVCreateSurveyView.prototype.getEvents = function () {
		return {
			'click [data-action="m360-surv-create-new-survey"]': 'createSurvey',
			'click [data-action="m360-surv-new-survey-with-tmplt"]': 'createSurveyWithTemplate',
			'click [data-action="to-survey-list"]': 'viewSurveyList',
			'click [data-action="to-create-survey"]': 'viewcreateSurvey',
			'click [data-action="m360-surv-select-template"]': 'selectSurveyTemplate',
			'click [data-action="M360-sc-tabs"]': 'surveyCreateTab',
			'click [data-action="M360-sc-change-template"]': 'surveyChangeTemplate',
			'focusout [data-focusout="M360-sc-survey-title"]': 'surveyTitle',
			'click [data-action="M360-sc-button"]': 'surveyButton',
			'click [data-action="M360-sc-option"]': 'surveyOption',
			'click [data-action="M360-sc-overlayBox"]': 'surveyOverlayBox',
		}
	}

	SurveysSVCreateSurveyView.prototype.getContext = function () {
		return {
			templates: this.surveyTemplates,
			isLoading: this.isLoading,			
			imgContriLanding: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
			icons: {
        templateIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-template.png')),
        select: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-plus-blue-sm.png')),
        greenTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
        default: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-draft.png')),
        published: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-published.png')),
        inactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-inactive.png')),
				icnTemplateActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-template-active.png')),
				icnTemplateInActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-template-inactive.png')),
				icnDuplicate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-duplicate-active.png')),
				icnDuplicateInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-duplicate-inactive.png')),
				icnSearchActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-scratch-active.png')),
				icnSearchInActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-scratch-inactive.png')),
				icnCross: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-cross.png')),
				icnPages: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-pages.png')),
				icnQuestions: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-questions.png')),
				icnSortHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-hover.png')),
				icnSortDesc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-desc.png')),
				icnSortAsc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-asc.png')),
				icnDateCreated: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-date-created.png')),
				icnDateModified: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-date-modified.png')),
      }
		}
	}

	return SurveysSVCreateSurveyView;
});

define('Saralux.Core.SurveysSV.List.View',	[
	'saralux_core_surveyssv_list.tpl',
		
	'Saralux.Core.SurveysSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_surveyssv_list_tpl,
	
	SurveysSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function SurveysSVListView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

		this.model = new SurveysSVSS2Model();

		this.template = saralux_core_surveyssv_list_tpl;

		this.surveys = [];
		this.parent = options.parent;

		this.defaultPagination = {
			index	 	  : 0,
			pageSize 	  : 10,
			count    	  : 0,
			from     	  : 0,
			to            : 0,
			totalPages 	  : 0,
			displayWindow : 1,
			pages		  : []
		}
		this.pagination = Utils.deepCopy(this.defaultPagination);

		this.getAllSurveys();
		
	}

	SurveysSVListView.prototype = Object.create(SCView.prototype);
	SurveysSVListView.prototype.constructor = SurveysSVListView;
	
	SurveysSVListView.prototype.getAllSurveys = function(){
		var self = this;

		var data = {
			action: "get_all_surveys",
			pagination: this.pagination
		};

		if(this.$('#survey-search-text').val() != '') {
			data.searchString = this.$('#survey-search-text').val();
		}
		
		this.isLoading = true;
		this.model.clear({ silent: true });
		this.model.save(data).then(function(res){
			console.log({res});
			if(!res.hasError){
				self.surveys = res.data.surveys;

				self.pagination.count = res.data.count;
				self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
				self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
				self.pagination.to = (self.pagination.from + self.surveys.length) - 1;

				self.generatePages();
				self.isLoading = false;
				self.render();
				for (var i = 0; i < self.surveys.length; i++) {
					self.setStatus(self.surveys[i].status, i)
				}
			}
		})
	}

	SurveysSVListView.prototype.getAllSurveysQuery = function(data) {
		
	
	}
	
	SurveysSVListView.prototype.generatePages = function() {
		var self = this;

		self.pagination.pages = [];
		var index = self.pagination.index;
		var totalPages = self.pagination.totalPages;
			
		for(var i = 0; i < totalPages; i++) {
			self.pagination.pages.push({
				index: i,
				number: (i+1),
				isActive: (index == i)?true:false
			});
		}
	}
	
	SurveysSVListView.prototype.setStatus = function(status,i){
        jQuery('#survey-status-draft-'+i).removeClass('selected')
        jQuery('#survey-status-published-'+i).removeClass('selected')
        jQuery('#survey-status-inactive-'+i).removeClass('selected')
        
        jQuery('#selected-survey-status-draft-'+i).hide();
        jQuery('#selected-survey-status-published-'+i).hide();
        jQuery('#selected-survey-status-inactive-'+i).hide();
        if(status == "Draft"){
            jQuery('#selected-survey-status-draft-'+i).show();
            jQuery('#survey-status-draft-'+i).addClass('selected')
        }
        if(status == "Published"){
            jQuery('#selected-survey-status-published-'+i).show();
            jQuery('#survey-status-published-'+i).addClass('selected')
        }
        if(status == "Inactive"){
            jQuery('#selected-survey-status-inactive-'+i).show();
            jQuery('#survey-status-inactive-'+i).addClass('selected')
        }
        if(status == "Approved"){
            jQuery('#selected-survey-status-approved-'+i).show();
            jQuery('#survey-status-approved-'+i).addClass('selected')
        }
    }

	SurveysSVListView.prototype.editSurvey = function(e){
		var index = this.$('#'+e.currentTarget.id).attr('data-index');
		this.parent.activeSurveyId = this.surveys[index].id; 
		this.parent.activeView = "SurveysSV.ConfigureSurvey";
		this.parent.render();
	}

	SurveysSVListView.prototype.goToPage = function(e) {
		this.pagination.index = this.$('#' + e.currentTarget.id).attr('data-index');
		
		this.getAllSurveys();
	}
	
	SurveysSVListView.prototype.goToPrev = function(e) {
		var previousPage = this.$('.active-page').prev().attr('data-index');
		if(previousPage) {
			this.$('.active-page').prev().trigger('click');
		}
	}

	SurveysSVListView.prototype.goToNext = function(e) {
		var nextPage = this.$('.active-page').next().attr('data-index');
		if(nextPage) {
			this.$('.active-page').next().trigger('click');
		}
	}

	SurveysSVListView.prototype.surveyStatusBox = function(e) {
		this.$(e.currentTarget).siblings(".options-set").show();
		this.$(".overlaybox").show();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-up").show();
	}

	SurveysSVListView.prototype.surveyOption = function(e) {
		var self = this;
		setTimeout(function () {
			self.closeOptionSet();
		}, 100);
	}

	SurveysSVListView.prototype.surveyOverlayBox = function(e) {
		closeOptionSet();
	}

	SurveysSVListView.prototype.closeOptionSet = function(e){
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-down").show();
	}

	SurveysSVListView.prototype.getEvents = function () {
		return {
			"click [data-action='m360-survy-edit-survey']" 	   : "editSurvey",
			"click [data-action='m360-slxc-survey-goto-prev']" : "goToPrev",
			"click [data-action='m360-slxc-survey-goto-next']" : "goToNext",
			"click [data-action='m360-slxc-survey-goto-page']" : "goToPage",
			"click [data-action='m360-slxc-survey-search']"    : "getAllSurveys",
			"click [data-action='M360-survey-status-box']"    : "surveyStatusBox",
			"click [data-action='M360-survey-option']"    : "surveyOption",
			"click [data-action='M360-survey-overlayBox']"    : "surveyOverlayBox",
		}
	}

	SurveysSVListView.prototype.getContext = function () {
		return {
			isLoading: this.isLoading,
			surveys: this.surveys,
			pagination: this.pagination,

			/*
			chapterDetails: this.chapterDetails,
			
			defaultProfileImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),
			*/

			defaultSurveyThumbnail: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-test-thumbnail.png')),

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
				greenTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
				default: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-draft.png')),
				published: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-published.png')),
				inactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-inactive.png')),
				icnSortHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-hover.png')),
				icnSortDesc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-desc.png')),
				icnSortAsc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-asc.png')),
			},
		}
	}

	return SurveysSVListView;
});

define('Saralux.Core.SurveysSV.Question.ImageChoice.View', [
	'saralux_core_surveyssv_image_choice_question.tpl',


	'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_image_choice_question_tpl,

	SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ImageChoiceQuestionView(options){
			console.log('inside ImageChoiceQuestionView');
			SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
			this.template = saralux_core_surveyssv_image_choice_question_tpl;
		
		this.model = new SurveysSVSS2Model();

		this.parent = options.parent;
			// this.activeQuestion = options.activeQuestion;
			this.nextSequenceNumber = options.nextSequenceNumber;
			this.activeSurveyId = options.activeSurveyId;
    }

    ImageChoiceQuestionView.prototype = Object.create(SCView.prototype);
    ImageChoiceQuestionView.prototype.constructor = ImageChoiceQuestionView;
    
    ImageChoiceQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }
    
    ImageChoiceQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }
    
    ImageChoiceQuestionView.prototype.categoryValidation = function () {
        this.$('#category-required-err').removeClass('err')
        if(this.$('#question-description').val() == "-1"){
            this.$('#category-required-err').addClass('err');
        }
    }
    
    ImageChoiceQuestionView.prototype.pointsValidation = function () {
        this.$('#points-required-error').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#points-required-error').addClass('err');
        }
    }

    ImageChoiceQuestionView.prototype.addImageChoiceQuestion = function(){
        var self = this;
        var referenceImage = null;
        
        var options = [];
        var length = this.$('div.option-box-image-choice-question').siblings().length;
        console.log('length ' , length);
        var counter = 0;
        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            action: "save_image_question",
            type: 2,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: this.$('#question-sequence-number').val(),
            nextSequenceNumber: this.nextSequenceNumber
        };
         
        this.$('div.option-box-image-choice-question').siblings()
        .each(function(){
            var sectionId = parseInt(jQuery(this).find("select[name='select-section']").val());
            var optionTitle = self.$(this).find("input[name='option-title']").val(); 
            // var correctOption = self.$(this).find("input[name='correct-option']").prop("checked");
            var optionCharacter = self.$(this).find("input[name='option-character']").val(); 
            var referenceImageAnswer = self.$(this).find('#change-image')[0].files[0]
            console.log('referenceImageAnswer : ', referenceImageAnswer);
            var reader = new FileReader();
            reader.onloadend = function() {
    			counter++;
                var image = (reader.result).split('base64,')[1]
                var optionsData = {
                    optionTitle: optionTitle,
                    optionCharacter: optionCharacter,
                    // correctOption: correctOption,
                    image: image,
                    optionLogicSection: sectionId
                }
                console.log('image option data : ', optionsData);
                options.push(optionsData)
                if(counter == length){
                    questionData.options = options;
                    console.log({questionData});
                    self.model.clear({ silent: true }); 
                    self.isLoading = true;
                    self.model.save({
                        action: 'add_question_image_choice',
                        questionData: questionData
                    }).then(function (res) {
                        if(!res.hasError){

                            for (var i = 0; i < questionData.options.length; i++) {
                                questionData.options[i].optionImage = res.imagesArr[i];                                
                            }

                            self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.push(questionData);
            
                            self.parent.render();
                            
                            if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                                self.parent.$('.questions-list').addClass('has-questions');
                            }
                            // if(self.activeQuestion == null){
                            //     self.saveQuestion(res.question);
                            // }
                            // else{
                            //     self.questions[self.activeQuestion.questionIndex] = res.question;
                            //     self.activeQuestion = questionData;
                            // }
                            self.isLoading = false;
                            self.render();
                            if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                                self.parent.$(".question-type-form").hide();
                                self.parent.$(".question-type-selection-empty").hide();
                                self.parent.$(".question-type-selection-choice").hide();
                                self.parent.$(".question-type-selection").show();
                                self.parent.$(".questions-list").show();
                            }
                        
                            self.parent.$('#tabsBlock2').trigger('click');
                            self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click'); 
                        }
                        self.isLoading = false;
                        console.log(res);
                    });                                     
                }
            }
            reader.readAsDataURL(referenceImageAnswer);
        });
    }

    ImageChoiceQuestionView.prototype.editImageChoiceQuestion = function(e) {
        var self = this;
        var length = jQuery('div.option-box-image-choice-question').siblings().length;
        var referenceImage = null;
        var counter = 0;

        var questionData = {
            action: "edit_image_question",
            testId: self.currentTestId,
            id: this.activeQuestion.id,
            type: 2,
            title: jQuery('#image-choice-question-title').val(),
            prompt: jQuery('#image-choice-question-ans-prompt').val(),
            points: jQuery('#image-choice-question-points').val(),
            sequenceNumber: jQuery('#image-choice-sequence-number').val(),
            addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
            referenceImage: null,
            embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
            videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
        };

        if(jQuery('#image-choice-reference-image').prop("checked")){
            var referenceImage = jQuery('#image-question-change-image')[0].files[0];
            if(referenceImage){
                var reader = new FileReader();
                reader.onloadend = function() {
                    var image = (reader.result).split('base64,')[1];
                    questionData.referenceImage = image;
                }
                reader.readAsDataURL(referenceImage);
            }
        }
        var options = [];
        jQuery('div.option-box-image-choice-question').siblings()
        .each(function(){
            var referenceImageAnswer = jQuery(this).find('#image-choice-option-image')[0].files[0]
            console.log('reference answer img : ', referenceImageAnswer);
            if(referenceImageAnswer){
                var reader = new FileReader();
                reader.onloadend = function() {
                    counter++;
                    var image = (reader.result).split('base64,')[1]
                    var index = jQuery(this).find("input[name='answer-index']").val();
                    var optionsData = {
                        id: self.activeQuestion.answers[index].id,
                        optionTitle: jQuery(this).find("input[name='image-choice-option-title']").val(),
                        optionCharacter: jQuery(this).find("input[name='image-choice-option-character']").val(),
                        correctOption: jQuery(this).find("input[name='image-choice-correct-option']").prop("checked"),
                        image: image
                    }
                    options.push(optionsData)
                    if(counter == length){
                        questionData.options = options;
                        console.log(questionData);
                        self.model.save(questionData).then(function (res) {
                            if(!res.hasError){
                                if(self.activeQuestion == null){
                                    self.saveQuestion(res.question);
                                }
                                else{
                                    self.questions[self.activeQuestion.questionIndex] = res.question;
                                    self.activeQuestion = questionData;
                                }
                                self.isLoading = false;
                                self.render();
                                jQuery('#tabsBlock2').trigger('click');   
                                jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                                // self.currentTestId = res.testId
                            }
                            console.log(res);
                        });
                                         
                    }
                }
                reader.readAsDataURL(referenceImageAnswer);
            }
            else{
                var index = jQuery(this).find("input[name='answer-index']").val();
                counter++;
                var optionsData = {
                    id: self.activeQuestion.answers[index].id,
                    optionTitle: jQuery(this).find("input[name='image-choice-option-title']").val(),
                    optionCharacter: jQuery(this).find("input[name='image-choice-option-character']").val(),
                    correctOption: jQuery(this).find("input[name='image-choice-correct-option']").prop("checked"),
                    image: null
                }
                options.push(optionsData)
                if(counter == length){
                    questionData.options = options;
                    console.log(questionData);
                    self.model.save(questionData).then(function (res) {
                        if(!res.hasError){
                            if(self.activeQuestion == null){
                                self.saveQuestion(res.question);
                            }
                            else{
                                self.questions[self.activeQuestion.questionIndex] = questionData;
                                self.activeQuestion = questionData;
                            }
                            // self.currentTestId = res.testId
                            self.isLoading = false;
                            self.render();
                            jQuery('#tabsBlock2').trigger('click');   
                            jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                        }
                        console.log(res);
                    });
                  
                }
            }
        });
    }

    ImageChoiceQuestionView.prototype.deleteImageChoiceQuestion = function() {
        this.model.save({
            action: 'delete_question_image_choice',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){

            }
        })
    }

    ImageChoiceQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    
    ImageChoiceQuestionView.prototype.getEvents = function () {
			return {
				"click [data-action='m360-survy-del-img-que']"  : "deleteImageChoiceQuestion",
				"click [data-action='m360-survy-save-img-que']" : "addImageChoiceQuestion",
				"click [data-action='m360-survy-edit-img-que']" : "editImageChoiceQuestion",
				"focusout [data-focusout='m360-survy-img-que-title-val']" : "titleValidation",
				"focusout [data-focusout='m360-survy-img-que-desc-val']" : "descriptionValidation",
				"focusout [data-focusout='m360-survy-img-que-seq-num-val']" : "sequenceNumberValidation",
				"click [data-action='M360-survey-img-choice-switch']" : "surveyImgChoiceSwitch",
				"click [data-action='M360-survey-img-choice-question']" : "surveyImgChoiceQuestionAdded",
				"change [data-change='M360-survey-img-change']" : "surveyImgChange",
				"click [data-action='M360-survey-image-choice-question']" : "surveyChoiceQuestion",
				"click [data-action='M360-survey-image-choice-question-remove']" : "surveyChoiceQuestionRemove",
				"change [data-change='m360-slxc-img-show-logic-form']" : "imgShowLogicForm"
			}

    }

    ImageChoiceQuestionView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            activeQuestion: this.activeQuestion,
            nextSequenceNumber: this.nextSequenceNumber,
            masterSectionArray: this.parent.masterSectionArray,
						imgContriLanding1: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
            icons: {
                fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
                uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
                trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-cross-grey.png')),
								icnImageChoiceActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-active.png')),
								icnGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
            }
        }
    }

		ImageChoiceQuestionView.prototype.surveyImgChoiceSwitch = function (e) {
			this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', function () {
				return !this.checked;
			});
		}

		ImageChoiceQuestionView.prototype.surveyImgChoiceQuestionAdded = function (e) {
			//var optionString = $(this).siblings("div").find(".option-box").html();
			var optionString = this.$('#sample-image-choice-option').html();
			var dataClass = this.$(e.currentTarget).attr('data-class');
			var count = this.$(e.currentTarget).siblings('div').find(".option-box").length + 1;
			this.$(e.currentTarget).siblings('div').append('<div class="white-box option-box '+ dataClass +'">'+optionString+'</div>');
			this.$(e.currentTarget).siblings('div').find(".option-box").last().find(".option-count span").text(count);
		}

		ImageChoiceQuestionView.prototype.surveyChoiceQuestion = function (e) {
            if (e.originalEvent !== undefined)
            {   
                console.log('inside survey choice question');
  		        this.$(e.currentTarget).children('.change-image').trigger('click');
            }
            // e.preventDefault();
			// e.stopImmediatePropagation();
            
		}

		ImageChoiceQuestionView.prototype.surveyImgChange = function (e) {
            console.log('inside survey image change');
            // var referenceImage = jQuery('.change-image')[0].files[0];
            //     if(referenceImage){
            //         var reader = new FileReader();
            //         reader.onloadend = function() {
            //             var image = (reader.result).split('base64,')[1];
            //             questionData.referenceImage = image;
            //         }
            //         reader.readAsDataURL(referenceImage);
            // }
			// this.readFileName(this,this.$(e.currentTarget));

            if (this.$(e.currentTarget)[0].files && this.$(e.currentTarget)[0].files[0]) {
				var image_src = URL.createObjectURL(this.$(e.currentTarget)[0].files[0]);
				this.$(e.currentTarget).siblings(".uploaded-image").find(".prev-image").css("background-image", "url(" + image_src + ")");
				this.$(e.currentTarget).siblings(".uploaded-image").find(".f-name").html(this.$(e.currentTarget)[0].files[0].name);
				this.$(e.currentTarget).siblings(".upload-image").hide();
				this.$(e.currentTarget).siblings(".uploaded-image").show();
			}
		}
		ImageChoiceQuestionView.prototype.readFileName = function(input,thisObj) {
            console.log('input file : ', input.files);
            console.log('image : ', thisObj[0].files[0])
			if (input.files && input.files[0]) {
				var image_src = URL.createObjectURL(input.files[0]);
				thisObj.siblings(".uploaded-image").find(".prev-image").css("background-image", "url(" + image_src + ")");
				thisObj.siblings(".uploaded-image").find(".f-name").html(thisObj.files[0].name);
				thisObj.siblings(".upload-image").hide();
				thisObj.siblings(".uploaded-image").show();
			}
		}

		ImageChoiceQuestionView.prototype.surveyChoiceQuestionRemove = function (e) {
			this.$(e.currentTarget).parents('.option-box').remove();
		}

		ImageChoiceQuestionView.prototype.imgShowLogicForm = function(e){
			this.showImageHideLogicBox();
		}
		ImageChoiceQuestionView.prototype.showImageHideLogicBox = function(e){
			if(this.$('#img-show-logic-form').is(':checked')){
				this.$('#img-logic-form-box').show();
			}else{
				this.$('#img-logic-form-box').hide();
			}
		}
    return ImageChoiceQuestionView;
});

define('Saralux.Core.SurveysSV.Question.Long.View', [
	'saralux_core_surveyssv_long_question.tpl',


	'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_long_question_tpl,

	SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function LongQuestionView(options){
        console.log('inside LongQuestionView');
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_surveyssv_long_question_tpl;
		
		this.model = new SurveysSVSS2Model();
        
        this.parent = options.parent;
        console.log('activeSection : ', this.parent.activeSection);
        this.nextSequenceNumber = options.nextSequenceNumber;
        this.activeSurveyId = options.activeSurveyId;
        this.editMode = options.editMode;
        this.activeQuestion = options.activeQuestion;
    }

    LongQuestionView.prototype = Object.create(SCView.prototype);
    LongQuestionView.prototype.constructor = LongQuestionView;
    
    LongQuestionView.prototype.addLongTextQuestion = function(e) {
        console.log('add mcq parent : ', this.parent);
        var self = this;
        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 3,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: parseInt(this.$('#question-sequence-number').val()),
            nextSequenceNumber: this.nextSequenceNumber
        };

        // if(sequenceNumber<nextSequenceNumber){
        //     var sequenceToShiftArr = [];
        //     for 
        // }

        console.log('question data : ', questionData);
            
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'add_question_long_text',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {
                questionData.id = res.id;
                var questionsArray = self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions;
                // shift the questions
                console.log(questionData.sequenceNumber);
                console.log(questionData.nextSequenceNumber);
                if(questionData.sequenceNumber != questionData.nextSequenceNumber){
                    for (var i = (questionData.sequenceNumber-1); i < (questionData.nextSequenceNumber-1); i++) {
                        questionsArray[i].sequenceNumber++;
                    }
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                }
                else{
                    questionsArray.push(questionData);
                }
                

                self.parent.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                    self.parent.$('.questions-list').addClass('has-questions');
                }
                
                console.log('master section array : ', self.parent.masterSectionArray);

                // if(self.activeQuestion == null){
                //     self.saveQuestion(res.question);
                // }
                // else{
                //     self.questions[self.activeQuestion.questionIndex] = res.question;
                //     self.activeQuestion = questionData;
                // }
                self.isLoading = false;
                self.render();

                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            self.isLoading = false;
        }); 
    }

    LongQuestionView.prototype.editLongTextQuestion = function(e) {
        console.log('edit long parent : ', this.parent);
        console.log('activeQuestion : ', this.activeQuestion);

        var self = this;
        var questionData = {
            id: this.activeQuestion.id,
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 3,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: parseInt(this.$('#question-sequence-number').val()),
            nextSequenceNumber: this.nextSequenceNumber
        };

        console.log({questionData});

        console.log('edit data : ', questionData);
            
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'edit_question_long_text',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {

                this.editMode = false;

                var questionsArray = self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions;
                console.log(questionData.sequenceNumber);
                console.log(questionData.nextSequenceNumber);
                if(questionData.sequenceNumber != questionData.nextSequenceNumber && !isNaN(questionData.nextSequenceNumber )){
                    console.log('inside if');
                    for (var i = (questionData.sequenceNumber-1); i < (questionData.nextSequenceNumber-1); i++) {
                        questionsArray[i].sequenceNumber++;
                    }
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                }
                else{
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                    questionsArray.splice((questionData.sequenceNumber),1);
                }
                // else{
                //     questionsArray.push(questionData);
                // }
                self.parent.render();
                self.isLoading = false;
                self.render();

                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            self.isLoading = false;
        }); 
    }


    LongQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }

    LongQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }

    LongQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    LongQuestionView.prototype.deleteLongTextQuestion = function() {
        this.model.save({
            action: 'delete_question_long_text',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){

            }
        })
    }
    

    LongQuestionView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-suryv-del-lng-que']"  : "deleteLongTextQuestion",
            "click [data-action='m360-suryv-save-lng-que']" : "addLongTextQuestion",
            "click [data-action='m360-suryv-edit-lng-que']" : "editLongTextQuestion",

            "focusout [data-focusout='m360-survy-lng-que-title-val']" : "titleValidation",
            "focusout [data-focusout='m360-survy-lng-que-desc-val']" : "descriptionValidation",
            "focusout [data-focusout='m360-survy-lng-que-seq-num-val']" : "sequenceNumberValidation",

        }
    }

    LongQuestionView.prototype.getContext = function () {
        return {
            editMode: this.editMode,
            isLoading: this.isLoading,
            nextSequenceNumber: this.nextSequenceNumber,
            activeQuestion: this.activeQuestion,
            icons: {
                fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
                uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
                trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
            }
        }
    }

    return LongQuestionView;


});

define('Saralux.Core.SurveysSV.Question.MultipleChoice.View', [
	'saralux_core_surveyssv_mcq_question.tpl',


    'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_mcq_question_tpl,

    SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function MultipleChoiceQuestionView(options){
        console.log('inside MultipleChoiceQuestionView');
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_surveyssv_mcq_question_tpl;
        
        this.model = new SurveysSVSS2Model();

        this.parent = options.parent;
        
        console.log('mcq activeSection : ', this.parent);

        this.activeQuestion = options.activeQuestion;
        this.nextSequenceNumber = options.nextSequenceNumber;
        this.activeSurveyId = options.activeSurveyId;
        this.editMode = options.editMode;
        this.logicOptions = [{title: "just", optionCharacter: "x"}];

        console.log('this.activeSurveyId from mcq: ',this.activeSurveyId);
    }

    MultipleChoiceQuestionView.prototype = Object.create(SCView.prototype);
    MultipleChoiceQuestionView.prototype.constructor = MultipleChoiceQuestionView;
    

    MultipleChoiceQuestionView.prototype.addMcqQuestion = function(e) {
        console.log('add mcq parent : ', this.parent);
        var self = this;
        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 1,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: this.$('#question-sequence-number').val(),
            allowMultipleAnswers: this.$('#allow-multiple-option').prop("checked"),
            nextSequenceNumber: this.nextSequenceNumber
        };
        
        console.log('new mcq question : ', questionData);
        var answerOptions = [];
        jQuery('div.option-box-mcq-question').siblings()
        .each(function(){
            var sectionId = parseInt(jQuery(this).find("select[name='select-section']").val());
            console.log('section id : ', sectionId);
            answerOptions.push({
                optionTitle     : jQuery(this).find("input[name='option-title']").val(),
                optionCharacter : jQuery(this).find("input[name='option-character']").val(),
                optionLogicSection: sectionId
            });
        });
        questionData.options = answerOptions;

        console.log('question data : ', questionData);
            
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'add_question_mcq',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {

                self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.push(questionData);

                self.parent.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                    self.parent.$('.questions-list').addClass('has-questions');
                }

                console.log('master section array : ', self.parent.masterSectionArray);

                // if(self.activeQuestion == null){
                //     self.saveQuestion(res.question);
                // }
                // else{
                //     self.questions[self.activeQuestion.questionIndex] = res.question;
                //     self.activeQuestion = questionData;
                // }
                self.isLoading = false;
                self.render();
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            self.isLoading = false;
        }); 
    }

    MultipleChoiceQuestionView.prototype.editMcqQuestion = function(e) {
        console.log('edit mcq parent : ', this.parent);
        var self = this;
        var questionData = {
            id: this.activeQuestion.id,
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 1,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: this.$('#question-sequence-number').val(),
            nextSequenceNumber: this.nextSequenceNumber
        };
        
        var answerOptions = [];
        jQuery('div.option-box-mcq-question').siblings()
        .each(function(){
            var sectionIndex = jQuery(this).find("select[name='select-section']").val();
            var sectionId = this.parent.masterSectionArray[sectionIndex].id;
            console.log('selected section : ', this.parent.masterSectionArray[sectionIndex]);
            answerOptions.push({
                optionId        : jQuery(this).find("input[name='option-id']").val(),
                optionTitle     : jQuery(this).find("input[name='option-title']").val(),
                optionCharacter : jQuery(this).find("input[name='option-character']").val(),
                optionLogicSection: sectionId
            });
        });
        questionData.options = answerOptions;

        console.log('edit data : ', questionData);
            
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'edit_question_mcq',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {
                
                this.editMode = false;

                var questionsArray = self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions;
                console.log(questionData.sequenceNumber);
                console.log(questionData.nextSequenceNumber);

                if(questionData.sequenceNumber != questionData.nextSequenceNumber && !isNaN(questionData.nextSequenceNumber)){
                    for (var i = (questionData.sequenceNumber-1); i < (questionData.nextSequenceNumber-1); i++) {
                        questionsArray[i].sequenceNumber++;
                    }
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                }
                else{
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                    questionsArray.splice((questionData.sequenceNumber),1);
                }
                // else{
                //     questionsArray.push(questionData);
                // }
                self.parent.render();
                self.isLoading = false;
                self.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }
                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            self.isLoading = false;
        }); 
    }

    MultipleChoiceQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }

    MultipleChoiceQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }

    MultipleChoiceQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    MultipleChoiceQuestionView.prototype.deleteMcqQuestion = function() {
        this.model.save({
            action: 'delete_question_mcq',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){
                
            }
        })
    }
    MultipleChoiceQuestionView.prototype.changeQuestionType = function() {
        this.parent.addNewQuestion();
        
    }
    
    MultipleChoiceQuestionView.prototype.getEvents = function () {
			return{
				"click [data-action='m360-survy-delete-question']" : "deleteMcqQuestion",
				"click [data-action='m360-survy-save-mcq-que']" : "addMcqQuestion",
				"click [data-action='m360-suryv-edit-mcq-que']" : "editMcqQuestion",
				"click [data-action='m360-change-question']" : "changeQuestionType",
				"focusout [data-focusout='m360-survy-mcq-que-title-val']" : "titleValidation",
				"focusout [data-focusout='m360-survy-mcq-que-desc-val']" : "descriptionValidation",
				"focusout [data-focusout='m360-survy-mcq-que-seq-num-val']" : "sequenceNumberValidation",
				"click [data-action='M360-survey-MCQ-switch']" : "surveyMCQSwitch",
				"click [data-action='M30-survey-MCQ-add-more']" : "surveyMCQAddMore",
				"click [data-action='M360-survey-MCQ-choice-question-remove']" : "surveyMCQChoiceQuestionRemove",
				"change [data-change='m360-slxc-mcq-question-logic-form']" : "mcqQuestionLogicForm"
			}
    }

    MultipleChoiceQuestionView.prototype.getContext = function () {
        console.log('inside getcontext');
        return {
            editMode : this.editMode,
            isLoading: this.isLoading,
            logicOptions: this.logicOptions,
            activeQuestion: this.activeQuestion,
            nextSequenceNumber: this.nextSequenceNumber,
            masterSectionArray: this.parent.masterSectionArray,
            icons: {
                uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
                trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-cross-grey.png')),
								icnMCQActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-active.png')),
								icnGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
            },
        }
    }

		MultipleChoiceQuestionView.prototype.surveyMCQSwitch = function(e) {
			this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', function () {
				return !this.checked;
			});
		}

		MultipleChoiceQuestionView.prototype.surveyMCQAddMore = function(e) {
			var optionString = this.$(e.currentTarget).siblings("div").find(".option-box").html();
			var dataClass = this.$(e.currentTarget).attr('data-class');
			var count = this.$(e.currentTarget).siblings('div').find(".option-box").length + 1;
			this.$(e.currentTarget).siblings('div').append('<div class="white-box option-box '+ dataClass +'">'+optionString+'</div>');
			this.$(e.currentTarget).siblings('div').find(".option-box").last().find(".option-count span").text(count);
		}	

		MultipleChoiceQuestionView.prototype.surveyMCQChoiceQuestionRemove = function(e) {
			this.$(e.currentTarget).parents('.option-box').remove();
		}	

		MultipleChoiceQuestionView.prototype.mcqQuestionLogicForm = function(e){
			this.showMCQHideLogicBox();
		}

		MultipleChoiceQuestionView.prototype.showMCQHideLogicBox = function (e){
			if(this.$('#mcq-show-logic-form').is(':checked')){
				this.$('#mcq-logic-form-box').show();
			}else{
				this.$('#mcq-logic-form-box').hide();
			}
		}
    return MultipleChoiceQuestionView;
});

define('Saralux.Core.SurveysSV.Question.OpinionScale.View', [
	'saralux_core_surveyssv_opinion_scale_question.tpl',


	'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_opinion_scale_question_tpl,

	SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function OpinionScaleQuestionView(options){
			console.log('inside OpinionScaleQuestionView');
			SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
      this.template = saralux_core_surveyssv_opinion_scale_question_tpl;
		
		this.model = new SurveysSVSS2Model();

		this.parent = options.parent;
        this.activeQuestion = options.activeQuestion;
        this.nextSequenceNumber = options.nextSequenceNumber;
        this.activeSurveyId = options.activeSurveyId;
    }

    OpinionScaleQuestionView.prototype = Object.create(SCView.prototype);
    OpinionScaleQuestionView.prototype.constructor = OpinionScaleQuestionView;
    
    OpinionScaleQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }

    OpinionScaleQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }

    OpinionScaleQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    OpinionScaleQuestionView.prototype.startValueValidation = function () {
        this.$('#start-value-number-error').removeClass('err')
        this.$('#start-value-required-error').removeClass('err')

		var startValue = this.$('#scale-start-val').val();
        var regExp = new RegExp(/^[0-9]*$/);
  		if (!regExp.test(startValue)){
  		  this.$("#start-value-number-error").addClass("err");
  		}
        if(startValue == ""){
            this.$('#start-value-required-error').addClass('err');
        }
    }

    OpinionScaleQuestionView.prototype.endValueValidation = function (e) {
			this.$('#end-value-number-error').removeClass('err')
			this.$('#end-value-required-error').removeClass('err')

		var endValue = this.$('#scale-end-val').val();
      var regExp = new RegExp(/^[0-9]*$/);
  		if (!regExp.test(endValue)){
  		  this.$("#end-value-number-error").addClass("err");
  		}
			if(endValue == ""){
				this.$('#end-value-required-error').addClass('err');
			}
			if(this.$(e.currentTarget).val() <= this.$("#scale-start-val").val()){
				this.$(e.currentTarget).val('');
			}
    }

    

    OpinionScaleQuestionView.prototype.addOpinionScaleQuestion = function () {
        console.log('inside addOpinionScaleQuestion');

        console.log('this.parent.masterSectionArray : ' , this.parent.masterSectionArray);

        var self = this;
        var scaleCount = [];
        var startVal = parseInt(this.$('#scale-start-val').val()); 
        var endVal = parseInt(this.$('#scale-end-val').val());
        var scaleCountLength = endVal - startVal;
        for (var i = 0; i <= scaleCountLength; i++) {
            var label = null;
            if(i == 0){
                label = this.$('#left-label').val();
            }
            else if(i ==  scaleCountLength){
                label = this.$('#right-label').val();
            }
            scaleCount.push({
                key: startVal++,
                label: label
            });
        }

        // Logic validation
        // Less than validation
        this.$('#less-than-val-error').removeClass('err');
        this.$("#less-than-val-number-error").removeClass('err');
        this.$('#less-than-val-required-error').removeClass('err');

        if(this.$('#rating-show-logic-form').prop('checked')){
            var lessThanVal = this.$('#less-than-val').val();
            var regExp = new RegExp(/^[0-9]*$/);
            if(lessThanVal == ''){
                this.$('#less-than-val-required-error').addClass('err');
            }
            if (!regExp.test(lessThanVal)){
                console.log('input is not a number');
                this.$("#less-than-val-number-error").addClass('err');
            }
           else if(
                parseInt(lessThanVal) < parseInt(this.$('#rating-scale-start-val').val())
                ||
                parseInt(lessThanVal) > parseInt(this.$('#rating-scale-end-val').val())
            ){
                this.$('#less-than-val-error').addClass('err');
            }
        }

        // Greater than validation
        this.$('#greater-than-val-error').removeClass('err');
        this.$("#greater-than-val-number-error").removeClass('err');
        this.$('#greater-than-val-required-error').removeClass('err');
        if(this.$('#rating-show-logic-form').prop('checked')){
            var greaterThanVal = this.$('#greater-than-val').val();
            var regExp = new RegExp(/^[0-9]*$/);
            if(greaterThanVal == ''){
                this.$('#greater-than-val-required-error').addClass('err');
            }
            if (!regExp.test(greaterThanVal)){
                this.$("#greater-than-val-number-error").addClass("err");
            }
           else if(
                parseInt(greaterThanVal) < parseInt(this.$('#rating-scale-start-val').val())
                ||
                parseInt(greaterThanVal) > parseInt(this.$('#rating-scale-end-val').val())
            ){
                this.$('#greater-than-val-error').addClass('err');
            }
        }

        this.$('#less-than-greater-than-comparison-error').removeClass('err')
        if(lessThanVal > greaterThanVal){
            this.$('#less-than-greater-than-comparison-error').addClass('err')
        }

        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 8,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: this.$('#question-sequence-number').val(),
            startScaleValue: this.$('#scale-start-val').val(),
            endScaleValue: this.$('#scale-end-val').val(),
            nextSequenceNumber: this.nextSequenceNumber
        };

        if(this.$('#opinion-show-logic-form').prop('checked')){
            questionData.addLogic = true;
            if(lessThanVal != ""){
                questionData.lessThanVal = lessThanVal;
            }
            if(greaterThanVal != ""){
                questionData.greaterThanVal = greaterThanVal;
            }
            questionData.lessThanOperator = parseInt(this.$('#less-than').val());
            questionData.greaterThanOperator = parseInt(this.$('#greater-than').val());

            var lessThanOperatorSectionIndex = this.$('#less-than-operator-section').val();
            questionData.lessThanOperatorSection = parseInt(this.parent.masterSectionArray[lessThanOperatorSectionIndex].id);
            var greaterThanOperatorSectionIndex = this.$('#greater-than-operator-section').val();
            questionData.greaterThanOperatorSection = parseInt(this.parent.masterSectionArray[greaterThanOperatorSectionIndex].id);
            var inBetweenOperatorSectionIndex = this.$('#in-between-operator-section').val();
            questionData.inBetweenOperatorSection = parseInt(this.parent.masterSectionArray[inBetweenOperatorSectionIndex].id);        
        }

        if(this.$('#show-labels').prop("checked")){
            questionData.leftScaleLabel = this.$('#left-label').val();
            questionData.rightScaleLabel = this.$('#right-label').val();
        }

        console.log({questionData});
        // Check if error exists
        // if(error exists)

        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'add_question_opinion_scale',
            questionData: questionData
        }).then(function (res) {
            if(!res.hasError) {

                questionData.scaleCount = scaleCount;
                self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.push(questionData);

                self.parent.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                    self.parent.$('.questions-list').addClass('has-questions');
                }

                console.log('master section array : ', self.parent.masterSectionArray);

                // if(self.activeQuestion == null){
                //     self.saveQuestion(res.question);
                // }
                // else{
                //     self.questions[self.activeQuestion.questionIndex] = res.question;
                //     self.activeQuestion = questionData;
                // }
                self.isLoading = false;
                self.render();
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');            
            }
            self.isLoading = false;
        }); 

    }

    OpinionScaleQuestionView.prototype.leftLabelValidation = function () {
        this.$('#left-label-required-error').removeClass('err');
        if(this.$('#show-labels').prop("checked")){
            if(this.$('#left-label').val() == ""){
                this.$('#left-label-required-error').addClass('err');
            }
        }
    }

    OpinionScaleQuestionView.prototype.rightLabelValidation = function () {
        this.$('#right-label-required-error').removeClass('err');
        if(this.$('#show-labels').prop("checked")){
            if(this.$('#right-label').val() == ""){
                this.$('#right-label-required-error').addClass('err');
            }
        }
    }

    OpinionScaleQuestionView.prototype.updatePreview = function() {
        if(this.$('#left-label').val() != ''){
            this.$('.left-label').text(this.$('#left-label').val());
        }
    
        if(this.$('#right-label').val() != ''){
          this.$('.right-label').text(this.$('#right-label').val());
        }
    
        if(this.$('#scale-start-val').val() != '' && this.$('#scale-end-val').val()){
          var startVal = this.$('#scale-start-val').val();
          var endVal = this.$('#scale-end-val').val();
    
          this.$('.numerical-rating').empty();
    
          for(var i=startVal; i<=endVal; i++){
            this.$('.numerical-rating').append('<div class="option-box no-pad" id="test-ans-option-'+i+'"><div class="option-title">'+i+'</div></div>');
          }
        }
    }
    
    OpinionScaleQuestionView.prototype.deleteOpinionScaleQuestion = function() {
        this.model.save({
            action: 'delete_question_opinion_scale',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){

            }
        })
    }
    
    OpinionScaleQuestionView.prototype.editOpinionScaleQuestion = function () {
        var self = this;
        var questionData = {
            id: this.activeQuestion.id,
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 8,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: parseInt(this.$('#question-sequence-number').val()),
            nextSequenceNumber: this.nextSequenceNumber,
            startScaleValue: this.$('#scale-start-val').val(),
            endScaleValue: this.$('#scale-end-val').val(),
            showScaleLabels: this.$('#show-labels').prop('checked'),
            leftLabel: this.$('#left-label').val(),
            rightLabel: this.$('#right-label').val(),
        };

        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'edit_question_opinion_scale',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {

                this.editMode = false;

                var questionsArray = self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions;
                console.log(questionData.sequenceNumber);
                console.log(questionData.nextSequenceNumber);
                if(questionData.sequenceNumber != questionData.nextSequenceNumber && !isNaN(questionData.nextSequenceNumber)){
                    for (var i = (questionData.sequenceNumber-1); i < (questionData.nextSequenceNumber-1); i++) {
                        questionsArray[i].sequenceNumber++;
                    }
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                }
                else{
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                    questionsArray.splice((questionData.sequenceNumber),1);
                }

                self.parent.render();
                self.isLoading = false;
                self.render();

                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            self.isLoading = false;
        }); 
    }

    OpinionScaleQuestionView.prototype.resetLessThanLogic = function () {
        this.$('#less-than-val').val("");
        this.$('#less-than-operator-section').val('none');
    }

    OpinionScaleQuestionView.prototype.resetGreaterThanLogic = function () {
        this.$('#greater-than-val').val("");
        this.$('#greater-than-operator-section').val('none');
    }
		OpinionScaleQuestionView.prototype.surveySOManualSwitch = function (e) {
			console.log('inside manual switch');
			var targetContainer = this.$(e.currentTarget).attr('data-target');
			console.log('targetContainer : ', targetContainer);
			this.showHideLabels();
			if(targetContainer){
				if(this.$('.manual-switch').is(':checked')){
					this.$("#"+targetContainer).show();
				}else{
					this.$('#left-label-required-error').removeClass('err');
					this.$('#right-label-required-error').removeClass('err');
					this.$("#"+targetContainer).hide();
				}
			}
		}

		OpinionScaleQuestionView.prototype.surveyUpdatePreview = function (e) {
			if(this.$('#left-label').val() != ''){
				this.$('.left-label').text(this.$('#left-label').val());
			}
			if(this.$('#right-label').val() != ''){
				this.$('.right-label').text(this.$('#right-label').val());
			}
			if(this.$('#scale-start-val').val() != '' && this.$('#scale-end-val').val()){
				var startVal = this.$('#scale-start-val').val();
				var endVal = this.$('#scale-end-val').val();
		
				this.$('.numerical-rating').empty();
		
				for(i=startVal; i<=endVal; i++){
					this.$('.numerical-rating').append('<div class="option-box no-pad" id="test-ans-option-'+i+'"><div class="option-title">'+i+'</div></div>');
				}
			}
		}
		OpinionScaleQuestionView.prototype.surveyShowLogicForm = function (e) {
			this.showOpinionHideLogicBox();
		}
		OpinionScaleQuestionView.prototype.surveyOSSwitch = function (e) {
			this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', function () {
				return !this.checked;
			});
		}

		OpinionScaleQuestionView.prototype.showOpinionHideLogicBox = function (e){
			if(this.$('#opinion-show-logic-form').is(':checked')){
				this.$('#opinion-logic-form-box').show();
			}else{
				this.$('#opinion-logic-form-box').hide();
			}
		}

		OpinionScaleQuestionView.prototype.showHideLabels = function(e){
			if(this.$('#show-labels').is(':checked')){
				this.$('.left-label').show();
				this.$('.right-label').show();
			}else{
				this.$('.left-label').hide();
				this.$('.right-label').hide();
			}
		}
    
    OpinionScaleQuestionView.prototype.getEvents = function () {
			return {
				"click [data-action='m360-survy-del-os-que']"  : "deleteOpinionScaleQuestion",
				"click [data-action='m360-survy-save-os-que']" : "addOpinionScaleQuestion",
				"click [data-action='m360-survy-edit-os-que']" : "editOpinionScaleQuestion",
				"click [data-action='m360-survy-reset-lt-logic']" : "resetLessThanLogic",
				"click [data-action='m360-survy-reset-gt-logic']" : "resetGreaterThanLogic",
				"focusout [data-focusout='m360-survy-os-que-title-val']" : "titleValidation",
				"focusout [data-focusout='m360-survy-os-que-desc-val']" : "descriptionValidation",
				"focusout [data-focusout='m360-survy-os-que-seq-num-val']" : "sequenceNumberValidation",
				"focusout [data-focusout='m360-survy-os-que-start-value-val']" : "startValueValidation",
				"focusout [data-focusout='m360-survy-os-que-end-value-val']" : "endValueValidation",
				"focusout [data-focusout='m360-survy-os-que-left-label-val']": "leftLabelValidation",
				"focusout [data-focusout='m360-survy-os-que-right-label-val']": "rightLabelValidation",
				"change [data-change='M360-survey-os-manualswitch']" : "surveySOManualSwitch",
				"click [data-action='M360-survey-update-preview']" : "surveyUpdatePreview",
				"change [data-change='M360-survey-show-logic-form']" : "surveyShowLogicForm",
				"click [data-action='M360-survey-os-switch']" : "surveyOSSwitch",
				"change .m360-slxc-opinion-scale-scale-start-val" : "opinionScaleStartVal",
				"change .m360-slxc-opinion-scale-scale-end-val" : "opinionScaleEndVal"
			}
    }


		OpinionScaleQuestionView.prototype.opinionScaleStartVal = function(value){
			return /^\d*$/.test(value) && (value === "" || parseInt(value) > 0);
		}
		OpinionScaleQuestionView.prototype.opinionScaleEndVal = function(value){
			return /^\d*$/.test(value);
		}

    OpinionScaleQuestionView.prototype.getContext = function () {
			return {
				isLoading: this.isLoading,
				activeQuestion: this.activeQuestion,
				nextSequenceNumber: this.nextSequenceNumber,
				masterSectionArray: this.parent.masterSectionArray,
				icons: {
					fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
					uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
					trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
					icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-cross-grey.png')),
					icnScaleActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-scale-active.png')),
					icnGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
					icnRefresh: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-refresh.png')),
				}
			}
    }
    return OpinionScaleQuestionView;
});

define('Saralux.Core.SurveysSV.Question.RatingScale.View', [
	'saralux_core_surveyssv_rating_scale_question.tpl',


	'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_rating_scale_question_tpl,

	SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function RatingScaleQuestionView(options){
			console.log('inside RatingScaleQuestionView');
			SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
			this.template = saralux_core_surveyssv_rating_scale_question_tpl;
		
		this.model = new SurveysSVSS2Model();

		this.parent = options.parent;
			this.activeQuestion = options.activeQuestion;
			if(this.activeQuestion){
					this.updatePreview();
			}
			this.nextSequenceNumber = options.nextSequenceNumber;
			this.activeSurveyId = options.activeSurveyId;
    }

    RatingScaleQuestionView.prototype = Object.create(SCView.prototype);
    RatingScaleQuestionView.prototype.constructor = RatingScaleQuestionView;
    
    RatingScaleQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }

    RatingScaleQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }

    RatingScaleQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    RatingScaleQuestionView.prototype.editOpinionScaleQuestion = function () {
        var self = this;
        var questionData = {
            id: this.activeQuestion.id,
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 8,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: parseInt(this.$('#question-sequence-number').val()),
            nextSequenceNumber: this.nextSequenceNumber,
            startScaleValue: this.$('#scale-start-val').val(),
            endScaleValue: this.$('#scale-end-val').val(),
            showScaleLabels: this.$('#show-labels').prop('checked'),
            leftLabel: this.$('#left-label').val(),
            rightLabel: this.$('#right-label').val(),
        };

        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'edit_question_rating_scale',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {

                this.editMode = false;

                var questionsArray = self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions;
                console.log(questionData.sequenceNumber);
                console.log(questionData.nextSequenceNumber);
                if(questionData.sequenceNumber != questionData.nextSequenceNumber && !isNaN(questionData.nextSequenceNumber)){
                    for (var i = (questionData.sequenceNumber-1); i < (questionData.nextSequenceNumber-1); i++) {
                        questionsArray[i].sequenceNumber++;
                    }
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                }
                else{
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                    questionsArray.splice((questionData.sequenceNumber),1);
                }

                self.parent.render();
                self.isLoading = false;
                self.render();

                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            self.isLoading = false;
        }); 
    }

    RatingScaleQuestionView.prototype.addRatingScaleQuestion = function () {
        var self = this;

        console.log('logic form : ', this.$('#rating-show-logic-form').prop('checked'));

        // Logic validation
        // Less than validation
        this.$('#less-than-val-error').removeClass('err');
        this.$("#less-than-val-number-error").removeClass('err');
        this.$('#less-than-val-required-error').removeClass('err');

        if(this.$('#rating-show-logic-form').prop('checked')){
            var lessThanVal = this.$('#less-than-val').val();
            var regExp = new RegExp(/^[0-9]*$/);
            if(lessThanVal == ''){
                this.$('#less-than-val-required-error').addClass('err');
            }
            if (!regExp.test(lessThanVal)){
                console.log('input is not a number');
                this.$("#less-than-val-number-error").addClass('err');
            }
           else if(
                parseInt(lessThanVal) < parseInt(this.$('#rating-scale-start-val').val())
                ||
                parseInt(lessThanVal) > parseInt(this.$('#rating-scale-end-val').val())
            ){
                this.$('#less-than-val-error').addClass('err');
            }
        }

        // Greater than validation
        this.$('#greater-than-val-error').removeClass('err');
        this.$("#greater-than-val-number-error").removeClass('err');
        this.$('#greater-than-val-required-error').removeClass('err');
        if(this.$('#rating-show-logic-form').prop('checked')){
            var greaterThanVal = this.$('#greater-than-val').val();
            var regExp = new RegExp(/^[0-9]*$/);
            if(greaterThanVal == ''){
                this.$('#greater-than-val-required-error').addClass('err');
            }
            if (!regExp.test(greaterThanVal)){
                this.$("#greater-than-val-number-error").addClass("err");
            }
           else if(
                parseInt(greaterThanVal) < parseInt(this.$('#rating-scale-start-val').val())
                ||
                parseInt(greaterThanVal) > parseInt(this.$('#rating-scale-end-val').val())
            ){
                this.$('#greater-than-val-error').addClass('err');
            }
        }

        this.$('#less-than-greater-than-comparison-error').removeClass('err')
        if(lessThanVal > greaterThanVal){
            this.$('#less-than-greater-than-comparison-error').addClass('err')
        }

        console.log('inside addRatingScaleQuestion');
        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 6,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: parseInt(this.$('#question-sequence-number').val()),
            startScaleValue: this.$('#rating-scale-start-val').val(),
            endScaleValue: this.$('#rating-scale-end-val').val(),
            incrementScaleValue: this.$('#rating-scale-increment-val').val(),
            nextSequenceNumber: this.nextSequenceNumber
        };
        
        if(this.$('#rating-show-logic-form').prop('checked')){
            questionData.addLogic = true;
            if(lessThanVal != ""){
                questionData.lessThanVal = lessThanVal;
            }
            if(greaterThanVal != ""){
                questionData.greaterThanVal = greaterThanVal;
            }
            questionData.lessThanOperator = parseInt(this.$('#less-than').val());
            questionData.greaterThanOperator = parseInt(this.$('#greater-than').val());

            var lessThanOperatorSectionIndex = this.$('#less-than-operator-section').val();
            questionData.lessThanOperatorSection = parseInt(this.parent.masterSectionArray[lessThanOperatorSectionIndex].id);
            var greaterThanOperatorSectionIndex = this.$('#greater-than-operator-section').val();
            questionData.greaterThanOperatorSection = parseInt(this.parent.masterSectionArray[greaterThanOperatorSectionIndex].id);
            var inBetweenOperatorSectionIndex = this.$('#in-between-operator-section').val();
            questionData.inBetweenOperatorSection = parseInt(this.parent.masterSectionArray[inBetweenOperatorSectionIndex].id);
        }
       
        if(this.$('#show-scale-labels').prop("checked")){
            questionData.leftScaleLabel = this.$('#left-scale-label').val();
            questionData.rightScaleLabel = this.$('#right-scale-label').val();
        }

        console.log({questionData});
        // Check if error exists
        // if(error exists)

        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'add_question_rating_scale',
            questionData: questionData
        }).then(function (res) {
            if(!res.hasError) {

                self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.push(questionData);
 
                self.parent.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                    self.parent.$('.questions-list').addClass('has-questions');
                }

                console.log('master section array : ', self.parent.masterSectionArray);

                self.isLoading = false;
                self.render();
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');            
            }
            self.isLoading = false;
        });
    }

    RatingScaleQuestionView.prototype.startValueValidation = function () {
        console.log('inside startValueValidation');
        this.$('#start-value-number-error').removeClass('err')
        this.$('#start-value-required-error').removeClass('err')

		var startValue = this.$('#rating-scale-start-val').val();
        var regExp = new RegExp(/^[0-9]*$/);
  		if (!regExp.test(startValue)){
  		  this.$("#start-value-number-error").addClass("err");
  		}
        if(startValue == ""){
            this.$('#start-value-required-error').addClass('err');
        }
    }

    RatingScaleQuestionView.prototype.endValueValidation = function (e) {
			this.$('#end-value-number-error').removeClass('err')
			this.$('#end-value-required-error').removeClass('err')

		var endValue = this.$('#rating-scale-end-val').val();
        var regExp = new RegExp(/^[0-9]*$/);
  		if (!regExp.test(endValue)){
  		  this.$("#end-value-number-error").addClass("err");
  		}
			if(endValue == ""){
				this.$('#end-value-required-error').addClass('err');
			}
			if(parseInt(this.$(e.currentTarget).val()) <= parseInt($("#rating-scale-start-val").val())){
				this.$(e.currentTarget).val('');
			}
    }

    RatingScaleQuestionView.prototype.incrementValueValidation = function (e) {
			this.$('#increment-value-number-error').removeClass('err')
			this.$('#increment-value-required-error').removeClass('err')

			var incrementValue = this.$('#rating-scale-increment-val').val();
      var regExp = new RegExp(/^[0-9]*$/);
  		if (!regExp.test(incrementValue)){
  		  this.$("#increment-value-number-error").addClass("err");
  		}
			if(incrementValue == ""){
				this.$('#increment-value-required-error').addClass('err');
			}
			if(parseInt(this.$(e.currentTarget).val()) >= parseInt(this.$("#rating-scale-end-val").val())){
				this.$(e.currentTarget).val('');
			}
    }

    RatingScaleQuestionView.prototype.leftLabelValidation = function () {
        this.$('#left-label-required-error').removeClass('err');
        if(this.$('#show-labels').prop("checked")){
            if(this.$('#left-label').val() == ""){
                this.$('#left-label-required-error').addClass('err');
            }
        }
    }

    RatingScaleQuestionView.prototype.rightLabelValidation = function () {
        this.$('#right-label-required-error').removeClass('err');
        if(this.$('#show-labels').prop("checked")){
            if(this.$('#right-label').val() == ""){
                this.$('#right-label-required-error').addClass('err');
            }
        }
    }

    RatingScaleQuestionView.prototype.updatePreview = function() {
        if(this.$('#left-scale-label').val() != ''){
            this.$('.scale-left-label').text(this.$('#left-scale-label').val());
          }
        
          if(this.$('#right-scale-label').val() != ''){
            this.$('.scale-right-label').text(this.$('#right-scale-label').val());
          }
        
          var startVal = this.$('#rating-scale-start-val').val();
        var endVal = this.$('#rating-scale-end-val').val();
        var incrementVal = this.$('#rating-scale-increment-val').val();
    
        if(startVal == ''){
            this.$('#rating-scale-start-val').trigger('focusout');
        }
    
        if(endVal == ''){
            this.$('#rating-scale-end-val').trigger('focusout');
        }
    
        if(incrementVal == ''){
            this.$('#rating-scale-increment-val').trigger('focusout');
        }
    
        if(startVal != '' && endVal != '' && incrementVal != ''){
            this.$('#rating-range-slider').val(startVal);
            this.$('.start-rating-scale-val').text(startVal);
            this.$('.end-rating-scale-val').text(endVal);
            this.$('#rating-range-slider').attr('min',startVal);
            this.$('#rating-range-slider').attr('max',endVal);
            this.$('#rating-range-slider').attr('step',incrementVal);
            sliderSclaeValueFunctions(this.$('.range-slider'));
        }
    }
    RatingScaleQuestionView.prototype.deleteRatingScaleQuestion = function() {
        this.model.save({
            action: 'delete_question_rating_scale',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){

            }
        })
    }
    
    RatingScaleQuestionView.prototype.resetLessThanLogic = function () {
			this.$('#less-than-val').val("");
			this.$('#less-than-operator-section').val('none');
    }

    RatingScaleQuestionView.prototype.resetGreaterThanLogic = function () {
			this.$('#greater-than-val').val("");
			this.$('#greater-than-operator-section').val('none');
    }

		RatingScaleQuestionView.prototype.surveyRatingLGForm = function (e) {
			this.showRatingHideLogicBox();
    }

		RatingScaleQuestionView.prototype.showRatingHideLogicBox = function(e){
			if(this.$('#rating-show-logic-form').is(':checked')){
				this.$('#rating-logic-form-box').show();
			}else{
				this.$('#rating-logic-form-box').hide();
			}
		}

		RatingScaleQuestionView.prototype.surveyRangeSlider = function(e){
			this.sliderSclaeValueFunctions(this.$(e.currentTarget));
		}
		RatingScaleQuestionView.prototype.sliderSclaeValueFunctions = function(thisObj){
			var calcVal = (thisObj.val() - thisObj.attr('min')) / (thisObj.attr('max') - thisObj.attr('min')) * 100;
			thisObj.css('background', 'linear-gradient(to right, #000 0%, #000 ' + calcVal + '%, #ededed ' + calcVal + '%, #ededed 100%)');
			const val = thisObj.val();
			const min = thisObj.attr('min') ? thisObj.attr('min') : 0;
			const max = thisObj.attr('max') ? thisObj.attr('max') : 100;
			const newVal = Number(((val - min) * 100) / (max - min));
			thisObj.siblings('.range-val').find('span').text(thisObj.val());
			thisObj.siblings('.range-val').css('left', `calc(${newVal}% + (${10 - newVal * 0.19}px))`);
		}

		RatingScaleQuestionView.prototype.surveyRsManualwitch = function(e){
			console.log('inside manual switch');
			var targetContainer = this.$(e.currentTarget).attr('data-target');
			console.log('targetContainer : ', targetContainer);
			console.log('this.checked : ', this.checked);
			this.showHideRangeLabels();
			if(targetContainer){
				if(this.$('.manual-switch').is(':checked')){
					this.$("#"+targetContainer).show();
				}else{
					this.$('#left-label-required-error').removeClass('err');
					this.$('#right-label-required-error').removeClass('err');
					this.$("#"+targetContainer).hide();
				}
			}
		}

		RatingScaleQuestionView.prototype.showHideRangeLabels = function (e){
			if(this.$('#show-scale-labels').is(':checked')){
				this.$('.scale-left-label').show();
				this.$('.scale-right-label').show();
			}else{
				this.$('.scale-left-label').hide();
				this.$('.scale-right-label').hide();
			}
		}

		RatingScaleQuestionView.prototype.surveyRSUpdateReview = function (e){
			if(this.$('#left-scale-label').val() != ''){
				this.$('.scale-left-label').text(this.$('#left-scale-label').val());
			}
			if(this.$('#right-scale-label').val() != ''){
				this.$('.scale-right-label').text(this.$('#right-scale-label').val());
			}
			var startVal = this.$('#rating-scale-start-val').val();
			var endVal = this.$('#rating-scale-end-val').val();
			var incrementVal = this.$('#rating-scale-increment-val').val();
			if(startVal == ''){
				this.$('#rating-scale-start-val').trigger('focusout');
			}
			if(endVal == ''){
				this.$('#rating-scale-end-val').trigger('focusout');
			}
			if(incrementVal == ''){
				this.$('#rating-scale-increment-val').trigger('focusout');
			}
			if(startVal != '' && endVal != '' && incrementVal != ''){
				this.$('#rating-range-slider').val('');
				this.$('#rating-range-slider').val(startVal);
				this.$('.start-rating-scale-val').text(startVal);
				this.$('.end-rating-scale-val').text(endVal);
				this.$('#rating-range-slider').attr('min',startVal);
				this.$('#rating-range-slider').attr('max',endVal);
				this.$('#rating-range-slider').attr('step',incrementVal);
				sliderSclaeValueFunctions(this.$(".slidecontainer").find('.range-slider'));
			}
		}
		RatingScaleQuestionView.prototype.surveyRSSwitch = function (e){
			this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', function () {
				return !this.checked;
			});
		}
    
    RatingScaleQuestionView.prototype.getEvents = function () {
			return {
				"click [data-action='m360-survy-del-rs-que']"  : "deleteRatingScaleQuestion",
				"click [data-action='m360-survy-save-rs-que']" : "addRatingScaleQuestion",
				"click [data-action='m360-survy-reset-lt-logic']" : "resetLessThanLogic",
				"click [data-action='m360-survy-reset-gt-logic']" : "resetGreaterThanLogic",
				"focusout [data-focusout='m360-survy-rs-que-title-val']" : "titleValidation",
				"focusout [data-focusout='m360-survy-rs-que-desc-val']" : "descriptionValidation",
				"focusout [data-focusout='m360-survy-rs-que-seq-num-val']" : "sequenceNumberValidation",
				"focusout [data-focusout='m360-survy-rs-que-start-value-val']" : "startValueValidation",
				"focusout [data-focusout='m360-survy-rs-que-end-value-val']" : "endValueValidation",
				"focusout [data-focusout='m360-survy-rs-que-incr-value-val']" : "incrementValueValidation",
				"focusout [data-focusout='m360-survy-rs-que-left-label-val']": "leftLabelValidation",
				"focusout [data-focusout='m360-survy-rs-que-right-label-val']": "rightLabelValidation",
				"focusout [data-focusout='m360-survy-rs-que-lt-val']": "lessThanValueValidation",
				"focusout [data-focusout='m360-survy-rs-que-gt-val']": "greaterThanValueValidation",
				"click [data-action='M360-survey-rating-show-logic-form']" : "surveyRatingLGForm",
				"change [data-change='M360-survey-range-slider']" : "surveyRangeSlider",
				"change [data-change='M360-survey-rs-manual-switch']" : "surveyRsManualwitch",
				"click [data-action='M360-survey-rs-update-review']" : "surveyRSUpdateReview",
				"click [data-action='M360-surve-rs-switch']" : "surveyRSSwitch",
				"change .m360-survy-rs-start-val-data-change" : "startValDataChange",
				"change .m360-survy-rs-end-val-data-change" : "endValDataChange",
				"change .m360-survy-rs-increament-val-data-change" : "increamentValDataChange",
			}
    }

		RatingScaleQuestionView.prototype.startValDataChange = function(value){
			console.log("rating scale start val");
			return /^\d*$/.test(value);
		}
		RatingScaleQuestionView.prototype.endValDataChange = function(value){
			console.log("rating scale end val");
			return /^\d*$/.test(value);
		}
		RatingScaleQuestionView.prototype.increamentValDataChange = function(value){
			console.log("rating scale increament val");
			return /^\d*$/.test(value);
		}

		// (function($){

		// 	var ListView = Backbone.View.extend({
		// 		el: $("#starbase"), 
		
		// 		initialize: function(){
		// 			_.bindAll(this, 'render'); 
		// 			this.render(); 
		// 		},
		// 		render: function(){
		// 			$(this.el).append('<div id="starship"></div>');
		// 		}
		// 	});
			
		// 	 $( document ).ready(function() {
		// 			var listView = new ListView();
		// 	});
		// })(jQuery);

    RatingScaleQuestionView.prototype.getContext = function () {
			return {
				isLoading: this.isLoading,
				activeQuestion: this.activeQuestion,
				nextSequenceNumber: this.nextSequenceNumber,
				masterSectionArray: this.parent.masterSectionArray,
				icons: {
					fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
					uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
					trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
					icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-cross-grey.png')),
					icnQuestionRatingActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-rating-active.png')),
					icnGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
					icnRefresh: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-refresh.png')),
				}
			}
    }

    return RatingScaleQuestionView;


});

define('Saralux.Core.SurveysSV.Question.Short.View', [
	'saralux_core_surveyssv_short_question.tpl',


	'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_short_question_tpl,

	SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ShortQuestionView(options){
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_surveyssv_short_question_tpl;
		
		this.model = new SurveysSVSS2Model();

        this.parent = options.parent;
        this.activeQuestion = options.activeQuestion;
        this.nextSequenceNumber = options.nextSequenceNumber;
        this.activeSurveyId = options.activeSurveyId;
    }

    ShortQuestionView.prototype = Object.create(SCView.prototype);
    ShortQuestionView.prototype.constructor = ShortQuestionView;
    
    ShortQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }

    ShortQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }

    ShortQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    ShortQuestionView.prototype.addShortTextQuestion = function(options){
        var self = this;
        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 4,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: this.$('#question-sequence-number').val(),
        };
        
            
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'add_question_short_text',
            questionData: questionData
        }).then(function (res) {
            if(!res.hasError) {

                self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.push(questionData);
                
                self.parent.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                    self.parent.$('.questions-list').addClass('has-questions');
                }

                console.log('master section array : ', self.parent.masterSectionArray);

                // if(self.activeQuestion == null){
                //     self.saveQuestion(res.question);
                // }
                // else{
                //     self.questions[self.activeQuestion.questionIndex] = res.question;
                //     self.activeQuestion = questionData;
                // }
                self.isLoading = false;
                self.render();
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');            
            }
            self.isLoading = false;
        }); 
    }

    ShortQuestionView.prototype.editShortTextQuestion = function(options){
        var self = this;
        var questionData = {
            id: this.activeQuestion.id,
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 4,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: parseInt(this.$('#question-sequence-number').val()),
            nextSequenceNumber: this.nextSequenceNumber
        };
        
            
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'edit_question_short_text',
            questionData: questionData
        }).then(function (res) {
            if(!res.hasError) {

                this.editMode = false;

                var questionsArray = self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions;
                
                if(questionData.sequenceNumber != questionData.nextSequenceNumber && !isNaN(questionData.nextSequenceNumber)){
                    for (var i = (questionData.sequenceNumber-1); i < (questionData.nextSequenceNumber-1); i++) {
                        questionsArray[i].sequenceNumber++;
                    }
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                }
                else{
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                    questionsArray.splice((questionData.sequenceNumber),1);
                }

                self.parent.render();
                console.log('master section array : ', self.parent.masterSectionArray);
                self.isLoading = false;
                self.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');            
            }
            self.isLoading = false;
        }); 
    }
    
    ShortQuestionView.prototype.deleteShortTextQuestion = function() {
        this.model.save({
            action: 'delete_question_short_text',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){

            }
        })
    }

    ShortQuestionView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-suryv-del-short-que']"  : "deleteShortTextQuestion",
            "click [data-action='m360-suryv-save-short-que']" : "addShortTextQuestion",
            "click [data-action='m360-suryv-edit-short-que']" : "editShortTextQuestion",

            "focusout [data-focusout='m360-survy-short-que-title-val']" : "titleValidation",
            "focusout [data-focusout='m360-survy-short-que-desc-val']" : "descriptionValidation",
            "focusout [data-focusout='m360-survy-short-que-seq-num-val']" : "sequenceNumberValidation",
        }
    }

    ShortQuestionView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            activeQuestion: this.activeQuestion,
            nextSequenceNumber: this.nextSequenceNumber,
            icons: {
                fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
                uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
                trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
            }
        }
    }

    return ShortQuestionView;


});

define('Saralux.Core.SurveysSV.Question.StarRating.View', [
	'saralux_core_surveyssv_star_rating_question.tpl',


	'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_star_rating_question_tpl,

	SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function StarRatingQuestionView(options){
			console.log('inside StarRatingQuestionView');
			SCView.call(this, options);
			jQuery(window).scrollTop(0);
			var self = this;
			this.template = saralux_core_surveyssv_star_rating_question_tpl;
			this.model = new SurveysSVSS2Model();
			this.parent = options.parent;
			this.activeQuestion = options.activeQuestion;
			this.nextSequenceNumber = options.nextSequenceNumber;
			this.activeSurveyId = options.activeSurveyId;
    }

    StarRatingQuestionView.prototype = Object.create(SCView.prototype);
    StarRatingQuestionView.prototype.constructor = StarRatingQuestionView;
    
    StarRatingQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }

    StarRatingQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }
    
    StarRatingQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    StarRatingQuestionView.prototype.leftLabelValidation = function () {
        this.$('#left-label-required-error').removeClass('err');
        if(this.$('#show-labels').prop("checked")){
            if(this.$('#left-label').val() == ""){
                this.$('#left-label-required-error').addClass('err');
            }
        }
    }

    StarRatingQuestionView.prototype.rightLabelValidation = function () {
        this.$('#right-label-required-error').removeClass('err');
        if(this.$('#show-labels').prop("checked")){
            if(this.$('#right-label').val() == ""){
                this.$('#right-label-required-error').addClass('err');
            }
        }
    }

    StarRatingQuestionView.prototype.addStarRatingQuestion = function () {
        console.log('inside addStarRatingQuestion');
        var self = this;

        var scaleCount = [];
        var startVal = 0;
        var endVal = this.$('#rating-steps').val()
        var scaleCountLength = endVal;
        for (var i = 0; i <= scaleCountLength; i++) {
            var label = null;
            if(i == 0){
                label = this.$('#left-label').val();
            }
            else if(i ==  scaleCountLength){
                label = this.$('#right-label').val();
            }
            scaleCount.push({
                key: startVal++,
                label: label
            });
        }

        // Logic validation
        // Less than validation
        this.$('#less-than-val-error').removeClass('err');
        this.$("#less-than-val-number-error").removeClass('err');
        this.$('#less-than-val-required-error').removeClass('err');

        if(this.$('#star-show-logic-form').prop('checked')){
            var lessThanVal = this.$('#less-than-val').val();
            var regExp = new RegExp(/^[0-9]*$/);
            if(lessThanVal == ''){
                this.$('#less-than-val-required-error').addClass('err');
            }
            if (!regExp.test(lessThanVal)){
                console.log('input is not a number');
                this.$("#less-than-val-number-error").addClass('err');
            }
           else if(
                parseInt(lessThanVal) < parseInt(this.$('#rating-scale-start-val').val())
                ||
                parseInt(lessThanVal) > parseInt(this.$('#rating-scale-end-val').val())
            ){
                this.$('#less-than-val-error').addClass('err');
            }
        }

        // Greater than validation
        this.$('#greater-than-val-error').removeClass('err');
        this.$("#greater-than-val-number-error").removeClass('err');
        this.$('#greater-than-val-required-error').removeClass('err');
        if(this.$('#rating-show-logic-form').prop('checked')){
            var greaterThanVal = this.$('#greater-than-val').val();
            var regExp = new RegExp(/^[0-9]*$/);
            if(greaterThanVal == ''){
                this.$('#greater-than-val-required-error').addClass('err');
            }
            if (!regExp.test(greaterThanVal)){
                this.$("#greater-than-val-number-error").addClass("err");
            }
           else if(
                parseInt(greaterThanVal) < parseInt(this.$('#rating-scale-start-val').val())
                ||
                parseInt(greaterThanVal) > parseInt(this.$('#rating-scale-end-val').val())
            ){
                this.$('#greater-than-val-error').addClass('err');
            }
        }

        this.$('#less-than-greater-than-comparison-error').removeClass('err')
        if(lessThanVal > greaterThanVal){
            this.$('#less-than-greater-than-comparison-error').addClass('err')
        }

        if(this.$('#star-show-logic-form').prop('checked')){
            questionData.addLogic = true;
            if(lessThanVal != ""){
                questionData.lessThanVal = lessThanVal;
            }
            if(greaterThanVal != ""){
                questionData.greaterThanVal = greaterThanVal;
            }
            questionData.lessThanOperator = parseInt(this.$('#less-than').val());
            questionData.greaterThanOperator = parseInt(this.$('#greater-than').val());

            var lessThanOperatorSectionIndex = this.$('#less-than-operator-section').val();
            questionData.lessThanOperatorSection = parseInt(this.parent.masterSectionArray[lessThanOperatorSectionIndex].id);
            var greaterThanOperatorSectionIndex = this.$('#greater-than-operator-section').val();
            questionData.greaterThanOperatorSection = parseInt(this.parent.masterSectionArray[greaterThanOperatorSectionIndex].id);
            var inBetweenOperatorSectionIndex = this.$('#in-between-operator-section').val();
            questionData.inBetweenOperatorSection = parseInt(this.parent.masterSectionArray[inBetweenOperatorSectionIndex].id);
        }

        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 7,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: this.$('#question-sequence-number').val(),
            ratingSteps: this.$('#rating-steps').val(),
            nextSequenceNumber: this.nextSequenceNumber
        };

        if(this.$('#show-labels').prop("checked")){
            questionData.leftScaleLabel = this.$('#left-label').val();
            questionData.rightScaleLabel = this.$('#right-label').val();
        }

        console.log({questionData});
        // Check if error exists
        // if(error exists)

        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'add_question_star_rating',
            questionData: questionData
        }).then(function (res) {
            if(!res.hasError) {

                self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.push(questionData);
                
                self.parent.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                    self.parent.$('.questions-list').addClass('has-questions');
                }

                console.log('master section array : ', self.parent.masterSectionArray);

                // if(self.activeQuestion == null){
                //     self.saveQuestion(res.question);
                // }
                // else{
                //     self.questions[self.activeQuestion.questionIndex] = res.question;
                //     self.activeQuestion = questionData;
                // }
                self.isLoading = false;
                self.render();
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');            
            }
            self.isLoading = false;
        }); 

    }

    StarRatingQuestionView.prototype.updatePreview = function() {
        if(this.$('#left-star-label').val() != ''){
          this.$('.left-label').text(this.$('#left-star-label').val());
        }
    
        if(this.$('#right-star-label').val() != ''){
          this.$('.right-label').text(this.$('#right-star-label').val());
        }
    
        var endVal = this.$('#rating-steps').val();
    
        this.$('.star-container').empty();
    
        for(i=1; i<=endVal; i++){
          this.$('.star-container').append('<div class="star-box"><label class="fa fa-star" id="str'+i+'"></label></div>');
        }
    }
    
    StarRatingQuestionView.prototype.deleteStarRatingQuestion = function() {
        this.model.save({
            action: 'delete_question_star_rating',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){

            }
        })
    }

    StarRatingQuestionView.prototype.resetLessThanLogic = function () {
			this.$('#less-than-val').val("");
			this.$('#less-than-operator-section').val('none');
    }

    StarRatingQuestionView.prototype.resetGreaterThanLogic = function () {
			this.$('#greater-than-val').val("");
			this.$('#greater-than-operator-section').val('none');
    }

		StarRatingQuestionView.prototype.surveySRManualSwitch = function (e) {
			console.log('inside manual switch');
			var targetContainer = this.$(e.currentTarget).attr('data-target');
			console.log('targetContainer : ', targetContainer);
			this.showHideStarLabels();
			if(targetContainer){
				if(this.$('.manual-switch').is(':checked')){
					this.$("#"+targetContainer).show();
				}
				else{
					this.$('#left-star-label-required-error').removeClass('err');
					this.$('#right-star-label-required-error').removeClass('err');
					this.$("#"+targetContainer).hide();
				}
			}
		}

		StarRatingQuestionView.prototype.showHideStarLabels = function(e){
			if(this.$('#show-star-labels').is(':checked')){
				this.$('.left-label').show();
				this.$('.right-label').show();
			}else{
				this.$('.left-label').hide();
				this.$('.right-label').hide();
			}
		}

		StarRatingQuestionView.prototype.surveySrUpdateReview = function(e){
			if(this.$('#left-star-label').val() != ''){
				this.$('.left-label').text(this.$('#left-star-label').val());
			}
			if(this.$('#right-star-label').val() != ''){
				this.$('.right-label').text(this.$('#right-star-label').val());
			}
			var endVal = this.$('#rating-steps').val();
			this.$('.star-container').empty();
			for(i=1; i<=endVal; i++){
				this.$('#question-additional-setting6 .star-container').append('<div class="star-box"><label class="fa fa-star" id="str'+i+'"></label></div>');
			}
		}

		StarRatingQuestionView.prototype.surveyStarShowLogicForm = function(e){
			this.showStarHideLogicBox();
		}

		StarRatingQuestionView.prototype.showStarHideLogicBox = function(e){
			if(this.$('#star-show-logic-form').is(':checked')){
				this.$('#star-logic-form-box').show();
			}else{
				this.$('#star-logic-form-box').hide();
			}
		}
		StarRatingQuestionView.prototype.surveyStarRatingSwitch = function(e){
			this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', function () {
				return !this.checked;
			});
		}

		StarRatingQuestionView.prototype.surveyStarBox = function(e){
			this.$(e.currentTarget).addClass('to-check');
    	this.$(e.currentTarget).prevAll().addClass('to-check');
		}

		StarRatingQuestionView.prototype.surveyStarBoxMouseLeave = function(e){
			this.$(e.currentTarget).removeClass('to-check');
    	this.$(e.currentTarget).prevAll().removeClass('to-check');
		}

		StarRatingQuestionView.prototype.surveyStartRangeSlider = function(e){
			this.sliderValueFunctions();
		}

		StarRatingQuestionView.prototype.sliderValueFunctions = function(){
			var value = (this.$('.step-star-range-slider').val() - this.$('.step-star-range-slider').attr('min')) / (this.$('.step-star-range-slider').attr('max') - this.$('.step-star-range-slider').attr('min')) * 100;
			this.$('.step-star-range-slider').css('background', 'linear-gradient(to right, #34c2fd 0%, #34c2fd ' + value + '%, #ededed ' + value + '%, #ededed 100%)');
			this.$('.step-star-range-slider').siblings(".selected-option").text(this.$('.step-star-range-slider').val());
		}
    
    StarRatingQuestionView.prototype.getEvents = function () {
			return {
				"click [data-action='m360-survy-del-sr-que']"  : "deleteStarRatingQuestion",
				"click [data-action='m360-survy-save-sr-que']" : "addStarRatingQuestion",
				"click [data-action='m360-survy-reset-lt-logic']" : "resetLessThanLogic",
				"click [data-action='m360-survy-reset-gt-logic']" : "resetGreaterThanLogic",
				"focusout [data-focusout='m360-survy-sr-que-title-val']" : "titleValidation",
				"focusout [data-focusout='m360-survy-sr-que-desc-val']" : "descriptionValidation",
				"focusout [data-focusout='m360-survy-sr-que-seq-num-val']" : "sequenceNumberValidation",
				// "focusout [data-focusout='m360-survy-sr-que-rating-steps-val']" : "ratingStepsValidation",
				// "focusout [data-focusout='m360-survy-sr-que-end-rating-val']" : "endRatingValidation",
				"focusout [data-focusout='m360-survy-sr-que-left-label-val']": "leftLabelValidation",
				"focusout [data-focusout='m360-survy-sr-que-right-label-val']": "rightLabelValidation",
				"change [data-change='M360-survey-sr-manual-switch']": "surveySRManualSwitch",
				"click [data-action='M360-survey-sr-update-review']" : "surveySrUpdateReview",
				"click [data-action='M360-survey-star-rating-switch']" : "surveyStarRatingSwitch",
				"change [data-change='M360-survey-star-show-logic-form']": "surveyStarShowLogicForm",
				"mouseenter [data-mouseenter='M360-survey-star-box']": "surveyStarBox",
				"mouseleave [data-mouseleave='M360-survey-star-box-mouse-leave']": "surveyStarBoxMouseLeave",
				"change [data-change='M360-survey-star-range-slider']": "surveyStartRangeSlider"
			}
    }

    StarRatingQuestionView.prototype.getContext = function () {
			return {
				isLoading: this.isLoading,
				activeQuestion: this.activeQuestion,
				nextSequenceNumber: this.nextSequenceNumber,
				icons: {
					fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
					uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
					trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
					icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-cross-grey.png')),
					icnStarActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-star-active.png')),
					icnStarGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
					icnStarRefresh: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-refresh.png')),
				}
			}
    }

    return StarRatingQuestionView;


});

define('Saralux.Core.SurveysSV.Question.YesNo.View', [
	'saralux_core_surveyssv_yesno_question.tpl',


	'Saralux.Core.SurveysSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_surveyssv_yesno_question_tpl,

	SurveysSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function YesNoQuestionView(options){
        console.log('inside YesNoQuestionView');
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_surveyssv_yesno_question_tpl;
		
		this.model = new SurveysSVSS2Model();

		this.parent = options.parent;
        // this.activeQuestion = options.activeQuestion;
        this.nextSequenceNumber = options.nextSequenceNumber;
        this.activeSurveyId = options.activeSurveyId;
    }

    YesNoQuestionView.prototype = Object.create(SCView.prototype);
    YesNoQuestionView.prototype.constructor = YesNoQuestionView;
    
    YesNoQuestionView.prototype.titleValidation = function () {
        this.$('#title-required-err').removeClass('err')
        if(this.$('#question-title').val() == ""){
            this.$('#title-required-err').addClass('err');
        }
    }

    YesNoQuestionView.prototype.descriptionValidation = function () {
        this.$('#description-required-err').removeClass('err')
        if(this.$('#question-description').val() == ""){
            this.$('#description-required-err').addClass('err');
        }
    }

    YesNoQuestionView.prototype.categoryValidation = function () {
        this.$('#category-required-err').removeClass('err')
        if(this.$('#question-description').val() == "-1"){
            this.$('#category-required-err').addClass('err');
        }
    }

    YesNoQuestionView.prototype.sequenceNumberValidation = function () {
        this.$('#sequence-number-required-error').removeClass('err');
        this.$('#sequence-number-number-error').removeClass('err');
        this.$('#sequence-number-max-value-error').removeClass('err');

		var sequenceNumber = this.$('#question-sequence-number').val();
        var regExp = new RegExp(/^[1-9]*$/);
  		if (!regExp.test(sequenceNumber)){
  		  this.$("#sequence-number-number-error").addClass("err");
  		}
        // if(this.$('#question-sequence-number').val() > this.nextSequenceNumber){
        //     this.$('#sequence-number-max-value-error').addClass('err');
        // }
        if(this.$('#question-sequence-number').val() == ""){
            this.$('#sequence-number-required-error').addClass('err');
        }
    }

    YesNoQuestionView.prototype.editYesNoChoiceQuestion = function(e) {
        console.log('edit long parent : ', this.parent);
        var self = this;
        var questionData = {
            id: this.activeQuestion.id,
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 5,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: parseInt(this.$('#question-sequence-number').val()),
            nextSequenceNumber: this.nextSequenceNumber
        };

        console.log('edit data : ', questionData);
        
        
        if(this.$('#yn-show-logic-form').prop('checked')){
            questionData.addLogic = true;
            var yesOptionSectionIndex = this.$('#yes-option-section').val();
            questionData.yesOptionSection = parseInt(this.parent.masterSectionArray[yesOptionSectionIndex].id);
            var noOptionSectionIndex = this.$('#no-option-section').val();
            questionData.noOptionSection = parseInt(this.parent.masterSectionArray[noOptionSectionIndex].id);
        }

        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'edit_question_yes_no',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {

                this.editMode = false;

                var questionsArray = self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions;
                console.log(questionData.sequenceNumber);
                console.log(questionData.nextSequenceNumber);
                if(questionData.sequenceNumber != questionData.nextSequenceNumber && !isNaN(questionData.nextSequenceNumber)){
                    for (var i = (questionData.sequenceNumber-1); i < (questionData.nextSequenceNumber-1); i++) {
                        questionsArray[i].sequenceNumber++;
                    }
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                }
                else{
                    questionsArray.splice((questionData.sequenceNumber-1),0,questionData);
                    questionsArray.splice((questionData.sequenceNumber),1);
                }

                self.parent.render();
                self.isLoading = false;
                self.render();

                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            self.isLoading = false;
        }); 
    }


    YesNoQuestionView.prototype.addYesNoQuestion = function () {
        console.log('inside addShortTextQuestion');
        var self = this;
        var questionData = {
            sectionId: this.parent.activeSection.id,
            surveyId: this.activeSurveyId,
            type: 5,
            title: this.$('#question-title').val(),
            prompt: this.$('#question-description').val(),
            sequenceNumber: this.$('#question-sequence-number').val(),
        };
        
        console.log('question data : ', questionData);
            
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save({
            action: 'add_question_yes_no_choice',
            questionData: questionData
        }).then(function (res) {
            console.log({res});
            if(!res.hasError) {

                self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.push(questionData);
                
                self.parent.render();
                
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length == 1){
                    self.parent.$('.questions-list').addClass('has-questions');
                }

                console.log('master section array : ', self.parent.masterSectionArray);

                // if(self.activeQuestion == null){
                //     self.saveQuestion(res.question);
                // }
                // else{
                //     self.questions[self.activeQuestion.questionIndex] = res.question;
                //     self.activeQuestion = questionData;
                // }
                self.isLoading = false;
                self.render();
                if(self.parent.masterSectionArray[self.parent.activeSection.sequence-1].questions.length > 0){
                    self.parent.$(".question-type-form").hide();
                    self.parent.$(".question-type-selection-empty").hide();
                    self.parent.$(".question-type-selection-choice").hide();
                    self.parent.$(".question-type-selection").show();
                    self.parent.$(".questions-list").show();
                }

                self.parent.$('#tabsBlock2').trigger('click');
                self.parent.$('.dynamic-tabs .tabsBlock').last().trigger('click');            
            }
            self.isLoading = false;
        });
    }

    YesNoQuestionView.prototype.deleteYesNoQuestion = function() {
        this.model.save({
            action: 'delete_question_yes_no',
            questionId: this.activeQuestion.id
        }).then(function (res){
            if(!res.hasError){

            }
        })
    }
    
    YesNoQuestionView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-suryv-del-yn-que']"  : "deleteYesNoQuestion",
            "click [data-action='m360-suryv-save-yn-que']" : "addYesNoQuestion",
            "click [data-action='m360-suryv-edit-yn-que']" : "editYesNoChoiceQuestion",

            "focusout [data-focusout='m360-survy-yn-que-title-val']" : "titleValidation",
            "focusout [data-focusout='m360-survy-yn-que-desc-val']" : "descriptionValidation",
            "focusout [data-focusout='m360-survy-yn-que-seq-num-val']" : "sequenceNumberValidation",
        }
    }

    YesNoQuestionView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            activeQuestion: this.activeQuestion,
            nextSequenceNumber: this.nextSequenceNumber,
            icons: {
                fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
                uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
                trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
                icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-cross-grey.png')),
            }
        }
    }

    return YesNoQuestionView;


});

define('Saralux.Core.SurveysSV.SS2Model',[
    'SCModel',
    'Utils'
], function (
    SCModelModule,
    Utils
) {
    'use strict';
 
    var SCModel = SCModelModule.SCModel;
 
    function SurveysSVSS2Model () {
        SCModel.call(this);
 
        this.urlRoot = function urlRoot() {
            return Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/SurveysSV/SuiteScript2/SurveysSV.Service.ss"
                ), true
            );
        }
    }

    SurveysSVSS2Model.prototype = Object.create(SCModel.prototype);
    SurveysSVSS2Model.prototype.constructor = SurveysSVSS2Model;
 
    return SurveysSVSS2Model;
});

define('Saralux.Core.SurveysSV.View',	[
    'saralux_core_surveyssv.tpl',
    // 'saralux_core_surveyssv_create.tpl',
    // 'saralux_core_surveyssv_configure.tpl',

    'Saralux.Core.SurveysSV.List.View',
    'Saralux.Core.SurveysSV.ConfigureSurvey.View',
    'Saralux.Core.SurveysSV.CreateSurvey.View',
	
	'SCView'
], function (
	saralux_core_surveyssv_tpl,
	// saralux_core_surveyssv_create_tpl,
	// saralux_core_surveyssv_configure_tpl,

    SurveysSVListView,
    SurveysSVConfigureSurveyView,
    SurveysSVCreateSurveyView,

	
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function SurveysSVView(options) {
        console.log('inside main view');
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

		this.container = options.container;

        this.template = saralux_core_surveyssv_tpl;
        this.activeView = "SurveysSV.List";

        this.surveyName = null;
        this.selectedTemplate = null;
        this.activeSurveyId = null

        this.childViews = {
            'SurveysSV.List': function () {
                return new SurveysSVListView({
                    container: this.container,
                    m360Context: this.m360Context,
                    parent: this,
                });
            },
            'SurveysSV.ConfigureSurvey': function () {
                return new SurveysSVConfigureSurveyView({
                    container: this.container,
                    m360Context: this.m360Context,
                    parent: this,
                    surveyName: this.surveyName,
                    selectedTemplate: this.selectedTemplate,
                    activeSurveyId: this.activeSurveyId
                });
            },
            'SurveysSV.CreateSurvey': function () {
                return new SurveysSVCreateSurveyView({
                    container: this.container,
                    m360Context: this.m360Context,
                    parent: this,
                    activeSurveyId: this.activeSurveyId
                });
            },
        }
    }

    SurveysSVView.prototype = Object.create(SCView.prototype);
    SurveysSVView.prototype.constructor = SurveysSVView;

    SurveysSVView.prototype.getContext = function () {
        return {
			message: "My Surveys",
            activeView: this.activeView,
            /* isLoading: this.isLoading,
            chapterDetails: this.chapterDetails,
			
			defaultProfileImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),
			
			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png'))
			} */
        }
    }


    SurveysSVView.prototype.getEvents = function () {
        return {
            'click [data-action="to-create-survey"]': 'viewCreateSurvey',
            'click [data-action="to-survey-list"]': 'viewSurveyList',
            'click [data-action="to-configure-survey"]': 'viewConfigureSurvey',
        }
    }

    
    
    SurveysSVView.prototype.viewCreateSurvey = function(e) {
        console.log('inside new survey');
        this.activeView = "SurveysSV.CreateSurvey";
        console.log(this.activeView);
        // this.template = saralux_core_surveyssv_create_tpl;
        jQuery(window).scrollTop(0);
        this.render();
        console.log(this.activeView);
        
	}

    SurveysSVView.prototype.viewSurveyList = function(e) {
        console.log('inside list view');
        this.activeView = "SurveysSV.List";
        // this.template = saralux_core_surveyssv_list_tpl;
        jQuery(window).scrollTop(0);
        this.render();
	}

    // SurveysSVView.prototype.viewConfigureSurvey = function(e) {
    //     console.log('inside configure view');
    //     this.activeView = "SurveysSV.ConfigureSurvey";

    //     // this.template = saralux_core_surveyssv_configure_tpl;
    //     jQuery(window).scrollTop(0);
    //     this.render();
	// }

    return SurveysSVView;
});

define('Saralux.Core.TasksModuleSV.BankInformation.View',	[
	'saralux_core_tm_bank_information.tpl',
	
	'Saralux.Core.TasksModuleSV.SS2Model',

	'Saralux.Core.ExternalLibraries.MomentJS',

	'Utils',
	'SCView'
], function (
	saralux_core_tm_bank_information_tpl,

	TasksModuleSVSS2Model,

	MomentJS,

	Utils,
	SCViewModule
) {
	'use strict';
	
	var SCView = SCViewModule.SCView;

	function TMSVBankInformation(options) {
		SCView.call(this, options);
		var self = this;

		this.model = new TasksModuleSVSS2Model();
		this.parent = options.parent;

		this.taskId = options.taskId;
		this.accountTypes = null;
		this.guidelinesData = {};
		this.bankInformation = null;
		this.applicantName = options.applicantName;
		this.showPrimaryAccountCheckbox = options.showPrimaryAccountCheckbox;

		if(options.taskStatus == "Completed"){
			this.taskCompleted = true;
		}
		else{
			this.taskCompleted = false;
		}

		console.log('bank information options : ', options);

		this.isLoading = true;
		this.model.clear({ silent: true }); 
		this.model.save({
			action: 'get_bank_account_types',
			taskId: this.taskId
		}).then(function(res){
			console.log('bank acc types : ', res.data);
			console.log('task com : ', self.taskCompleted);
			if(!res.hasError){
				self.accountTypes = res.data;
				self.guidelinesData = res.guidelinesData
			}
			self.isLoading = false;
			self.render(); 
		})

		// get bank information
		this.isLoading = true;
		this.model.clear({ silent: true });
		this.model.save({
			action: 'get_bank_information',
		}).then(function(res){
			console.log(res.data);
			if(!res.hasError){
				self.bankInformation = res.bankInformation;
				console.log('bank information : ', self.bankInformation);
			}
			self.isLoading = false;
			self.render(); 
		})
		
		jQuery(window).scrollTop(0);

		this.template = saralux_core_tm_bank_information_tpl;
	}

	TMSVBankInformation.prototype = Object.create(SCView.prototype);
	TMSVBankInformation.prototype.constructor = TMSVBankInformation;

	
	
	TMSVBankInformation.prototype.validateRoutingNumber = function (e) {
		var routingNumber = this.$('#routing-number').val();
		var reRoutingNumber = this.$('#re-routing-number').val();
		
		this.$('#err-invalid-routing-number').removeClass("err")
		this.$("#err-routing-number-input-required").removeClass("err");
		this.$("#err-routing-number-minimum-length").removeClass("err");
		this.$("#err-routing-number-number-required").removeClass("err");
		this.$('#err-invalid-re-routing-number').removeClass("err")

		var regExp = new RegExp(/^[0-9]*$/);
		if (regExp.test(routingNumber)){
			if(routingNumber.length < 9 && routingNumber.length > 0){
				this.$("#err-routing-number-minimum-length").addClass("err");
			}
			else if(routingNumber.length == 9){
				// this.$("#err-routing-number-minimum-length").removeClass("err");
				var routingNumberArray = routingNumber.split("").map((
					function(t) {
						return parseInt(t);
					}
				));
				if(routingNumberArray.length)
				var numTotal = 0
				var currentIndex = 0
				for (var i = 0; i < 3; i++) {
					numTotal += routingNumberArray[currentIndex] * 3; 
					numTotal += routingNumberArray[currentIndex+1] * 7; 
					numTotal += routingNumberArray[currentIndex+2] * 1;
					currentIndex = currentIndex+3; 
				}
				console.log({numTotal});
				if(numTotal % 10 != 0 ){
					console.log('routing number error');
					this.$('#err-invalid-routing-number').addClass("err");
				}
			}
		}
		else{
			this.$("#err-routing-number-number-required").addClass("err");
		}
		if(routingNumber == "") {
			this.$("#err-routing-number-input-required").addClass("err");
		}

		if(routingNumber != reRoutingNumber) {
			this.$('#err-invalid-re-routing-number').addClass("err");
		}
	}
	
	TMSVBankInformation.prototype.saveSubmitBankInformationTask = function (e) {
		console.log('inside saveSubmitBankInformationTask');

		this.$(".global-error-msg").hide();

		var self = this;

		var routingNumber = this.$('#routing-number').val();
		this.validateRoutingNumber(routingNumber);

		var accountNumber = this.$('#account-number').val();
		var reAccountNumber = this.$('#confirm-account-number').val();

		if(accountNumber != reAccountNumber) {
			this.$('#confirm-account-number').siblings("p").addClass("err"); 
		} else {
			this.$('#confirm-account-number').siblings("p").removeClass("err"); 
		}

		var data = {};
		data.bankName = this.$('#bank-name').val();
		data.accountType = this.$('#account-type').val();
		data.routingNumber = this.$('#routing-number').val();
		data.accountNumber = accountNumber;
		data.confirmAccountNumber = this.$('#confirm-account-number').val();

		data.bankName = (""+data.bankName).trim() + " - " + (""+this.applicantName).trim();

		if(this.showPrimaryAccountCheckbox) {
			data.isPrimaryAccount = this.$('#is-primary-account').is(":checked");
		} else {
			data.isPrimaryAccount = true;
		}

		console.log({data});

		if(this.$('#bank-account-information').find('.err').length == 0){
			this.$("#submit-bank-information").attr("disabled", true);
			this.$("#submit-bank-information").text(Utils.translate("Submitting..."));

			console.log('no error');
			this.model.clear({ silent: true }); 
			this.model.save({
				action: 'save_bank_information',
				type: 'submit',
				taskId: this.taskId,
				data: data
			}).then(function(res){
				console.log({res});

				self.$("#submit-bank-information").attr("disabled", false);
				self.$("#submit-bank-information").text(Utils.translate("Submit"));

				if(!res.hasError){
					self.taskCompleted = true;
					self.render();
					self.parent.getData();
					self.parent.render();
				} else {
					self.$("#standard-error-message").text(Utils.translate(res.message))
					self.$(".global-error-msg").show();
				}

				console.log('task completed : ', self.taskCompleted);
			})
		}
		else{
			console.log('error exists');
		}

	}

	TMSVBankInformation.prototype.validateAccountNumber = function () {
		this.$("#err-account-number-number-required").removeClass("err");
		this.$("#err-account-number-input-required").removeClass("err");
		
		var accountNumber = this.$('#account-number').val()
		var regExp = new RegExp(/^[0-9]*$/);
  		if (!regExp.test(accountNumber)){
  		  this.$("#err-account-number-number-required").addClass("err");
  		}
  		if(accountNumber == "") {
  		  this.$("#err-account-number-input-required").addClass("err");
  		} 
	}

	TMSVBankInformation.prototype.validateConfirmAccountNumber = function () {
		this.$("#err-account-numbers-must-match").removeClass("err");
		
		var confirmAccountNumber = this.$('#confirm-account-number').val();
		var accNum = $('#account-number').val();
		if(accNum !== confirmAccountNumber || confirmAccountNumber == ""){
		  this.$("#err-account-numbers-must-match").addClass("err");
		}
	}

	TMSVBankInformation.prototype.validateAccountType = function () {
		this.$("#err-account-type-input-required").removeClass("err");
		
		var accountType = this.$('#account-type').val();
		if(accountType == "" || accountType == -1) {
			this.$("#err-account-type-input-required").addClass("err");
		} 
	}
	TMSVBankInformation.prototype.validateBankName = function () {
		this.$("#err-bank-name-input-required").removeClass("err");
		
		var bankName = this.$('#bank-name').val();
		if(bankName == "") {
			this.$("#err-bank-name-input-required").addClass("err");
		} 
	}
	TMSVBankInformation.prototype.validateAccountName = function () {
		this.$("#err-account-name-input-required").removeClass("err");
		
		var accountName = this.$('#name-on-account').val();
		if(accountName == "") {
			this.$("#err-account-name-input-required").addClass("err");
		} 
	}


	TMSVBankInformation.prototype.getEvents = function () {
		return {
			'click [data-action="m360-sch-save-bank-info"]': 'saveBankInformationTask',
			'click [data-action="m360-sch-save-submit-bank-info"]': 'saveSubmitBankInformationTask',
			
			'focusout [data-focusout="m360-sch-val-acc-type"]'	   	   : 'validateAccountType',
			'focusout [data-focusout="m360-sch-val-bank-name"]'	   	   : 'validateBankName',
			'focusout [data-focusout="m360-sch-val-routing-num"]'	   : 'validateRoutingNumber',
			'focusout [data-focusout="m360-sch-val-account-num"]'	   : 'validateAccountNumber',
			'focusout [data-focusout="m360-sch-val-account-name"]'	   : 'validateAccountName',
			'focusout [data-focusout="m360-sch-val-conf-account-num"]' : 'validateConfirmAccountNumber'
		}
	}
	
	TMSVBankInformation.prototype.getContext = function () {
		return {
			taskCompleted: this.taskCompleted,
			accountTypes: this.accountTypes,
			guidelinesData: this.guidelinesData,
			bankInformation: this.bankInformation,

			isLoading: this.isLoading,

			showPrimaryAccountCheckbox: this.showPrimaryAccountCheckbox,

			applicantName: this.applicantName
		}
	}

	return TMSVBankInformation;
});



define('Saralux.Core.TasksModuleSV.LaunchTest.View',	[
	'saralux_core_tm_launch_test.tpl',
	'Saralux.Core.TasksModuleSV.SS2Model',
	'Utils',
  'SCView'
], function (
	saralux_core_tm_launch_test_tpl,
	TasksModuleSVSS2Model,
	Utils,
  SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

    function TMSVLaunchTest(options) {
			var self = this;
			console.log('TMSVLaunchTest options: ', options);
			SCView.call(this, options);
			this.taskId = options.ccTaskDetails.id;
			console.log(this.taskId);
			this.testId = null;
			this.testRegId = null;
			this.isCompleted = false;
			this.model = new TasksModuleSVSS2Model();
			this.model.clear({ silent: true }); 
			this.model.save({
			action: 'get_related_test_id',
			taskId: this.taskId
		}).then(function(res){
			console.log('related test : ', res);
			if(!res.hasError) {
				self.testId = res.testId;
				self.testRegId = res.testRegId;
				self.isCompleted = res.isCompleted;
			}
      self.render();
		})
		
        this.template = saralux_core_tm_launch_test_tpl;


		var self = this;
		jQuery(window).scrollTop(0);
    }

    TMSVLaunchTest.prototype = Object.create(SCView.prototype);
    TMSVLaunchTest.prototype.constructor = TMSVLaunchTest;

	TMSVLaunchTest.prototype.getEvents = function () {
        return {
             'click [data-action="m360-slxc-show-test"]': 'showTest'
        }
    }

    TMSVLaunchTest.prototype.showTest = function (e) {
		// this.model.clear({ silent: true }); 
        // this.model.save({
        //     action: 'complete_test_task',
        //     taskId: this.taskId
        // }).then(function(res){
        //     console.log({res});
        // });

        Backbone.history.navigate('/launch-test/'+this.testRegId, { trigger: true, replace: false })
        // this.$("#test-completed").show();
        // this.$("#launch-test").hide();
    }

    TMSVLaunchTest.prototype.getContext = function () {
			return {
				isLoading: false,
				testId: this.testId,
				testRegId: this.testRegId,
				isCompleted: this.isCompleted,
				imgClipboard: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-clipboard.png')),
				imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png'))
			}
		}
    return TMSVLaunchTest;
});


define("Saralux.Core.TasksModuleSV.SS2Model", [
    "Backbone", 
    "SCModel", 
    "Utils"
], function(
    Backbone,
    SCModelModule,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/TasksModuleSV/SuiteScript2/TasksModuleSV.Service.ss"
            ),
            true
        )
	});
});

define('Saralux.Core.TasksModuleSV.SignDocument.View',	[
	'saralux_core_tm_sign_document.tpl',

	'Saralux.Core.TasksModuleSV.SS2Model',

	'Saralux.Core.ExternalLibraries.MomentJS',

	'Utils',
    'SCView'
], function (
	saralux_core_tm_sign_document_tpl,

	TasksModuleSVSS2Model,

	MomentJS,

	Utils,
    SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

    function TMSVSignDocument(options) {
		console.log('sign document options: ', options);
		SCView.call(this, options);
		var self = this;
		jQuery(window).scrollTop(0);		
		this.template = saralux_core_tm_sign_document_tpl;

		this.model = new TasksModuleSVSS2Model();

		this.taskId = options.taskId;
		this.parent = options.parent;
		this.signDocumentTaskData = {};

		this.taskDetails = options.taskDetails.signDocumentDetails;

    }

    TMSVSignDocument.prototype = Object.create(SCView.prototype);
    TMSVSignDocument.prototype.constructor = TMSVSignDocument;

	TMSVSignDocument.prototype.validateInput = function () {
		var self = this;

		this.$('.global-error-msg').hide();

		if(this.$('#terms-conditions').prop('checked') && this.$('#electronic-sign').prop('checked') && this.$('#full-name').val() != ''){
			this.$('#save-submit-button').prop('disabled', false);
			this.$('#save-button').prop('disabled', false);
		}
		else {
			this.$('#save-submit-button').prop('disabled', true);
			this.$('#save-button').prop('disabled', true);
		}

		if( this.$('#full-name').val() != '') {
			this.$('#save-button').prop('disabled', false);
			this.$('#save-submit-button').prop('disabled', false);
		}
		else{
			this.$('.global-error-msg').show();
			this.$('#save-button').prop('disabled', true);
			this.$('#save-submit-button').prop('disabled', true);
		}
	}

	TMSVSignDocument.prototype.acceptDeclineTask = function (e) {
		var self = this;

		console.log('name: ', this.$('#full-name').val());
		if(this.$('#full-name').val() == '') {

			this.$('.global-error-msg').show();

			this.$('#save-button').prop('disabled', true);
			this.$('#save-submit-button').prop('disabled', true);

			return;
		}

		var taskAccepted = false;

		var dataMode = this.$(e.currentTarget).attr('data-mode');
		console.log({dataMode});
		if(dataMode == 'accept') {
			taskAccepted = true;
		}

		$("[data-action='m360-slxc-sd-accept-decline-task']").attr('disabled', true);
		if(taskAccepted) {
			this.$("#"+e.currentTarget.id).text(Utils.translate('Accepting...'));
		} else {
			this.$("#"+e.currentTarget.id).text(Utils.translate('Declining...'));
		}

		var data = {
			action: "sign_document",
			taskId: this.taskId,
			taskAccepted: taskAccepted,
			signatoryName: this.$('#full-name').val()
		};

		this.parent.signDocument(data);
	}

	TMSVSignDocument.prototype.getEvents = function () {
        return {
            'change [data-action="m360-slxc-sd-validate-input"]': 'validateInput',
            'click [data-action="m360-slxc-sd-accept-decline-task"]': 'acceptDeclineTask',
        }
    }

    TMSVSignDocument.prototype.getContext = function () {
        return {
			isLoading: this.isLoading,

			today: MomentJS().format('MM/DD/YYYY'),
			taskDetails: this.taskDetails,

            icons: {
				icnDownload: Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-1/icn-download.png')
				),
            }
        }
    }

    return TMSVSignDocument;
});


define('Saralux.Core.TasksModuleSV.UpdateExternalTest.View',	[
	'saralux_core_tm_update_external_test.tpl',

	'Saralux.Core.MyPortal.Context.Model',
	
	'Saralux.Core.TasksModuleSV.SS2Model',
	'Saralux.Core.ExternalLibraries.MomentJS',

	'Utils',
  'SCView'
], function (
	saralux_core_tm_update_external_test_tpl,

	MyPortalContextModel,
	
	TasksModuleSVSS2Model,
	MomentJS,

	Utils,
    SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

    function TMSVUpdateExternalTest(options) {
		//console.log('TMSVUpdateExternalTest options: ', options);
		SCView.call(this, options);

		this.template = saralux_core_tm_update_external_test_tpl;

		var self = this;
		jQuery(window).scrollTop(0);

		this.container = options.container;
		this.parent = options.parent;
		this.m360Context = options.m360Context;
		this.credentialDetails = options.credentialDetails;
		this.ccTaskDetails = options.ccTaskDetails;
		this.ccCertReqId = options.ccCertReqId;

		this.mpContextModel = MyPortalContextModel.getInstance();
		this.customerId = this.mpContextModel.get('m360CustomerId');

		this.model = new TasksModuleSVSS2Model();

		//this.ccTaskDetails.status.hasCompleted = true;
		this.isValidTestDate = false;
		this.documentsToUpload = [];
		this.taskCompleted = false;
    }

    TMSVUpdateExternalTest.prototype = Object.create(SCView.prototype);
    TMSVUpdateExternalTest.prototype.constructor = TMSVUpdateExternalTest;

	TMSVUpdateExternalTest.prototype.getEvents = function () {
		return {
			'click [data-action="m360-slxc-test-tabs"]': 'testTabs',
			'change [data-action="m360-slxs-validate-date-input"]': 'validateDateField',
			"change [data-action='m360-slxc-upload-document']": "getDocument",
			"click [data-action='m360-slxc-remove-document']": "removeDocument",
			"click [data-action='m360-slxc-submit-document']": "submitDocument",
			"change [data-action='m360-slxs-validate-name-input']": "validateFormInputs",
			"change [data-action='m360-slxs-validate-confirmtion-input']": "validateFormInputs",
			"click [data-action='m360-slxc-uet-upload-image']": "uploadImage"
		}
  }

	TMSVUpdateExternalTest.prototype.getFormData = function(e){
		var fullName = this.$("#full-name").val();
		var testDate = this.$("#select-date").val();
		var testCompletionConfirmation = this.$("#terms-conditions").is(':checked');
		this.formData = {
			fullName : fullName,
			testDate: testDate,
			testCompletionConfirmation: testCompletionConfirmation
		};
	}

	TMSVUpdateExternalTest.prototype.setFormData = function(e){
		if(this.formData){
			if(this.formData.fullName)
				this.$("#full-name").val(this.formData.fullName);
			if(this.formData.testDate)
			this.$("#select-date").datepicker('setDate', new Date(this.formData.testDate));
			if(this.formData.testCompletionConfirmation === true || this.formData.testCompletionConfirmation === false) 
				this.$("#terms-conditions").prop('checked', this.formData.testCompletionConfirmation);
		}
		
	}

	TMSVUpdateExternalTest.prototype.validateFormInputs = function(e){
		var fullName = this.$("#full-name").val();
		var testDate = this.$("#select-date").val();
		var testCompletionConfirmation = this.$("#terms-conditions").is(':checked');
		if((testDate != null && this.isValidTestDate == true) && fullName != "" 
		   && testCompletionConfirmation == true && this.documentsToUpload.length > 0){
			this.$("#submit-btn").attr("disabled", false);
		}
		else{
			this.$("#submit-btn").attr("disabled", true);
		}
	}

	TMSVUpdateExternalTest.prototype.validateDateField = function(e){
		var date = this.$("#select-date").datepicker('getDate');
		if(new Date(date) > new Date()){
			this.isValidTestDate = false;
			this.$(e.currentTarget).siblings("p").addClass("err");
		}else{
			this.isValidTestDate = true;
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
		this.validateFormInputs(e);
	}

	TMSVUpdateExternalTest.prototype.submitDocument = function (e) {
		var self = this;
		var isDisabled = this.$("#submit-btn").attr("disabled");
		if(isDisabled) {
			console.error('ERROR: submit button disabled');
			return;
		}
		var docToUpload = this.documentsToUpload[0];
		var fileInfo = docToUpload.name.split(".");
		var fileExtension = fileInfo[fileInfo.length-1];

		var fullName = this.$("#full-name").val();
		var date = this.$("#select-date").datepicker('getDate');
		var testCompletionConfirmation = Boolean(this.$("#terms-conditions").val());

		var ccTaskName = self.ccTaskDetails.name.replaceAll(" ","_");
		var filName = this.$(".f-name").text().replaceAll(" ","_");

		var data = {
			action: "save_external_test_document",
			fileExtension: fileExtension,
			documentData: docToUpload.uploadedDoc,
			fileName: filName,
			ccCertReqId: self.ccCertReqId,
			ccTaskName: ccTaskName,
			ccReqTaskId: self.ccTaskDetails.id,
			fullName: fullName,
			testDate: date,
			testCompletionConfirmation: testCompletionConfirmation
		};
		self.model.clear({silent: true});
		self.model.save(data).done(function(res) {
			//console.log("response is ", res);
			if(!res.hasError) {
				self.parent.reloadTask();
				self.$("#submit-btn").attr("disabled", true);
				//add image
			}
			self.$(e.currentTarget).attr("disabled", false);
			self.$(e.currentTarget).text(Utils.translate('Submit'));
			self.$(".external-test").hide();
    		self.$(".transcript-uploaded").show();
		});
	}

	TMSVUpdateExternalTest.prototype.removeDocument = function (e) {
		this.getFormData();
		var index = this.$(e.currentTarget).attr("data-index")
		//console.log({index});
		//console.log(this.documentsToUpload);		
		this.documentsToUpload.splice(index, 1);
		//console.log(this.documentsToUpload);
		this.uploadedDocumentCount--;
		this.render();
		this.setFormData();
	}
	
	TMSVUpdateExternalTest.prototype.getDocument = function () {
		var self = this;
        self.getFormData();
		var uploadedDoc = jQuery('#upload-document')[0].files[0];

        if(uploadedDoc) {
            var reader = new FileReader();
            reader.onloadend = function() {
				
				//console.log({uploadedDoc});
				var i = parseInt(Math.floor(Math.log(uploadedDoc.size) / Math.log(1024)));
				var size =  Math.round(uploadedDoc.size / Math.pow(1024, i), 2);
				var name = uploadedDoc.name;
                uploadedDoc = (reader.result).split('base64,')[1];
				
				self.documentsToUpload.push({
					uploadedDoc: uploadedDoc,
					name: name,
					size: size
				});
				self.uploadedDocumentCount++;

				var arrayLength = self.documentsToUpload.length - 1;
				//console.log({arrayLength});
				self.render();
				self.setFormData();
				
				//console.log(self.documentsToUpload);
				self.$('.upload-image-box').hide();
				self.validateFormInputs(null);
            }
            reader.readAsDataURL(uploadedDoc);
		}
	}

	TMSVUpdateExternalTest.prototype.testTabs = function (e) {
		this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
		this.$(e.currentTarget).parent(".tab-header").find(".tabs div").remove();
		this.$(e.currentTarget).append("<div></div>");
		this.$(e.currentTarget).addClass("active");
		this.$(e.currentTarget).parent(".tab-header").siblings(".tab-body").hide();
		var clickedtab = this.$(e.currentTarget).attr('tab-name');
		this.$("." + clickedtab).show();
  }

	TMSVUpdateExternalTest.prototype.uploadImage = function(e){
		e.stopImmediatePropagation();
  	this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
	}

	TMSVUpdateExternalTest.prototype.getContext = function () {
		return {
		data: this.data,
		isLoading: this.isLoading,
		taskCompleted: this.taskCompleted,
		documentsToUpload: this.documentsToUpload,
		isLoading: false,
		ccTaskDetails: this.ccTaskDetails,
		imgSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),
			icons: {
				icnDocUploaded: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/group-3.png')),
				icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
				imgUploads: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-uploads.png')),
				icnDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-date.png')),
				imgUpload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png'))
			}
		}
	}
	return TMSVUpdateExternalTest;
});


define('Saralux.Core.TasksModuleSV.UploadDocument.View',	[
	'saralux_core_tm_upload_document.tpl',

	'Saralux.Core.TasksModuleSV.SS2Model',
	
	'Utils',
	'SCView'
], function (
	saralux_core_tm_upload_document_tpl,

	TasksModuleSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';
	
	var SCView = SCViewModule.SCView;
	function TMSVUploadDocument(options) {
		SCView.call(this, options);
		var self = this;

		console.log('upload documents options : ', options);

		this.template = saralux_core_tm_upload_document_tpl;

		this.model = new TasksModuleSVSS2Model();

		this.parent = options.parent;

		this.documentsToUpload = [];
		// this.documents = [];
		this.taskId = options.taskId;
		this.taskCompleted = false;
		this.uploadedDocumentCount = 0;
		
		if(options.taskStatus == "Completed"){
			this.taskCompleted = true;
		}
		
		this.applicationId = options.applicationId;
		this.module = options.module;

		this.guidelinesLabel = '';
		this.guidelines = '';

		this.getData()
		
		this.data = {
			isTaskComplete: false,
			guideline: "Sample Guidelines"
		};

		jQuery(window).scrollTop(0);

	}

	TMSVUploadDocument.prototype = Object.create(SCView.prototype);
	TMSVUploadDocument.prototype.constructor = TMSVUploadDocument;

	TMSVUploadDocument.prototype.getEvents = function () {
		return {
			"click [data-action='m360-tmsv-save-upld-doc']": "saveTask",
			"change [data-action='m360-tmsv-upload-document']": "insertInArray",
			"click [data-action='m360-tmsv-remove-document']": "removeDocument",
			"click [data-action='m360-tmsv-submit-upld-doc']": "saveAndSubmitTask",
		}
	}

	TMSVUploadDocument.prototype.getData = function(e) {
		var self = this;

		var data = {
			action: 'fetch_task_guidelines',
			applicationId : this.applicationId,
			taskId: this.taskId,
			module: this.module
		};

		console.log({data});

		this.model.clear({ silent: true }); 
		this.model.save(data).then(function(res) {
			console.log('upload documents guidelines : ', res);

			if(!res.hasError && res.data) {
				self.guidelines = res.data.guidelines;
				self.guidelinesLabel = res.data.guidelinesLabel;
			}
			
			self.render();
		});
	}

	TMSVUploadDocument.prototype.removeDocument = function (e) {
		console.log('inside removeDocument');
		var index = this.$("#" + e.currentTarget.id).attr("data-index")
		console.log({index});
		console.log(this.documentsToUpload);		
		this.documentsToUpload.splice(index, 1);
		console.log(this.documentsToUpload);
		this.uploadedDocumentCount--;
		this.render();
	}

	TMSVUploadDocument.prototype.saveAndSubmitTask = function () {
		var self = this;

		var data = {
			action: 'submit_upload_document',
			taskId: this.taskId,
			documentsToUpload: this.documentsToUpload,
			applicationId: this.applicationId
		};

		console.log({data});

		if(this.documentsToUpload.length > 0) {
			this.$(".global-error-msg").hide();

			this.$("#submit-upload-document-task").attr("disabled", true);
			this.$("#submit-upload-document-task").text(Utils.translate('Save & Submit Processing...'));

			this.model.save(data).then(function(res){
				self.$("#submit-upload-document-task").attr("disabled", false);
				self.$("#submit-upload-document-task").text(Utils.translate('Save & Submit'));

				console.log({res});

				self.getData();
				
				self.parent.taskDetails.taskStatus = "Completed";
				self.parent.taskDetails.dateSubmitted = res.completionDate;
				self.parent.render();
			})
		} else {
			this.$(".global-error-msg").show();
		}
	}
	
	TMSVUploadDocument.prototype.insertInArray = function () {
		var self = this;
        var uploadedDoc = jQuery('#upload-document')[0].files[0]
        if(uploadedDoc){
            var reader = new FileReader();
            reader.onloadend = function() {
				
				console.log({uploadedDoc});
				var i = parseInt(Math.floor(Math.log(uploadedDoc.size) / Math.log(1024)));
				var size =  Math.round(uploadedDoc.size / Math.pow(1024, i), 2);
				var name = uploadedDoc.name;
                uploadedDoc = (reader.result).split('base64,')[1];
				
				self.documentsToUpload.push({
					uploadedDoc: uploadedDoc,
					name: name,
					size: size
				});
				self.uploadedDocumentCount++;

				// self.documents.push({
				// 	uploadedDoc: uploadedDoc,
				// 	name: name,
				// 	size: size
				// });

				var arrayLength = self.documentsToUpload.length - 1;
				console.log({arrayLength});
				self.render();
				// self.$('.individual-file-box-'+arrayLength).show();
				
				console.log(self.documentsToUpload);
              
            }
            reader.readAsDataURL(uploadedDoc);
		}

		// push in files to upload 
	}

	TMSVUploadDocument.prototype.getContext = function () {
		return {
			data: this.data,
			isLoading: this.isLoading,
			guidelines : this.guidelines,
			taskCompleted: this.taskCompleted,
			guidelinesLabel : this.guidelinesLabel,
			documentsToUpload: this.documentsToUpload,
			uploadedDocumentCount: this.uploadedDocumentCount,

			icons: {
				inactive:Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-2/icn-document-inactive.png')
				),
				remove:Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-2/icn-remove.png')
				),
				download:Utils.getAbsoluteUrl(
					getExtensionAssetsPath('img/icons-set-2/icn-download.png')
				),
			}
		}
	}

	return TMSVUploadDocument;
});


define('Saralux.Core.TasksModuleSV.UploadResumeOrTrasncript.View',	[
	'saralux_core_tm_upload_resume_or_transcript.tpl',
	
	'Saralux.Core.TasksModuleSV.SS2Model',

	'Saralux.Core.ExternalLibraries.MomentJS',

	'Utils',
	'SCView'
], function (
	saralux_core_tm_upload_resume_or_transcript_tpl,

	TasksModuleSVSS2Model,

	MomentJS,

	Utils,
	SCViewModule
) {
	'use strict';
	
	var SCView = SCViewModule.SCView;

	function TMSVUploadResume(options) {
		SCView.call(this, options);

		var self = this;
		console.log(options)
		
		this.model = new TasksModuleSVSS2Model();
		this.parent = options.parent;
		this.guidelines = "";
		this.guidelinesLabel = "";
		this.resumeUrl = "";
		this.hasResume = "";
		this.existingResumeName = "";
		this.existingResumeId = "";
		this.taskId = options.taskId;
		this.template = saralux_core_tm_upload_resume_or_transcript_tpl;
		this.fileSize = "";
		this.taskType = options.taskType;
		this.resumeUploaded = false;
		this.getData()

    console.log('upload resume options: ', options);
	}

	TMSVUploadResume.prototype = Object.create(SCView.prototype);
	TMSVUploadResume.prototype.constructor = TMSVUploadResume;
	
	TMSVUploadResume.prototype.getEvents = function () {
		return {
			'click [data-action="m360-submit-form"]': 'submitForm',
			'click [data-action="upload-click"]': 'uploadClick',
			'change [data-change="file-change"]': "fileChange",
			'click [data-action="remove-image-click"]': "removeImageClick",
			'click [data-action="upload-existing"]': "uploadExisting",
			'click [data-action="m360-slxc-tm-urt-showmenu"]': "urtShowmenu"
		}
	}
	
	TMSVUploadResume.prototype.uploadClick = function (e) {
		e.stopImmediatePropagation();
	  this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
	},

	TMSVUploadResume.prototype.removeImageClick = function (e) {
		this.$("#upload-document").val('');
		this.$('.upload-image-box').css({'background-color':'#fafafa', 'border-style':'dashed'});
		this.$('.uploaded-files-box').hide();
		this.$('.upload-image').show();
		this.$('.submit-request').prop("disabled", true);
		this.$("#submit-btn").attr('disabled', true);
		this.$("#document-size-error").css("display", "none");
		this.$("#document-size-error").css("display", "none");
	},

	TMSVUploadResume.prototype.readFileName = function(input,thisObj) {
		if(input.files && input.files[0]) {
			var size = input.files[0].size;
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

			const i = Math.floor(Math.log(size) / Math.log(k));
			var image_size = (size / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];

			var sizeLimit = 10 * k;
			var kbSize = (size / k);
			kbSize = ((Math.round(kbSize * 100) / 100));

			this.$('.upload-image-box').removeClass("upload-err-box");							
			this.$("#document-size-error").css("display", "hidden");
	
			if (input.files && input.files[0] && kbSize <= sizeLimit) {
				var image_name = input.files[0].name;
				
				this.$('.individual-file-box').find(".f-name").html(image_name);
				
				this.$('.individual-file-box').find(".f-size").html(image_size);

				this.$('.upload-image-box').css({'background-color':'#fff', 'border-style':'solid'});
				this.$('.uploaded-files-box').show();
				this.$('.upload-image').hide();
				this.$('.submit-request').prop("disabled", false);
				this.$("#submit-btn").attr('disabled', false)
			}else{
				this.$('.upload-image-box').addClass("upload-err-box");							
				this.$("#document-size-error").css("display", "block");
				this.$('.submit-request').prop("disabled", true);
				this.$("#submit-btn").attr('disabled', true)
			}
		}
	},
	TMSVUploadResume.prototype.getData = function() {
		var self = this;
		return this.model.save({
			action: 'fetch_uploaded_resume',
			taskId:self.taskId,
			taskType:self.taskType
		}).then(function(res){
			
			if(!res.hasError){	
				self.guidelines = res.details.guidelines
				self.guidelinesLabel = res.details.guidelinesLabel
				self.resumeUrl = res.details.resumeUrl
				self.hasResume = res.details.hasResume
				self.existingResumeName = res.details.existingResumeName
				self.existingResumeId = res.details.existingResumeId
				self.fileSize =  res.details.fileSize	
				self.render();
			}
			else{
				self.$("#standard-error-message").html(res.errorMessage)
				self.$("#global-error-message").show()
				self.$("#standard-error-message-new-upload").html(res.errorMessage)
				self.$("#global-error-message-new-upload").show()
			}
		});	
	},

	TMSVUploadResume.prototype.fileChange = function (e) {
		this.readFileName(e.target, this.$(e.currentTarget));
	},
	TMSVUploadResume.prototype.uploadExisting = function(e) {
		var self = this;
		this.$(e.currentTarget).attr('disabled', true);
		this.$(e.currentTarget).text('Submitting Existing Document...');
		this.$('#showmenu').attr('disabled', true);
		self.model.save({
			action: 'upload_resume',
			taskId:self.taskId,
			taskType:self.taskType
		}).then(function(res){
			if(!res.hasError){
				self.resumeUploaded = true;
				self.render();
				self.parent.taskDetails.taskStatus = "Completed";
				self.parent.taskDetails.dateSubmitted = res.completionDate;
				self.parent.render();
			}
			else
			{
				self.$(e.currentTarget).attr('disabled', false);
				self.$(e.currentTarget).text('Yes, Submit Existing Document');
				self.$('#showmenu').attr('disabled', false);
				self.$("#standard-error-message").html(res.errorMessage)
				self.$("#global-error-message").show()
			}
		});	
	},

	TMSVUploadResume.prototype.submitForm = function(e) {
		var self = this;
		var resumeData = {};
		resumeData.notes = this.$('#upload-document').val();
		var resumeFile = jQuery('#upload-document')[0].files[0]
		var fileData = resumeFile;
		
		if(resumeFile){
			if(resumeFile.type == 'application/pdf'){
				var reader = new FileReader();
				reader.onloadend = function() {
					resumeFile = (reader.result).split('base64,')[1];
					var ext = resumeFile.split('.').pop();
					resumeData.document = resumeFile;

					self.$(e.currentTarget).attr('disabled', true);
					self.$(e.currentTarget).text('Submitting...');

					var data = {
						action: 'upload_resume',
						resumeData: resumeData,
						taskId:self.taskId,
						existingResumeId:self.existingResumeId,
						taskType:self.taskType,
						fileName: fileData.name
					};

					console.log(data);

					self.model.save(data).then(function(res){
						if(!res.hasError){
							self.resumeUploaded = true;
							self.render();
							self.parent.taskDetails.taskStatus = "Completed";
							self.parent.taskDetails.dateSubmitted = res.completionDate;
							self.parent.render();
						}else{
							self.$(e.currentTarget).attr('disabled', false);
							self.$(e.currentTarget).text('Submit');

							self.$("#standard-error-message-new-upload").html(res.errorMessage)
							self.$("#global-error-message-new-upload").show()
						}
					});
				}
				reader.readAsDataURL(resumeFile);
			}
			else{
				this.$("#not-a-pdf-error").show();
			}
		}        
	},
	
	TMSVUploadResume.prototype.urtShowmenu = function(e){
		console.log("hello Show Menu");
		this.$('.upload-resume').slideToggle("fast");
		this.$('.resume-found').hide();
	}

	TMSVUploadResume.prototype.getContext = function () {
		return {
			icons: {
				icnDocUpload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png')),
				icnDocUploaded: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/group-3.png')),
				icnRemove: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
				icnUploadSuccess: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-uploads.png')),
				icnRemoveUploads: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-success.png')),
				icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
				icnErrSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-error-sm.png'))
			},
			guidelines : this.guidelines,
			guidelinesLabel : this.guidelinesLabel,
			resumeUrl :this.resumeUrl,
			hasResume : this.hasResume,
			existingResumeName : this.existingResumeName,
			existingResumeId : this.existingResumeId,
			fileSize:this.fileSize,
			taskType:this.taskType,
			taskCompleted:this.parent.taskDetails.taskStatus == "Completed"
		}
	}

	return TMSVUploadResume;
});


define('Saralux.Core.TasksSV',   [
	'Saralux.Core.TasksSV.View',
	'Saralux.Core.TasksSV.Add.View'
],   function (
	TasksSVView,
	TasksSVAddView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0002', function() {
						return new TasksSVView({ container: container });
					});
					layout.registerView('SLXC0003', function() {
						return new TasksSVAddView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.TasksSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.TasksSV.Add.View',	[
	'saralux_core_taskssv_add.tpl',

	'Saralux.Core.TasksSV.Model',
	'Saralux.Core.TasksSV.Init.Model',
	
	'Utils',
	'Backbone',	
	'jQuery',	
	'underscore'
],	function (
	saralux_core_taskssv_add_tpl,

	TasksSVModel,
	TasksSVInitModel,
	
	Utils,
	Backbone,
	jQuery,
	_

) {

	'use strict';

	return Backbone.View.extend({

		template: saralux_core_taskssv_add_tpl,

		events: {
			"click [data-action='m360-my-portal-tasks-addtask']": "addTask",
			"focusout [data-focusout='m360-tasks-addtask-title']": "addTaskTitleFocusout",
			"focusout [data-focusout='date-focusout']": "dateFocusout",
			"focusout [data-click='date-val-click']": "dateValClick",
			"focusout [data-click='close-click']": "closeClick",
			"click [data-click='m360-tasks-addtask-pre']": "addTaskClick",
		},

		addTaskClick: function addTaskClick(e) {
			this.$("#m360-tasks-addtask-deadline").trigger("focusout");
			this.$("#m360-tasks-addtask-startDate").trigger("focusout");
			this.$("#m360-tasks-addtask-title").trigger("focusout");

			if(this.$("#m360-tasks-addtask-request-type").val() == "-1"){
				this.$('#m360-tasks-addtask-request-type').siblings("p").addClass("err");
			} else {
				this.$('#m360-tasks-addtask-request-type').siblings("p").removeClass("err");
			}
			
			if(this.$("#m360-tasks-addtask-assigned-to").val() == "-1"){
				this.$('#m360-tasks-addtask-assigned-to').siblings("p").addClass("err");
			} else {
				this.$('#m360-tasks-addtask-assigned-to').siblings("p").removeClass("err");
			}

			if(this.$(".my-portal-tasks").find('.err').length != 0){
				this.$(e.currentTarget).siblings(".global-error-msg").show();
			} else{
				this.$(e.currentTarget).siblings(".global-error-msg").hide();
				this.$("#m360-tasks-addtask").trigger("click");
			}
		},

		closeClick: function closeClick(e) {
			this.$(e.currentTarget).siblings(".details").find("input").val("");
			this.$(e.currentTarget).siblings(".details").find(".date-val").text("-");
			this.$(e.currentTarget).hide();

			if(this.$(e.currentTarget).parents().hasClass("startDate")){
				this.$(".deadline").find("input").val("");
				this.$(".deadline").find(".date-val").text("-");
				this.$(".deadline .close").hide();
				this.$(".deadline").hide();
			}
		},

		dateValClick: function dateValClick(e) {
			this.$(e.currentTarget).siblings("input").focus();
		},

		dateFocusout: function dateFocusout(e) {
			var self = this;
			this.$(".deadline").find("p").removeClass("err");

			setTimeout(function(){     
				if(new Date(self.$("#m360-tasks-addtask-startDate").val()) > new Date(self.$("#m360-tasks-addtask-deadline").val())){
					self.$(".deadline").find("input").val("");
					self.$(".deadline").find(".date-val").text("-");
					self.$(".deadline").find("p.err-2").show();
				}
				else {
					if(self.$("#m360-tasks-addtask-deadline").val() != ""){
						self.$(".deadline").find(".date-val").text(self.$("#m360-tasks-addtask-deadline").val());
						self.$(".deadline").find("p").removeClass("err");
					}
					else{
						self.$(".deadline").find("p.err-1").addClass("err");
					}

					if(self.$("#m360-tasks-addtask-startDate").val() != ""){
						self.$(".startDate").find(".date-val").text(self.$("#m360-tasks-addtask-startDate").val());
						self.$(".startDate").find("p").removeClass("err");
					}
					else{
						self.$(".startDate").find("p").addClass("err");
					}
				}
			}, 100);
		},

		addTaskTitleFocusout: function addTaskTitleFocusout(e) {
			if(this.$(e.currentTarget).val()=='') {
				this.$(e.currentTarget).siblings("p").addClass("err");
      } 
      else{
				this.$(e.currentTarget).siblings("p").removeClass("err");
      }
		},

		initialize: function (options) {
			jQuery(window).scrollTop(0);
			
			var self = this;
			this.options = options;
			this.m360Context = SC.m360Context;

			this.assignedToList = [];
			this.requestTypeList = [];

			this.isLoading = true;
			this.hasSubmitted = false;
			this.actionSuccess = true;

			this.responseMessage = "";

			this.model = new TasksSVModel();

			this.initModel = new TasksSVInitModel();
			this.initModel.on('sync', function() {
				// console.log('init', self.initModel);
				
				self.assignedToList = self.initModel.get('assignedToList');
				self.requestTypeList = self.initModel.get('requestTypeList');

				self.isLoading = false;
				self.render();
			});
			
			this.initModel.fetch();
		},

		addTask: function addTask(e) {
			var self = this;

			var data = {
				title: jQuery("#m360-tasks-addtask-title").val(),
				startDate: jQuery("#m360-tasks-addtask-startDate").val(),
				dueDate: jQuery("#m360-tasks-addtask-deadline").val(),
				requestType: jQuery("#m360-tasks-addtask-request-type").val(),
				assignedTo: jQuery("#m360-tasks-addtask-assigned-to").val(),
				message: jQuery("#m360-tasks-addtask-description").val()
			}

			// console.log('data', data);
			
			this.model.save(data).done(function(response) {
				console.log('res', response);
				self.hasSubmitted = true;
				if(!response.hasError) {
					self.actionSuccess = true;
					self.responseMessage = "#"+response.taskId;
					console.log('success!', response);
				} else {
					self.actionSuccess = false;
					self.responseMessage = response.errorMessage;
					console.error('fail!', response);
				}
				self.render();
				jQuery(window).scrollTop(0);
			});
		},

		getContext: function getContext() {
			return {
				isLoading: this.isLoading,
				hasSubmitted: this.hasSubmitted,
				actionSuccess: this.actionSuccess,

				responseMessage: this.responseMessage,
				isPhoneDevice: Utils.isPhoneDevice(),

				assignedToList: this.assignedToList,
				requestTypeList: this.requestTypeList,
				icons:{
					icnCalendar: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-cal-2.png')),
				}
			};
		}
		
	});

});

define('Saralux.Core.TasksSV.Detail.View',	[
	'saralux_core_taskssv_detail.tpl',

	'Saralux.Core.ExternalLibraries.CryptoJS',

	'Saralux.Core.TasksSV.Init.Model',
	
	'Utils',
	'Backbone',	
	'jQuery',	
	'underscore'
],	function (
	saralux_core_taskssv_detail_tpl,

	CryptoJS,

	TasksInitModel,
	
	Utils,
	Backbone,
	jQuery,
	_

) {

	'use strict';

	return Backbone.View.extend({

		template: saralux_core_taskssv_detail_tpl,

		// attributes: {
		// 	'data-page-id': '12'
		// },

		dataPageId: 'SLXC0002',

		initialize: function (options) {
			jQuery(window).scrollTop(0);
			var self = this;
			this.m360Context = options.m360Context;
			this.activeTask = options.activeTask;

			if(this.activeTask) {
				this.editMode = options.editMode;
				this.hasSubmitted = options.hasSubmitted;
				this.actionSuccess = options.actionSuccess;
	
				this.assignedToList = options.assignedToList;
				this.requestTypeList = options.requestTypeList;
	
				this.editPermissions = (((new Date(this.activeTask.startDate) > new Date())?true:false) && (this.hasEditPermissions()));
	
				/* this.startDateString = this.activeTask.startDate;
				this.dueDateString = this.activeTask.dueDate; */
	
				/* this.startDateString = new Date(this.activeTask.startDate);
				this.dueDateString = new Date(this.activeTask.dueDate); */
				
				var startDate = new Date(this.activeTask.startDate);
				var dueDate = new Date(this.activeTask.dueDate);
				this.startDateString = (("0" + (startDate.getMonth() + 1)).slice(-2)) + "/" + (("0" + startDate.getDate()).slice(-2)) + "/" + startDate.getFullYear();
				this.dueDateString = (("0" + (dueDate.getMonth() + 1)).slice(-2)) + "/" + (("0" + dueDate.getDate()).slice(-2)) + "/" + dueDate.getFullYear();
	
				/* this.startDateString = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000 )).toISOString().split("T")[0];
				this.dueDateString = new Date(dueDate.getTime() - (dueDate.getTimezoneOffset() * 60000 )).toISOString().split("T")[0]; */
			}

		},
	
		events: {
			"focusout [data-focusout='date-focusout']": "dateFocusout",
			"change [data-change='date-change']": "dateChange",
			"focusout [data-click='date-val-click']": "dateValClick",
			"click [data-click='m360-tasks-updatetask-pre']": "updateTaskClick",
			"focusout [data-focusout='m360-tasks-updatetask-title']": "updatetaskTitleFocusout",
		},

		updatetaskTitleFocusout: function updatetaskTitleFocusout(e) {
			if($(e.currentTarget).val()=='') {
				$(e.currentTarget).siblings("p").addClass("err");
      } 
      else{
				$(e.currentTarget).siblings("p").removeClass("err");
      }
		},

		updateTaskClick: function updateTaskClick(e) {
			this.$("#m360-tasks-updatetask-deadline").trigger("focusout");
			this.$("#m360-tasks-updatetask-startDate").trigger("focusout");
			this.$("#m360-tasks-updatetask-title").trigger("focusout");

			if(this.$("#m360-tasks-updatetask-request-type").val() == "-1"){
				this.$('#m360-tasks-updatetask-request-type').siblings("p").addClass("err");
			} else {
				this.$('#m360-tasks-updatetask-request-type').siblings("p").removeClass("err");
			}
			
			if(this.$("#m360-tasks-updatetask-assigned-to").val() == "-1"){
				this.$('#m360-tasks-updatetask-assigned-to').siblings("p").addClass("err");
			} else {
				this.$('#m360-tasks-updatetask-assigned-to').siblings("p").removeClass("err");
			}

			if(this.$(".my-portal-tasks").find('.err').length != 0){
				this.$(e.currentTarget).siblings(".global-error-msg").show();
			} else{
				this.$(e.currentTarget).siblings(".global-error-msg").hide();
				this.$("#m360-tasks-updatetask").trigger("click");
			}
		},

		dateValClick: function dateValClick(e) {
			this.$(e.currentTarget).siblings("input").focus();
		},

		dateChange: function dateChange() {
			if(this.$("#m360-tasks-updatetask-startDate-pre").val() != ""){
				this.$("#m360-tasks-updatetask-startDate").val(this.$("#m360-tasks-updatetask-startDate-pre").val());
			}

			if(this.$("#m360-tasks-updatetask-deadline-pre").val() != ""){
				this.$("#m360-tasks-updatetask-deadline").val(this.$("#m360-tasks-updatetask-deadline-pre").val());
			}

			this.$("#m360-tasks-updatetask-deadline").trigger("focusout");
			this.$("#m360-tasks-updatetask-startDate").trigger("focusout");
		},

		dateFocusout: function dateFocusout() {
			var self = this;
			this.$(".deadline").find("p").removeClass("err");

			setTimeout(function(){
				if(new Date(self.$("#m360-tasks-updatetask-startDate").val()) > new Date(self.$("#m360-tasks-updatetask-deadline").val())){
					self.$(".deadline").find("input").val("");
					self.$(".deadline").find(".date-val").text("-");
					self.$(".deadline").find("p.err-2").addClass("err");
				}
				else {
					if(self.$("#m360-tasks-updatetask-deadline").val() != ""){
						self.$(".deadline").find(".date-val").text(self.$("#m360-tasks-updatetask-deadline").val());
						self.$(".deadline").find("p").removeClass("err");
					}
					else {
						self.$(".deadline").find("p.err-1").addClass("err");
					}

					if(self.$("#m360-tasks-updatetask-startDate").val() != ""){
						self.$(".startDate").find(".date-val").text(self.$("#m360-tasks-updatetask-startDate").val());
						self.$(".startDate").find("p").removeClass("err");
					}
					else {
						self.$(".startDate").find("p").addClass("err");
					}
				}
			}, 100);
		},

		getContext: function getContext() {
			return {
				isLoading: this.isLoading,
				editMode: this.editMode,
				editPermissions: this.editPermissions,
				hasSubmitted: this.hasSubmitted,
				actionSuccess: this.actionSuccess,
				isPhoneDevice: Utils.isPhoneDevice(),

				activeTask: this.activeTask,
				startDateString: this.startDateString,
				dueDateString: this.dueDateString,

				assignedToList: this.assignedToList,
				requestTypeList: this.requestTypeList,
				icons:{
					icnCalendar: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-cal-2.png')),
					icnEditProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-editprofile.png')),
					icnCategoryName: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-categoryname.png')),
					icnContriButor: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-contributor.png')),
					icnDateSmall: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-date-small.png')),
				}
			};
		},

		hasEditPermissions: function hasEditPermissions() {
			var alskQPWO = 'kin5wtp20a';

			var currentPermissions = this.m360Context.currentPermissions;
			currentPermissions = JSON.parse(CryptoJS.decryptValue(currentPermissions, alskQPWO));
			
			for(var i = 0; i < currentPermissions.permissions.length; i++) {
				var thisPage = currentPermissions.permissions[i];
				// if(parseInt(thisPage.id+'') == parseInt(this.attributes['data-page-id']+'')) {
				if(thisPage.id.indexOf(this.dataPageId) != -1) {
					if((thisPage.permission == "Edit") || (thisPage.permission == "Full Access")) {
						return true;
					} else {
						return false;
					}
				}
			}

			return false;
		}
		
	});

});

define('Saralux.Core.TasksSV.Init.Model', [
	'Backbone',
	'Utils',
  	'underscore'
],	function(
	Backbone,
	Utils,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(getExtensionAssetsPath('services/TasksSV.Init.Service.ss'))
	});
});

define('Saralux.Core.TasksSV.List.View',	[
	'saralux_core_taskssv_list.tpl',
	
	'Utils',	
	'Backbone',	
	'jQuery',	
	'underscore'
],	function (
	saralux_core_taskssv_list_tpl,
	
	Utils,
	Backbone,
	jQuery,
	_

) {

	'use strict';

	return Backbone.View.extend({

		template: saralux_core_taskssv_list_tpl,

		initialize: function (options) {
			jQuery(window).scrollTop(0);
			this.m360Context = options.m360Context;
			this.tasks = options.tasks;
			this.searchString = options.searchString;
			this.showAll = options.showAll;
			this.sortByUpcoming = options.sortByUpcoming;
			this.hasSearchString = options.hasSearchString;
		},

		events: {
			"click [data-click='filter-button-click']": "filterButtonClick",
			"click [data-click='filter-types-box-overlay-click']": "filterTypesBoxOverlayClick",
		},

		filterTypesBoxOverlayClick: function filterTypesBoxOverlayClick(e) {
			$(".filter-box-overlay").hide();
			$(".filter-types-box").hide();
		},

		filterButtonClick: function filterButtonClick(e) {
			$(".filter-box-overlay").show();
			$(".filter-types-box").show();
		},

		getContext: function getContext() {
			return {
				icnTaskCal: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-task-list-task-cal.png")),

				tasks: this.tasks,
				searchString: this.searchString,
				showAll: this.showAll,
				sortByUpcoming: this.sortByUpcoming,
				sortByLatest: !(this.sortByUpcoming),
				hasSearchString: this.hasSearchString,
				isPhoneDevice: Utils.isPhoneDevice(),
				icons:{
					icnFilter: Utils.getAbsoluteUrl(getExtensionAssetsPath("img/icons-set-1/icn-filter.png")),
				}
			};
		}
		
	});

});

define('Saralux.Core.TasksSV.Model', [
	'Backbone',
	'Utils',
  	'underscore'
],	function(
	Backbone,
	Utils,
  	_
) {
	'use strict';
	
	return Backbone.Model.extend({
		urlRoot: Utils.getAbsoluteUrl(getExtensionAssetsPath('services/TasksSV.Service.ss'))
	});
});

define('Saralux.Core.TasksSV.View',	[
	'saralux_core_taskssv.tpl',

	'Saralux.Core.TasksSV.Model',
	'Saralux.Core.TasksSV.Init.Model',

	'Saralux.Core.TasksSV.List.View',
	'Saralux.Core.TasksSV.Detail.View',
	
	'Utils',
	'Backbone',	
	'jQuery',	
	'underscore'
],	function (
	saralux_core_taskssv_tpl,

	TasksSVModel,
	TasksSVInitModel,

	TasksListView,
	TasksDetailView,
	
	Utils,
	Backbone,
	jQuery,
	_

) {

	'use strict';

	return Backbone.View.extend({

		template: saralux_core_taskssv_tpl,

		events: {
			'click [data-action="m360-tasks-view-task"]': 'viewTask',
			'click [data-action="m360-tasks-updatetask"]': 'updateTask',
			'click [data-action="m360-tasks-edit-mode"]': 'toggleEditMode',
			'click [data-action="m360-tasks-view-all-tasks"]': 'viewAllTasks',
			'click [data-action="m360-tasks-search-tasks"]': 'searchTasks',
			'click [data-action="m360-tasks-reset-search-tasks"]': 'resetSearchTasks'
		},

		childViews: {
			'Tasks.List': function() {
				return new TasksListView({
					m360Context: this.m360Context,
					searchString: this.searchString,
					showAll: this.showAll,
					sortByUpcoming: this.sortByUpcoming,
					hasSearchString: this.hasSearchString,
					tasks: this.tasks
				});
			},
			'Tasks.Detail': function() {
				return new TasksDetailView({
					m360Context: this.m360Context,
					activeTask: this.activeTask,
					assignedToList: this.assignedToList,
					requestTypeList: this.requestTypeList,
					editMode: this.editMode,
					hasSubmitted: this.hasSubmitted,
					actionSuccess: this.actionSuccess
				});
			}
		},

		initialize: function (options) {
			var self = this;
			this.options = options;
			this.m360Context = SC.m360Context;

			this.listMode = true;
			this.editMode = false;

			this.searchString = "";
			this.hasSearchString = false;

			this.hasSubmitted = false;
			this.actionSuccess = false;

			this.activeTask = null;
			this.tasks = [];

			this.assignedToList = [];
			this.requestTypeList = [];

			this.model = new TasksSVModel();

			this.initModel = new TasksSVInitModel();
			this.initModel.on('sync', function() {				
				self.assignedToList = self.initModel.get('assignedToList');
				self.requestTypeList = self.initModel.get('requestTypeList');

				self.isLoading = false;
			});

			this.listModel = new TasksSVModel();
			this.listModel.on('sync', function() {				
				var hasError = self.listModel.get('hasError');
				if(hasError) {
					self.tasks = [];
					console.error('ERROR: Tasks.View', self.listModel.get('errorMessage'));
				} else {
					self.tasks = self.listModel.get('tasks');
				}

				if(self.tasks.length > 0) {
					self.activeTask = self.tasks[0];
				} else {
					self.activeTask = null;
				}
				
				jQuery("#m360-myportal-tasks-search-results-loader").hide();
				jQuery("#m360-myportal-tasks-search-results").show();
				
				self.render();
			});

			this.isLoading = true;
			this.initModel.fetch().done(function() {
				self.resetSearchTasks();
			});
		},

		viewTask: function viewTask(e) {
			var taskId = jQuery("#"+e.currentTarget.id).attr('data-task-id');
			// console.log('taskId', taskId);

			for(var i = 0; this.tasks && i < this.tasks.length; i++) {
				var thisTask = this.tasks[i];
				if(parseInt(thisTask.id) == parseInt(taskId)) {
					this.activeTask = thisTask;
					break;
				}
			}

			this.editMode = false;
			this.listMode = false;
			this.render();
			return true;
		},

		updateTask: function updateTask(e) {
			var self = this;

			var startDate = jQuery("#m360-tasks-updatetask-startDate").val()?jQuery("#m360-tasks-updatetask-startDate").val():this.activeTask.startDate;
			var dueDate = jQuery("#m360-tasks-updatetask-deadline").val()?jQuery("#m360-tasks-updatetask-deadline").val():this.activeTask.dueDate;
			
			var data = {
				id: this.activeTask.id,
				title: jQuery("#m360-tasks-updatetask-title").val(),
				startDate: startDate,
				dueDate: dueDate,
				assignedTo: jQuery("#m360-tasks-updatetask-assigned-to").val(),
				requestType: jQuery("#m360-tasks-updatetask-request-type").val(),
				message: jQuery("#m360-tasks-updatetask-description").val(),
				isUpdate: true
			}

			this.model.save(data).done(function(response) {
				self.hasSubmitted = true;
				if(response.hasError) {
					self.actionSuccess = false;
				} else {
					self.actionSuccess = true;
					self.activeTask.title = data.title;
					self.activeTask.startDate = data.startDate;
					self.activeTask.dueDate = data.dueDate;
					self.activeTask.assignedToId = data.assignedTo;
					self.activeTask.requestTypeId = data.requestType;
					self.activeTask.assignedTo = jQuery("#m360-tasks-updatetask-assigned-to option:selected").html();
					self.activeTask.requestType = jQuery("#m360-tasks-updatetask-request-type option:selected").html();
					self.activeTask.message = data.message;

					self.setTaskOptions();
				}
				self.editMode = true;
				self.listMode = false;
				self.render();
				jQuery(window).scrollTop(0);
			});
			return true;
		},

		viewAllTasks: function viewAllTasks(e) {
			this.editMode = false;
			this.listMode = true;
			this.activeTask = null;
			this.render();
			return true;
		},

		toggleEditMode: function toggleEditMode(e) {
			this.editMode = !this.editMode;

			if(this.editMode) {
				this.setTaskOptions();
			} else {
				this.hasSubmitted = false;
			}

			this.listMode = false;
			this.render();
			return true;
		},

		setTaskOptions: function setTaskOptions() {
			for(var i = 0; this.assignedToList && i < this.assignedToList.length; i++) {
				var currentAT = this.assignedToList[i];
				if(parseInt(currentAT.id) == parseInt(this.activeTask.assignedToId)) {
					currentAT.selected = true;
				} else {
					currentAT.selected = false;
				}
			}
			for(var i = 0; this.requestTypeList && i < this.requestTypeList.length; i++) {
				var currentRT = this.requestTypeList[i];
				if(parseInt(currentRT.id) == parseInt(this.activeTask.requestTypeId)) {
					currentRT.selected = true;
				} else {
					currentRT.selected = false;
				}
			}
		},

		searchTasks: function searchTasks(e) {
			var self = this;
			
			if (this.$(e.currentTarget).hasClass('switch')) {
				this.$(e.currentTarget).find('input[type=checkbox]').prop('checked', function(){
					return !this.checked;
				});
			}
			else {
				this.$(".filter-types-box").find("i").hide();
	
				if(this.$(e.currentTarget).find("input").not(':checked')){
					this.$(e.currentTarget).find("input").prop('checked', true);
					this.$(e.currentTarget).find("i").show();
				}
			}

			this.searchString = jQuery("#m360-search-filter-task-name").val();
			if(this.searchString != "") {
				this.hasSearchString = true;
			} else {
				this.hasSearchString = false;
			}
			
			var openTasks = jQuery("#m360-mpt-open-tasks:checked").val();
			if(openTasks) {
				this.showAll = false;
			} else {
				this.showAll = true;
			}

			var sortVal = jQuery("input[name='m360-mpt-sort-by']:checked").val();
			if(sortVal == '1') {
				this.sortByUpcoming = true;
			} else {
				this.sortByUpcoming = false;
			}

			jQuery("#m360-myportal-tasks-search-results-loader").show();
			jQuery("#m360-myportal-tasks-search-results").hide();

			var searchPackage = {
				searchString: this.searchString,
				showAll: this.showAll,
				sortByUpcoming: this.sortByUpcoming
			}
			this.listModel.fetch({
				data: {
					searchPackage: JSON.stringify(searchPackage)
				}
			});
		},

		resetSearchTasks: function resetSearchTasks(e) {
			var self = this;
			
			this.searchString = "";
			this.hasSearchString = false;

			jQuery("#m360-myportal-tasks-search-results-loader").show();
			jQuery("#m360-myportal-tasks-search-results").hide();

			this.showAll = false,
			this.sortByUpcoming = true;

			var searchPackage = {
				searchString: this.searchString,
				showAll: false,
				sortByUpcoming: true
			}
			this.listModel.fetch({
				data: {
					searchPackage: JSON.stringify(searchPackage)
				}
			});
		},

		getContext: function getContext() {
			return {
				listMode: this.listMode,
				editMode: this.editMode,
				isLoading: this.isLoading,
				isPhoneDevice: Utils.isPhoneDevice()
			};
		}
		
	});

});

define('Saralux.Core.Tests',   [
	'Saralux.Core.Tests.List.View'
],   function (
	TestsListView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp(container) {
			try {
				var pageType = container.getComponent('PageType');
				this.registerPublicPages(pageType);
			} catch (e) {
				console.error('ERROR: Saralux.Core.Tests', e.toString());
			}
		},

		registerPublicPages: function registerPublicPages(pageType) {
			pageType.registerPageType({
				name: 'Tests',
				view: TestsListView,
				routes: ['tests']
			});
		}
	};
});


define('Saralux.Core.Tests.List.View',	[
	'saralux_core_tests_list.tpl',
	
	'PageType.Base.View',
  
	'Utils',
  'jQuery'
], function (
	saralux_core_tests_list_tpl,
	
	PageTypeBaseView,

	Utils,
  jQuery
) {
	return PageTypeBaseView.PageTypeBaseView.extend({
		template: saralux_core_tests_list_tpl,

		initialize: function(options) {
			var self = this;

			// declare member objects
			this.data = null;
		},

		beforeShowContent: function beforeShowContent() {
			var self = this;

			this.getBreadcrumbPages = function () {
				return [{
					text: Utils.translate('Tests')
				}]
			};

			this.environment_component = this.options.container.getComponent("Environment");

			// Declare events (if any):
			this.events = {
				'click [data-action="m360-clear-search"]': 'clearSearch',
				'click [data-action="m360-trigger-search"]': 'triggerSearch',
			};
			
			this.testsFilters = {
				searchText: '',
				category: [{
					isChecked: false,
					value: 'exam',
					label: 'Exam',
				},{
					isChecked: false,
					value: 'quiz',
					label: 'Quiz',
				}],
				provider: [{
					isChecked: false,
					value: 'exor',
					label: 'Exor',
				},{
					isChecked: false,
					value: 'prometric',
					label: 'Prometric',
				},{
					isChecked: false,
					value: 'pearson',
					label: 'Pearson',
				}],
			};

			this.tests = [{
				id: 1,
				testBanner: '',
				isExam: true,
				testTitle: 'Title of the test goes here and can be a longer one',
				testProvider: 'Pearson',
				testTimeline: '30',
				testPassing: '80/100',
				testPrice: '$260',
			},{
				id: 2,
				testBanner: '',
				isExam: false,
				testTitle: 'Title of the test goes here and can be a longer one 2',
				testProvider: 'Pearson',
				testTimeline: '30',
				testPassing: '70/100',
				testPrice: '$260',
			}];

			return jQuery.Deferred().resolve();
		},

		triggerSearch: function triggerSearch(e) {
			if (this.$("#test-search-text").val() != "") {
				this.testsFilters.searchText = this.$("#test-search-text").val();
				
				this.render();
			}
		},

		clearSearch: function clearSearch(e) {
			this.testsFilters.searchText = "";

			this.render();
		},

		getContext: function () {
			return {
				tests: this.tests,
				testsFilters: this.testsFilters,
				
				defaultBanner: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-test-thumbnail.png')),

				icons: {
					icnTest: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-test.png')),
					icnQuiz: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-quiz.png')),
					icnProvider: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-provider.png')),
					icnTimeline: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-timelimit.png')),
					icnFlag: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-flag.png')),
				}
			}
		}
	});
});

// Model.js
// -----------------------
// @module Case
define("Saralux.Core.TestsSV.SS2Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/TestsSV/SuiteScript2/TestsSV.Service.ss"
            ),
            true
        )
    });
});


define('Saralux.Core.TestsSV',   [
	'Saralux.Core.TestsSV.Tests.View'
],   function (
	TestsSVTestsView
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var layout = container.getComponent('Layout');

				if(layout) {
					layout.registerView('SLXC0012', function() {
						return new TestsSVTestsView({ container: container });
					});
				}
			} catch (ex) {
				console.error('EXCEPTION: Saralux.Core.TestsSV', ex.toString());
			}
		}
	};
});


define('Saralux.Core.TestsSV.Tests.Details.View',	[
	'saralux_core_testssv_test_details.tpl',
	
    'Saralux.Core.TestsSV.SS2Model',

    'Utils',
	'SCView'
], function (
	saralux_core_testssv_tests_details_tpl,
	
    TestsSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function TestsDetailsView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.model = new TestsSVSS2Model();

		this.template = saralux_core_testssv_tests_details_tpl;

        this.isLoading = true;
        this.parent = options.parent;

        this.test = [];
        this.totalQuestions = null;
        this.testId = options.activeTestId;

        var data = {
            action: "get_test_details",
            id: this.testId,
            fetchQuestions: true
        };

        console.log('inside details view');

        this.isLoading = true;
        this.model.clear({ silent: true});
        this.model.save(data).then(function (res) {
            console.log('get test details res : ', res);
            if(!res.hasError) {
                self.test = res.test;
                self.totalQuestions = self.test.questions.length;
                self.parent.activeTest = self.test;
                self.isLoading = false;
                self.render();
                self.setStatus(self.test.status);
            }            
        });
    }

    TestsDetailsView.prototype = Object.create(SCView.prototype);
    TestsDetailsView.prototype.constructor = TestsDetailsView;

    
    //data-toggle="modal" data-target="#view-contribution"
    

    TestsDetailsView.prototype.setStatus = function(status){
        jQuery('#test-status-draft').removeClass('selected')
        jQuery('#test-status-published').removeClass('selected')
        jQuery('#test-status-inactive').removeClass('selected')
        
        jQuery('#selected-test-status-draft').hide();
        jQuery('#selected-test-status-published').hide();
        jQuery('#selected-test-status-inactive').hide();
        if(status == "Draft"){
            jQuery('#selected-test-status-draft').show();
            jQuery('#test-status-draft').addClass('selected')
        }
        if(status == "Published"){
            jQuery('#selected-test-status-published').show();
            jQuery('#test-status-published').addClass('selected')
        }
        if(status == "Inactive"){
            jQuery('#selected-test-status-inactive').show();
            jQuery('#test-status-inactive').addClass('selected')
        }
    }

    TestsDetailsView.prototype.getSubmission = function (e) {
        this.parent.activeView = "TestsSV.Submission";
        var index = jQuery("#"+e.currentTarget.id).attr("data-index");
        this.parent.activeTestSubmissionId = this.test.submissions[index].id;
        this.parent.render();
    }

    TestsDetailsView.prototype.setTestStatus = function(e) {
        var self = this;
        var status = jQuery('#'+e.currentTarget.id).attr('data-type');

        this.isLoading = true;
        this.model.clear({ silent: true});
        this.model.save({
            action: 'change_test_status',
            status: status,
            testId: this.testId
        }).then(function(res){
            if(!res.hasError){
                jQuery('#test-status-draft').removeClass('selected')
                jQuery('#test-status-published').removeClass('selected')
                jQuery('#test-status-inactive').removeClass('selected')
                
                jQuery('#selected-test-status-draft').hide();
                jQuery('#selected-test-status-published').hide();
                jQuery('#selected-test-status-inactive').hide();

                if(status == "Draft"){
                    jQuery('#selected-test-status-draft').show();
                }
                if(status == "Published"){
                    jQuery('#selected-test-status-published').show();
                }
                if(status == "Inactive"){
                    jQuery('#selected-test-status-inactive').show();
                }
                jQuery('#'+e.currentTarget.id).addClass('selected')
            }
            self.isLoading = false;
        });

				setTimeout(function () {
					this.$(".overlaybox").hide();
					this.$(".options-set").hide();
					this.$(".status-box .fa").hide();
					this.$(".status-box .fa-angle-down").show();
				}, 100);
    }

    TestsDetailsView.prototype.toTestsList = function(e) {
		this.parent.activeView = "TestsSV.List";
        this.parent.render();
    }

		TestsDetailsView.prototype.testDetails = function(e) {
			this.$(".tabs").removeClass("active");
			this.$(".tabs div").remove();
			this.$(e.currentTarget).append("<div></div>");
			this.$(e.currentTarget).addClass("active");
			this.$(".tab-body").hide();
			var clickedtab = this.$(e.currentTarget).attr('tab-name');
			this.$("." + clickedtab).show();
		}

		TestsDetailsView.prototype.testStatusBoxButton = function(e) {
			this.$(e.currentTarget).siblings(".options-set").show();
			this.$(".overlaybox").show();
			this.$(".status-box .fa").hide();
			this.$(".status-box .fa-angle-up").show();
		}

		TestsDetailsView.prototype.testOverlayBox = function(e) {
			this.$(".overlaybox").hide();
			this.$(".options-set").hide();
			this.$(".status-box .fa").hide();
			this.$(".status-box .fa-angle-down").show();
		}

    TestsDetailsView.prototype.getEvents = function () {
			return {
				"click [data-action='to-tests-list']"    : "toTestsList",
				"click [data-action='to-submitted-test']"    : "getSubmission",
				"click [data-action='m360-new-test-status']" : "setTestStatus",
				"click [data-action='m360-test-details-tabs']" : "testDetails",
				"click [data-action='m360-test-statusbox-button']" : "testStatusBoxButton",
				"click [data-action='m360-test-overlaybox']" : "testOverlayBox"
			}
    }

    TestsDetailsView.prototype.getContext = function () {
			return {
				isLoading: this.isLoading,
				totalQuestions: this.totalQuestions,
				test: this.test,
				imgDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.jpg')),
				icons:{
					imgDraft: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-draft.png')),
					imgPublished: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-published.png')),
					imgInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-inactive.png')),
					icnGreenTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
					icnCurrentTasksActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-current-tasks-active.png')),
					icnCurrentTasksInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-current-tasks-inactive.png')),
					icnInstructorsActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-instructors-active.png')),
					icnInstructorsInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-instructors-inactive.png')),
					icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
					imgEmptyStateSubmission: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-empty-state-submission.png')),
					icnCrossRed: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-cross-red.png')),
				}
			}
    }

    return TestsDetailsView;
});

define('Saralux.Core.TestsSV.Tests.EditTest.View',	[
    'saralux_core_testssv_new_test.tpl',
    
    'Saralux.Core.TestsSV.Tests.MultipleChoice.Question.View',
    'Saralux.Core.TestsSV.Tests.ImageChoice.Question.View',
    'Saralux.Core.TestsSV.Tests.Long.Question.View',
    'Saralux.Core.TestsSV.Tests.Short.Question.View',
    'Saralux.Core.TestsSV.Tests.YesNo.Question.View',
   
    'Saralux.Core.TestsSV.SS2Model',
    
    'Utils',
    'SCView'
], function (
    saralux_core_testssv_new_test_tpl,
   
    MultipleChoiceQuestionView,
    ImageChoiceQuestionView,
    LongTextQuestionView,
    ShortTextQuestionView,
    YesNoChoiceQuestionView,

    TestsSVSS2Model,
    
    Utils,
    SCViewModule
) {

    'use strict';

    var SCView = SCViewModule.SCView;
    function EditTestView(options) {
        console.log('inside edit test');
        SCView.call(this, options);
        jQuery(window).scrollTop(0);
        var self = this;

        this.model = new TestsSVSS2Model();

        this.template = saralux_core_testssv_new_test_tpl;

        this.parent = options.parent;
        
        console.log('edit test options : ', options);

        this.activeTest = options.activeTest;
        this.autoScoreDisable = this.activeTest.autoScoreDisable;

        console.log('active test : ', this.activeTest);

        this.questions = this.activeTest.questions;

        this.testStatus = "Draft";
        
        this.currentTestId = this.activeTest.id;
        this.activeQuestion = null;

        for (var i = 0; i < this.questions.length; i++) {
            this.questions[i].activeTabImage = jQuery(".question-type").attr('active-image-src'),
            this.questions[i].inactiveTabImage = jQuery(".question-type").attr('inactive-image-src'),
            this.questions[i].tabNo = i+1;
        }
        console.log(this.activeTest);       
        
        this.mcqChildView = new MultipleChoiceQuestionView({
            parent: this,
            container: this.container,
        });
        this.imagechildView = new ImageChoiceQuestionView({
            parent: this,
            container: this.container,
        });
        this.longTextChildView = new LongTextQuestionView({
            parent: this,
            container: this.container,
        });
        this.shortTextChildView = new ShortTextQuestionView({
            parent: this,
            container: this.container,
        });
        this.yesNoChildview = new YesNoChoiceQuestionView({
            parent: this,
            container: this.container,
        });

        this.childViews = {
            'Tests.QuestionType.MultipleChoice' : function() {
                return this.mcqChildView
            },   
            'Tests.QuestionType.ImageChoice' : function() {
                return this.imagechildView
            },   
            'Tests.QuestionType.LongText' : function() {
                return this.longTextChildView
            },   
            'Tests.QuestionType.ShortText' : function() {
                return this.shortTextChildView
            },   
            'Tests.QuestionType.YesNo' : function() {
                return this.yesNoChildview
            }   
        };


        this.questionTypeHTML = {
            mcqContent: "",
            imageContent: "",
            longTextContent: "",
            shortTextContent: "",
            yesNoContent: ""
        }

        
        console.log('before afterViewRender in edit');

        this.render();
        console.log();
        if(this.activeTest.expiryDate) {
            this.$('#test-expiry-date').datepicker("setDate", this.activeTest.expiryDate);
        }

        this.on('afterViewRender', function () {
            console.log('inside afterViewRender : ', self.activeTest.status);
            self.setStatus(self.activeTest.status);
            self.questionTypeHTML = {
                mcqContent: jQuery("#mcq-question-div").html(),
                imageContent: jQuery("#image-question-div").html(),
                longTextContent: jQuery("#long-question-div").html(),
                shortTextContent: jQuery("#short-question-div").html(),
                yesNoContent: jQuery("#yesno-question-div").html()
            }
            console.log(self.questionTypeHTML);
        });
    }

    EditTestView.prototype = Object.create(SCView.prototype);
    EditTestView.prototype.constructor = EditTestView;
  
    EditTestView.prototype.toTestDetails = function () {
        console.log('inside toTestDetails');
        this.parent.activeView = "TestsSV.Details";
        this.parent.render();
    }

    EditTestView.prototype.checkAllValidations = function() {
        this.validateName();
        this.validateWebDescription(); 
        this.validateTimeLimitInMin(); 
        this.validateWaitingPeriod(); 
        this.validateExpiryDate(); 
        // this.validateCertificateTemplate(); 
        this.validateTermsAndConditions(); 
        this.validateTermsAndConditionsLabel(); 
        this.validateCheckboxText(); 
        this.validateStartScreenTitle();
        this.validateStartScreenDescription();
        this.validateStartScreenButtonText();
        this.validateEndScreenHeadline();
        this.validateEndScreenPassMessage();
        this.validateEndScreenFailMessage();
        this.validateStartScreenImage();
    }

    

    EditTestView.prototype.editTest = function(e) {
        var self = this;
        var questionCategories = [];
        var type;
        var style;

        this.checkAllValidations();

        jQuery('div.option-box-question-category').siblings()
        .each(function(){ 
            questionCategories.push({
                title: jQuery(this).find("input[name='question-category-title']").val(),
                description: jQuery(this).find("textarea[name='question-category-desc']").val() 
            }) 
        });
        if( jQuery('#test-type-exam').hasClass('active') ){
            type = 'Exam'; 
        } else{ type = 'Quiz'; }
        
        if( jQuery('#test-style-sectioned').hasClass('active') ){
            style = 'Sectioned';
        } else { style = 'Single Pager'; }
        
        var data = {
            action: "edit_test",
            id: this.currentTestId,
            title: jQuery('#test-title').val(),
            webDescription: jQuery('#web-description').val(),
            type: type,
            style: style,
            status: this.testStatus,
            setTimeLimit: jQuery('#test-time-limit').prop("checked"),
            allowRetake: jQuery('#test-retakes').prop("checked"),
            expiryDateSwitch: jQuery('#test-expiry-date-switch').prop("checked"),
            testSummary: jQuery('#test-ans-on-result-page').prop("checked"),
            showExplainationSwitch: jQuery('#result-explanation-page').prop("checked"),
            randomizeQuestions: jQuery('#randomize-questions').prop("checked"),
            skipAnswer: jQuery('#skip-ans').prop("checked"),
            immediateAnswerAfterSelection: jQuery('#immidiate-ans').prop("checked"),
            allowChangeAnswer: jQuery('#change-ans').prop("checked"),
            autoAdvanceToNextQuestion: jQuery('#auto-advance').prop("checked"),
            showResultAtEndScreen: jQuery('#result-at-end').prop('checked'),
            enableTermsAndConditions: jQuery('#enable-terms-and-conditions').prop("checked"),
            termsAndConditions: jQuery('#terms-and-conditions').val(),
            termsAndConditionsLabel: jQuery('#terms-condtions-label-text').val(),
            showIAgree: jQuery('#include-checkbox').prop("checked"),
            iAgreeText: jQuery('#checkbox-text').val(), 
            startScreenTitle: jQuery('#start-screen-title').val(),
            startScreenDescription: jQuery('#start-screen-description').val(),
            startScreenButtonText: jQuery('#starting-button-text').val(),
            endScreenHeadline: jQuery('#end-screen-headline').val(),
            endScreenPassMessage: jQuery('#end-screen-pass-message').val(),
            endScreenFailMessage: jQuery('#end-screen-fail-message').val(),
        }

        if(jQuery('#test-time-limit').prop("checked")) {
            data.timeLimitFor = jQuery('input[name="test-time-limit-for"]:checked').val();
            data.timeLimit = jQuery("#test-time").val();
        }
        else {
            data.timeLimitFor = "";
            data.timeLimit = "";
        }

        if(jQuery('#test-retakes').prop("checked")) {
            data.maximumTestAttempts = jQuery('#test-attempts').val();
            data.testReattemptTime = jQuery('#test-re-attempt-time').val();
        }
        else {
            data.maximumTestAttempts = "";
            data.testReattemptTime = "";
        }


        if(this.$('.config-tab').find('.err').length == 0){

            console.log('no error found');
            var activeTab = self.$('.test-header').find('.active').attr('id');

            self.$('#' + activeTab).removeClass('icn-err-warning-show');
            
            self.$('#'+activeTab+'-body'+' .right > .tab-body').each(function() {
                var sideTabBody = jQuery(this).attr('id');

                var tabName = jQuery(this).attr('class').split(' ')[0];
                var sideTabId = jQuery('#' + sideTabBody).parents('.right').siblings('.left').find("[tab-name='" + tabName + "']").attr('id');
                
                jQuery('#'+ sideTabId).removeClass('icn-err-warning-show');
                jQuery('#'+ sideTabId +'-body').removeClass('icn-err-warning-show');
                jQuery('#'+ sideTabBody +'-body').removeClass('icn-err-warning-show');
            });          

            var coverImage = this.$('#starting-cover-image')[0].files[0];
                console.log('coverImage : ', coverImage);
                if(coverImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        data.startScreenCoverImage = (reader.result).split('base64,')[1];

                        this.model.save(data).then(function (res) {
                            console.log(res);
                            if(!res.hasError) {
                                console.log(res.id);
                                self.currentTestId = res.id;

                                var data = {
                                    action: "get_test_details",
                                    id: self.currentTestId,
                                    fetchQuestions: false
                                };
                            
                                self.model.save(data).then(function (res) {
                                    console.log(res);
                                    if(!res.hasError) {
                                        console.log('created test fetched : ', res.test);
                                        self.activeTest = res.test;
                                        self.autoScoreDisable = self.activeTest.autoScoreDisable;
                                        self.isLoading = false;
                                        self.render();
                                    }
                                });

                            }
                            // self.isLoading = false;
                            // self.render();
                        });
                    }
                }
                reader.readAsDataURL(coverImage);
        }
        else {
            var activeTab = self.$('.test-header').find('.active').attr('id');
                
            console.log({activeTab});

            self.$('#' + activeTab).addClass('icn-err-warning-show');
            
            self.$('#'+activeTab+'-body'+' .right > .tab-body').each(function() {


                var sideTabBody = jQuery(this).attr('id');
                jQuery('#'+ sideTabId).removeClass('icn-err-warning-show');
                jQuery('#'+ sideTabId +'-body').removeClass('icn-err-warning-show');
                jQuery('#'+ sideTabBody +'-body').removeClass('icn-err-warning-show')
                
                
                if (jQuery('#'+sideTabBody).find('.err').length > 0) {
                    var tabName = jQuery(this).attr('class').split(' ')[0];
                    var sideTabId = jQuery('#' + sideTabBody).parents('.right').siblings('.left').find("[tab-name='" + tabName + "']").attr('id');
                    jQuery('#'+ sideTabId).addClass('icn-err-warning-show');
                    jQuery('#'+ sideTabId +'-body').addClass('icn-err-warning-show');

                    jQuery('#'+ sideTabBody +'-body').addClass('icn-err-warning-show');
                }
                else {
                    var tabName = jQuery(this).attr('class').split(' ')[0];
                    var sideTabId = jQuery('#' + sideTabBody).parents('.right').siblings('.left').find("[tab-name='" + tabName + "']").attr('id');
                    jQuery('#'+ sideTabId).removeClass('icn-err-warning-show');
                    jQuery('#'+ sideTabId +'-body').removeClass('icn-err-warning-show');

                    jQuery('#'+ sideTabBody +'-body').removeClass('icn-err-warning-show');
                } 
            });               
            console.log('errors exist');
        }
    }
    

    /*
    EditTestView.prototype.editMcqQuestion = function(e) {
        var answerOptions = [];
            jQuery('div.option-box-mcq-question').siblings()
            .each(function(){
                answerOptions.push({
                    id              : jQuery(this).find("input[name='answer-id']").val(),
                    optionTitle     : jQuery(this).find("input[name='mcq-option-title']").val(),
                    optionCharacter : jQuery(this).find("input[name='mcq-option-character']").val(),
                    correctOption   : jQuery(this).find("input[name='mcq-correct-option']").prop("checked")
                });
            });
            
            var self = this;
            var questionData = {
                action : "edit_mcq_question",
                id: this.activeQuestion.id,
                testId: self.currentTestId,
                type: 1,
                title: jQuery('#mcq-title').val(),
                prompt: jQuery('#mcq-ans-prompt').val(),
                points: jQuery('#mcq-question-points').val(),
                sequenceNumber: jQuery('#mcq-sequence-number').val(),
                addReferenceImage: jQuery('#mcq-reference-image').prop("checked"),
                embedVideo: jQuery('#mcq-embed-video').prop("checked"),
                videoEmbedCode: jQuery('#mcq-video-embed-code').val(),
                referenceImage: null,
                options: answerOptions
            };
            
    
            if(jQuery('#mcq-reference-image').prop("checked")){
                var referenceImage = jQuery('#mcq-change-image')[0].files[0];
                if(referenceImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        var image = (reader.result).split('base64,')[1];
                        questionData.referenceImage = image;
                    }
                    reader.readAsDataURL(referenceImage);
                }
            }
            

        this.isLoading = true;
        this.model.save(questionData).then(function (res) {
            if(!res.hasError) {
                if(self.activeQuestion == null){
                    self.saveQuestion(res.question);
                }
                else{
                    console.log('questions : ', self.questions);
                    self.questions[self.activeQuestion.questionIndex] = res.question;
                    // self.activeQuestion = questionData;
                }
                console.log(res.id);
                self.currentTestId = res.testId;
            }
            self.isLoading = false;
            self.render();
            var index = self.activeQuestion.questionIndex;
            self.$('#tabsBlock2').trigger('click');
            self.$('.dynamic-tabs').find('.side-questions-tab-'+index).trigger('click')
            // self.$('.dynamic-tabs .tabsBlock').last().trigger('click');
        
        }); 
    }
    */

    EditTestView.prototype.editMcqQuestion = function(e) {
        console.log('inside new test view add mcq question ');
		var self = this;
		var questionData = {
			testId: self.currentTestId,
			type: 1,
			title: jQuery('#mcq-title').val(),
			prompt: jQuery('#mcq-ans-prompt').val(),
			points: jQuery('#mcq-question-points').val(),
			sequenceNumber: jQuery('#mcq-sequence-number').val(),
			addReferenceImage: jQuery('#mcq-reference-image').prop("checked"),
			embedVideo: jQuery('#mcq-embed-video').prop("checked"),
			videoEmbedCode: jQuery('#mcq-video-embed-code').val(),
			referenceImage: null,
		};
		

		if(jQuery('#mcq-reference-image').prop("checked")){
			var referenceImage = jQuery('#mcq-change-image')[0].files[0];
			if(referenceImage){
				var reader = new FileReader();
				reader.onloadend = function() {
					var image = (reader.result).split('base64,')[1];
					questionData.referenceImage = image;
				}
				reader.readAsDataURL(referenceImage);
			}
		}
		if(this.activeQuestion != null){
			console.log('edited question');
			var answerOptions = [];
			jQuery('div.option-box-mcq-question').siblings()
			.each(function(){
				answerOptions.push({
					id              : jQuery(this).find("input[name='answer-id']").val(),
					optionTitle     : jQuery(this).find("input[name='mcq-option-title']").val(),
					optionCharacter : jQuery(this).find("input[name='mcq-option-character']").val(),
					correctOption   : jQuery(this).find("input[name='mcq-correct-option']").prop("checked")
				});
			});
			questionData.action = "edit_mcq_question";
			questionData.options = answerOptions;
			questionData.id = this.activeQuestion.id;
		}
		else{
			console.log('new question');
			var answerOptions = [];
			jQuery('div.option-box-mcq-question').siblings()
			.each(function(){
				answerOptions.push({
					optionTitle     : jQuery(this).find("input[name='mcq-option-title']").val(),
					optionCharacter : jQuery(this).find("input[name='mcq-option-character']").val(),
					correctOption   : jQuery(this).find("input[name='mcq-correct-option']").prop("checked")
				});
			});
			questionData.action = "add_mcq_question";
			questionData.options = answerOptions;
		}
			

        console.log({questionData});

		this.model.clear({ silent: true }); 
		this.isLoading = true;
		this.model.save(questionData).then(function (res) {
			if(!res.hasError) {
                console.log({res});
				if(self.activeQuestion == null){
					self.saveQuestion(res.question);
				}
				else{
					self.questions[self.activeQuestion.questionIndex] = res.question;
					self.activeQuestion = questionData;
				}
                console.log('questions : ',self.questions);
				self.isLoading = false;
				self.render();
				jQuery('#tabsBlock2').trigger('click');
				jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
			}
			self.isLoading = false;
			
		}); 
    }
    
    EditTestView.prototype.editImageQuestion = function(e) {
        var self = this;
        console.log('active question : ', this.activeQuestion);
        if(this.activeQuestion == null) {
            this.addImageQuestion(e);
        }
        else {
            var self = this;
            var length = jQuery('div.option-box-image-choice-question').siblings().length;
            var referenceImage = null;
            var counter = 0;
    
            var questionData = {
                action: "edit_image_question",
                testId: self.currentTestId,
                id: this.activeQuestion.id,
                type: 2,
                title: jQuery('#image-choice-question-title').val(),
                prompt: jQuery('#image-choice-question-ans-prompt').val(),
                points: jQuery('#image-choice-question-points').val(),
                sequenceNumber: jQuery('#image-choice-sequence-number').val(),
                addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
                referenceImage: null,
                embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
                videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
            };
    
            if(jQuery('#image-choice-reference-image').prop("checked")){
                var referenceImage = jQuery('#image-question-change-image')[0].files[0];
                if(referenceImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        var image = (reader.result).split('base64,')[1];
                        questionData.referenceImage = image;
                    }
                    reader.readAsDataURL(referenceImage);
                }
            }
            var options = [];
            jQuery('div.option-box-image-choice-question').siblings()
            .each(function(){

                var attr = jQuery(this).find("input[name='image-choice-option-image']").attr('data-index')
                if(typeof attr !== 'undefined' && attr !== false) {
                    var index = jQuery(this).find("input[name='image-choice-option-image']").attr('data-index'); 
                    if(self.activeQuestion.answers[index].imageChanged) {
                        var referenceImageAnswer = jQuery(this).find('.option-image')[0].files[0]
                    }
                    else {
                        self.activeQuestion.answers[index].imageChanged = false;
                    }
                }
                else {
                    var referenceImageAnswer = jQuery(this).find('.option-image')[0].files[0];
                }
                
                console.log('referenceImageAnswer : ', referenceImageAnswer);
                if(referenceImageAnswer && referenceImageAnswer !== undefined){
                    var jqContext = this;
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        counter++;
                        var image = (reader.result).split('base64,')[1]
                        
                        // console.log('image : ', image);
                        // console.log('self.activeQuestion.answers : ', self.activeQuestion.answers);
                        
                        var index = jQuery(jqContext).find("input[name='answer-index']").val();
                        
                        if(index) {
                            var optionsData = {
                                id: self.activeQuestion.answers[index].id,
                                optionTitle: jQuery(jqContext).find("input[name='image-choice-option-title']").val(),
                                optionCharacter: jQuery(jqContext).find("input[name='image-choice-option-character']").val(),
                                correctOption: jQuery(jqContext).find("input[name='image-choice-correct-option']").prop("checked"),
                                // image: image
                            }

                            if(self.activeQuestion.answers[index].imageChanged) {
                                optionsData.imageChanged = true;
                                optionsData.image = image;
                            }
                            else {
                                optionsData.imageChanged = false;
                                optionsData.image = null;
                            }

                        }
                        else {
                            var optionsData = {
                                optionTitle: jQuery(jqContext).find("input[name='image-choice-option-title']").val(),
                                optionCharacter: jQuery(jqContext).find("input[name='image-choice-option-character']").val(),
                                correctOption: jQuery(jqContext).find("input[name='image-choice-correct-option']").prop("checked"),
                                image: image,
                                imageChanged: true
                            }
                        }
                        // console.log('index : ', index);
                        
                        // var optionsData = {
                        //     id: self.activeQuestion.answers[index].id,
                        //     optionTitle: jQuery(jqContext).find("input[name='image-choice-option-title']").val(),
                        //     optionCharacter: jQuery(jqContext).find("input[name='image-choice-option-character']").val(),
                        //     correctOption: jQuery(jqContext).find("input[name='image-choice-correct-option']").prop("checked"),
                        //     image: image
                        // }
                        options.push(optionsData)
                        console.log('options : ', options);
                        if(counter == length){
                            console.log('counter == length');
                            questionData.options = options;
                            console.log('question data : ', questionData);
                            self.model.save(questionData).then(function (res) {
                                if(!res.hasError){
                                    if(self.activeQuestion == null){
                                        self.saveQuestion(res.question);
                                    }
                                    else{
                                        console.log('image question res : ', res.question);
                                        self.questions[self.activeQuestion.questionIndex] = res.question;
                                        self.activeQuestion = res.question;
                                    }
                                    self.isLoading = false;
                                    self.render();
                                    jQuery('#tabsBlock2').trigger('click');   
                                    jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                                    // self.currentTestId = res.testId
                                }
                                console.log(res);
                            });        
                        }
                    }
                    reader.readAsDataURL(referenceImageAnswer);
                }
                else{
                    var index = jQuery(this).find("input[name='answer-index']").val();
                    counter++;
                    var optionsData = {
                        id: self.activeQuestion.answers[index].id,
                        optionTitle: jQuery(this).find("input[name='image-choice-option-title']").val(),
                        optionCharacter: jQuery(this).find("input[name='image-choice-option-character']").val(),
                        correctOption: jQuery(this).find("input[name='image-choice-correct-option']").prop("checked"),
                        image: null,
                        imageChanged: false
                    }
                    options.push(optionsData)
                    if(counter == length){
                        questionData.options = options;
                        console.log('questionData : ', questionData);
                        self.model.save(questionData).then(function (res) {
                            if(!res.hasError){
                                // console.log();
                                if(self.activeQuestion == null){
                                    self.saveQuestion(res.question);
                                }
                                else{
                                    console.log('image question res : ', res.question);
                                    self.questions[self.activeQuestion.questionIndex] = res.question;
                                    self.activeQuestion = questionData;
                                }
                                // self.currentTestId = res.testId
                                self.isLoading = false;
                                self.render();
                                jQuery('#tabsBlock2').trigger('click');   
                                jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                            }
                            console.log(res);
                        });
                    }
                }
            });
        }
        
    }



    EditTestView.prototype.addImageQuestion = function(e) {
		console.log('in add image question');
		var self = this;
		var referenceImage = null;
		
		var options = [];
		var length = jQuery('div.option-box-image-choice-question').siblings().length;
		console.log('length ' , length);
		var counter = 0;
		var questionData = {
			action: "save_image_question",
			testId: self.currentTestId,
			type: 2,
			title: jQuery('#image-choice-question-title').val(),
			prompt: jQuery('#image-choice-question-ans-prompt').val(),
			points: jQuery('#image-choice-question-points').val(),
			sequenceNumber: jQuery('#image-choice-sequence-number').val(),
			addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
			referenceImage: null,
			embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
			videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
		};
		var referenceImage = jQuery('#image-question-change-image')[0].files[0];
		if(referenceImage){
			var reader = new FileReader();
			reader.onloadend = function() {
				referenceImage = (reader.result).split('base64,')[1];
				questionData.referenceImage = referenceImage;
			}
			reader.readAsDataURL(referenceImage);
		}         
		jQuery('div.option-box-image-choice-question').siblings()
		.each(function(){
			var optionTitle = jQuery(this).find("input[name='image-choice-option-title']").val(); 
			var correctOption = jQuery(this).find("input[name='image-choice-correct-option']").prop("checked");
			var optionCharacter = jQuery(this).find("input[name='image-choice-option-character']").val(); 
			var referenceImageAnswer = jQuery(this).find('#image-choice-option-image')[0].files[0]
			var reader = new FileReader();
			reader.onloadend = function() {
				counter++;
				var image = (reader.result).split('base64,')[1]
				var optionsData = {
					optionTitle: optionTitle,
					optionCharacter: optionCharacter,
					correctOption: correctOption,
					image: image
				}
				console.log('image option data : ', optionsData);
				options.push(optionsData)
				if(counter == length){
					questionData.options = options;
					console.log(questionData);
					self.model.clear({ silent: true }); 
					self.isLoading = true;
					self.model.save(questionData).then(function (res) {
						if(!res.hasError){
							if(self.activeQuestion == null){
								self.saveQuestion(res.question);
							}
							else{
								self.questions[self.activeQuestion.questionIndex] = res.question;
								self.activeQuestion = questionData;
							}
							self.isLoading = false;
							self.render();
							jQuery('#tabsBlock2').trigger('click');   
							jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
						}
						self.isLoading = false;
						console.log(res);
					});                                     
				}
			}
			reader.readAsDataURL(referenceImageAnswer);
		});
	}




    // EditTestView.prototype.editShortQuestion = function(e) {
    //     var self = this;
    //     var questionData =  {
    //         action: "edit_short_question",
    //         id: this.activeQuestion.id,
    //         testId: self.currentTestId,
    //         type: 4,
    //         title: jQuery('#short-text-question-title').val(),
    //         prompt: jQuery('#short-text-question-ans-prompt').val(),
    //         points: jQuery('#short-text-question-points').val(),
    //         sequenceNumber: jQuery('#short-text-sequence-number').val(),
    //         addReferenceImage: jQuery('#short-question-reference-image').prop("checked"),
    //         embedVideo: jQuery('#short-question-embed-video').prop("checked"),
    //         videoEmbedCode: jQuery('#short-question-video-embed-code').val(),
    //     };
    //     var image = null;
    //     var referenceImage = jQuery('#short-question-change-image')[0].files[0];
    //     if(referenceImage){
    //         var reader = new FileReader();
    //         reader.onloadend = function() {
    //             image = (reader.result).split('base64,')[1];   
    //             questionData.referenceImage = image;
    //         }
    //         reader.readAsDataURL(referenceImage);
    //     }
    //     this.isLoading = true;
    //     this.model.save(questionData).then(function (res) {
    //         console.log(res);
    //         if(!res.hasError) {
    //             if(self.activeQuestion == null){
    //                 self.saveQuestion(res.question);
    //             }
    //             else{
    //                 self.questions[self.activeQuestion.questionIndex] = res.question;
    //                 self.activeQuestion = questionData;
    //             }
    //         }
    //         self.isLoading = false;
    //         self.render();
    //         jQuery('#tabsBlock2').trigger('click');   
    //         jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
            
    //     });
    // }


    // EditTestView.prototype.editLongQuestion = function(e) {
    //     var self = this;
    //     var self = this;
    //     var questionData = {
    //         action: "edit_long_question",
    //         id: this.activeQuestion.id,
    //         testId: self.currentTestId,
    //         type: 3,
    //         title: jQuery('#long-text-question-title').val(),
    //         prompt: jQuery('#long-text-question-ans-prompt').val(),
    //         points: jQuery('#long-text-question-points').val(),
    //         sequenceNumber: jQuery('#long-text-sequence-number').val(),
    //         addReferenceImage: jQuery('#long-question-reference-image').prop("checked"),
    //         embedVideo: jQuery('#long-question-embed-video').prop("checked"),
    //         videoEmbedCode: jQuery('#long-question-video-embed-code').val(),
    //     };
    //     var image = null;
    //     var referenceImage = jQuery('#long-question-change-image')[0].files[0];
    //     if(referenceImage){
    //         var reader = new FileReader();
    //         reader.onloadend = function() {
    //             image = (reader.result).split('base64,')[1];   
    //             questionData.referenceImage = image;
    //             console.log(questionData);
    //         }
    //         reader.readAsDataURL(referenceImage);
    //     }
    //     this.model.save(questionData).then(function (res) {
    //         if(!res.hasError) {
    //             if(self.activeQuestion == null){
    //                 self.saveQuestion(res.question);
    //             }
    //             else{
    //                 self.questions[self.activeQuestion.questionIndex] = res.question;
    //                 self.activeQuestion = res.question;
    //             }
    //         }
    //         self.isLoading = false;
    //         self.render();
    //         jQuery('#tabsBlock2').trigger('click');   
    //         jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');         
    //     }); 
    // }

    EditTestView.prototype.editShortQuestion = function(e) {
        
        var self = this;
        var questionData =  {
            testId: self.currentTestId,
            type: 4,
            title: jQuery('#short-text-question-title').val(),
            prompt: jQuery('#short-text-question-ans-prompt').val(),
            points: jQuery('#short-text-question-points').val(),
            sequenceNumber: jQuery('#short-text-sequence-number').val(),
            addReferenceImage: jQuery('#short-question-reference-image').prop("checked"),
            embedVideo: jQuery('#short-question-embed-video').prop("checked"),
            videoEmbedCode: jQuery('#short-question-video-embed-code').val(),
            referenceImage: null,
        };
        var image = null;
        if(jQuery('#mcq-reference-image').prop("checked")){
            var referenceImage = jQuery('#short-question-change-image')[0].files[0];
            if(referenceImage){
                var reader = new FileReader();
                reader.onloadend = function() {
                    image = (reader.result).split('base64,')[1];   
                    questionData.referenceImage = image;
                }
                reader.readAsDataURL(referenceImage);
            }
        }
        console.log('short question data : ', questionData);
        console.log('active question : ', this.activeQuestion);

        if(this.activeQuestion != null){
            questionData.action = "edit_short_question";
            questionData.id = this.activeQuestion.id;
        }
        else{
            console.log('add short question confirmed');
            questionData.action = "add_short_question";
        }
        this.model.clear({ silent: true }); 
        this.model.save(questionData).then(function (res) {
            console.log(res);
            if(!res.hasError) {
                if(self.activeQuestion == null){
                    self.saveQuestion(res.question);
                }
                else{
                    self.questions[self.activeQuestion.questionIndex] = res.question;
                    self.activeQuestion = questionData;
                }
                console.log(res.id);
                // self.currentTestId = res.testId;
                self.isLoading = false;
                self.render();
                jQuery('#tabsBlock2').trigger('click');
                jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
        });   
    }

    // EditTestView.prototype.editLongQuestion = function(e) {
    //     var self = this;
    //     var questionData = {
    //         action: null,
    //         testId: self.currentTestId,
    //         type: 3,
    //         title: jQuery('#long-text-question-title').val(),
    //         prompt: jQuery('#long-text-question-ans-prompt').val(),
    //         points: jQuery('#long-text-question-points').val(),
    //         sequenceNumber: jQuery('#long-text-sequence-number').val(),
    //         addReferenceImage: jQuery('#long-question-reference-image').prop("checked"),
    //         embedVideo: jQuery('#long-question-embed-video').prop("checked"),
    //         videoEmbedCode: jQuery('#long-question-video-embed-code').val(),
    //     };
    //     var image = null;
    //     var referenceImage = jQuery('#long-question-change-image')[0].files[0];
    //     if(referenceImage){
    //         var reader = new FileReader();
    //         reader.onloadend = function() {
    //             image = (reader.result).split('base64,')[1];   
    //             questionData.referenceImage = image;
    //             console.log(questionData);
    //         }
    //         reader.readAsDataURL(referenceImage);
    //     }
    //     console.log('activeQuestion : ', this.activeQuestion);
    //     if(this.activeQuestion != null){
    //         questionData.action = "edit_long_question";
    //         questionData.id = this.activeQuestion.id;
    //         console.log('edit long question data : ', questionData);
    //     }
    //     else{
    //         questionData.action = "add_long_question";
    //     }
    //     this.model.clear({ silent: true }); 
    //     this.isLoading = true;
    //     this.model.save(questionData).then(function (res) {
    //         console.log('long question edit/save response : ', res);
    //         if(!res.hasError) {
    //             if(self.activeQuestion == null){
    //                 self.saveQuestion(res.question);
    //             }
    //             else{
    //                 console.log(self.activeQuestion.questionIndex);
    //                 self.questions[parseInt(self.activeQuestion.questionIndex)] = res.question;
    //                 self.activeQuestion = res.question;
    //             }
    //             // self.activeQuestion = res.id;
    //         }
    //         self.isLoading = false;
    //         self.render();
    //         jQuery('#tabsBlock2').trigger('click');   
    //         jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
    //     });  
    // }


    EditTestView.prototype.editYesNoQuestion = function(e) {
        var self = this;
        var questionData = {
            action: "edit_yn_question",
            id: this.activeQuestion.id,
            testId: self.currentTestId,
            type: 5,
            title: jQuery('#yn-question-title').val(),
            prompt: jQuery('#yn-question-ans-prompt').val(),
            points: jQuery('#yn-question-points').val(),
            sequenceNumber: jQuery('#yn-question-sequence-number').val(),
            addReferenceImage: jQuery('#yn-question-reference-image').prop("checked"),
            embedVideo: jQuery('#yn-question-embed-video').prop("checked"),
            videoEmbedCode: jQuery('#yn-question-video-embed-code').val(),
        };

        var image = null;
        var referenceImage = jQuery('#yn-question-change-image')[0].files[0];
        if(referenceImage){
            var reader = new FileReader();
            reader.onloadend = function() {
                image = (reader.result).split('base64,')[1];  
                questionData.referenceImage = image; 
            }
            reader.readAsDataURL(referenceImage);
        }
        this.model.save(questionData).then(function (res) {
            console.log(res);
            if(!res.hasError) {
                if(self.activeQuestion == null){
                    self.saveQuestion(res.question);
                }
                else{
                    self.questions[self.activeQuestion.questionIndex] = res.question;
                    self.activeQuestion = res.question;
                }
                self.isLoading = false;
                self.render();
                jQuery('#tabsBlock2').trigger('click');
                jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                // self.currentTestId = res.testId;
            }
            
        }); 
    }

    EditTestView.prototype.deleteQuestion = function(e){

        console.log('active question : ', this.activeQuestion);
        var self = this;
        var data = {
            action : "delete_question",
            id     : this.activeQuestion.id
        }
        console.log('delete question data : ' , data);
        this.model.save(data).then(function (res) {
            console.log(res);
            if(!res.hasError) {

                if(parseInt(self.activeQuestion.type) == 3 || parseInt(self.activeQuestion.type) == 4) {
                    self.autoScoreDisable = false;
                }

                for (var i = 0; i < self.questions.length; i++) {
                    if(self.questions[i].id == self.activeQuestion.id){
                        self.questions.splice(i, 1);
                        console.log('found at index : ', i);
                        break;
                    }
                }
            }

            self.isLoading = false;
            self.parent.render();
            jQuery('#tabsBlock2').trigger('click');
            jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
        })
    }

    EditTestView.prototype.editStartEndScreen = function(e) {
        console.log('inside addNewQuestion');
        var self = this;
        var data =  {
            action: "add_start_end_screen",
            testId: self.currentTestId,
            startTitle: this.$('#starting-title').val(),
            startDescription: this.$('#starting-description').val(),
            startButtonText: this.$('#starting-button-text').val(),
            endScreenHeadline: this.$('#ending-headline').val(),
            endScreenPassMessage: this.$('#ending-pass-message').val(),
            endScreenFailMessage: this.$('#ending-fail-message').val(),
            startCoverImage: null,
        };
        
        var image = null;
        var coverImage = jQuery('#starting-cover-image')[0].files[0];
        console.log({coverImage});

        if(coverImage){
            var reader = new FileReader();
            reader.onloadend = function() {
                image = (reader.result).split('base64,')[1];   
                data.startCoverImage = image;
                self.model.save({
                    action: 'edit_test_start_end_screen',
                    data: data
                }).then(function(res){
                    console.log({res});
                })
            }
            reader.readAsDataURL(coverImage);
        }
        // console.log({data});
        
        
        console.log('start screen data : ', data);
    }

    EditTestView.prototype.editQuestion = function(e) {
        var index = jQuery(e.currentTarget).attr('data-index');
        this.activeQuestion = this.questions[index];
        this.activeQuestion.questionIndex = index;

        jQuery(".test-body .tabsBlock").removeClass("active");
        jQuery(".test-body .right .tab-body").hide();
        jQuery('#tabsBlock2-body').find(".tabsBlock99999").show();
        jQuery(".test-body .tab-header .innerTabsBlock1").addClass("active");
        jQuery(".test-body .tab-header .innerTabsBlock1").append("<div></div>");
        jQuery(".test-body .tab-header .innerTabsBlock1-body").show();

        jQuery(".question-type-selection").hide();
        jQuery(".question-type-form").hide();
        console.log(this.activeQuestion);
        if(this.activeQuestion.type == 1){
            console.log('type mcq');
            this.mcqChildView.activeQuestion = this.activeQuestion;
            jQuery("#mcq-question-div").show();
            this.mcqChildView.render();
            
        } 
        if(this.activeQuestion.type == 2){
            console.log('type image');
            this.imagechildView.activeQuestion = this.activeQuestion;
            jQuery("#image-question-div").show();
            this.imagechildView.render();
        } 
        
        if(this.activeQuestion.type == 3){
            console.log('type long text');
            this.longTextChildView.activeQuestion = this.activeQuestion;
            jQuery("#long-question-div").show();
            this.longTextChildView.render();
            
        } 
        if(this.activeQuestion.type == 4){
            console.log('type short text');
            this.shortTextChildView.activeQuestion = this.activeQuestion;
            jQuery("#short-question-div").show();
            this.shortTextChildView.render();
            
        } 
        if(this.activeQuestion.type == 5){
            console.log('type yes no');
            this.yesNoChildview.activeQuestion = this.activeQuestion;
            jQuery("#yesno-question-div").show();
            this.yesNoChildview.render();
        } 
    }

    EditTestView.prototype.addNewQuestion = function(e){
			console.log('inside addNewQuestion');
			console.log('activeQuestion before null : ',  this.activeQuestion);
			this.activeQuestion = null;
			console.log('activeQuestion after null : ',  this.activeQuestion);
			var clickedtab = this.$(e.currentTarget).attr('tab-name');
			if(!this.$(e.currentTarget).hasClass('q-tabs')){
				if(this.$(e.currentTarget).parents("div").hasClass('test-header')){
					this.$(".test-header .tabsBlock").removeClass("active");
					this.$(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(".test-body > .tab-body").hide();
					this.$(".test-body > ." + clickedtab).show();
					
					if(!this.$(e.currentTarget).is("#tabsBlock4")){
						this.$(".test-body .tabsBlock").removeClass("active");
						this.$(".test-body .tab-header #side-tab1").addClass("active");
						this.$(".test-body .right .tab-body").hide();
						this.$(".test-body .right .tabsBlock1").show();
					}

					if(this.$(e.currentTarget).is("#tabsBlock2") ){
						this.$(".test-body .tab-header #side-tab99999").addClass("active");
						this.$(".test-body .tab-header #side-tab99999").trigger('click');
					}
				}
				else if(this.$(e.currentTarget).parents("div").hasClass('inner-tab-box')) {
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock").removeClass("active");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tab-body").hide();
					this.$(e.currentTarget).parents(".inner-tab-box").find("." + clickedtab).show();
				}
				else{
					this.$(".test-body .tabsBlock").removeClass("active");
					this.$(".test-body .right .tab-body").hide();
					this.$(e.currentTarget).parents(".tab-body").find("." + clickedtab).show();

					if(this.$(".test-body .right .tab-body").children("div").hasClass('inner-tab-box')) {
						this.$(".test-body .tab-header .innerTabsBlock1").addClass("active");
						this.$(".test-body .tab-header .innerTabsBlock1").append("<div></div>");
						this.$(".test-body .tab-header .innerTabsBlock1-body").show();
					}
				}

				if(this.$(e.currentTarget).hasClass('startEndScreen')){
					this.$(".startEndScreen").find('.innerTabsBlock1').trigger('click');
				}

				this.$(e.currentTarget).addClass("active");
			}
    }

    EditTestView.prototype.openNewQuestion = function(e){
        console.log();
        jQuery(".question-type-selection").hide();
        jQuery(".question-type-form").hide();
        var dataType = parseInt(jQuery('#'+e.currentTarget.id).attr('data-type'));
        if(dataType == 1){
            console.log('mcq type');
            this.mcqChildView.activeQuestion = this.activeQuestion;
            console.log('parent:  ', this.parent);
            this .mcqChildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.mcqChildView.newQuestion = true;
            }
            jQuery("#mcq-question-div").show();
            this.mcqChildView.render();
        } 
        if(dataType == 2){
            console.log('image type');
            this.imagechildView.activeQuestion = this.activeQuestion;
            this .imagechildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.imagechildView.newQuestion = true;
            }
            jQuery("#image-question-div").show();
            this.imagechildView.render();
        } 
        if(dataType == 3){
            console.log('long type');
            this.longTextChildView.activeQuestion = this.activeQuestion;
            this .longTextChildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.longTextChildView.newQuestion = true;
            }
            jQuery("#long-question-div").show();
            this.longTextChildView.render();
        } 
        if(dataType == 4){
            this.shortTextChildView.activeQuestion = this.activeQuestion;
            this .shortTextChildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.shortTextChildView.newQuestion = true;
            }
            jQuery("#short-question-div").show();
            this.shortTextChildView.render();
        } 
        if(dataType == 5){
            this.yesNoChildview.activeQuestion = this.activeQuestion;
            this .yesNoChildview.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.yesNoChildview.newQuestion = true;
            }
            jQuery("#yesno-question-div").show();
            this.yesNoChildview.render();
        } 
    }

    EditTestView.prototype.saveQuestion = function(data){
        console.log('save question data : ', data);
        data.questionState = 'active';
        data.tabNo = this.questions.length + 1;
        data.activeTabImage = jQuery(".question-type").attr('active-image-src');
        data.inactiveTabImage = jQuery(".question-type").attr('inactive-image-src');
        for (var i = 0; i < this.questions.length; i++) {
            this.questions[i].questionState = 'inactive'            
        }
        this.questions.push(data);
        console.log('questions : ', this.questions);

        if(this.questions.length > 1) {
            this.questions.sort(function(a, b){
                return a.sequenceNumber - b.sequenceNumber;
            })
        }                
    }

    EditTestView.prototype.setStatus = function(status){
        console.log('inside setSTatus : ', status);
        jQuery('#test-status-draft').removeClass('selected')
        jQuery('#test-status-published').removeClass('selected')
        jQuery('#test-status-inactive').removeClass('selected')
        
        jQuery('#selected-test-status-draft').hide();
        jQuery('#selected-test-status-published').hide();
        jQuery('#selected-test-status-inactive').hide();
        if(status == "Draft"){
            jQuery('#selected-test-status-draft').show();
            jQuery('#test-status-draft').addClass('selected')
        }
        if(status == "Published"){
            console.log('inside published : ', jQuery('#selected-test-status-published'));
            jQuery('#selected-test-status-published').show();
            jQuery('#test-status-published').addClass('selected')
        }
        if(status == "Inactive"){
            jQuery('#selected-test-status-inactive').show();
            jQuery('#test-status-inactive').addClass('selected')
        }
    }


    EditTestView.prototype.validateWebDescription = function(e) {
        this.$('#web-description-err').removeClass('err');
        if(this.$('#web-description').val() == ""){
            this.$('#web-description-err').addClass('err');
        }
    }

    EditTestView.prototype.validateTimeLimitInMin = function(e) {
        console.log('inside validateTimeLimitInMin');
        this.$('#time-lim-in-min-err').removeClass('err');
        if(this.$('#test-time').val() == "" && jQuery('#test-time-limit').prop("checked")){
            this.$('#time-lim-in-min-err').addClass('err');
        }    
    }

    EditTestView.prototype.validateWaitingPeriod = function(e) {
        this.$('#wait-period-err').removeClass('err');
        if(jQuery('#test-retakes').prop("checked") && this.$('#test-re-attempt-time').val() == ""){
            this.$('#wait-period-err').addClass('err');
        }    
    }

    EditTestView.prototype.validateExpiryDate = function(e) {
        this.$('#expiry-date-err').removeClass('err');
        if(jQuery('#test-expiry-date-switch').prop("checked") && this.$('#test-expiry-date').val() == ""){
            this.$('#expiry-date-err').addClass('err');
        }    
    }

    EditTestView.prototype.validateTermsAndConditions = function(e) {
        this.$('#t-n-c-err').removeClass('err');
        if(this.$('#terms-and-conditions').val() == ""){
            this.$('#t-n-c-err').addClass('err');
        }    
    }

    EditTestView.prototype.validateTermsAndConditionsLabel = function(e) {
        this.$('#t-n-c-label-err').removeClass('err');
        if(this.$('#terms-condtions-label-text').val() == ""){
            this.$('#t-n-c-label-err').addClass('err');
        }    
    }

    EditTestView.prototype.validateCheckboxText = function(e) {
        this.$('#checkbox-txt-err').removeClass('err');
        if(this.$('#include-checkbox').prop("checked") && this.$('#checkbox-text').val() == ""){
            this.$('#checkbox-txt-err').addClass('err');
        }    
    }

	EditTestView.prototype.validateName = function(e) {
		this.$('#name-err').removeClass('err');
		if(this.$('#test-title').val() == ""){
			this.$('#name-err').addClass('err');
		}
	}

	EditTestView.prototype.validateStartScreenTitle = function(e) {
        this.$('#start-screen-title-err').removeClass('err');
        if (this.$('#start-screen-title').val() == '') {
            this.$('#start-screen-title-err').addClass("err");
        } 
    }

	EditTestView.prototype.validateStartScreenDescription = function(e) {
        this.$('#start-screen-description-err').removeClass('err');
        if (this.$('#start-screen-description').val() == '') {
            this.$('#start-screen-description-err').addClass("err");
        } 
    }

    EditTestView.prototype.validateStartScreenButtonText = function(e) {
        this.$('#start-screen-button-txt-err').removeClass('err');
        if (this.$('#start-screen-title').val() == '') {
            this.$('#start-screen-button-txt-err').addClass("err");
        } 
    }

   
    EditTestView.prototype.validateEndScreenHeadline = function(e) {
        this.$('#end-screen-headline-err').removeClass('err');
        if (this.$('#end-screen-headline').val() == '') {
            this.$('#end-screen-headline-err').addClass("err");
        } 
    }

    EditTestView.prototype.validateEndScreenPassMessage = function(e) {
        this.$('#end-screen-pass-msg-err').removeClass('err');
        if (this.$('#end-screen-pass-message').val() == '') {
            this.$('#end-screen-pass-msg-err').addClass("err");
        } 
    }

    EditTestView.prototype.validateEndScreenFailMessage = function(e) {
        this.$('#end-screen-fail-msg-err').removeClass('err');
        if (this.$('#end-screen-fail-message').val() == '') {
            this.$('#end-screen-fail-msg-err').addClass("err");
        } 
    }

    EditTestView.prototype.setSelectedCertificateForPreview = function(e) {
        console.log('inside setSelectedCertificateForPreview');
        console.log('template id : ', this.$(this).removeClass('err').val());
        if (this.$('#end-screen-fail-message').val() == '') {
            this.$('#end-screen-fail-msg-err').addClass("err");
        } 
    }

    EditTestView.prototype.validateStartScreenImage = function() {
        this.$('#start-screen-cover-img-err').removeClass("err");
        if(this.$('#starting-cover-image')[0].files.length == 0) {
            this.$('#start-screen-cover-img-err').addClass("err");
        }
    }

    EditTestView.prototype.deleteQuestionAnswerOption = function(e){
        console.log('active question : ', this.activeQuestion);

        var self = this;
        var index = jQuery(e.currentTarget).attr('data-index');
        var id = this.activeQuestion.answers[index].id;
        var activeQuestionIndex = this.activeQuestion.questionIndex;
        var data = {
            action : "delete_answer_option",
            id     : id
        }
        this.model.clear({ silent: true }); 
        this.model.save(data).then(function (res) {
            console.log(res);
            if(!res.hasError) {
                console.log('option deleted successfully');
                self.activeQuestion.answers.splice(index, 1);
            }

            self.isLoading = false;
            self.render();
            jQuery('#tabsBlock2').trigger('click');
            jQuery('.dynamic-tabs .side-questions-tab-'+activeQuestionIndex).trigger('click');
        })
    }

    
    
    
    EditTestView.prototype.optionImageUploaded = function (e) {
        console.log('inside optionImageUploaded');
        var self = this;
        var index = this.$(e.currentTarget).attr('data-index'); 
        this.activeQuestion.answers[index].imageChanged = true;
    }

    EditTestView.prototype.autoScoreCheck = function (e) {
        // we are checking for the inverse result. i.e. when checked we will show long and short question boxes 
        if(this.$('#test-ans-on-result-page').prop("checked")) {
            this.$('#long-short-question-section').show();            
        }
        else {
            this.$('#long-short-question-section').hide();
        }
    }
    
    EditTestView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-testssv-newtest-new-que']"     : "addNewQuestion",
            "click [data-action='m360-mp-test-edit-question']"       : "editQuestion",
            "click [data-action='m360-my-portal-strt-end-scr']"      : "editStartEndScreen",
            "click [data-action='m360-testssv-delete-question']"     : "deleteQuestion",
            "click [data-action='m360-testssv-del-qa-option']"       : "deleteQuestionAnswerOption",
            // "click [data-action='m360-testssv-save-mcq-question']"   : "editMcqQuestion",
            "click [data-action='m360-testssv-add-img-question']"    : "editImageQuestion",
            // "click [data-action='m360-testssv-add-short-question']"  : "editShortQuestion",
            "click [data-action='m360-testssv-add-long-question']"   : "addEditLongQuestion",
            // "click [data-action='m360-testssv-add-yn-question']"     : "editYesNoQuestion",
            "click [data-action='m360-my-portal-test-edittest']"     : "editTest",
            "click [data-action='m360-option-image-uploaded']"     : "optionImageUploaded",
            "click [data-action='m360-open-new-question']"           : "openNewQuestion",
            "click [data-action='m360-slxc-test-auto-score-check']"       : "autoScoreCheck",
            "click [data-action='to-tests-details']"  : "toTestDetails",
						"click [data-action='m360-newTestsv-tabsBlock']" : "newTestsvTabsBlock",
						'change [data-change="m360-newTestsv-manual-switch"]'   : 'newTestsvManualSwitch',
						"click [data-action='m360-slxc-new-test-question-type']" : "questionType"

        }
    }

		EditTestView.prototype.newTestsvTabsBlock = function (e) {
			console.log('clicked on design');
			var clickedtab = this.$(e.currentTarget).attr('tab-name');
			if(!this.$(e.currentTarget).hasClass('q-tabs')){
				if(this.$(e.currentTarget).parents("div").hasClass('test-header')){
					this.$(".test-header .tabsBlock").removeClass("active");
					this.$(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(".test-body > .tab-body").hide();
					this.$(".test-body > ." + clickedtab).show();
					
					if(!this.$(e.currentTarget).is("#tabsBlock4")){
						this.$(".test-body .tabsBlock").removeClass("active");
						this.$(".test-body .tab-header #side-tab1").addClass("active");
						this.$(".test-body .right .tab-body").hide();
						this.$(".test-body .right .tabsBlock1").show();
					}

					if(this.$(e.currentTarget).is("#tabsBlock2") ){
						this.$(".test-body .tab-header #side-tab99999").addClass("active");
						this.$(".test-body .tab-header #side-tab99999").trigger('click');
					}
				}
				else if(this.$(e.currentTarget).parents("div").hasClass('inner-tab-box')) {
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock").removeClass("active");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tab-body").hide();
					this.$(e.currentTarget).parents(".inner-tab-box").find("." + clickedtab).show();
				}
				else{
					this.$(".test-body .tabsBlock").removeClass("active");
					this.$(".test-body .right .tab-body").hide();
					this.$(e.currentTarget).parents(".tab-body").find("." + clickedtab).show();

					if(this.$(".test-body .right .tab-body").children("div").hasClass('inner-tab-box')) {
						this.$(".test-body .tab-header .innerTabsBlock1").addClass("active");
						this.$(".test-body .tab-header .innerTabsBlock1").append("<div></div>");
						this.$(".test-body .tab-header .innerTabsBlock1-body").show();
					}
				}

				if(this.$(e.currentTarget).hasClass('startEndScreen')){
					this.$(".startEndScreen").find('.innerTabsBlock1').trigger('click');
				}

				this.$(e.currentTarget).addClass("active");
			}
		}

		EditTestView.prototype.newTestsvManualSwitch = function (e) {
			var targetContainer = this.$(e.currentTarget).attr('data-target');
			if(targetContainer){
				if(this.$('.manual-switch').prop('checked')){
					this.$("#"+targetContainer).show()
				}else{
					this.$("#"+targetContainer).hide()
				}
			}
		}

		EditTestView.prototype.questionType = function(e){
			/*
			$(".question-type-selection").hide();
			$(".question-type-form").hide();
			*/
			/* var currentTabCount = $(".dynamic-tabs > div").length + 1;
			if($(".dynamic-tabs > div").length == 0){
				tabNo = tabNo + 1;
			}
			else{
				tabNo = currentTabCount + 1;
			}

			var questionString = "<span>" + currentTabCount +"</span>. Question title goes here and can be a longer one";

			var activeTabImage = $(this).attr('active-image-src');
			var inactiveTabImage = $(this).attr('inactive-image-src');

			$(this).parents(".tab-body").find(".tabsBlock").removeClass("active");
			$(".dynamic-tabs").append('<div id="side-tab'+tabNo+'" class="q-tabs tabsBlock active" tab-name="tabsBlock'+tabNo+'" q-tab="'+tabNo+'">\
				<img src="'+activeTabImage+'" class="active-image new_test_css35" alt="" align="top">\
				<img src="'+inactiveTabImage+'" class="inactive-image new_test_css35" alt="" align="top">\
				<div class="data-box">'+questionString+'</div>\
			</div>'); */

			/*
			if($(this).hasClass("multiple-choice-type")){
				$(".multiple-choice-type-question-form").show();
			}

			if($(this).hasClass("image-choice-type")){
				$(".image-choice-type-question-form").show();
			}

			if($(this).hasClass("long-text-type")){
				$(".long-text-type-question-form").show();
			}

			if($(this).hasClass("short-text-type")){
				$(".short-text-type-question-form").show();
			}

			if($(this).hasClass("yes-no-type")){
				$(".yes-no-type-question-form").show();
			}
			*/
		}

    EditTestView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            activeTest: this.activeTest,
            autoScoreDisable: this.autoScoreDisable,
            currentTestId: this.currentTestId,
            questions: this.questions,
            activeQuestion: this.activeQuestion,
            testMode: 'edit',
            icons : {
                imgYesNoQuestionIconActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-yes-no-active.png')),
                imgMcqQuestionIconActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-active.png')),
                imgImageChoiceQuestionIconActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-active.png')),
                imgLongTextQuestionIconActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-long-answer-active.png')),
                imgShortTextQuestionIconActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-short-answer-active.png')),
                icnErrorWarning : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-error-warning.png')),
                
                imgYesNoQuestionIconInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-yes-no-inactive.png')),
                imgMcqQuestionIconInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-inactive.png')),
                imgImageChoiceQuestionIconInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-inactive.png')),
                imgLongTextQuestionIconInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-long-answer-inactive.png')),
                imgShortTextQuestionIconInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-short-answer-inactive.png')),
                icnErrorWInarning : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-error-warning.png')),
            
				imgMcqTypeQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-multiple-choice.png')),
				imgImageChoiceQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-image-choice.png')),
				imgLongQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-long-text.png')),
				imgShortQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-short-text.png')),
				imgYesNoQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-yes-no.png')),
            
            }
           
        }
    }

    return EditTestView;

});

define('Saralux.Core.TestsSV.Tests.ImageChoice.Question.View', [
	'saralux_core_testssv_test_image_choice_question.tpl',


	'Saralux.Core.TestsSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_testssv_test_image_choice_question_tpl,

	TestsSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ImageChoiceQuestionView(options){
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_testssv_test_image_choice_question_tpl;
		
		this.model = new TestsSVSS2Model();

		this.isLoading = true;
        this.parent = options.parent;
        this.activeQuestion = options.activeQuestion;
        this.currentTestId = options.currentTestId;
        this.nextSequenceNumber = this.parent.questions.length+1;

    }

    ImageChoiceQuestionView.prototype = Object.create(SCView.prototype);
    ImageChoiceQuestionView.prototype.constructor = ImageChoiceQuestionView;



    ImageChoiceQuestionView.prototype.addImageQuestion = function(e) {
        var self = this;
        this.checkValidations();
        if(this.$('.form-box').find('.err').length == 0) {
            if(this.activeQuestion) {
                this.editImageQuestion(e);
            }
            else {
                console.log('in add image question');
                var self = this;
                var referenceImage = null;
                
                var options = [];
                var length = jQuery('div.option-box-image-choice-question').siblings().length;
                console.log('length ' , length);
                var counter = 0;
                var questionData = {
                    action: "save_image_question",
                    testId: self.currentTestId,
                    type: 2,
                    title: jQuery('#image-choice-question-title').val(),
                    prompt: jQuery('#image-choice-question-ans-prompt').val(),
                    points: jQuery('#image-choice-question-points').val(),
                    sequenceNumber: jQuery('#image-choice-sequence-number').val(),
                    addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
                    referenceImage: null,
                    embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
                    videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
                };
                var referenceImage = jQuery('#image-question-change-image')[0].files[0];
                if(referenceImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        referenceImage = (reader.result).split('base64,')[1];
                        questionData.referenceImage = referenceImage;
                    }
                    reader.readAsDataURL(referenceImage);
                }         
                jQuery('div.option-box-image-choice-question').siblings()
                .each(function(){
                    var optionTitle = jQuery(this).find("input[name='image-choice-option-title']").val(); 
                    var correctOption = jQuery(this).find("input[name='image-choice-correct-option']").prop("checked");
                    var optionCharacter = jQuery(this).find("input[name='image-choice-option-character']").val(); 
                    var referenceImageAnswer = jQuery(this).find('#image-choice-option-image')[0].files[0]
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        counter++;
                        var image = (reader.result).split('base64,')[1]
                        var optionsData = {
                            optionTitle: optionTitle,
                            optionCharacter: optionCharacter,
                            correctOption: correctOption,
                            image: image
                        }
                        console.log('image option data : ', optionsData);
                        options.push(optionsData)
                        if(counter == length){
                            questionData.options = options;
                            console.log(questionData);
                            self.model.clear({ silent: true }); 
                            self.isLoading = true;
                            self.model.save(questionData).then(function (res) {
                                if(!res.hasError){
                                    if(self.activeQuestion == null){
                                        self.saveQuestion(res.question);
                                    }
                                    else{
                                        self.questions[self.activeQuestion.questionIndex] = res.question;
                                        self.activeQuestion = questionData;
                                    }
                                    self.isLoading = false;
                                    self.render();
                                    jQuery('#tabsBlock2').trigger('click');   
                                    jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                                }
                                self.isLoading = false;
                                console.log(res);
                            });                                     
                        }
                    }
                    reader.readAsDataURL(referenceImageAnswer);
                });    
            }
        }

        // if(this.activeQuestion) {
        //     this.editImageQuestion(e);
        // }
        // else {
        //     console.log('in add image question');
        //     var self = this;
        //     var referenceImage = null;
            
        //     var options = [];
        //     var length = jQuery('div.option-box-image-choice-question').siblings().length;
        //     console.log('length ' , length);
        //     var counter = 0;
        //     var questionData = {
        //         action: "save_image_question",
        //         testId: self.currentTestId,
        //         type: 2,
        //         title: jQuery('#image-choice-question-title').val(),
        //         prompt: jQuery('#image-choice-question-ans-prompt').val(),
        //         points: jQuery('#image-choice-question-points').val(),
        //         sequenceNumber: jQuery('#image-choice-sequence-number').val(),
        //         addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
        //         referenceImage: null,
        //         embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
        //         videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
        //     };
        //     var referenceImage = jQuery('#image-question-change-image')[0].files[0];
        //     if(referenceImage){
        //         var reader = new FileReader();
        //         reader.onloadend = function() {
        //             referenceImage = (reader.result).split('base64,')[1];
        //             questionData.referenceImage = referenceImage;
        //         }
        //         reader.readAsDataURL(referenceImage);
        //     }         
        //     jQuery('div.option-box-image-choice-question').siblings()
        //     .each(function(){
        //         var optionTitle = jQuery(this).find("input[name='image-choice-option-title']").val(); 
        //         var correctOption = jQuery(this).find("input[name='image-choice-correct-option']").prop("checked");
        //         var optionCharacter = jQuery(this).find("input[name='image-choice-option-character']").val(); 
        //         var referenceImageAnswer = jQuery(this).find('#image-choice-option-image')[0].files[0]
        //         var reader = new FileReader();
        //         reader.onloadend = function() {
        //             counter++;
        //             var image = (reader.result).split('base64,')[1]
        //             var optionsData = {
        //                 optionTitle: optionTitle,
        //                 optionCharacter: optionCharacter,
        //                 correctOption: correctOption,
        //                 image: image
        //             }
        //             console.log('image option data : ', optionsData);
        //             options.push(optionsData)
        //             if(counter == length){
        //                 questionData.options = options;
        //                 console.log(questionData);
        //                 self.model.clear({ silent: true }); 
        //                 self.isLoading = true;
        //                 self.model.save(questionData).then(function (res) {
        //                     if(!res.hasError){
        //                         if(self.activeQuestion == null){
        //                             self.saveQuestion(res.question);
        //                         }
        //                         else{
        //                             self.questions[self.activeQuestion.questionIndex] = res.question;
        //                             self.activeQuestion = questionData;
        //                         }
        //                         self.isLoading = false;
        //                         self.render();
        //                         jQuery('#tabsBlock2').trigger('click');   
        //                         jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
        //                     }
        //                     self.isLoading = false;
        //                     console.log(res);
        //                 });                                     
        //             }
        //         }
        //         reader.readAsDataURL(referenceImageAnswer);
        //     });    
        // }
	}

    ImageChoiceQuestionView.prototype.editImageQuestion = function(e) {
        console.log('active question : ', this.activeQuestion);
        var activeQuestionIndex = this.activeQuestion ? this.activeQuestion.questionIndex : null;
        if(this.activeQuestion == null) {
            this.addImageQuestion(e);
        }
        else {
            var self = this;
            var length = jQuery('div.option-box-image-choice-question').siblings().length;
            var referenceImage = null;
            var counter = 0;
    
            var questionData = {
                action: "edit_image_question",
                testId: self.currentTestId,
                id: this.activeQuestion.id,
                type: 2,
                title: jQuery('#image-choice-question-title').val(),
                prompt: jQuery('#image-choice-question-ans-prompt').val(),
                points: jQuery('#image-choice-question-points').val(),
                sequenceNumber: jQuery('#image-choice-sequence-number').val(),
                addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
                referenceImage: null,
                embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
                videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
            };
    
            if(jQuery('#image-choice-reference-image').prop("checked")){
                var referenceImage = jQuery('#image-question-change-image')[0].files[0];
                if(referenceImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        var image = (reader.result).split('base64,')[1];
                        questionData.referenceImage = image;
                    }
                    reader.readAsDataURL(referenceImage);
                }
            }
            var options = [];
            jQuery('div.option-box-image-choice-question').siblings()
            .each(function(){
                var referenceImageAnswer = jQuery(this).find('#image-choice-option-image')[0].files[0]
                if(referenceImageAnswer){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        counter++;
                        var image = (reader.result).split('base64,')[1]
                        var index = jQuery(this).find("input[name='answer-index']").val();
                        var optionsData = {
                            id: self.activeQuestion.answers[index].id,
                            optionTitle: jQuery(this).find("input[name='image-choice-option-title']").val(),
                            optionCharacter: jQuery(this).find("input[name='image-choice-option-character']").val(),
                            correctOption: jQuery(this).find("input[name='image-choice-correct-option']").prop("checked"),
                            image: image
                        }
                        options.push(optionsData)
                        if(counter == length){
                            questionData.options = options;
                            self.model.save(questionData).then(function (res) {
                                if(!res.hasError){
                                    if(self.activeQuestion == null){
                                        self.saveQuestion(res.question);
                                    }
                                    else{
                                        console.log('image question res : ', res.question);
                                        self.questions[self.activeQuestion.questionIndex] = res.question;
                                        self.activeQuestion = res.question;
                                    }
                                    self.isLoading = false;
                                    self.render();
                                    jQuery('#tabsBlock2').trigger('click');   
                                    if(activeQuestionIndex) {
                                        jQuery('.dynamic-tabs .side-questions-tab'+activeQuestionIndex).last().trigger('click');
                                    }
                                    else {
                                        jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                                    }
                                    // self.currentTestId = res.testId
                                }
                                console.log(res);
                            });
                                             
                        }
                    }
                    reader.readAsDataURL(referenceImageAnswer);
                }
                else{
                    var index = jQuery(this).find("input[name='answer-index']").val();
                    counter++;
                    var optionsData = {
                        id: self.activeQuestion.answers[index].id,
                        optionTitle: jQuery(this).find("input[name='image-choice-option-title']").val(),
                        optionCharacter: jQuery(this).find("input[name='image-choice-option-character']").val(),
                        correctOption: jQuery(this).find("input[name='image-choice-correct-option']").prop("checked"),
                        image: null
                    }
                    options.push(optionsData)
                    if(counter == length){
                        questionData.options = options;
                        console.log(questionData);
                        self.model.save(questionData).then(function (res) {
                            if(!res.hasError){
                                // console.log();
                                if(self.activeQuestion == null){
                                    self.saveQuestion(res.question);
                                }
                                else{
                                    console.log('image question res : ', res.question);
                                    self.questions[self.activeQuestion.questionIndex] = res.question;
                                    self.activeQuestion = questionData;
                                }
                                // self.currentTestId = res.testId
                                self.isLoading = false;
                                self.render();
                                jQuery('#tabsBlock2').trigger('click'); 
                                if(activeQuestionIndex) {
                                    jQuery('.dynamic-tabs .side-questions-tab-'+activeQuestionIndex).last().trigger('click');                                
                                }  
                                else {
                                    jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                                }
                            }
                            console.log(res);
                        });
                    
                    }
                }
            });
        }   
    }

    ImageChoiceQuestionView.prototype.checkValidations = function () {
        // this.validatePoints();
        this.validateQuestion();
        this.validateAnswerPrompt();
        this.validateQuestionPoints();
        this.validateSequenceNumber();
        this.validateReferenceImage();
        this.validateReferenceVideo();
		this.validateAnswerOptions();
    }

    ImageChoiceQuestionView.prototype.validateAnswerOptions = function () {
		console.log('inside validateAnswerOptions');
		var self = this;
		this.$('div.option-box-image-choice-question')
		.each(function(){
			self.$(this).find('p').removeClass('err')
			if (self.$(this).find("input[name='image-choice-option-title']").val() == "") {
				self.$(this).find("input[name='image-choice-option-title']").siblings('p').addClass('err');
			}
			if (self.$(this).find("input[name='image-choice-option-character']").val() == "") {
				self.$(this).find("input[name='image-choice-option-character']").siblings('p').addClass('err');
			}
			if (self.$(this).find("input[name='image-choice-correct-option']").prop("checked")) {
				self.correctOptionChecked = true;
			}
            if(!self.$(this).find("input[name='image-choice-option-image']").val() || self.$(this).find("input[name='image-choice-option-image']").val() == "") {
                self.$(this).find("input[name='image-choice-option-image']").siblings('p').addClass('err');
            }
		});

        if(!this.correctOptionChecked) {
            this.$('div.option-box-image-choice-question').find("input[name='image-choice-correct-option']").siblings('.correct-option-validation-err').addClass('err');
        }
	}
    
	ImageChoiceQuestionView.prototype.validateQuestion = function () {
        this.$('#image-choice-question-title').siblings('p').removeClass('err');
        // this.$('#question-err').removeClass('err');
        if(this.$('#image-choice-question-title').val() == "") {
            this.$('#image-choice-question-title').siblings('p').addClass('err');
            // this.$('#question-err').addClass('err');
        }
    }
    
    ImageChoiceQuestionView.prototype.validateAnswerPrompt = function () {
        this.$('#image-choice-question-ans-prompt').siblings('p').removeClass('err');
        if(this.$('#image-choice-question-ans-prompt').val() == "") {
            this.$('#image-choice-question-ans-prompt').siblings('p').addClass('err');
        }
    }

    ImageChoiceQuestionView.prototype.validateQuestionPoints = function () {
        this.$('#image-choice-question-points').siblings('p').removeClass('err');
        if(this.$('#image-choice-question-points').val() == "") {
            this.$('#image-choice-question-points').siblings('p').addClass('err');
        }
    }
    
    ImageChoiceQuestionView.prototype.validatePoints = function () {
        this.$('#points-number-err').removeClass('err');
        this.$('#points-required-err').removeClass('err');
        var regex = /^\d*[.]?\d*$/;
        var points = this.$('#mcq-question-points').val();
        if (!regex.test(points)) {
            this.$('#points-number-err').addClass('err');
        }
        if (points == "") {
            this.$('#points-required-err').addClass('err');
        }
    }
    
    ImageChoiceQuestionView.prototype.validateSequenceNumber = function () {
        this.$('#sequence-number-range-err').removeClass('err');
        this.$('#sequence-number-required-err').removeClass('err');
        this.$('#sequence-number-negative-err').removeClass('err');
        if(this.$('#image-choice-sequence-number').val() == "") {
            this.$('#sequence-number-required-err').addClass('err');
        }
        if(this.$('#image-choice-sequence-number').val() > this.nextSequenceNumber) {
            this.$('#sequence-number-range-err').addClass('err');   
        }
        if(this.$('#image-choice-sequence-number').val() < 0) {
            this.$('#sequence-number-negative-err').addClass('err');   
        }
    }
    
    ImageChoiceQuestionView.prototype.validateReferenceImage = function () {
        this.$('#reference-image-err').removeClass('err')
        if (
            this.$('#image-choice-reference-image').prop('checked')
            &&
            this.$('#image-question-change-image')[0].files.length == 0)  {
            this.$('#reference-image-err').addClass('err')
        }
    }

    ImageChoiceQuestionView.prototype.validateReferenceVideo = function () {
        this.$('#embed-video-err').removeClass('err')
        if (
            this.$('#image-choice-embed-video').prop('checked')
            &&
            this.$('#image-choice-video-embed-code').val() == "")  {
                this.$('#embed-video-err').addClass('err')
        }
    }

    ImageChoiceQuestionView.prototype.addReferenceImageCheckboxAction = function () {
        if (this.$('#image-choice-reference-image').prop('checked')) {
            this.$('.reference-image-box').show();
        } 
        else {
            this.$('.reference-image-box').hide();
        }
    }
    
    ImageChoiceQuestionView.prototype.addReferenceVideoCheckboxAction = function () {
        if (this.$('#image-choice-embed-video').prop('checked')) {
            this.$('#image-choice-question-embed-video-section').show();
        } 
        else {
            this.$('#image-choice-question-embed-video-section').hide();
        }
    }
    
    ImageChoiceQuestionView.prototype.addOptionDiv = function (e) {
        var self = this;
        var optionString = this.$('#new-image-option-content .option-box').html(); 
        var dataClass = this.$(e.currentTarget).attr('data-class');
        var count = this.$(e.currentTarget).siblings('div').find(".option-box").length + 1;
        // var count = this.$(".question-form-bottom .option-box").length + 1;
        console.log('image box count : ', count);

        this.$(e.currentTarget).siblings('div').append('<div class="option-box '+ dataClass +'">'+optionString+'</div>');
        this.$(e.currentTarget).siblings('div').find(".option-box").last().find(".remove-image").trigger("click");
        this.$(e.currentTarget).siblings('div').find(".option-box").last().find(".option-count span").text(count);
    }

    ImageChoiceQuestionView.prototype.removeImageQuestionOptionImage = function (e) {
        var self = this;
        console.log('inside removeImageQuestionOptionImage');
        console.log(this.$(e.currentTarget));
        console.log(this.$(e.currentTarget).parent());
        console.log(this.$(e.currentTarget).parent().parent());
        // this.$(e.currentTarget).parent().parent().parent().find('.upload-image').show();
        // this.$(e.currentTarget).parent().parent().hide();
        var uploadImageDiv = `
        <div class="upload-image">
            <img src="`+ Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png'))+`" alt="" align="top">
            <div style="margin: 10px 0 5px;">Upload reference image</div>
            <div class="small-font">Image Specifications: JPG, PNG image, 1200x800 px</div>
        </div>`;
        this.$(e.currentTarget).parent().parent().parent().append(uploadImageDiv);
    }
    
    ImageChoiceQuestionView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-testssv-add-img-question']"   : "addImageQuestion",
            "click [data-action='m360-slxc-test-add-img-option-div']"   : "addOptionDiv",
            "click [data-action='m360-slxc-remove-img-question-img']" : "removeImageQuestionOptionImage",
            "click [data-action='m360-testssv-del-qa-option']"      : "deleteQuestionAnswerOption",
            "click [data-action='m360-testmcq-remove-this']"      : "testsvImageChoiceRemoveThis"
        }
    }

		ImageChoiceQuestionView.prototype.testsvImageChoiceRemoveThis = function (e) {
			this.$(e.currentTarget).parents('.option-box').remove();
		}

		ImageChoiceQuestionView.prototype.deleteQuestionAnswerOption = function(e){
			console.log('active question : ', this.activeQuestion);

			var self = this;
			var index = jQuery(e.currentTarget).attr('data-index');
			console.log(index);
			var id = this.activeQuestion.answers[index].id;
			var activeQuestionIndex = this.activeQuestion.questionIndex;
			var data = {
					action : "delete_answer_option",
					id     : id
			}
			this.model.clear({ silent: true }); 
			this.model.save(data).then(function (res) {
                console.log(res);
                if(!res.hasError) {
                        console.log('option deleted successfully');
                        self.activeQuestion.answers.splice(index, 1);
                }

                self.isLoading = false;
                self.render();
                jQuery('#tabsBlock2').trigger('click');
                jQuery('.dynamic-tabs .side-questions-tab-'+activeQuestionIndex).trigger('click');
			})
	}

    ImageChoiceQuestionView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            activeQuestion: this.activeQuestion,
            nextSequenceNumber: this.nextSequenceNumber,
            icons: {
                fileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
                uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
                trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
                icnTestQIChoiceActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-active.png')),
                icnGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
                icnUploadReferenceImg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
            }
        }
    }

    return ImageChoiceQuestionView;


});

define('Saralux.Core.TestsSV.Tests.List.View',	[
	'saralux_core_testssv_tests_list.tpl',

	'Saralux.Core.TestsSV.SS2Model',

	'Utils',
	'SCView'
], function (
	saralux_core_testssv_tests_list_tpl,

	TestsSVSS2Model,

	Utils,
	SCViewModule
) {
	'use strict';

	var SCView = SCViewModule.SCView;

	function TestsListView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);

		var self = this;
		this.template = saralux_core_testssv_tests_list_tpl;
		
		this.container = options.container;

		this.model = new TestsSVSS2Model();

		this.parent = options.parent;

		this.tests = [];

		this.isLoading = true;

		console.log("View loaded...");

		
		this.defaultPagination = {
			index	 	  : 0,
			pageSize 	  : 10,
			count    	  : 0,
			from     	  : 0,
			to            : 0,
			totalPages 	  : 0,
			displayWindow : 1,
			pages		  : []
		}
		this.pagination = Utils.deepCopy(this.defaultPagination);

		console.log(this);

		this.getAllTests(null);
	}

	TestsListView.prototype = Object.create(SCView.prototype);
	TestsListView.prototype.constructor = TestsListView;
	
	TestsListView.prototype.getAllTests = function(searchString) {
		var self = this;

		var data = {
			action: "get_all_tests",
			pagination: this.pagination
		};

		if(searchString != null) {
			data.searchString = searchString;
		}

		this.model.save(data).then(function (res) {
			console.log({res});
			if(!res.hasError) {
				self.tests = res.data.tests;
				self.parent.tests = self.tests;
				console.log(self.tests);

				self.pagination.count = res.data.count;
				self.pagination.totalPages = Math.ceil(self.pagination.count/self.pagination.pageSize);
				self.pagination.from = (self.pagination.index * self.pagination.pageSize) + 1;
				self.pagination.to = (self.pagination.from + self.tests.length) - 1;
				// self.generatePages();
				console.log(self.pagination);

				self.generatePages();

				self.isLoading = false;
				self.render();	
				for (let i = 0; i < self.tests.length; i++) {
					self.setStatus(self.tests[i].status, i);
				}

				if(searchString != null) {
					self.$('#test-search-string').val(searchString);
				}
			}

		});
	}

	TestsListView.prototype.generatePages = function() {
		var self = this;

		self.pagination.pages = [];
		var index = self.pagination.index;
		var totalPages = self.pagination.totalPages;
			
		for(var i = 0; i < totalPages; i++) {
			self.pagination.pages.push({
				index: i,
				number: (i+1),
				isActive: (index == i)?true:false
			});
		}
	}
	
	TestsListView.prototype.setTestStatus = function(e) {
		console.log('inside setTestStatus');
        var self = this;
        var status = jQuery('#'+e.currentTarget.id).attr('data-type');
		var index = this.$('#'+e.currentTarget.id).attr('data-index');
				setTimeout(function () {
					this.closeOptionSet();
				}, 100);
        // this.isLoading = true;
        // this.model.clear({ silent: true});
        // this.model.save({
        //     action: 'change_test_status',
        //     status: status,
        //     testId: this.testId
        // }).then(function(res){
        //     if(!res.hasError){
        //         jQuery('#test-status-draft-'+index).removeClass('selected')
        //         jQuery('#test-status-published-'+index).removeClass('selected')
        //         jQuery('#test-status-inactive-'+index).removeClass('selected')
                
        //         jQuery('#selected-test-status-draft-'+index).hide();
        //         jQuery('#selected-test-status-published-'+index).hide();
        //         jQuery('#selected-test-status-inactive-'+index).hide();

        //         if(status == "Draft"){
        //             jQuery('#selected-test-status-draft-'+index).show();
        //         }
        //         if(status == "Published"){
        //             jQuery('#selected-test-status-published-'+index).show();
        //         }
        //         if(status == "Inactive"){
        //             jQuery('#selected-test-status-inactive-'+index).show();
        //         }
        //         jQuery('#'+e.currentTarget.id).addClass('selected')
        //     }
        //     self.isLoading = false;
        // });
    }



	TestsListView.prototype.setStatus = function(status,i){
        jQuery('#test-status-draft-'+i).removeClass('selected')
        jQuery('#test-status-published-'+i).removeClass('selected')
        jQuery('#test-status-inactive-'+i).removeClass('selected')
        
        jQuery('#selected-test-status-draft-'+i).hide();
        jQuery('#selected-test-status-published-'+i).hide();
        jQuery('#selected-test-status-inactive-'+i).hide();
        if(status == "Draft"){
            jQuery('#selected-test-status-draft-'+i).show();
            jQuery('#test-status-draft-'+i).addClass('selected')
        }
        if(status == "Published"){
            jQuery('#selected-test-status-published-'+i).show();
            jQuery('#test-status-published-'+i).addClass('selected')
        }
        if(status == "Inactive"){
            jQuery('#selected-test-status-inactive-'+i).show();
            jQuery('#test-status-inactive-'+i).addClass('selected')
        }
    }

	
	//data-toggle="modal" data-target="#view-contribution"
	

	TestsListView.prototype.searchTest = function () {
		var self = this;

		var searchString = this.$('#test-search-string').val();

		this.getAllTests(searchString);
	}
	
	TestsListView.prototype.showDetails = function () {
		console.log('inside shwDetails function');
	}

	TestsListView.prototype.goToPage = function(e) {
		this.pagination.index = this.$('#' + e.currentTarget.id).attr('data-index');
		
		this.getAllTests(null);
	}
	
	TestsListView.prototype.goToPrev = function(e) {
		var previousPage = this.$('.active-page').prev().attr('data-index');
		if(previousPage) {
			this.$('.active-page').prev().trigger('click');
		}
	}

	TestsListView.prototype.goToNext = function(e) {
		var nextPage = this.$('.active-page').next().attr('data-index');
		if(nextPage) {
			this.$('.active-page').next().trigger('click');
		}
	}

	TestsListView.prototype.testsvTestsList = function(e) {
		this.$(e.currentTarget).siblings(".options-set").show();
		this.$(".overlaybox").show();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-up").show();
	}

	TestsListView.prototype.testsvOverlayBox = function(e) {
		this.closeOptionSet();
	}


	TestsListView.prototype.closeOptionSet = function () {
		this.$(".overlaybox").hide();
		this.$(".options-set").hide();
		this.$(".status-box .fa").hide();
		this.$(".status-box .fa-angle-down").show();
	}

	TestsListView.prototype.getEvents = function () {
		return {
			"click [data-action='to-test-details']": "showDetails",
			"click [data-action='m360-new-test-status']" : "setTestStatus",
			"click [data-action='m360-slxc-test-search']" : "searchTest",
			"click [data-action='m360-slxc-test-goto-prev']" : "goToPrev",
			"click [data-action='m360-slxc-test-goto-next']" : "goToNext",
			"click [data-action='m360-slxc-test-goto-page']" : "goToPage",
			"click [data-action='m360-testsv-tests-list']" : "testsvTestsList",
			"click [data-action='m360-testsv-overlaybox']" : "testsvOverlayBox"
		}
	}

	TestsListView.prototype.getContext = function () {
		return {
			tests: this.tests,
			pagination: this.pagination,
			isLoading: this.isLoading,
			defaultTestThumbnail: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-test-thumbnail.png')),

			icons: {
				view: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
				greenTick: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
				default: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-draft.png')),
				published: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-published.png')),
				inactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-inactive.png')),
				icnSortHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-hover.png')),
				icnSortDesc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-desc.png')),
				icnSortAsc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-asc.png')),
			},
		}
	}

	return TestsListView;
});

define('Saralux.Core.TestsSV.Tests.Long.Question.View', [
	'saralux_core_testssv_test_long_question.tpl',

    'Saralux.Core.TestsSV.Tests.ValidateQuestion',

	'Saralux.Core.TestsSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_testssv_test_long_question_tpl,

    TestsSVValidateQuestion,

	TestsSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function LongTextQuestionView(options){
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_testssv_test_long_question_tpl;
		
		this.model = new TestsSVSS2Model();

		this.isLoading = true;
        this.activeQuestion = options.activeQuestion;
        this.parent = options.parent;
        this.nextSequenceNumber = this.parent.questions.length+1;
        console.log('next sequence number : ', this.nextSequenceNumber);
        
    }

    LongTextQuestionView.prototype = Object.create(SCView.prototype);
    LongTextQuestionView.prototype.constructor = LongTextQuestionView;
    
    LongTextQuestionView.prototype.addEditLongQuestion = function(e) {
        console.log('inside addEditLongQuestion');
        var self = this;
        var activeQuestionIndex = this.activeQuestion ? this.activeQuestion.questionIndex : null;
        
        this.checkValidations();

        if(this.$('.form-box').find('.err').length == 0) {
            var questionData = {
                action: null,
                testId: parseInt(this.parent.activeTest.id),
                type: 3,
                title: this.$('#long-text-question-title').val(),
                prompt: this.$('#long-text-question-ans-prompt').val(),
                points: this.$('#long-text-question-points').val(),
                sequenceNumber: this.$('#long-text-sequence-number').val(),
                addReferenceImage: this.$('#long-question-reference-image-checkbox').prop("checked"),
                embedVideo: this.$('#long-question-embed-video-checkbox').prop("checked"),
                videoEmbedCode: null,
                referenceImage: null
            };
            var image = null;
            if(this.$('#long-question-reference-image-checkbox').prop('checked')) {
                var referenceImage = jQuery('#long-question-change-image')[0].files[0];
                if(referenceImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        image = (reader.result).split('base64,')[1];   
                        questionData.referenceImage = image;
                    }
                    reader.readAsDataURL(referenceImage);
                }
            }
            if (this.$('#long-question-embed-video-checkbox').prop("checked")) {
                questionData.videoEmbedCode = this.$('#long-question-video-embed-code').val();
            }
            if(this.activeQuestion != null){
                questionData.action = "edit_long_question";
                questionData.id = this.activeQuestion.id;
            }
            else{
                questionData.action = "add_long_question";
            }
            console.log({questionData});
            this.model.clear({ silent: true }); 
            this.isLoading = true;
            this.model.save(questionData).then(function (res) {
                console.log({res});
                if(!res.hasError) {
                    if(self.activeQuestion == null){
                        self.parent.saveQuestion(res.question);
                    }
                    else{
                        self.parent.questions[parseInt(self.activeQuestion.questionIndex)] = res.question;
                        self.activeQuestion = res.question;
                    }
                }
                self.isLoading = false;
                self.parent.autoScoreDisable = true;
                self.parent.render();
                jQuery('#tabsBlock2').trigger('click');   
                if(activeQuestionIndex) {
                    jQuery('.dynamic-tabs .side-questions-tab-'+activeQuestionIndex).last().trigger('click');
                }
                else {
                    jQuery('.dynamic-tabs.tabsBlock').last().trigger('click');
                }
            });
        }
    }

    LongTextQuestionView.prototype.checkValidations = function () {
        this.validatePoints();
        this.validateQuestion();
        this.validateAnswerPrompt();
        this.validateSequenceNumber();
        this.validateReferenceImage();
        this.validateReferenceVideo();
    }

    LongTextQuestionView.prototype.validateQuestion = function () {
        this.$('#question-err').removeClass('err');
        if(this.$('#long-text-question-title').val() == "") {
            this.$('#question-err').addClass('err');
        }
    }
    
    LongTextQuestionView.prototype.validateAnswerPrompt = function () {
        this.$('#answer-prompt-err').removeClass('err');
        if(this.$('#long-text-question-ans-prompt').val() == "") {
            this.$('#answer-prompt-err').addClass('err');
        }
    }
    
    LongTextQuestionView.prototype.validatePoints = function () {
        this.$('#points-number-err').removeClass('err');
        this.$('#points-required-err').removeClass('err');
        var regex = /^\d*[.]?\d*$/;
        var points = this.$('#long-text-question-points').val();
        if (!regex.test(points)) {
            this.$('#points-number-err').addClass('err');
        }
        if (points == "") {
            this.$('#points-required-err').addClass('err');
        }
    }
    
    LongTextQuestionView.prototype.validateSequenceNumber = function () {
        this.$('#sequence-number-range-err').removeClass('err');
        this.$('#sequence-number-required-err').removeClass('err');
        this.$('#sequence-number-negative-err').removeClass('err');
        if(this.$('#long-text-sequence-number').val() == "") {
            this.$('#sequence-number-required-err').addClass('err');
        }
        if(this.$('#long-text-sequence-number').val() > this.nextSequenceNumber) {
            this.$('#sequence-number-range-err').addClass('err');   
        }
        if(this.$('#long-text-sequence-number').val() < 0) {
            this.$('#sequence-number-negative-err').addClass('err');   
        }
    }
    
    LongTextQuestionView.prototype.validateReferenceImage = function () {
        console.log('inside validateReferenceImage');
        console.log(this.$('#long-question-reference-image-checkbox').prop('checked'));
        console.log(this.$('#long-question-change-image')[0].files.length);
        this.$('#reference-image-err').removeClass('err')
        if (
            this.$('#long-question-reference-image-checkbox').prop('checked')
            &&
            this.$('#long-question-change-image')[0].files.length == 0)  {
            this.$('#reference-image-err').addClass('err')
        }
    }

    LongTextQuestionView.prototype.validateReferenceVideo = function () {
        this.$('#embed-video-err').removeClass('err')
        if (
            this.$('#long-question-embed-video-checkbox').prop('checked')
            &&
            this.$('#long-question-video-embed-code').val() == "")  {
            console.log('embed vid err');
                this.$('#embed-video-err').addClass('err')
        }
    }

    LongTextQuestionView.prototype.addReferenceImageCheckboxAction = function () {
        if (this.$('#long-question-reference-image-checkbox').prop('checked')) {
            this.$('.reference-image-box').show();
        } 
        else {
            this.$('.reference-image-box').hide();
        }
    }
    
    LongTextQuestionView.prototype.addReferenceVideoCheckboxAction = function () {
        if (this.$('#long-question-embed-video-checkbox').prop('checked')) {
            this.$('#long-question-embed-video-section').show();
        } 
        else {
            this.$('#long-question-embed-video-section').hide();
        }
    }
    
    LongTextQuestionView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-testssv-add-long-question']"   : "addEditLongQuestion",
            "change [data-change='m360-slxc-test-add-ref-img-check']" : "addReferenceImageCheckboxAction",
            "change [data-change='m360-slxc-test-add-ref-vid-check']" : "addReferenceVideoCheckboxAction"
        }
    }

    LongTextQuestionView.prototype.getContext = function () {
        console.log('activeQuestion : ', this.activeQuestion);
        return {
					isLoading: this.isLoading,
					activeQuestion: this.activeQuestion,
					nextSequenceNumber: this.nextSequenceNumber,
					icons:{
						imgLongAnswerActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-long-answer-active.png')),
						icnGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
						icnFileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),
						icnFileTrash: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
						icnUploadReferenceImage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
					}
        }
    }

    return LongTextQuestionView;


});


define('Saralux.Core.TestsSV.Tests.MultipleChoice.Question.View', [
	'saralux_core_testssv_test_mcq_question.tpl',

	'Saralux.Core.TestsSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_testssv_test_mcq_question_tpl,

    TestsSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function MultipleChoiceQuestionView(options){
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_testssv_test_mcq_question_tpl;
        
		this.model = new TestsSVSS2Model();
        
		this.isLoading = true;
	
		console.log('options : ', options);

		
        this.parent = options.parent;
        this.container = options.container;
        
		this.correctOptionChecked = false;
        this.activeQuestion = options.activeQuestion;
        this.currentTestId = options.currentTestId;
        this.nextSequenceNumber = this.parent.questions.length+1;
        console.log('next sequence number : ', this.nextSequenceNumber);


        // console.log('activeQuestion from mcq view : ',this.activeQuestion);
    }

    MultipleChoiceQuestionView.prototype = Object.create(SCView.prototype);
    MultipleChoiceQuestionView.prototype.constructor = MultipleChoiceQuestionView;


    MultipleChoiceQuestionView.prototype.validateName = function(e) {
        
    }
    
    MultipleChoiceQuestionView.prototype.addEditMcqQuestion = function(e) {
		console.log('inside addEditMcqQuestion');
        var self = this;
        var activeQuestionIndex = this.activeQuestion ? this.activeQuestion.questionIndex : null;

        this.correctOptionChecked = false;
		this.checkValidations();

        console.log(this.$('.form-box').find('.err').length);

        if(this.$('.form-box').find('.err').length == 0) {
			console.log('parent : ', this.parent);
			console.log('inside addMcqQuestion');
			console.log('current test id : ', this.parent.currentTestId);
			var questionData = {
				testId: parseInt(this.parent.currentTestId),
				type: 1,
				title: jQuery('#mcq-title').val(),
				prompt: jQuery('#mcq-ans-prompt').val(),
				points: jQuery('#mcq-question-points').val(),
				sequenceNumber: jQuery('#mcq-sequence-number').val(),
				addReferenceImage: jQuery('#mcq-reference-image').prop("checked"),
				embedVideo: jQuery('#mcq-embed-video').prop("checked"),
				// videoEmbedCode: jQuery('#mcq-video-embed-code').val(),
				// referenceImage: null,
                videoEmbedCode: null,
                referenceImage: null
			};
			
			if(jQuery('#mcq-reference-image').prop("checked")){
				var referenceImage = jQuery('#mcq-change-image')[0].files[0];
				if(referenceImage){
					var reader = new FileReader();
					reader.onloadend = function() {
						var image = (reader.result).split('base64,')[1];
						questionData.referenceImage = image;
					}
					reader.readAsDataURL(referenceImage);
				}
			}
            if (this.$('#mcq-embed-video').prop('checked')) {
                questionData.videoEmbedCode = this.$('#mcq-video-embed-code').val();
            }
			if(this.activeQuestion != null){

				console.log('edited question');
				var answerOptions = [];
				jQuery('div.option-box-mcq-question').siblings()
				.each(function(){
					answerOptions.push({
						id              : jQuery(this).find("input[name='answer-id']").val(),
						optionTitle     : jQuery(this).find("input[name='mcq-option-title']").val(),
						optionCharacter : jQuery(this).find("input[name='mcq-option-character']").val(),
						correctOption   : jQuery(this).find("input[name='mcq-correct-option']").prop("checked")
					});
				});
				questionData.action = "edit_mcq_question";
				questionData.options = answerOptions;
				questionData.id = this.activeQuestion.id;
                this.activeQuestion.answers = answerOptions;
			}
			else{
				console.log('new question');
				var answerOptions = [];
				jQuery('div.option-box-mcq-question').siblings()
				.each(function(){
					answerOptions.push({
						optionTitle     : jQuery(this).find("input[name='mcq-option-title']").val(),
						optionCharacter : jQuery(this).find("input[name='mcq-option-character']").val(),
						correctOption   : jQuery(this).find("input[name='mcq-correct-option']").prop("checked")
					});
				});
				questionData.action = "add_mcq_question";
				questionData.options = answerOptions;
			}

            console.log({questionData});	
			this.model.clear({ silent: true }); 
			this.isLoading = true;
			this.model.save(questionData).then(function (res) {
                console.log('edit question response : ', res);
				if(!res.hasError) {
					console.log({res});
					if(self.activeQuestion == null){
                        self.parent.saveQuestion(res.question);
					}
					else{
                        console.log('current question : ', self.parent.questions[parseInt(self.activeQuestion.questionIndex)]);
                        console.log('res question : ', res.question);
						self.parent.questions[parseInt(self.activeQuestion.questionIndex)] = res.question;
						self.activeQuestion = res.question;
					}
				}
				self.isLoading = false;
                self.parent.autoScoreDisable = true;
				self.parent.render();
                jQuery('#tabsBlock2').trigger('click');   
                console.log('activeQuestionIndex after adding new option : ', activeQuestionIndex);
                if(activeQuestionIndex) {
                    console.log('active question index found');
                    jQuery('.dynamic-tabs .side-questions-tab-'+activeQuestionIndex).trigger('click');
                }
                else {
                    jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                }
			}); 		
		}
	}


	MultipleChoiceQuestionView.prototype.checkValidations = function () {
        this.validatePoints();
        this.validateQuestion();
        this.validateAnswerPrompt();
        this.validateSequenceNumber();
        this.validateReferenceImage();
        this.validateReferenceVideo();
		this.validateAnswerOptions();
    }

    MultipleChoiceQuestionView.prototype.validateAnswerOptions = function () {
		console.log('inside validateAnswerOptions');
		var self = this;
		this.$('div.option-box-mcq-question')
		.each(function(){
			self.$(this).find('p').removeClass('err')
			if (self.$(this).find("input[name='mcq-option-title']").val() == "") {
				self.$(this).find("input[name='mcq-option-title']").siblings('p').addClass('err');
			}
			if (self.$(this).find("input[name='mcq-option-character']").val() == "") {
				self.$(this).find("input[name='mcq-option-character']").siblings('p').addClass('err');
			}
			if (self.$(this).find("input[name='mcq-correct-option']").prop("checked")) {
				self.correctOptionChecked = true;
			}
		});

        if(!this.correctOptionChecked) {
            this.$('div.option-box-mcq-question').find("input[name='mcq-correct-option']").siblings('.correct-option-validation-err').addClass('err');
        }
	}
    
	MultipleChoiceQuestionView.prototype.validateQuestion = function () {
        this.$('#question-err').removeClass('err');
        if(this.$('#mcq-title').val() == "") {
            this.$('#question-err').addClass('err');
        }
    }
    
    MultipleChoiceQuestionView.prototype.validateAnswerPrompt = function () {
        this.$('#answer-prompt-err').removeClass('err');
        if(this.$('#mcq-ans-prompt').val() == "") {
            this.$('#answer-prompt-err').addClass('err');
        }
    }
    
    MultipleChoiceQuestionView.prototype.validatePoints = function () {
        this.$('#points-number-err').removeClass('err');
        this.$('#points-required-err').removeClass('err');
        var regex = /^\d*[.]?\d*$/;
        var points = this.$('#mcq-question-points').val();
        if (!regex.test(points)) {
            this.$('#points-number-err').addClass('err');
        }
        if (points == "") {
            this.$('#points-required-err').addClass('err');
        }
    }
    
    MultipleChoiceQuestionView.prototype.validateSequenceNumber = function () {
        this.$('#sequence-number-range-err').removeClass('err');
        this.$('#sequence-number-required-err').removeClass('err');
        this.$('#sequence-number-negative-err').removeClass('err');
        if(this.$('#mcq-sequence-number').val() == "") {
            this.$('#sequence-number-required-err').addClass('err');
        }
        if(this.$('#mcq-sequence-number').val() > this.nextSequenceNumber) {
            this.$('#sequence-number-range-err').addClass('err');   
        }
        if(this.$('#mcq-sequence-number').val() < 0) {
            this.$('#sequence-number-negative-err').addClass('err');   
        }
    }
    
    MultipleChoiceQuestionView.prototype.validateReferenceImage = function () {
        this.$('#reference-image-err').removeClass('err')
        if (
            this.$('#mcq-reference-image').prop('checked')
            &&
            this.$('#mcq-change-image')[0].files.length == 0)  {
            this.$('#reference-image-err').addClass('err')
        }
    }

    MultipleChoiceQuestionView.prototype.validateReferenceVideo = function () {
        this.$('#embed-video-err').removeClass('err')
        if (
            this.$('#mcq-embed-video').prop('checked')
            &&
            this.$('#mcq-video-embed-code').val() == "")  {
                this.$('#embed-video-err').addClass('err')
        }
    }

    MultipleChoiceQuestionView.prototype.addReferenceImageCheckboxAction = function () {
        if (this.$('#mcq-reference-image').prop('checked')) {
            this.$('.reference-image-box').show();
        } 
        else {
            this.$('.reference-image-box').hide();
        }
    }
    
    MultipleChoiceQuestionView.prototype.addReferenceVideoCheckboxAction = function () {
        if (this.$('#mcq-embed-video').prop('checked')) {
            this.$('#mcq-question-embed-video-section').show();
        } 
        else {
            this.$('#mcq-question-embed-video-section').hide();
        }
    }

		MultipleChoiceQuestionView.prototype.testsvMCQAddMoreOption = function (e) {
			var optionString = this.$(e.currentTarget).siblings("div").find(".option-box").html();
			var dataClass = this.$(e.currentTarget).attr('data-class');

			var count = this.$(e.currentTarget).siblings('div').find(".option-box").length + 1;

			this.$(e.currentTarget).siblings('div').append('<div class="option-box '+ dataClass +'">'+optionString+'</div>');

			this.$(e.currentTarget).siblings('div').find(".option-box").last().find("input[name='mcq-option-title']").val("");
			this.$(e.currentTarget).siblings('div').find(".option-box").last().find("input[name='mcq-option-character']").val("");
			this.$(e.currentTarget).siblings('div').find(".option-box").last().find("input[name='mcq-correct-option']").prop("checked", false);

			this.$(e.currentTarget).siblings('div').find(".option-box").last().find(".remove-image").trigger("click");
		}

		MultipleChoiceQuestionView.prototype.testsvMCQRemoveThis = function (e) {
			this.$(e.currentTarget).parents('.option-box').remove();
		}

	MultipleChoiceQuestionView.prototype.getEvents = function () {
		return{
			"click [data-action='m360-testssv-save-mcq-question']"   : "addEditMcqQuestion",
			"change [data-change='m360-slxc-test-add-ref-img-check']" : "addReferenceImageCheckboxAction",
			"change [data-change='m360-slxc-test-add-ref-vid-check']" : "addReferenceVideoCheckboxAction",
			"click [data-action='m360-test-mcq-add-more-option']"   : "testsvMCQAddMoreOption",
			"click [data-action='m360-testmcq-remove-this']"   : "testsvMCQRemoveThis"
		}        
  }

	MultipleChoiceQuestionView.prototype.getContext = function () {
		console.log('inside getcontext');
		return {
			isLoading: this.isLoading,
			activeQuestion: this.activeQuestion,
			nextSequenceNumber: this.nextSequenceNumber,
			icons: {
				uploadReference: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-upload-reference-image.png')),
				trashIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash.png')),
				imgTestMCQActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-active.png')),
				icnGear: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-gear.png')),
				icnFileSelected: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-fileselected.png')),


			},
		}
	}

    return MultipleChoiceQuestionView;



});

define('Saralux.Core.TestsSV.Tests.NewTest.View',   [
	'saralux_core_testssv_new_test.tpl',

	'Saralux.Core.TestsSV.Tests.MultipleChoice.Question.View',
	'Saralux.Core.TestsSV.Tests.ImageChoice.Question.View',
	'Saralux.Core.TestsSV.Tests.Long.Question.View',
	'Saralux.Core.TestsSV.Tests.Short.Question.View',
	'Saralux.Core.TestsSV.Tests.YesNo.Question.View',
	'Saralux.Core.TestsSV.SS2Model',
	'Utils',
	'SCView'
], function (
	saralux_core_testssv_new_test_tpl,

	MultipleChoiceQuestionView,
	ImageChoiceQuestionView,
	LongTextQuestionView,
	ShortTextQuestionView,
	YesNoChoiceQuestionView,

	TestsSVSS2Model,
	Utils,
	SCViewModule
)  {
    'use strict';

    var SCView = SCViewModule.SCView;

    function NewTestView(options) {
        SCView.call(this, options);
        jQuery(window).scrollTop(0);
        var self = this;

        this.parent = options.parent;

        this.questionsBySequenceNumber = [];
        this.questions = [];
        this.currentTestId = null;

        this.gradesRemoveImage = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-trash-colored.png'));
        this.gradesEditImage = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-edit-colored.png'));
        this.model = new TestsSVSS2Model();
        this.template = saralux_core_testssv_new_test_tpl;
        this.grades = [];
        this.questions = [];
        this.questionTypeChoice = null;
        this.certificateTemplate = [];
        this.message = "update 1";
        this.activeQuestion = null;
        this.testStatus = "Draft";
        this.activeTest = null;
        this.startEndScreenData = null;
        this.startScreenCoverImage = null;
        this.longOrShortQuestionAdded = false;
        this.autoScoreDisable = false;

        var certificateData =  {
            action: "get_certificate_templates"
        }
        this.model.save(certificateData).then(function(res){
            console.log('inside get certificate templates');
            self.certificateTemplates = res.certificateTemplates;
            console.log('certificate templates : ', self.certificateTemplates);
            self.render();
            // var templateNames = "<option> value='' </option>";
            // $('#certificate-template').html(templateNames)

            
        })
        
        this.mcqChildView = new MultipleChoiceQuestionView({
            parent: this,
            container: this.container,
        });
        this.imagechildView = new ImageChoiceQuestionView({
            parent: this,
            container: this.container,
        });
        this.longTextChildView = new LongTextQuestionView({
            parent: this,
            container: this.container,
        });
        this.shortTextChildView = new ShortTextQuestionView({
            parent: this,
            container: this.container,
        });
        this.yesNoChildview = new YesNoChoiceQuestionView({
            parent: this,
            container: this.container,
        });
        this.childViews = {
            'Tests.QuestionType.MultipleChoice' : function() {
                console.log('inside return view');
                return this.mcqChildView
            },   
            'Tests.QuestionType.ImageChoice' : function() {
                return this.imagechildView
            },   
            'Tests.QuestionType.LongText' : function() {
                console.log('long text view triggered');
                return this.longTextChildView
            },   
            'Tests.QuestionType.ShortText' : function() {
                return this.shortTextChildView
            },   
            'Tests.QuestionType.YesNo' : function() {
                return this.yesNoChildview
            }   
        };


        this.questionTypeHTML = {
            mcqContent: "",
            imageContent: "",
            longTextContent: "",
            shortTextContent: "",
            yesNoContent: ""
        }

        this.on('afterViewRender', function () {
            console.log('after view render new test');
            self.questionTypeHTML = {
                mcqContent: jQuery("#mcq-question-div").html(),
                imageContent: jQuery("#image-question-div").html(),
                longTextContent: jQuery("#long-question-div").html(),
                shortTextContent: jQuery("#short-question-div").html(),
                yesNoContent: jQuery("#yesno-question-div").html()
            }
            console.log(self.questionTypeHTML);
        });

        console.log('View loaded...');
        console.log('test id : ' , options.activeSubmissionId);
    }

    NewTestView.prototype = Object.create(SCView.prototype);
    NewTestView.prototype.constructor = NewTestView;
    

    NewTestView.prototype.openNewQuestion = function(e){
        console.log();
        jQuery(".question-type-selection").hide();
        jQuery(".question-type-form").hide();
        var dataType = parseInt(jQuery('#'+e.currentTarget.id).attr('data-type'));
        if(dataType == 1){
            console.log('mcq question clicked');
            this.mcqChildView.activeQuestion = this.activeQuestion;
            this .mcqChildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.mcqChildView.newQuestion = true;
            }
            jQuery("#mcq-question-div").show();
            this.mcqChildView.render();
        } 
        if(dataType == 2){
            console.log('image type');
            this.imagechildView.activeQuestion = this.activeQuestion;
            this .imagechildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.imagechildView.newQuestion = true;
            }
            jQuery("#image-question-div").show();
            this.imagechildView.render();
        } 
        if(dataType == 3){
            console.log('long type');
            this.longTextChildView.activeQuestion = this.activeQuestion;
            this .longTextChildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.longTextChildView.newQuestion = true;
            }
            jQuery("#long-question-div").show();
            this.longTextChildView.render();
        } 
        if(dataType == 4){
            this.shortTextChildView.activeQuestion = this.activeQuestion;
            this .shortTextChildView.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.shortTextChildView.newQuestion = true;
            }
            jQuery("#short-question-div").show();
            this.shortTextChildView.render();
        } 
        if(dataType == 5){
            this.yesNoChildview.activeQuestion = this.activeQuestion;
            this .yesNoChildview.nextSequenceNumber = this.questions.length+1;
            if(this.activeQuestion == null) {
                this.yesNoChildview.newQuestion = true;
            }
            jQuery("#yesno-question-div").show();
            this.yesNoChildview.render();
        } 
    }

    NewTestView.prototype.addNewQuestion = function(e){
      this.activeQuestion = null;
			var clickedtab = this.$(e.currentTarget).attr('tab-name');
			if(!this.$(e.currentTarget).hasClass('q-tabs')){
				if(this.$(e.currentTarget).parents("div").hasClass('test-header')){
					this.$(".test-header .tabsBlock").removeClass("active");
					this.$(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(".test-body > .tab-body").hide();
					this.$(".test-body > ." + clickedtab).show();
					
					if(!this.$(e.currentTarget).is("#tabsBlock4")){
						this.$(".test-body .tabsBlock").removeClass("active");
						this.$(".test-body .tab-header #side-tab1").addClass("active");
						this.$(".test-body .right .tab-body").hide();
						this.$(".test-body .right .tabsBlock1").show();
					}

					if(this.$(e.currentTarget).is("#tabsBlock2") ){
						this.$(".test-body .tab-header #side-tab99999").addClass("active");
						this.$(".test-body .tab-header #side-tab99999").trigger('click');
					}
				}
				else if(this.$(e.currentTarget).parents("div").hasClass('inner-tab-box')) {
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock").removeClass("active");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tab-body").hide();
					this.$(e.currentTarget).parents(".inner-tab-box").find("." + clickedtab).show();
				}
				else{
					this.$(".test-body .tabsBlock").removeClass("active");
					this.$(".test-body .right .tab-body").hide();
					this.$(e.currentTarget).parents(".tab-body").find("." + clickedtab).show();

					if(this.$(".test-body .right .tab-body").children("div").hasClass('inner-tab-box')) {
						this.$(".test-body .tab-header .innerTabsBlock1").addClass("active");
						this.$(".test-body .tab-header .innerTabsBlock1").append("<div></div>");
						this.$(".test-body .tab-header .innerTabsBlock1-body").show();
					}
				}

				if(this.$(e.currentTarget).hasClass('startEndScreen')){
					this.$(".startEndScreen").find('.innerTabsBlock1').trigger('click');
				}

				this.$(e.currentTarget).addClass("active");
			}
			// this.$(".question-type-form").hide();
  		// this.$(".question-type-selection").show();
    }

    NewTestView.prototype.deleteQuestion = function(e){
        var self = this;
        var data = {
            action : "delete_question",
            id     : this.activeQuestion.id
        }
        console.log('delete question data : ' , data);
        this.model.clear({ silent: true });
        this.model.save(data).then(function (res) {
            console.log(res);
            if(!res.hasError) {
                
                if(parseInt(self.activeQuestion.type) == 3 || parseInt(self.activeQuestion.type) == 4) {
                    self.autoScoreDisable = false;
                }

                for (var i = 0; i < self.questions.length; i++) {
                    if(self.questions[i].id == self.activeQuestion.id){
                        self.questions.splice(i, 1);
                        console.log('found at index : ', i);
                        break;
                    }
                }
                console.log('after splice : ', self.questions);
                console.log('option deleted successfully');
            }
            self.isLoading = false;
            self.render();
            jQuery('#tabsBlock2').trigger('click');
            jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
        })
    }

    NewTestView.prototype.deleteQuestionAnswerOption = function(e){
        var self = this;
        var index = jQuery("#"+e.currentTarget.id).attr('data-index');
        var id = this.activeQuestion.answers[index].id;
        var data = {
            action : "delete_answer_option",
            id     : id
        }
        this.model.clear({ silent: true }); 
        this.model.save(data).then(function (res) {
            console.log(res);
            if(!res.hasError) {
                console.log('option deleted successfully');
            }

            self.isLoading = false;
            self.render();
        })
    }


    NewTestView.prototype.addStartEndScreen = function(e) {
        var self = this;
        var data =  {
            action: "add_start_end_screen",
            testId: self.currentTestId,
            startScreenTitle: jQuery('#start-screen-title').val(),
            startScreenDescription: jQuery('#start-screen-description').val(),
            startScreenButtonText: jQuery('#starting-button-text').val(),
            endScreenHeadline: jQuery('#end-screen-headline').val(),
            endScreenPassMessage: jQuery('#end-screen-pass-message').val(),
            endScreenFailMessage: jQuery('#end-screen-fail-message').val(),
            startScreenCoverImage: null,
        };
        console.log('start end screen data : ', data);
            var image = null;
            var coverImage = jQuery('#starting-cover-image')[0].files[0];
            if(coverImage){
                var reader = new FileReader();
                reader.onloadend = function() {
                    image = (reader.result).split('base64,')[1];   
                    data.startScreenCoverImage = image;
                    self.model.clear({ silent: true }); 
                    self.isLoading = true;
                    self.model.save(data).then(function (res) {
                        console.log('start end screen data response : ',res);
                        if(!res.hasError) {
                            console.log(res.id);
                            self.startEndScreenData = data;
                        }
                        self.isLoading = false;
                        self.render();
                    })
                }
                reader.readAsDataURL(coverImage);
            }
            else{
                self.model.clear({ silent: true }); 
                self.isLoading = true;
                self.model.save(data).then(function (res) {
                    console.log('start end screen data response : ',res);
                    if(!res.hasError) {
                        console.log(res.id);
                        self.startEndScreenData = data;
                    }
                    self.isLoading = false;
                    self.render();
                })
            
        }
        
        console.log('start end sreen data : ', data);
    }

    NewTestView.prototype.editQuestion = function(e) {
        var index = jQuery(".dynamic-tabs #"+e.currentTarget.id).attr('data-index');
        // jQuery("#side-tab99999").click();

        jQuery(".test-body .tabsBlock").removeClass("active");
        jQuery(".test-body .right .tab-body").hide();
        jQuery('#tabsBlock2-body').find(".tabsBlock99999").show();
        jQuery(".test-body .tab-header .innerTabsBlock1").addClass("active");
        jQuery(".test-body .tab-header .innerTabsBlock1").append("<div></div>");
        jQuery(".test-body .tab-header .innerTabsBlock1-body").show();

        this.activeQuestion = this.questions[index];
        this.activeQuestion.questionIndex = index;
        console.log('activeQuestion in editQuestion : ', this.activeQuestion);
        jQuery(".question-type-selection").hide();
        jQuery(".question-type-form").hide();
        console.log(this.activeQuestion);
        if(this.activeQuestion.type == 1){
					console.log('mcq type');
					this.mcqChildView.activeQuestion = this.activeQuestion;
					jQuery("#mcq-question-div").show();
					this.mcqChildView.render();
        } 
        if(this.activeQuestion.type == 2){
					console.log('image type');
					this.imagechildView.activeQuestion = this.activeQuestion;
					jQuery("#image-question-div").show();
					this.imagechildView.render();
        } 
        if(this.activeQuestion.type == 3){
					console.log('long type');
					this.longTextChildView.activeQuestion = this.activeQuestion;
					jQuery("#long-question-div").show();
					this.longTextChildView.render();
        } 
        if(this.activeQuestion.type == 4){
					this.shortTextChildView.activeQuestion = this.activeQuestion;
					jQuery("#short-question-div").show();
					this.shortTextChildView.render();
        } 
        if(this.activeQuestion.type == 5){
					this.yesNoChildview.activeQuestion = this.activeQuestion;
					jQuery("#yesno-question-div").show();
					this.yesNoChildview.render();
        }
				this.$(e.currentTarget).parents(".tab-body").find(".tabsBlock").removeClass("active");
  			this.$(e.currentTarget).addClass("active");
    }

    NewTestView.prototype.changeCertificateTemplate = function(e) {
        var index = jQuery('#certificate-template').find(':selected').val();
        if(index){
            var url = this.certificateTemplates[index].template;
            this.$("#preview-template").attr('data-href', url);
        }

        // if(index > -1) {
        //     var activeCertTemplate = this.certificateTemplates[index];
        //     jQuery("#modal-id #img-el-id").attr("src", activeCertTemplate.template);
        //     jQuery("#modal-id").modal('show'); 	
        // }
    }

    NewTestView.prototype.addShortQuestion = function(e) {
        
        var self = this;
        var questionData =  {
            testId: self.currentTestId,
            type: 4,
            title: jQuery('#short-text-question-title').val(),
            prompt: jQuery('#short-text-question-ans-prompt').val(),
            points: jQuery('#short-text-question-points').val(),
            sequenceNumber: jQuery('#short-text-sequence-number').val(),
            addReferenceImage: jQuery('#short-question-reference-image').prop("checked"),
            embedVideo: jQuery('#short-question-embed-video').prop("checked"),
            videoEmbedCode: jQuery('#short-question-video-embed-code').val(),
            referenceImage: null,
        };
        var image = null;
        if(jQuery('#mcq-reference-image').prop("checked")){
            var referenceImage = jQuery('#short-question-change-image')[0].files[0];
            if(referenceImage){
                var reader = new FileReader();
                reader.onloadend = function() {
                    image = (reader.result).split('base64,')[1];   
                    questionData.referenceImage = image;
                }
                reader.readAsDataURL(referenceImage);
            }
        }
        console.log('short question data : ', questionData);
        console.log('active question : ', this.activeQuestion);

        if(this.activeQuestion != null){
            questionData.action = "edit_short_question";
            questionData.id = this.activeQuestion.id;
        }
        else{
            console.log('add short question confirmed');
            questionData.action = "add_short_question";
        }
        this.model.clear({ silent: true }); 
        this.model.save(questionData).then(function (res) {
            console.log(res);
            if(!res.hasError) {
                if(self.activeQuestion == null){
                    self.saveQuestion(res.question);
                }
                else{
                    self.questions[self.activeQuestion.questionIndex] = res.question;
                    self.activeQuestion = questionData;
                }
                console.log(res.id);
                // self.currentTestId = res.testId;
                self.isLoading = false;
                self.render();
                jQuery('#tabsBlock2').trigger('click');
                jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
        });   
    }

    NewTestView.prototype.addYnQuestion = function(e) {
        var self = this;
        var questionData = {
            action: "",
            testId: self.currentTestId,
            type: 5,
            title: jQuery('#yn-question-title').val(),
            prompt: jQuery('#yn-question-ans-prompt').val(),
            points: jQuery('#yn-question-points').val(),
            sequenceNumber: jQuery('#yn-question-sequence-number').val(),
            addReferenceImage: jQuery('#yn-question-reference-image').prop("checked"),
            embedVideo: jQuery('#yn-question-embed-video').prop("checked"),
            videoEmbedCode: jQuery('#yn-question-video-embed-code').val(),
        };

        var image = null;
        var referenceImage = jQuery('#yn-question-change-image')[0].files[0];
        if(referenceImage){
            var reader = new FileReader();
            reader.onloadend = function() {
                image = (reader.result).split('base64,')[1];  
                questionData.referenceImage = image; 
            }
            reader.readAsDataURL(referenceImage);
        }
        if(this.activeQuestion != null){
            questionData.action = "edit_yn_question";
            questionData.id = this.activeQuestion.id;
        }
        else{
            questionData.action = "add_yn_question";
        }
        this.model.clear({ silent: true }); 
        this.model.save(questionData).then(function (res) {
            console.log(res);
            if(!res.hasError) {
                if(self.activeQuestion == null){
                    self.saveQuestion(res.question);
                }
                else{
                    self.questions[self.activeQuestion.questionIndex] = res.question;
                    self.activeQuestion = questionData;
                }
                console.log(res.id);
                // self.currentTestId = res.testId;
                self.isLoading = false;
                self.render();
                jQuery('#tabsBlock2').trigger('click');
                jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
            }
            
        }); 
        
    }


    NewTestView.prototype.saveQuestion = function(data){
        console.log('save question data : ', data);
        data.questionState = 'active';
        data.tabNo = this.questions.length + 1;
        data.activeTabImage = jQuery(".question-type").attr('active-image-src');
        data.inactiveTabImage = jQuery(".question-type").attr('inactive-image-src');
        for (var i = 0; i < this.questions.length; i++) {
            this.questions[i].questionState = 'inactive'            
        }
        this.questions.push(data);
        console.log('questions : ', this.questions);

        if(this.questions.length > 1) {
            this.questions.sort(function(a, b){
                return a.sequenceNumber - b.sequenceNumber;
            })
        }                
    }

    NewTestView.prototype.addLongQuestion = function(e) {
        var self = this;
        var questionData = {
            action: null,
            testId: self.currentTestId,
            type: 3,
            title: jQuery('#long-text-question-title').val(),
            prompt: jQuery('#long-text-question-ans-prompt').val(),
            points: jQuery('#long-text-question-points').val(),
            sequenceNumber: jQuery('#long-text-sequence-number').val(),
            addReferenceImage: jQuery('#long-question-reference-image').prop("checked"),
            embedVideo: jQuery('#long-question-embed-video').prop("checked"),
            videoEmbedCode: jQuery('#long-question-video-embed-code').val(),
        };
        var image = null;
        var referenceImage = jQuery('#long-question-change-image')[0].files[0];
        if(referenceImage){
            var reader = new FileReader();
            reader.onloadend = function() {
                image = (reader.result).split('base64,')[1];   
                questionData.referenceImage = image;
                console.log(questionData);
            }
            reader.readAsDataURL(referenceImage);
        }
        console.log('activeQuestion : ', this.activeQuestion);
        if(this.activeQuestion != null){
            questionData.action = "edit_long_question";
            questionData.id = this.activeQuestion.id;
            console.log('edit long question data : ', questionData);
        }
        else{
            questionData.action = "add_long_question";
        }
        this.model.clear({ silent: true }); 
        this.isLoading = true;
        this.model.save(questionData).then(function (res) {
            console.log('long question edit/save response : ', res);
            if(!res.hasError) {
                if(self.activeQuestion == null){
                    self.saveQuestion(res.question);
                }
                else{
                    self.questions[self.activeQuestion.questionIndex] = res.question;
                    self.activeQuestion = res.question;
                }
                // self.activeQuestion = res.id;
            }
            self.isLoading = false;
            self.render();
            jQuery('#tabsBlock2').trigger('click');   
            jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
        });  
    }
    
 
	function createImageChoiceOptionsObject(image, optionTitle, correctTOption, deferred) {
		var data = {
			optionTitle: optionTitle,
			correctOption: correctTOption,
			image: image
		}
		deferred.resolve(data);
		return deferred.promise();
	}



    NewTestView.prototype.editImageQuestion = function(e) {
        var self = this;
        var length = jQuery('div.option-box-image-choice-question').siblings().length;
        var referenceImage = null;
        var counter = 0;

        var questionData = {
            action: "edit_image_question",
            testId: self.currentTestId,
            id: this.activeQuestion.id,
            type: 2,
            title: jQuery('#image-choice-question-title').val(),
            prompt: jQuery('#image-choice-question-ans-prompt').val(),
            points: jQuery('#image-choice-question-points').val(),
            sequenceNumber: jQuery('#image-choice-sequence-number').val(),
            addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
            referenceImage: null,
            embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
            videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
        };

        if(jQuery('#image-choice-reference-image').prop("checked")){
            var referenceImage = jQuery('#image-question-change-image')[0].files[0];
            if(referenceImage){
                var reader = new FileReader();
                reader.onloadend = function() {
                    var image = (reader.result).split('base64,')[1];
                    questionData.referenceImage = image;
                }
                reader.readAsDataURL(referenceImage);
            }
        }
        var options = [];
        jQuery('div.option-box-image-choice-question').siblings()
        .each(function(){
            var referenceImageAnswer = jQuery(this).find('#image-choice-option-image')[0].files[0]
            console.log('reference answer img : ', referenceImageAnswer);
            if(referenceImageAnswer){
                var reader = new FileReader();
                reader.onloadend = function() {
                    counter++;
                    var image = (reader.result).split('base64,')[1]
                    var index = jQuery(this).find("input[name='answer-index']").val();
                    var optionsData = {
                        id: self.activeQuestion.answers[index].id,
                        optionTitle: jQuery(this).find("input[name='image-choice-option-title']").val(),
                        optionCharacter: jQuery(this).find("input[name='image-choice-option-character']").val(),
                        correctOption: jQuery(this).find("input[name='image-choice-correct-option']").prop("checked"),
                        image: image
                    }
                    options.push(optionsData)
                    if(counter == length){
                        questionData.options = options;
                        console.log(questionData);
                        self.model.save(questionData).then(function (res) {
                            if(!res.hasError){
                                if(self.activeQuestion == null){
                                    self.saveQuestion(res.question);
                                }
                                else{
                                    self.questions[self.activeQuestion.questionIndex] = res.question;
                                    self.activeQuestion = questionData;
                                }
                                self.isLoading = false;
                                self.render();
                                jQuery('#tabsBlock2').trigger('click');   
                                jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                                // self.currentTestId = res.testId
                            }
                            console.log(res);
                        });
                                         
                    }
                }
                reader.readAsDataURL(referenceImageAnswer);
            }
            else{
                var index = jQuery(this).find("input[name='answer-index']").val();
                counter++;
                var optionsData = {
                    id: self.activeQuestion.answers[index].id,
                    optionTitle: jQuery(this).find("input[name='image-choice-option-title']").val(),
                    optionCharacter: jQuery(this).find("input[name='image-choice-option-character']").val(),
                    correctOption: jQuery(this).find("input[name='image-choice-correct-option']").prop("checked"),
                    image: null
                }
                options.push(optionsData)
                if(counter == length){
                    questionData.options = options;
                    console.log(questionData);
                    self.model.save(questionData).then(function (res) {
                        if(!res.hasError){
                            if(self.activeQuestion == null){
                                self.saveQuestion(res.question);
                            }
                            else{
                                self.questions[self.activeQuestion.questionIndex] = questionData;
                                self.activeQuestion = questionData;
                            }
                            // self.currentTestId = res.testId
                            self.isLoading = false;
                            self.render();
                            jQuery('#tabsBlock2').trigger('click');   
                            jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                        }
                        console.log(res);
                    });
                  
                }
            }
        });
    }

	NewTestView.prototype.addImageQuestion = function(e) {
        // if(this.activeQuestion) {
        //     this.editImageQuestion(e);
        // }
        // else {
        //     console.log('in add image question');
        //     var self = this;
        //     var referenceImage = null;
            
        //     var options = [];
        //     var length = jQuery('div.option-box-image-choice-question').siblings().length;
        //     console.log('length ' , length);
        //     var counter = 0;
        //     var questionData = {
        //         action: "save_image_question",
        //         testId: self.currentTestId,
        //         type: 2,
        //         title: jQuery('#image-choice-question-title').val(),
        //         prompt: jQuery('#image-choice-question-ans-prompt').val(),
        //         points: jQuery('#image-choice-question-points').val(),
        //         sequenceNumber: jQuery('#image-choice-sequence-number').val(),
        //         addReferenceImage: jQuery('#image-choice-reference-image').prop("checked"),
        //         referenceImage: null,
        //         embedVideo: jQuery('#image-choice-embed-video').prop("checked"),
        //         videoEmbedCode: jQuery('#image-choice-video-embed-code').val(),
        //     };
        //     var referenceImage = jQuery('#image-question-change-image')[0].files[0];
        //     if(referenceImage){
        //         var reader = new FileReader();
        //         reader.onloadend = function() {
        //             referenceImage = (reader.result).split('base64,')[1];
        //             questionData.referenceImage = referenceImage;
        //         }
        //         reader.readAsDataURL(referenceImage);
        //     }         
        //     jQuery('div.option-box-image-choice-question').siblings()
        //     .each(function(){
        //         var optionTitle = jQuery(this).find("input[name='image-choice-option-title']").val(); 
        //         var correctOption = jQuery(this).find("input[name='image-choice-correct-option']").prop("checked");
        //         var optionCharacter = jQuery(this).find("input[name='image-choice-option-character']").val(); 
        //         var referenceImageAnswer = jQuery(this).find('#image-choice-option-image')[0].files[0]
        //         var reader = new FileReader();
        //         reader.onloadend = function() {
        //             counter++;
        //             var image = (reader.result).split('base64,')[1]
        //             var optionsData = {
        //                 optionTitle: optionTitle,
        //                 optionCharacter: optionCharacter,
        //                 correctOption: correctOption,
        //                 image: image
        //             }
        //             console.log('image option data : ', optionsData);
        //             options.push(optionsData)
        //             if(counter == length){
        //                 questionData.options = options;
        //                 console.log(questionData);
        //                 self.model.clear({ silent: true }); 
        //                 self.isLoading = true;
        //                 self.model.save(questionData).then(function (res) {
        //                     if(!res.hasError){
        //                         if(self.activeQuestion == null){
        //                             self.saveQuestion(res.question);
        //                         }
        //                         else{
        //                             self.questions[self.activeQuestion.questionIndex] = res.question;
        //                             self.activeQuestion = questionData;
        //                         }
        //                         self.isLoading = false;
        //                         self.render();
        //                         jQuery('#tabsBlock2').trigger('click');   
        //                         jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
        //                     }
        //                     self.isLoading = false;
        //                     console.log(res);
        //                 });                                     
        //             }
        //         }
        //         reader.readAsDataURL(referenceImageAnswer);
        //     });    
        // }
	}

	NewTestView.prototype.addGrades = function(e) {
		this.grades.push({
			title: jQuery('#grade-title').val(),
			minimumPercentage: jQuery('#grade-min-precentage').val()
		});
		jQuery('#grading-table').append(
			'<tr> \
			 <td> '+ jQuery('#grade-title').val() +' </td> \
			 <td> '+ jQuery('#grade-min-precentage').val() +'</td> \
			 <td>\
				  <button class="red-button remove-record" data-toggle="modal" data-target="#remove-grade"><img src="'+ this.gradesRemoveImage +'"  align="top" style="margin: 3px 6px 0 0;">Remove</button> \
				  <button class="blue-button edit-record" data-toggle="modal" data-target="#add-edit-grade"><img src="'+ this.gradesEditImage +'" align="top" style="margin: 3px 6px 0 0;">Edit</button> \
			 </td> \
			 </tr>'
		);

		this.$("#grade-title").trigger("focusout");
		this.$("#grade-min-precentage").trigger("focusout");
		if(this.$("#add-edit-grade .err").length != 0){
			this.$(e.currentTarget).siblings(".global-error-msg").show();
		}else {
			this.$(e.currentTarget).siblings(".global-error-msg").hide();
		}
	}



	NewTestView.prototype.setTestStatus = function(e) {
		var status = jQuery('#'+e.currentTarget.id).attr('data-type')
		jQuery('#test-status-draft').removeClass('selected')
		jQuery('#test-status-published').removeClass('selected')
		jQuery('#test-status-inactive').removeClass('selected')
		
		jQuery('#selected-test-status-draft').hide();
		jQuery('#selected-test-status-published').hide();
		jQuery('#selected-test-status-inactive').hide();

		if(status == "Draft"){
			jQuery('#selected-test-status-draft').show();
		}
		if(status == "Published"){
			jQuery('#selected-test-status-published').show();
		}
		if(status == "Inactive"){
			jQuery('#selected-test-status-inactive').show();
		}

		jQuery('#'+e.currentTarget.id).addClass('selected')
		
		this.testStatus = status;
		
		console.log('status : ', status);

		setTimeout(function () {
			this.$(".overlaybox").hide();
			this.$(".options-set").hide();
			this.$(".status-box .fa").hide();
			this.$(".status-box .fa-angle-down").show();
		}, 100);
	}
  

    NewTestView.prototype.fetchTest = function(currentTestId) {
      console.log('inside fetchTest'); 
    }

    NewTestView.prototype.checkAllValidations = function(e) {
        this.validateName(e);
        this.validateWebDescription(e); 
        this.validateTimeLimitInMin(e); 
        this.validateWaitingPeriod(e); 
        this.validateExpiryDate(e); 
        // this.validateCertificateTemplate(e); 
        this.validateTermsAndConditions(e); 
        this.validateTermsAndConditionsLabel(e); 
        this.validateCheckboxText(e); 
        this.validateStartScreenTitle(e);
        this.validateStartScreenDescription(e);
        this.validateStartScreenButtonText(e);
        this.validateEndScreenHeadline(e);
        this.validateEndScreenPassMessage(e);
        this.validateEndScreenFailMessage(e);
        this.validateStartScreenImage(e);
    }



    NewTestView.prototype.getStartScreenCoverImage = function() {
        var self = this;
        var image = null;
        
    }
   
    NewTestView.prototype.addTest = function(e) {
        if(this.currentTestId != null){

        }
        else{
            var self = this;
            var type = null;
            var style = null;
            var showExplaination = null;
            var facebookSharing = null;
            var linkedinSharing = null;
            var twitterSharing = null;
            var questionCategories = [];

            this.checkAllValidations(e);

            jQuery('div.option-box-question-category').siblings()
            .each(function(){ 
                questionCategories.push(
                    {
                        title: jQuery(this).find("input[name='question-category-title']").val(),
                        description: jQuery(this).find("textarea[name='question-category-desc']").val() 
                    }
                ) 
            });
            if( jQuery('#test-type-exam').hasClass('active') ){
                type = 'Exam'; 
            } else{ type = 'Quiz'; }
            
            if( jQuery('#test-style-sectioned').hasClass('active') ){
                style = 'Sectioned';
            } else { style = 'Single Pager'; }
            


           
            // this.startScreenCoverImage = this.getStartScreenCoverImage();
            console.log('start screen cover image : ', this.startScreenCoverImage);
            
            var data = {
                action: "add_new_test",
                title: jQuery('#test-title').val(),
                webDescription: jQuery('#web-description').val(),
                type: type,
                style: style,
                setTimeLimit: jQuery('#test-time-limit').prop("checked"),
                // timeLimitFor: jQuery('input[name="test-time-limit-for"]:checked').val(),
                // timeLimit: jQuery("#test-time").val(),
                status: this.testStatus,
                allowRetake: jQuery('#test-retakes').prop("checked"),
                // maximumTestAttempts: jQuery('#test-attempts').val(),
                // testReattemptTime: jQuery('#test-re-attempt-time').val(),
                expiryDateSwitch: jQuery('#test-expiry-date-switch').prop("checked"),
                expiryDate: null,
                testSummary: jQuery('#test-ans-on-result-page').prop("checked"),
                showExplainationSwitch: jQuery('#result-explanation-page').prop("checked"),
                showExplaination: jQuery('input[name=show-explaination-condition]:checked').val(),
                // jQuery('#show-explaination-condition').
                randomizeQuestions: jQuery('#randomize-questions').prop("checked"),
                skipAnswer: jQuery('#skip-ans').prop("checked"),
                immediateAnswerAfterSelection: jQuery('#immidiate-ans').prop("checked"),
                allowChangeAnswer: jQuery('#change-ans').prop("checked"),
                autoAdvanceToNextQuestion: jQuery('#auto-advance').prop("checked"),
                showResultAtEndScreen: jQuery('#result-at-end').prop('checked'),
                enableTermsAndConditions: jQuery('#enable-terms-and-conditions').prop("checked"),
                termsAndConditions: jQuery('#terms-and-conditions').val(),
                termsAndConditionsLabel: jQuery('#terms-condtions-label-text').val(),
                showIAgree: jQuery('#include-checkbox').prop("checked"),
                testPassingScore: jQuery('#test-passing-score').val(),
                startScreenTitle: jQuery('#start-screen-title').val(),
                startScreenDescription: jQuery('#start-screen-description').val(),
                startScreenButtonText: jQuery('#starting-button-text').val(),
                endScreenHeadline: jQuery('#end-screen-headline').val(),
                endScreenPassMessage: jQuery('#end-screen-pass-message').val(),
                endScreenFailMessage: jQuery('#end-screen-fail-message').val(),
            } 
            
            if(jQuery('#test-time-limit').prop("checked")) {
                // data.timeLimitFor = jQuery('input[name="test-time-limit-for"]:checked').val();
                data.timeLimit = jQuery("#test-time").val();
            }
            else {
                // data.timeLimitFor = "";
                data.timeLimit = "";
            }
            if(jQuery('#test-retakes').prop("checked")) {
                data.maximumTestAttempts = jQuery('#test-attempts').val();
                data.testReattemptTime = jQuery('#test-re-attempt-time').val();
            }
            else {
                data.maximumTestAttempts = "";
                data.testReattemptTime = "";
            }
            if(jQuery('#test-expiry-date-switch').prop("checked")) {
                data.expiryDate = jQuery('#test-expiry-date').val();
            }
            else {
                data.expiryDate = "";
            }
            if(jQuery('#include-checkbox').prop("checked")){
                data.iAgreeText = jQuery('#checkbox-text').val();
            }
            else {
                data.iAgreeText = "";
            }
            console.log('add test data : ', data);
            console.log('error count : ', this.$('.config-tab').find('.err').length);
            if(this.$('.config-tab').find('.err').length == 0){

                console.log('no error found');
                var activeTab = self.$('.test-header').find('.active').attr('id');

                self.$('#' + activeTab).removeClass('icn-err-warning-show');
                
				self.$('#'+activeTab+'-body'+' .right > .tab-body').each(function() {
                    var sideTabBody = jQuery(this).attr('id');

                    var tabName = jQuery(this).attr('class').split(' ')[0];
                    var sideTabId = jQuery('#' + sideTabBody).parents('.right').siblings('.left').find("[tab-name='" + tabName + "']").attr('id');
                    
                    jQuery('#'+ sideTabId).removeClass('icn-err-warning-show');
                    jQuery('#'+ sideTabId +'-body').removeClass('icn-err-warning-show');
                    jQuery('#'+ sideTabBody +'-body').removeClass('icn-err-warning-show');
                });            


                console.log('test data : ', data);

                this.isLoading = true;

                var coverImage = this.$('#starting-cover-image')[0].files[0];
                console.log('coverImage : ', coverImage);
                if(coverImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        data.startScreenCoverImage = (reader.result).split('base64,')[1];    
                        
                        self.model.save(data).then(function (res) {
                            console.log(res);
                            if(!res.hasError) {
                                console.log('test added without error');
                                console.log(res.id);
                                self.currentTestId = res.id;
        
                                var data = {
                                    action: "get_test_details",
                                    id: self.currentTestId,
                                    fetchQuestions: false
                                };
                            
                                self.model.save(data).then(function (res) {
                                    console.log(res);
                                    if(!res.hasError) {
                                        console.log('created test fetched : ', res.test);
                                        self.activeTest = res.test;
                                        self.autoScoreDisable = self.activeTest.autoScoreDisable;
                                        self.isLoading = false;
                                        self.render();
                                        jQuery('#tabsBlock2').trigger('click');                            // self.parent.activeTest = self.test;
                                    }
                                });
                            }
                        });
                    }
                    reader.readAsDataURL(coverImage);
                }
                else {
                    data.startScreenCoverImage = null;
                    self.model.save(data).then(function (res) {
                        console.log(res);
                        if(!res.hasError) {
                            console.log('test added without error');
                            console.log(res.id);
                            self.currentTestId = res.id;
    
                            var data = {
                                action: "get_test_details",
                                id: self.currentTestId,
                                fetchQuestions: false
                            };
                        
                            self.model.save(data).then(function (res) {
                                console.log(res);
                                if(!res.hasError) {
                                    console.log('created test fetched : ', res.test);
                                    self.activeTest = res.test;
                                    self.autoScoreDisable = self.activeTest.autoScoreDisable;
                                    self.isLoading = false;
                                    self.render();
                                    jQuery('#tabsBlock2').trigger('click');                            // self.parent.activeTest = self.test;
                                }
                            });
                        }
                    });
                }

                
            }
            else{
                var activeTab = self.$('.test-header').find('.active').attr('id');
                
                console.log({activeTab});

                self.$('#' + activeTab).addClass('icn-err-warning-show');
                
				self.$('#'+activeTab+'-body'+' .right > .tab-body').each(function() {


                    var sideTabBody = jQuery(this).attr('id');
                    jQuery('#'+ sideTabId).removeClass('icn-err-warning-show');
                    jQuery('#'+ sideTabId +'-body').removeClass('icn-err-warning-show');
                    jQuery('#'+ sideTabBody +'-body').removeClass('icn-err-warning-show')
                    
                    
                    if (jQuery('#'+sideTabBody).find('.err').length > 0) {
                        var tabName = jQuery(this).attr('class').split(' ')[0];
                        var sideTabId = jQuery('#' + sideTabBody).parents('.right').siblings('.left').find("[tab-name='" + tabName + "']").attr('id');
                        jQuery('#'+ sideTabId).addClass('icn-err-warning-show');
                        jQuery('#'+ sideTabId +'-body').addClass('icn-err-warning-show');

                        jQuery('#'+ sideTabBody +'-body').addClass('icn-err-warning-show');
                    }
                    else {
                        var tabName = jQuery(this).attr('class').split(' ')[0];
                        var sideTabId = jQuery('#' + sideTabBody).parents('.right').siblings('.left').find("[tab-name='" + tabName + "']").attr('id');
                        jQuery('#'+ sideTabId).removeClass('icn-err-warning-show');
                        jQuery('#'+ sideTabId +'-body').removeClass('icn-err-warning-show');

                        jQuery('#'+ sideTabBody +'-body').removeClass('icn-err-warning-show');
                    } 
                });               
                console.log('errors exist');
            }
        }
        
    }

    // NewTestView.prototype.fileChange = function(e) {
    //     this.readFileName(e.target, this.$(e.currentTarget));
    // }

    // NewTestView.prototype.readFileName = function(input,thisObj) {
	// 	if(input.files && input.files[0]) {
	// 		var size = input.files[0].size;
	// 		const k = 1024;
	// 		const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

	// 		const i = Math.floor(Math.log(size) / Math.log(k));
	// 		var image_size = (size / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];

	// 		var twentyMb = 20 * k;
	// 		var kbSize = (size / k);
	// 		kbSize = ((Math.round(kbSize * 100) / 100));

	// 		if(input.files && input.files[0] && kbSize <= twentyMb) {
	// 			var image_src = URL.createObjectURL(input.files[0]);
	// 			console.log('image : ', image_src);
	// 			// $("#form-field-session-image").attr('data-changed', "true");
	// 			// thisObj.parents(".upload-image").find(".after-upload .prev-image").css("background-image", "url(" + image_src + ")");
	// 			// thisObj.parents(".upload-image").find(".after-upload .f-name").html(input.files[0].name);
	// 			// thisObj.parents(".upload-image").find(".after-upload .f-size").html(image_size);
	// 			// thisObj.parents(".upload-image").find(".before-upload").hide();
	// 			// thisObj.parents(".upload-image").find(".after-upload").removeClass('display-none');
	// 		} else {
	// 			thisObj.parents(".upload-image").find('.f-validation').show();
	// 		}
    //         // if (input.files && input.files[0] && kbSize <= twentyMb) {
    //         //     var reader = new FileReader();
    //         //     reader.onload = function(e) {
    //         //       var base64 = e.target.result.split('base64,')[1];
    //         //       thisObj.parents(".upload-image").find(".after-upload").$('#'+targetPreview).css('background-image', 'url('+e.target.result +')');
    //         //       thisObj.parents(".upload-image").find(".after-upload").$('#'+fieldId).val(base64);
    //         //       thisObj.parents(".upload-image").find(".after-upload").$('#'+fieldId).attr('data-changed', "true");
    //         //       thisObj.parents(".upload-image").find(".after-upload").$('#'+targetPreview).hide();
    //         //       thisObj.parents(".upload-image").find(".after-upload").$('#'+targetPreview).fadeIn(500);
    //         //     }
    //         //     reader.readAsDataURL(input.files[0]);
    //         // }else {
    //         //     thisObj.parents(".upload-image").find('.f-validation').show();
    //         // }
	// 	}
	// }


    NewTestView.prototype.previewTemplate = function(e) {
        var url = this.$(e.currentTarget).attr('data-href');
        if(url){
            window.open(url, '_blank');
        }
    }
    
    NewTestView.prototype.validateWebDescription = function(e) {
        this.$('#web-description-err').removeClass('err');
        if(this.$('#web-description').val() == ""){
            this.$('#web-description-err').addClass('err');
        }
    }

    NewTestView.prototype.validateTimeLimitInMin = function(e) {
        console.log('inside validateTimeLimitInMin');
        this.$('#time-lim-in-min-err').removeClass('err');
        if(this.$('#test-time').val() == "" && jQuery('#test-time-limit').prop("checked")){
            this.$('#time-lim-in-min-err').addClass('err');
        }    
    }

    NewTestView.prototype.validateWaitingPeriod = function(e) {
        this.$('#wait-period-err').removeClass('err');
        if(jQuery('#test-retakes').prop("checked") && this.$('#test-re-attempt-time').val() == ""){
            this.$('#wait-period-err').addClass('err');
        }    
    }

    NewTestView.prototype.validateExpiryDate = function(e) {
        this.$('#expiry-date-err').removeClass('err');
        if(jQuery('#test-expiry-date-switch').prop("checked") && this.$('#test-expiry-date').val() == ""){
            this.$('#expiry-date-err').addClass('err');
        }    
    }

    NewTestView.prototype.validateTermsAndConditions = function(e) {
        this.$('#t-n-c-err').removeClass('err');
        if(this.$('#terms-and-conditions').val() == ""){
            this.$('#t-n-c-err').addClass('err');
        }    
    }

    NewTestView.prototype.validateTermsAndConditionsLabel = function(e) {
        this.$('#t-n-c-label-err').removeClass('err');
        if(this.$('#terms-condtions-label-text').val() == ""){
            this.$('#t-n-c-label-err').addClass('err');
        }    
    }

    NewTestView.prototype.validateCheckboxText = function(e) {
        this.$('#checkbox-txt-err').removeClass('err');
        if(this.$('#include-checkbox').prop("checked") && this.$('#checkbox-text').val() == ""){
            this.$('#checkbox-txt-err').addClass('err');
        }    
    }

	NewTestView.prototype.validateName = function(e) {
		if(this.$(e.currentTarget).val()=='') {  
			this.$(e.currentTarget).siblings("p").addClass("err");
		} else {
			this.$(e.currentTarget).siblings("p").removeClass("err");
		}
	}

	NewTestView.prototype.validateStartScreenTitle = function(e) {
		this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-start-wizard-default").show();
		this.$('#start-screen-title-err').removeClass('err');
		if (this.$('#start-screen-title').val() == '') {
			this.$('#start-screen-title-err').addClass("err");
		} 
  }

	NewTestView.prototype.validateStartScreenDescription = function(e) {
		this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
		this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-start-wizard-default").show();
		this.$('#start-screen-description-err').removeClass('err');
		if (this.$('#start-screen-description').val() == '') {
			this.$('#start-screen-description-err').addClass("err");
		} 
	}

    NewTestView.prototype.validateStartScreenButtonText = function(e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
  		this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-start-wizard-default").show();
			this.$('#start-screen-button-txt-err').removeClass('err');
			if (this.$('#start-screen-title').val() == '') {
					this.$('#start-screen-button-txt-err').addClass("err");
			} 
    }

   
    NewTestView.prototype.validateEndScreenHeadline = function(e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
			this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-end-wizard-default").show();
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
    }

    NewTestView.prototype.validateEndScreenPassMessage = function(e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
			this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-end-wizard-default").show();
			
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
    }

    NewTestView.prototype.validateEndScreenFailMessage = function(e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
			this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-end-wizard-default").show();
	
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
    }

    NewTestView.prototype.setSelectedCertificateForPreview = function(e) {
        console.log('inside setSelectedCertificateForPreview');
        console.log('template id : ', this.$(this).removeClass('err').val());
        if (this.$('#end-screen-fail-message').val() == '') {
            this.$('#end-screen-fail-msg-err').addClass("err");
        } 
    }

    NewTestView.prototype.validateStartScreenImage = function() {
        this.$('#start-screen-cover-img-err').removeClass("err");
        if(this.$('#starting-cover-image')[0].files.length == 0) {
            this.$('#start-screen-cover-img-err').addClass("err");
        }
    }

    NewTestView.prototype.toTestDetails = function () {
        console.log('active test : ', this.activeTest);
        if(this.activeTest) {
            this.parent.activeView = "TestsSV.Details";
            this.render();
        }
        else {
            this.parent.activeView = "TestsSV.List"
            this.parent.render();
        }
        console.log('inside toTestDetails');
    }

    NewTestView.prototype.autoScoreCheck = function (e) {
        if(this.$('#test-ans-on-result-page').prop("checked")) {
            this.$('#long-short-question-section').show();            
        }
        else {
            this.$('#long-short-question-section').hide();
        }
    }

		NewTestView.prototype.newTestsvSwitch = function (e) {
			var self = this
			this.$(e.currentTarget).find('input[type="checkbox"]').prop('checked', function () {
				var targetTrigger = self.$(e.currentTarget).attr('data-trigger');
				if(targetTrigger) {
					self.$("#"+targetTrigger).click()
				}
				var targetContainer = self.$(e.currentTarget).attr('data-target');
				if(targetContainer){
					if(this.checked){
						self.$("#"+targetContainer).hide()
					}
					else{
						self.$("#"+targetContainer).show()
					}
				}
				return !this.checked;
			});
		
			/*
			this.$(e.currentTarget).find('input[type=checkbox]').prop('checked', function () {
				return !this.checked;
			});
			*/
			if(this.$(e.currentTarget).hasClass("switch-hide-show-toggle")){
				this.$(".switch-hide-show-"+this.$(e.currentTarget).attr("switch-no")).toggle();
			}
		}

		NewTestView.prototype.newTestsvManualSwitch = function (e) {
			var targetContainer = this.$(e.currentTarget).attr('data-target');
			if(targetContainer){
				if(this.$('.manual-switch').prop('checked')){
					this.$("#"+targetContainer).show()
				}else{
					this.$("#"+targetContainer).hide()
				}
			}
		}

		NewTestView.prototype.newTestsvImgBox = function (e) {
			this.$(e.currentTarget).parents(".option-select").find(".image-box").removeClass("active");
  		this.$(e.currentTarget).addClass("active");
		}

		NewTestView.prototype.newTestsvBeforeUpload = function (e) {
			console.log("Befor Upload");
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
			this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-start-wizard-cover").show();

			e.stopImmediatePropagation();
			this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
			document.body.onfocus = this.focusOut;
		}

		NewTestView.prototype.focusOut = function (e) {
			console.log("Befor Upload Focusout");
			setTimeout(function(){
				this.$("#starting-cover-image").parents(".form-box").find(".preview-images img").hide();
				this.$("#starting-cover-image").parents(".form-box").find(".preview-images .img-start-wizard-default").show();
		
				if (this.$("#starting-cover-image").val() == "") {
					this.$("#starting-cover-image").parents(".upload-image").find('.f-validation').show();
				} else {
					this.$("#starting-cover-image").parents(".upload-image").find('.f-validation').hide();
				}
		
				document.body.onfocus = null;
			}, 700);
		}

		NewTestView.prototype.newTestsvStartTitleFocus = function (e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
  		this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-start-wizard-title").show();
		}

		NewTestView.prototype.newTestsvStartDescriptionFocus = function (e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
			this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-start-wizard-description").show();
		}

		NewTestView.prototype.newTestsvStartButtonTextFocus = function (e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
			this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-start-wizard-button").show();
		}
		NewTestView.prototype.newTestsvEndHeadlineFocus = function (e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
  		this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-end-wizard-headline").show();
		}
		NewTestView.prototype.newTestsvEndPassMsgFocus = function (e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
  		this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-end-wizard-pass-message").show();
		}
		NewTestView.prototype.newTestsvEndFailMsgFocus = function (e) {
			this.$(e.currentTarget).parents(".form-box").find(".preview-images img").hide();
  		this.$(e.currentTarget).parents(".form-box").find(".preview-images .img-end-wizard-fail-message").show();
		}

		NewTestView.prototype.newTestsvCopyLink = function (e) {
			var copyText = document.getElementById("link-url");
			copyText.select();
			document.execCommand("copy");
			console.log(copyText.value);
		}
		NewTestView.prototype.newTestsvTestCopyLink = function (e) {
			var copyText = document.getElementById("test-link-url");
			copyText.select();
			document.execCommand("copy");
			console.log(copyText.value);
		}
		NewTestView.prototype.newTestsvCopyCode = function (e) {
			var copyText = document.getElementById("embed-code");
			copyText.select();
			document.execCommand("copy");
			console.log(copyText.value);
		}
		NewTestView.prototype.newTestsvAddMoreOption = function (e) {
			var optionString = this.$(e.currentTarget).siblings("div").find(".option-box").html();
			var dataClass = this.$(e.currentTarget).attr('data-class');
			var count = this.$(e.currentTarget).siblings('div').find(".option-box").length + 1;
			this.$(e.currentTarget).siblings('div').append('<div class="option-box '+ dataClass +'">'+optionString+'</div>');
			this.$(e.currentTarget).siblings('div').find(".option-box").last().find(".remove-image").trigger("click");
			this.$(e.currentTarget).siblings('div').find(".option-box").last().find(".option-count span").text(count);
		}

		NewTestView.prototype.newTestsvRemoveThis = function (e) {
			this.$(e.currentTarget).parents('.option-box').remove();
		}

		NewTestView.prototype.newTestsvImageUpload = function (e) {
			e.stopImmediatePropagation();
			this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
		}

		NewTestView.prototype.newTestsvImageChange = function (e) {
			this.readFileName(this,this.$(e.currentTarget));
		}
		NewTestView.prototype.readFileName = function (input,thisObj,e) {
			var imgFiles = thisObj[0].files;
			var size = imgFiles[0].size;
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
		
			const i = Math.floor(Math.log(size) / Math.log(k));
			var image_size = (size / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];
			var twentyMb = 20 * k;
			var kbSize = (size / k);
			kbSize = ((Math.round(kbSize * 100) / 100));
		
			if (thisObj && thisObj[0].files && kbSize <= twentyMb) {
				var image_src = window.URL.createObjectURL(new Blob(thisObj[0].files, { type: `image/jpeg` }));

				// var base64 = '';
				// var reader = new FileReader(); 
				// reader.readAsDataURL(thisObj[0].files); 
				// reader.onload = function () { 
				// 	base64 = reader.result; 
				// 	if(thisObj.siblings('div').hasClass('before-upload')){
				// 		thisObj.parents(".upload-image").find('input[type="file"]').attr('data-base-64', base64);
				// 	}
				// }
				
				if(!thisObj.siblings('div').hasClass('before-upload')){
					thisObj.siblings(".uploaded-image").find(".prev-image").css("background-image", "url(" + image_src + ")");
					thisObj.siblings(".uploaded-image").find(".f-name").html(imgFiles[0].name);
					thisObj.siblings(".upload-image").hide();
					thisObj.siblings(".uploaded-image").show();
				}else{
					thisObj.parents(".upload-image").find(".after-upload .prev-image").css("background-image", "url(" + image_src + ")");
					thisObj.parents(".upload-image").find(".after-upload .f-name").html(imgFiles[0].name);
					thisObj.parents(".upload-image").find(".after-upload .f-size").html(image_size);
					thisObj.parents(".upload-image").find(".before-upload").hide();
					thisObj.parents(".upload-image").find(".after-upload").show();
				}
			}
		}

		NewTestView.prototype.newTestsvRemoveFile = function (e) {
			this.$(e.currentTarget).parents(".upload-image").find('input[type="file"]').val('');
			this.$(e.currentTarget).parents(".upload-image").find(".after-upload").hide();
			this.$(e.currentTarget).parents(".upload-image").find(".before-upload").show();
		}

		NewTestView.prototype.newTestsvGradeTitle = function (e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		}

		NewTestView.prototype.newTestsvGradeMinPrecentage = function (e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		}
		NewTestView.prototype.newTestsvCategoryTitleQuestion = function (e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		}

		NewTestView.prototype.newTestsvCategoryDesc = function (e) {
			if (this.$(e.currentTarget).val() == '') {
				this.$(e.currentTarget).siblings("p").addClass("err");
			} else {
				this.$(e.currentTarget).siblings("p").removeClass("err");
			}
		}

		NewTestView.prototype.newTestsvStatusBoxButton = function (e) {
			this.$(e.currentTarget).siblings(".options-set").show();
			this.$(".overlaybox").show();
			this.$(".status-box .fa").hide();
			this.$(".status-box .fa-angle-up").show();
		}

		NewTestView.prototype.newTestsvOverlayBox = function (e) {
			this.$(".overlaybox").hide();
			this.$(".options-set").hide();
			this.$(".status-box .fa").hide();
			this.$(".status-box .fa-angle-down").show();
		}

		NewTestView.prototype.newTestsvTabsBlock = function (e) {
            console.log('clicked on design');
			var clickedtab = this.$(e.currentTarget).attr('tab-name');
			if(!this.$(e.currentTarget).hasClass('q-tabs')){
				if(this.$(e.currentTarget).parents("div").hasClass('test-header')){
					this.$(".test-header .tabsBlock").removeClass("active");
					this.$(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(".test-body > .tab-body").hide();
					this.$(".test-body > ." + clickedtab).show();
					
					if(!this.$(e.currentTarget).is("#tabsBlock4")){
						this.$(".test-body .tabsBlock").removeClass("active");
						this.$(".test-body .tab-header #side-tab1").addClass("active");
						this.$(".test-body .right .tab-body").hide();
						this.$(".test-body .right .tabsBlock1").show();
					}

					if(this.$(e.currentTarget).is("#tabsBlock2") ){
						this.$(".test-body .tab-header #side-tab99999").addClass("active");
						this.$(".test-body .tab-header #side-tab99999").trigger('click');
					}
				}
				else if(this.$(e.currentTarget).parents("div").hasClass('inner-tab-box')) {
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock").removeClass("active");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tabsBlock div:not([class])").remove();
					this.$(e.currentTarget).append("<div></div>");
					this.$(e.currentTarget).parents(".inner-tab-box").find(".tab-body").hide();
					this.$(e.currentTarget).parents(".inner-tab-box").find("." + clickedtab).show();
				}
				else{
					this.$(".test-body .tabsBlock").removeClass("active");
					this.$(".test-body .right .tab-body").hide();
					this.$(e.currentTarget).parents(".tab-body").find("." + clickedtab).show();

					if(this.$(".test-body .right .tab-body").children("div").hasClass('inner-tab-box')) {
						this.$(".test-body .tab-header .innerTabsBlock1").addClass("active");
						this.$(".test-body .tab-header .innerTabsBlock1").append("<div></div>");
						this.$(".test-body .tab-header .innerTabsBlock1-body").show();
					}
				}

				if(this.$(e.currentTarget).hasClass('startEndScreen')){
					this.$(".startEndScreen").find('.innerTabsBlock1').trigger('click');
				}

				this.$(e.currentTarget).addClass("active");
			}
		}
    
    NewTestView.prototype.getEvents = function () {
			return {
				// m360-testssv-newtest-addtest
				"click [data-action='m360-my-portal-test-addtest']"     : "addTest",
				"click [data-action='m360-testssv-newtest-addgrades']"  : "addGrades",
				"click [data-action='m360-testssv-newtest-new-que']"    : "addNewQuestion",
				"click [data-action='m360-my-portal-strt-end-scr']"     : "addStartEndScreen",
				// "click [data-action='m360-testssv-add-img-question']"   : "addImageQuestion",
				// "click [data-action='m360-testssv-add-long-question']"  : "addEditLongQuestion",
				// "click [data-action='m360-testssv-add-short-question']" : "addShortQuestion",
				// "click [data-action='m360-testssv-save-mcq-question']"  : "addMcqQuestion",
				"click [data-action='to-tests-details']"  : "toTestDetails",
				// "click [data-action='m360-testssv-add-yn-question']"    : "addYnQuestion",
				"click [data-action='m360-mp-test-edit-question']"      : "editQuestion",
				"click [data-action='m360-testssv-delete-question']"    : "deleteQuestion",
				"click [data-action='m360-testssv-del-qa-option']"      : "deleteQuestionAnswerOption",
				"click [data-action='m360-open-new-question']"          : "openNewQuestion",
				"click [data-action='m360-new-test-status']"            : "setTestStatus",
				"click [data-action='m360-tst-preview-template']"       : "previewTemplate",
				"click [data-action='m360-slxc-test-auto-score-check']"       : "autoScoreCheck",	
				'change [data-change="file-change"]': "fileChange",
				'change [data-change="m360-mp-test-change-cert-tpl"]'   : 'changeCertificateTemplate', 
				'change [data-change="m360-set-certificate-preview"]'   : 'setSelectedCertificateForPreview', 
				'focusout [data-focusout="m360-tst-name-val"]'               : 'validateName',      
				'focusout [data-focusout="m360-tst-start-scr-title-val"]'    : 'validateStartScreenTitle', 
				'focusout [data-focusout="m360-tst-start-scr-desc-val"]'     : 'validateStartScreenDescription', 
				'focusout [data-focusout="m360-tst-start-scr-btn-txt-val"]'  : 'validateStartScreenButtonText', 
				'focusout [data-focusout="m360-tst-end-scr-headline-val"]'   : 'validateEndScreenHeadline', 
				'focusout [data-focusout="m360-tst-end-scr-pass-msg-val"]'   : 'validateEndScreenPassMessage', 
				'focusout [data-focusout="m360-tst-end-scr-fail-msg-val"]'   : 'validateEndScreenFailMessage', 
				'focusout [data-focusout="m360-tst-web-desc-val"]'     : 'validateWebDescription', 
				'focusout [data-focusout="m360-tst-time-lim-val"]'     : 'validateTimeLimitInMin', 
				'focusout [data-focusout="m360-tst-wait-period-val"]'  : 'validateWaitingPeriod', 
				'focusout [data-focusout="m360-tst-expiry-date-val"]'  : 'validateExpiryDate', 
				'focusout [data-focusout="m360-tst-val-cert-tpl"]'     : 'validateCertificateTemplate', 
				'focusout [data-focusout="m360-tst-t-and-c-val"]'      : 'validateTermsAndConditions', 
				'focusout [data-focusout="m360-tst-t-n-c-label-val"]'  : 'validateTermsAndConditionsLabel', 
				'focusout [data-focusout="m360-tst-checkbox-val"]'     : 'validateCheckboxText',
				"click [data-action='m360-new-testsv-switch']"       : "newTestsvSwitch",
				'change [data-change="m360-newTestsv-manual-switch"]'   : 'newTestsvManualSwitch',
				"click [data-action='m360-newTestsv-img-box']"       : "newTestsvImgBox",
				"click [data-action='m360-newTestsv-before-upload']"       : "newTestsvBeforeUpload",
				'focus .start-screen-title-focus' : 'newTestsvStartTitleFocus',
				'focus .start-screen-description-focus' : 'newTestsvStartDescriptionFocus',
				'focus .starting-button-text-focus' : 'newTestsvStartButtonTextFocus',
				'focus .end-screen-headline-focus' : 'newTestsvEndHeadlineFocus',
				'focus .end-screen-pass-message-focus' : 'newTestsvEndPassMsgFocus',
				'focus .end-screen-fail-message-focus' : 'newTestsvEndFailMsgFocus',
				"click [data-action='m360-newTestsv-copy-link']" : "newTestsvCopyLink",
				"click [data-action='m360-newTestsv-copy-test-link']" : "newTestsvTestCopyLink",
				"click [data-action='m360-newTestsv-copy-code']" : "newTestsvCopyCode",
				"click [data-action='m360-newTestsv-add-more-option']" : "newTestsvAddMoreOption",
				"click [data-action='m360-newTestsv-remove-this']" : "newTestsvRemoveThis",
				"click [data-action='m360-newTestsv-upload-image']" : "newTestsvImageUpload",
				"change [data-change='m360-newTestsv-image-change']" : "newTestsvImageChange",
				"click [data-action='m360-newTestsv-remove-file']" : "newTestsvRemoveFile",
				'focusout [data-focusout="m360-newTestsv-grade-title"]' : 'newTestsvGradeTitle',
				'focusout [data-focusout="m360-newTestsv-grade-min-precentage"]' : 'newTestsvGradeMinPrecentage',
				'focusout [data-focusout="m360-newTestsv-category-title-question"]' : 'newTestsvCategoryTitleQuestion',
				'focusout [data-focusout="m360-newTestsv-question-category-desc"]' : 'newTestsvCategoryDesc',
				"click [data-action='m360-newTestsv-status-box-button']" : "newTestsvStatusBoxButton",
				"click [data-action='m360-newTestsv-overlaybox']" : "newTestsvOverlayBox",
				"click [data-action='m360-newTestsv-tabsBlock']" : "newTestsvTabsBlock",
				"click [data-action='m360-slxc-new-test-question-type']" : "questionType"
			}
    }

		NewTestView.prototype.questionType = function(e){
			/*
			$(".question-type-selection").hide();
			$(".question-type-form").hide();
			*/
			/* var currentTabCount = $(".dynamic-tabs > div").length + 1;
			if($(".dynamic-tabs > div").length == 0){
				tabNo = tabNo + 1;
			}
			else{
				tabNo = currentTabCount + 1;
			}

			var questionString = "<span>" + currentTabCount +"</span>. Question title goes here and can be a longer one";

			var activeTabImage = $(this).attr('active-image-src');
			var inactiveTabImage = $(this).attr('inactive-image-src');

			$(this).parents(".tab-body").find(".tabsBlock").removeClass("active");
			$(".dynamic-tabs").append('<div id="side-tab'+tabNo+'" class="q-tabs tabsBlock active" tab-name="tabsBlock'+tabNo+'" q-tab="'+tabNo+'">\
				<img src="'+activeTabImage+'" class="active-image new_test_css35" alt="" align="top">\
				<img src="'+inactiveTabImage+'" class="inactive-image new_test_css35" alt="" align="top">\
				<div class="data-box">'+questionString+'</div>\
			</div>'); */

			/*
			if($(this).hasClass("multiple-choice-type")){
				$(".multiple-choice-type-question-form").show();
			}

			if($(this).hasClass("image-choice-type")){
				$(".image-choice-type-question-form").show();
			}

			if($(this).hasClass("long-text-type")){
				$(".long-text-type-question-form").show();
			}

			if($(this).hasClass("short-text-type")){
				$(".short-text-type-question-form").show();
			}

			if($(this).hasClass("yes-no-type")){
				$(".yes-no-type-question-form").show();
			}
			*/
		}

    NewTestView.prototype.getContext = function () {
			console.log('questions in getContext : ', this.questions);
			return {
				isLoading: this.isLoading,
				certificateTemplates: this.certificateTemplates,
				questions: this.questions,
				currentTestId: this.currentTestId,
				activeQuestion: this.activeQuestion,
				activeTest : this.activeTest,
				autoScoreDisable : this.autoScoreDisable,
				startEndScreenData: this.startEndScreenData,
				longOrShortQuestionAdded: this.longOrShortQuestionAdded,
				testMode: 'new',
				imgTypeTest : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-type-test.png')),
				imgTypeQuize : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-type-quiz.png')),
				imgStartWizardDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-start-wizard-default.png')),
				imgStartWizardTitle: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-start-wizard-title.png')),
				imgStartWizardDescription: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-start-wizard-description.png')),
				imgStartWizardButton: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-start-wizard-button.png')),
				imgStartWizardCover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-start-wizard-cover.png')),
				imgEndWizardDefault: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-end-wizard-default.png')),
				imgEndWizardHeadline: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-end-wizard-headline.png')),
				imgEndWizardPassMessage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-end-wizard-pass-message.png')),
				imgEndWizardFailMessage: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-end-wizard-fail-message.png')),
				imgContriLanding: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img_ContriLanding1.png')),
				imgDefaultProfile: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/default-profile.jpg')),
				imgPlaceholderPerson: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),
				icons : {
					yesNoQuestionIcon : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-yes-no-active.png')),
					mcqQuestionIcon : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-active.png')),
					imageChoiceQuestionIcon : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-active.png')),
					longTextQuestionIcon : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-long-answer-active.png')),
					shortTextQuestionIcon : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-short-answer-active.png')),
					icnErrorWarning : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-error-warning.png')),
					icnImgDraft : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-draft.png')),
					icnImgPublished : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-published.png')),
					icnImgInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-inactive.png')),
					icnGreenTick : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-tick-green.png')),
					icnSidebarSettingsActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-basic-settings-active.png')),
					icnSidebarSettingsInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-basic-settings-inactive.png')),
					icnStartEndActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-start-end-active.png')),
					icnStartEndInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-start-end-inactive.png')),
					icnSidebarInstructorsActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-sidebar-instructors-active.png')),
					icnSidebarInstructorsInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-sidebar-instructors-inactive.png')),
					icnSidebarTCActive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-tc-active.png')),
					icnSidebarTCInactive : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-tc-inactive.png')),
					imgStyleSectioned : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-style-sectioned.png')),
					imgStyleSinglepaper : Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/img-style-singlepager.png')),
					icnDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-date.png')),
					icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
					icnFormatOndemand: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-format-ondemand.png')),
					icnFormatPerson: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-format-in-person.png')),
					icnFormatOnline: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-format-online.png')),
					icnFormatProgramsolid: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-format-programsolid.png')),
					icnCrossRed: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-cross-red.png')),
					icnEditColored: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-edit-colored.png')),
					icnPlusBlueSm: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-plus-blue-sm.png')),
					icnFacebook: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-facebook.png')),
					icnLinkedIn: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-linkedin.png')),
					icnTwitter: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-twitter.png')),
					icnImgUpload: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png')),
					icnRemoveMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
					icnAdd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-add.png')),
					icnViewLg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-views-lg.png')),
					icnResponses: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-responses.png')),
					icnTimer: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-timer.png')),
					icnPreviousDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-previous-date.png')),
					icnDate: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-date.png')),
					icnAlert: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-alert.png')),
					icnFacebookColored: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-facebook-colored.png')),
					icnTwitterColored: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-twitter-colored.png')),
					icnLinkedColored: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-linkedin-colored.png')),
					icnEmailColored: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-email-colored.png')),
					icnAnalysisActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-analysis-active.png')),
					icnAnalysisInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-analysis-inactive.png')),
					icnQSActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-question-setting-active.png')),
					icnQSInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-question-setting-inactive.png')),
					icnLearnersActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-learners-active.png')),
					icnLearnersInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-learners-inactive.png')),
					icnMCQInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-multiple-choice-inactive.png')),
					icnCorrectMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-correct-md.png')),
					icnIncorrectMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-incorrect-md.png')),
					icnSortHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-hover.png')),
					icnSortDesc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-desc.png')),
					icnSortAsc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sort-asc.png')),
					icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
					imgMcqTypeQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-multiple-choice.png')),
					imgMCQImageChoiceInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-image-choice-inactive.png')),
					imgImageChoiceQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-image-choice.png')),
					imgLongQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-long-text.png')),
					imgShortQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-short-text.png')),
					imgYesNoQuestionTileIcon: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/img-question-type-yes-no.png')),
					imgShortAnswerInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-short-answer-inactive.png')),
					imgLongAnswerInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-test-question-long-answer-inactive.png')),
					icnEditMd: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-edit-md.png')),
					icnSidebarQuestionCategoriesActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-question-categories-active.png')),
					icnSidebarQuestionCategoriesInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-2/icn-sidebar-question-categories-inactive.png')),
					icnSidebarGradingActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-sidebar-grading-active.png')),
					icnSidebarGradingInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-sidebar-grading-inactive.png')),
					icnSidebarSocialActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-sidebar-social-active.png')),
					icnSidebarSocialInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-3/icn-sidebar-social-inactive.png')),
				}
			}
    }

    return NewTestView;
});

define('Saralux.Core.TestsSV.Tests.Short.Question.View', [
	'saralux_core_testssv_test_short_question.tpl',

    'Saralux.Core.TestsSV.Tests.ValidateQuestion',

	'Saralux.Core.TestsSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_testssv_test_short_question_tpl,

    TestsSVValidateQuestion,

	TestsSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function ShortQuestionView(options){
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_testssv_test_short_question_tpl;
		
		this.model = new TestsSVSS2Model();

        this.newQuestion;
        console.log('new question : ', this.newQuestion);

		this.isLoading = true;
        this.parent = options.parent;
        this.activeQuestion = options.activeQuestion;
        console.log('parent : ', this.parent); 
        console.log('nextSequenceNumber : ', this.nextSequenceNumber); 
        this.nextSequenceNumber = this.parent.questions.length+1;
    }

    ShortQuestionView.prototype = Object.create(SCView.prototype);
    ShortQuestionView.prototype.constructor = ShortQuestionView;
    

    ShortQuestionView.prototype.addEditShortQuestion = function(e) {
        var self = this;
        var activeQuestionIndex = this.activeQuestion ? this.activeQuestion.questionIndex : null;
        this.checkValidations();

        if(this.$('.form-box').find('.err').length == 0) {
            var self = this;
            var questionData =  {
                testId: parseInt(this.parent.activeTest.id),
                type: 4,
                title: this.$('#short-text-question-title').val(),
                prompt: this.$('#short-text-question-ans-prompt').val(),
                points: this.$('#short-text-question-points').val(),
                sequenceNumber: this.$('#short-text-sequence-number').val(),
                addReferenceImage: this.$('#short-question-reference-image').prop("checked"),
                embedVideo: this.$('#short-question-embed-video-checkbox').prop("checked"),
                videoEmbedCode: null,
                referenceImage: null,
            };
            var image = null;
            if(this.$('#short-question-reference-image').prop("checked")){
                var referenceImage = this.$('#short-question-change-image')[0].files[0];
                if(referenceImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        image = (reader.result).split('base64,')[1];   
                        questionData.referenceImage = image;
                    }
                    reader.readAsDataURL(referenceImage);
                }
            }
            if(this.$('#short-question-embed-video-checkbox').prop('checked')) {
                questionData.videoEmbedCode = this.$('#short-question-video-embed-code').val();
            }
            if(this.activeQuestion != null){
                questionData.action = "edit_short_question";
                questionData.id = this.activeQuestion.id;
            }
            else{
                questionData.action = "add_short_question";
            }
            this.model.clear({ silent: true }); 
            this.model.save(questionData).then(function (res) {
                console.log(res);
                if(!res.hasError) {
                    if(self.activeQuestion == null){
                        self.parent.saveQuestion(res.question);
                    }
                    else{
                        self.parent.questions[parseInt(self.activeQuestion.questionIndex)] = res.question;
                        self.activeQuestion = res.question;
                    }
                }
                self.isLoading = false;
                self.parent.autoScoreDisable = true;
                self.parent.render();
                jQuery('#tabsBlock2').trigger('click');   
                if(activeQuestionIndex)  {
                    jQuery('.dynamic-tabs .side-questions-tab-'+activeQuestionIndex).trigger('click');
                }
                else {
                    jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                }
            });   
        }
    }
    
    ShortQuestionView.prototype.checkValidations = function () {
        this.validatePoints();
        this.validateQuestion();
        this.validateAnswerPrompt();
        this.validateSequenceNumber();
        this.validateReferenceImage();
        this.validateReferenceVideo();
    }

    ShortQuestionView.prototype.validateQuestion = function () {
        this.$('#question-err').removeClass('err');
        if(this.$('#short-text-question-title').val() == "") {
            this.$('#question-err').addClass('err');
        }
    }
    ShortQuestionView.prototype.validateAnswerPrompt = function () {
        this.$('#answer-prompt-err').removeClass('err');
        if(this.$('#short-text-question-ans-prompt').val() == "") {
            this.$('#answer-prompt-err').addClass('err');
        }
    }
    
    ShortQuestionView.prototype.validatePoints = function () {
        this.$('#points-number-err').removeClass('err');
        this.$('#points-required-err').removeClass('err');
        var regex = /^\d*[.]?\d*$/;
        var points = this.$('#short-text-question-points').val();
        if (!regex.test(points)) {
            this.$('#points-number-err').addClass('err');
        }
        if (points == "") {
            this.$('#points-required-err').addClass('err');
        }
    }
    
    ShortQuestionView.prototype.validateSequenceNumber = function () {
        this.$('#sequence-number-range-err').removeClass('err');
        this.$('#sequence-number-required-err').removeClass('err');
        this.$('#sequence-number-negative-err').removeClass('err');
        if(this.$('#short-text-sequence-number').val() == "") {
            this.$('#sequence-number-required-err').addClass('err');
        }
        if(this.$('#short-text-sequence-number').val() > this.nextSequenceNumber) {
            this.$('#sequence-number-range-err').addClass('err');   
        }
        if(this.$('#short-text-sequence-number').val() < 0) {
            this.$('#sequence-number-negative-err').addClass('err');   
        }
    }
    
    ShortQuestionView.prototype.validateReferenceImage = function () {
        this.$('#reference-image-err').removeClass('err')
        if (
            this.$('#short-question-reference-image').prop('checked')
            &&
            this.$('#short-question-change-image')[0].files.length == 0)  {
            this.$('#reference-image-err').addClass('err')
        }
    }

    ShortQuestionView.prototype.validateReferenceVideo = function () {
        this.$('#embed-video-err').removeClass('err')
        if (
            this.$('#short-question-embed-video-checkbox').prop('checked')
            &&
            this.$('#short-question-video-embed-code').val() == "")  {
            console.log('embed vid err');
                this.$('#embed-video-err').addClass('err')
        }
    }

    ShortQuestionView.prototype.addReferenceImageCheckboxAction = function () {
        if (this.$('#short-question-reference-image').prop('checked')) {
            this.$('.reference-image-box').show();
        } 
        else {
            this.$('.reference-image-box').hide();
        }
    }
    
    ShortQuestionView.prototype.addReferenceVideoCheckboxAction = function () {
        if (this.$('#short-question-embed-video-checkbox').prop('checked')) {
            this.$('#short-question-embed-video-section').show();
        } 
        else {
            this.$('#short-question-embed-video-section').hide();
        }
    }
    
    ShortQuestionView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-testssv-add-short-question']" : "addEditShortQuestion",
            "change [data-change='m360-slxc-test-add-ref-img-check']" : "addReferenceImageCheckboxAction",
            "change [data-change='m360-slxc-test-add-ref-vid-check']" : "addReferenceVideoCheckboxAction"
        }
    }

    ShortQuestionView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            activeQuestion: this.activeQuestion,
            nextSequenceNumber: this.nextSequenceNumber
        }
    }

    return ShortQuestionView;

});

define('Saralux.Core.TestsSV.Tests.Submission.View',	[
	'saralux_core_testssv_test_submission.tpl',
	
    'Saralux.Core.TestsSV.SS2Model',

    'Utils',
	'SCView'
], function (
	saralux_core_testssv_tests_submission_tpl,
	
    TestsSVSS2Model,

    Utils,
	SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function TestsSubmissionView(options) {
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.model = new TestsSVSS2Model();

		this.template = saralux_core_testssv_tests_submission_tpl;

        this.test = options.activeTest;
        this.activeSubmission = this.test[options.activeTestSubmissionId];

        this.isLoading = true;

        console.log("View loaded...");
        console.log("in submissio view options activeTestSubmissionId : " , options.activeTestSubmissionId);

    }

    TestsSubmissionView.prototype = Object.create(SCView.prototype);
    TestsSubmissionView.prototype.constructor = TestsSubmissionView;

    TestsSubmissionView.prototype.getEvents = function () {
        return {
            // "click [data-action='to-submitted-test']": "getSubmission"
        }
    }
    //data-toggle="modal" data-target="#view-contribution"
    TestsSubmissionView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            test: this.test,
            activeSubmission: this.activeSubmission

        }
    }

    return TestsSubmissionView;
});

define('Saralux.Core.TestsSV.Tests.ValidateQuestion', [
    'Saralux.Core.ExternalLibraries.CryptoJS',

    'Backbone'
], function(
    CryptoJS,

    Backbone
) {
    
    "use strict";

    function validateCommonQuestionFields(questionContext) {
        try {

            this.validatePoints(questionContext);
            this.validateQuestion(questionContext);
            this.validateAnswerPrompt(questionContext);
            this.validateSequenceNumber(questionContext);
            
            console.log('inside validateCommonQuestionFields : ',questionContext );
        } catch (e) {
            console.error('Error: CommonLibraries.General.js validateCommonQuestionFields', e.toString());
            return false;
        }
    }


    function validateQuestion (questionContext) {
        questionContext.$('#question-err').removeClass('err');
        if(questionContext.$('#question-title').val() == "") {
            questionContext.$('#question-err').addClass('err');
        }
    }

    function validateAnswerPrompt (questionContext) {
        questionContext.$('#answer-prompt-err').removeClass('err');
        if(questionContext.$('#question-ans-prompt').val() == "") {
            questionContext.$('#answer-prompt-err').addClass('err');
// ).siblings('p').addClass('err')
        }
    }
    
    function validatePoints (questionContext) {
        questionContext.$('#points-number-err').removeClass('err');
        questionContext.$('#points-required-err').removeClass('err');
        var regex = /^\d*[.]?\d*$/;
        var points = questionContext.$('#question-points').val();
        if (!regex.test(points)) {
            questionContext.$('#points-number-err').addClass('err');
        }
        if (points == "") {
            questionContext.$('#points-required-err').addClass('err');
        }
    }
    
    function validateSequenceNumber (questionContext) {
        questionContext.$('#sequence-number-range-err').removeClass('err');
        questionContext.$('#sequence-number-required-err').removeClass('err');
        questionContext.$('#sequence-number-negative-err').removeClass('err');
        if(questionContext.$('#sequence-number').val() == "") {
            questionContext.$('#sequence-number-required-err').addClass('err');
        }
        if(questionContext.$('#sequence-number').val() >= questionContext.parent.questions.length) {
            questionContext.$('#sequence-number-range-err').addClass('err');   
        }
        if(questionContext.$('#sequence-number').val() < 0) {
            questionContext.$('#sequence-number-negative-err').addClass('err');   
        }
    }
    
    function addReferenceImageCheckboxAction (questionContext) {
        if (questionContext.$('#reference-image-checkbox').prop('checked')) {
            questionContext.$('.reference-image-box').show();
        } 
        else {
            questionContext.$('.reference-image-box').hide();
        }
    }
    
    function addReferenceVideoCheckboxAction (questionContext) {
        if (questionContext.$('#embed-video-checkbox').prop('checked')) {
            questionContext.$('#embed-video-section').show();
        } 
        else {
            questionContext.$('#embed-video-section').hide();
        }
    }

    return {
        validateCommonQuestionFields: validateCommonQuestionFields,
        validateQuestion,
        validateAnswerPrompt,
        validatePoints,
        validateSequenceNumber,
        addReferenceImageCheckboxAction,
        addReferenceVideoCheckboxAction
    }
});


define('Saralux.Core.TestsSV.Tests.View',	[
	'saralux_core_testssv_tests.tpl',
	'saralux_core_testssv_new_test.tpl',
	'saralux_core_testssv_tests_list.tpl',
	'saralux_core_testssv_test_details.tpl',
	'saralux_core_testssv_test_submission.tpl',
	'saralux_core_testssv_test_details_single_pager.tpl',
	'saralux_core_testssv_test_details_paginated.tpl',
	
	'Saralux.Core.TestsSV.Tests.List.View',
	'Saralux.Core.TestsSV.Tests.Details.View',
	'Saralux.Core.TestsSV.Tests.Submission.View',
	'Saralux.Core.TestsSV.Tests.NewTest.View',
	'Saralux.Core.TestsSV.Tests.EditTest.View',

	'Backbone'
], function (
	saralux_core_testssv_tests_tpl,
	saralux_core_testssv_new_test_tpl,
	saralux_core_testssv_tests_list_tpl,
	saralux_core_testssv_test_details_tpl,
	saralux_core_testssv_test_submission_tpl,
	saralux_core_testssv_test_details_single_pager_tpl,
	saralux_core_testssv_test_details_paginated_tpl,
	
	TestsSVTestsListView,
	TestsSVTestsDetailsView,
	TestsSvTestSubmissionView,
	TestsSVNewTestView,
	TestsSVEditTestView,

	Backbone
) {
    'use strict';
	
	return Backbone.View.extend({

		template: saralux_core_testssv_tests_tpl,

		initialize: function (options) {
			this.pageModes = {
				listMode: true,
				detailsMode: false
			}

			this.activeView = "TestsSV.List";
			this.container = options.container;
			this.m360Context = SC.m360Context;
			this.activeTestId = null;
			this.activeTestSubmissionId = null;
			this.tests = [];
			this.activeTest = null;
		},
		
		getContext: function getContext() {
			return {
				message: "Manage Tests",
				activeView: this.activeView,
			};
		},

		events: {
			"click [data-action='to-tests-list']": "showTestslist",
			"click [data-action='to-test-details']": "showTestDetails",
			"click [data-action='to-new-test']": "showNewTest",
			"click [data-action='to-edit-test']": "showEditTest",
		},

		childViews: {
			'TestsSV.List': function() {
				return new TestsSVTestsListView({
					container: this.container,
					m360Context: this.m360Context,
					parent: this
				});
			},
			'TestsSV.Details': function() {
				return new TestsSVTestsDetailsView({
					container: this.container,
					m360Context: this.m360Context,
					activeTestId: this.activeTestId,
					activeView: this.activeView,
					parent: this
				});
			},
			'TestsSV.Submission': function() {
				return new TestsSvTestSubmissionView({
					container: this.container,
					m360Context: this.m360Context,
					activeTest: this.activeTest,
					activeTestSubmissionId: this.activeTestSubmissionId,
					parent: this
				})
			},
			'TestsSV.NewTest': function() {
				return new TestsSVNewTestView({
					container: this.container,
					m360Context: this.m360Context,
					parent: this
				})
			},
			'TestsSV.EditTest': function() {
				return new TestsSVEditTestView({
					container: this.container,
					m360Context: this.m360Context,
					activeTest: this.activeTest,
					parent: this
				})
			},

		},

		showTestslist: function (e) {
			this.pageModes.listMode = true;
			this.pageModes.detailsMode = false;

			jQuery(window).scrollTop(0);
			
			this.render();
		},

		showNewTest: function (e) {
			this.activeView = "TestsSV.NewTest";
			this.render();
		},

		showEditTest: function (e) {
			// console.log('inside showEditTest');
			this.activeView = "TestsSV.EditTest";
			this.render();
		}, 

		showTestDetails: function (e) {
			this.activeView = "TestsSV.Details";
			var index = jQuery("#"+e.currentTarget.id).attr("data-index");
			this.activeTestId = this.tests[index].id; 
			console.log('activeTestId : ' , this.activeTestId);
			this.render();
		},

		showSubmittedTest: function (e) {
			this.template = saralux_core_testssv_test_submission_tpl;
			jQuery(window).scrollTop(0);

			this.render();
		},
	});
});


define('Saralux.Core.TestsSV.Tests.YesNo.Question.View', [
	'saralux_core_testssv_test_yesno_question.tpl',


	'Saralux.Core.TestsSV.SS2Model',

    'Utils',
    'SCView'
], function (
	saralux_core_testssv_test_yesno_question_tpl,

	TestsSVSS2Model,

    Utils,
    SCViewModule
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function YesNoChoiceQuestionView(options){
        SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;
        this.template = saralux_core_testssv_test_yesno_question_tpl;
		
		this.model = new TestsSVSS2Model();

		this.isLoading = true;
        this.parent = options.parent;
        this.activeQuestion = options.activeQuestion;
        this.nextSequenceNumber = this.parent.questions.length+1;
    }

    YesNoChoiceQuestionView.prototype = Object.create(SCView.prototype);
    YesNoChoiceQuestionView.prototype.constructor = YesNoChoiceQuestionView;

    YesNoChoiceQuestionView.prototype.addEditYnQuestion = function(e) {
        var self = this;
        var activeQuestionIndex = this.activeQuestion ? this.activeQuestion.questionIndex : null;

        this.checkValidations();

        if(this.$('.form-box').find('.err').length == 0) {
            var questionData = {
                action: "",
                testId: parseInt(this.parent.activeTest.id),
                type: 5,
                title: this.$('#yn-question-title').val(),
                prompt: this.$('#yn-question-ans-prompt').val(),
                points: this.$('#yn-question-points').val(),
                sequenceNumber: this.$('#yn-question-sequence-number').val(),
                addReferenceImage: this.$('#yn-question-reference-image').prop("checked"),
                embedVideo: this.$('#yn-question-embed-video').prop("checked"),
                correctOption: this.$('#form-field-correct-option').val(),
                videoEmbedCode: null,
                referenceImage: null
            };

            var image = null;
            if(this.$('#yn-question-reference-image').prop("checked")) {
                var referenceImage = this.$('#yn-question-change-image')[0].files[0];
                if(referenceImage){
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        image = (reader.result).split('base64,')[1];  
                        questionData.referenceImage = image; 
                    }
                    reader.readAsDataURL(referenceImage);
                }
            }
            if(this.$('#yn-question-embed-video').prop('checked')) {
                questionData.videoEmbedCode = this.$('#yn-question-video-embed-code').val();
            }
            if(this.activeQuestion != null){
                questionData.action = "edit_yn_question";
                questionData.id = this.activeQuestion.id;
            }
            else{
                questionData.action = "add_yn_question";
            }
            this.model.clear({ silent: true }); 
            this.model.save(questionData).then(function (res) {
                console.log(res);
                if(!res.hasError) {
                    if(self.activeQuestion == null){
                        self.parent.saveQuestion(res.question);
                    }
                    else{
                        self.parent.questions[parseInt(self.activeQuestion.questionIndex)] = res.question;
                        self.activeQuestion = res.question;
                    }
                }
                self.isLoading = false;
                self.parent.autoScoreDisable = true;
                self.parent.render();
                jQuery('#tabsBlock2').trigger('click');   
                console.log('active question index : ', activeQuestionIndex);
                if(activeQuestionIndex) {
                    jQuery('.dynamic-tabs .side-questions-tab-'+activeQuestionIndex).trigger('click');
                }
                else {
                    jQuery('.dynamic-tabs .tabsBlock').last().trigger('click');
                }
            }); 
        }
    }

    YesNoChoiceQuestionView.prototype.checkValidations = function () {
        this.validatePoints();
        this.validateQuestion();
        this.validateAnswerPrompt();
        this.validateSequenceNumber();
        this.validateReferenceImage();
        this.validateReferenceVideo();
        this.validateCorrectOption();
    }

    YesNoChoiceQuestionView.prototype.validateQuestion = function () {
        this.$('#question-err').removeClass('err');
        if(this.$('#yn-question-title').val() == "") {
            this.$('#question-err').addClass('err');
        }
    }
    YesNoChoiceQuestionView.prototype.validateAnswerPrompt = function () {
        this.$('#answer-prompt-err').removeClass('err');
        if(this.$('#yn-question-ans-prompt').val() == "") {
            this.$('#answer-prompt-err').addClass('err');
        }
    }
    
    YesNoChoiceQuestionView.prototype.validatePoints = function () {
        this.$('#points-number-err').removeClass('err');
        this.$('#points-required-err').removeClass('err');
        var regex = /^\d*[.]?\d*$/;
        var points = this.$('#yn-question-points').val();
        if (!regex.test(points)) {
            this.$('#points-number-err').addClass('err');
        }
        if (points == "") {
            this.$('#points-required-err').addClass('err');
        }
    }
    
    YesNoChoiceQuestionView.prototype.validateSequenceNumber = function () {
        this.$('#sequence-number-range-err').removeClass('err');
        this.$('#sequence-number-required-err').removeClass('err');
        this.$('#sequence-number-negative-err').removeClass('err');
        if(this.$('#yn-question-sequence-number').val() == "") {
            this.$('#sequence-number-required-err').addClass('err');
        }
        if(this.$('#yn-question-sequence-number').val() > this.nextSequenceNumber) {
            this.$('#sequence-number-range-err').addClass('err');   
        }
        if(this.$('#yn-question-sequence-number').val() < 0) {
            this.$('#sequence-number-negative-err').addClass('err');   
        }
    }
    
    YesNoChoiceQuestionView.prototype.validateReferenceImage = function () {
        this.$('#reference-image-err').removeClass('err')
        if (
            this.$('#yn-question-reference-image').prop('checked')
            &&
            this.$('#yn-question-change-image')[0].files.length == 0)  {
            this.$('#reference-image-err').addClass('err')
        }
    }

    YesNoChoiceQuestionView.prototype.validateReferenceVideo = function () {
        this.$('#embed-video-err').removeClass('err')
        if (
            this.$('#yn-question-embed-video').prop('checked')
            &&
            this.$('#yn-question-video-embed-code').val() == "")  {
                this.$('#embed-video-err').addClass('err')
        }
    }

    YesNoChoiceQuestionView.prototype.addReferenceImageCheckboxAction = function () {
        if (this.$('#yn-question-reference-image').prop('checked')) {
            this.$('.reference-image-box').show();
        } 
        else {
            this.$('.reference-image-box').hide();
        }
    }
    
    YesNoChoiceQuestionView.prototype.addReferenceVideoCheckboxAction = function () {
        if (this.$('#yn-question-embed-video').prop('checked')) {
            this.$('#yn-question-embed-video-section').show();
        } 
        else {
            this.$('#yn-question-embed-video-section').hide();
        }
    }

    YesNoChoiceQuestionView.prototype.validateCorrectOption = function () {
        this.$('#correct-option-err').removeClass('err');
        if (this.$('#form-field-correct-option').val() == -1) {
            this.$('#correct-option-err').addClass('err');
        }
    }

    
    YesNoChoiceQuestionView.prototype.getEvents = function () {
        return {
            "click [data-action='m360-testssv-add-yn-question']"    : "addEditYnQuestion",
            "change [data-change='m360-slxc-test-add-ref-img-check']" : "addReferenceImageCheckboxAction",
            "change [data-change='m360-slxc-test-add-ref-vid-check']" : "addReferenceVideoCheckboxAction"
        }
    }

    YesNoChoiceQuestionView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            activeQuestion: this.activeQuestion,
            nextSequenceNumber: this.nextSequenceNumber
        }
    }

    return YesNoChoiceQuestionView;
});

// Model.js
// -----------------------
// @module Case
define("Saralux.Core.WebDirectory.SS2Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/WebDirectory/SuiteScript2/WebDirectory.Service.ss"
            ),
            true
        )
    });
});


define('Saralux.Core.WebDirectory',   [
		'Saralux.Core.WebDirectory.View'
		
	],   function (
		WebDirectoryView
	)
{
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				this.registerPublicPages(container);
			} catch (e) {
				console.error(
					'ERROR: Saralux.Core.WebDirectory', e.toString()
				);
			}
		},
		registerPublicPages: function registerPublicPages(container) {
			var pageType = container.getComponent('PageType');
			pageType.registerPageType({
				name: 'WebDirectoryView',
				view: WebDirectoryView,
				routes: ['web-directory/:id'],
				options: {
					container: container
				}
			});
		}
	};
});


define('Saralux.Core.WebDirectory.List.View',	[
	'saralux_core_webdirectory_list.tpl',

    'Saralux.Core.WebDirectory.SS2Model',

    'Saralux.Core.WebForms.View',
    'Saralux.Core.DynamicFilter.View',
	
	'SCView',
    'Utils'
], function (
	saralux_core_webdirectory_list_tpl,

    WebDirectorySS2Model,
    
    WebFormsView,
    CoreDynamicFilterView,
	
	SCViewModule,
    Utils
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function WebDirectoryListView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        this.template = saralux_core_webdirectory_list_tpl;
        
		// You can access the container object like this:
        // It has to be passed on to this view when it is created
        // or by the parent view (if any)
        this.container = options.container;
        this.webDirectoryId = options.webDirectoryId;
        
        // You can access components of the extensibility API using the container obj
        this.environment_component = this.container.getComponent('Environment');
        this.webFormObject = null;
        this.webFormId = null;
        this.filterId = null;
        this.model = new WebDirectorySS2Model();

        this.defaultBg = Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png'));

        this.icons = {
            icnView: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-view.png')),
            icnCompactActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-compact-list-active.png')),
            icnCompactInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-compact-list-inactive.png')),
            icnListActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-list-view-active.png')),
            icnListInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-list-view-inactive.png')),
            icnGridActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-grid-view-active.png')),
            icnGridInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-grid-view-inactive.png')),
            icnNofilterActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-no-filter-view-active.png')),
            icnNofilterInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-no-filter-view-inactive.png')),
            icnFacebook: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-facebook.png')),
            icnLinkedin: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-linkedin.png')),
            icnTwitter: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-twitter.png')),
            icnInstagram: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-1/icn-instagram.png')),
            icnLink: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-link.png')),
            icnFacebookHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-facebook-hover.png')),
            icnLinkedinHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-linkedin-hover.png')),
            icnTwitterHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-twitter-hover.png')),
            icnInstagramHover: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-instagram-hover.png')),
            icnCandidateActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-details-active.png')),
            icnCandidateInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-details-inactive.png')),
            icnResumeActive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-no-filter-view-active.png')),
            icnResumeInactive: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-5/icn-no-filter-view-inactive.png')),
        };

        this.data = [];

        this.matrixData = [];

        this.tabs = [];

        this.columnTitles = [];

        this.count = 0;
		this.totalPages = 0;
		this.activePage = 1;
        this.activeTab = "tab-1"
		this.pages = [];
        this.filters = [];
        this.filterState = null;
        this.filterCount = 0;

		this.pagination = {
			index: 0,
			pageSize: 10,
			count: 0,
			from: 0,
			to: 0,
			totalPages: 0,
			displayWindow: 1,
			pages: []
		};

        this.pa = 1;
        this.pb = 3;
        this.pc = 0;
        this.pd = 0;

        this.currentUserDP = null;
        this.currentUserName = null;

        this.showProfilePage = false;
        this.showProfilePhoto = false;

        this.webTitle = "Web Directory";
        this.showSocialMediaSection = false;
        this.allowDocumentDownload=false;

        this.customerObject = {
			isExisting: true,
			isPerson: true,
			customerId: 1667,
			hasContact: false,
			firstName: '',
			lastName: '',
			emailId: '',
			addAddress: true,
			editAddress: false,
			sameAsShippingAddress: false,
			billingAddress: {
				label: "Permanent Address",
				country: null,
				addressee: null,
				addr1: null,
				addr2: null,
				city: null,
				state: null,
				zip: null
			},
			shippingAddress: {
				label: "Present Address",
				country: null,
				addressee: null,
				addr1: null,
				addr2: null,
				city: null,
				state: null,
				zip: null
			}
		}

        this.tabsBody = {
            compactList: {
                exists: false,
                visible: false
            },
            list: {
                exists: false,
                visible: false
            },
            tiles: {
                exists: false,
                visible: false
            },
            noFilter: {
                exists: false,
                visible: false
            }
        }

        this.applicationData = null;
        this.currentSocialMediaItems = [];

        this.isLoading = true;
        this.getData();

        console.log("List view loaded...");
    }

    WebDirectoryListView.prototype = Object.create(SCView.prototype);
    WebDirectoryListView.prototype.constructor = WebDirectoryListView;

    WebDirectoryListView.prototype.getEvents = function () {
        // Declare events (if any):
        return {
            'click [data-action="list-tabs-click"]': 'listTabsClick',
            'click [data-action="profile-tab"]': "profileTab",

            'click [data-action="show-details-modal"]': "showDetailsModal",

            'click [data-action="m360-slxc-cust-list-goto-prev-page"]': "gotoPrevPage",
			'click [data-action="m360-slxc-cust-list-goto-page"]': "gotoPage",
			'click [data-action="m360-slxc-cust-list-goto-next-page"]': "gotoNextPage",
            'click [data-action="directory-tabs-click"]': 'directoryTabsClick',
        };
    }

    WebDirectoryListView.prototype.directoryTabsClick = function (e) {
        this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
        this.$(e.currentTarget).parent(".tab-header").find(".tabs div").remove();
        this.$(e.currentTarget).append("<div></div>");
        this.$(e.currentTarget).addClass("active");
        this.$(e.currentTarget).parent(".tab-header").siblings(".tab-body").addClass('display-none');
        var clickedtab = this.$(e.currentTarget).attr('tab-name');
        this.$("." + clickedtab).removeClass('display-none');
    }  

    WebDirectoryListView.prototype.showDetailsModal = function(e) {
        console.log("Show details modal called...");
        var index = this.$(e.currentTarget).attr("data-index");

        var customerId = this.data[index].id;
        this.currentSocialMediaItems = [];

        if(this.showProfilePage) {
            window.open("/profile/"+customerId, '_blank');
        } else {
            this.applicationData = this.data[index].value;

            this.currentSocialMediaItems = this.data[index].socialMediaItems;
            this.currentUserDP = this.data[index].field4;
            this.currentUserName = this.data[index].field1;

            console.log(this.currentSocialMediaItems);
            
            this.childViews['WebDirectory.Details'] = function () {
                this.webFormObject = new WebFormsView({
                    container: this.container,
                    webFormId: this.webFormId,
                    customerObject: this.customerObject,
                    hasApplicationData: true,
                    applicationData: this.applicationData,
                    addressRequired: false,
                    isLoggedIn: true,
                    isReadOnly: true,
                    parent: this
                });

                return this.webFormObject;
            }
           
            console.log("Child view added");
            console.log("the web form object", this.webFormObject);

            this.render();
            if(this.showDocumentTab){   
             this.$(".view-doc-box").empty();
            var fieldOfDocument=this.data[index][this.documentFieldId]?this.data[index][this.documentFieldId]:null
            if(fieldOfDocument){
            if(!this.allowDocumentDownload){
            this.$(".view-doc-box").append('<embed id="embedded-document" src='+this.data[index][fieldOfDocument]+'#toolbar=0&navpanes=0&scrollbar=0" type="application/pdf" width="100%" height="750" alt="pdf"></embed>')
            }
            else{
             this.$(".view-doc-box").append('<embed id="embedded-document" src='+this.data[index][fieldOfDocument]+'" type="application/pdf" width="100%" height="750" alt="pdf"></embed>')
             }
             }
            else{
            this.$(".view-doc-box").append('<p>'+this.documentTabLabel+' does not exist</p>')
            }
            }
            this.$("#contact-details").modal("show");
        }
       
       // this.refreshTabs();
    }

    WebDirectoryListView.prototype.getData = function(e) {
        var self = this;

        var data = {
            action: 'get_web_directory',
            webDirectoryId: this.webDirectoryId,
            pagination: this.pagination,
            filters: this.filters
        };

        console.log({data});

        this.model.clear({ silent: true });
        this.model.save(data).then(function (res) {
            console.log({res});

            if(!res.hasError) {
                self.data = res.data;
                self.tabs = res.tabs;
                self.matrixData = res.matrixData;
                self.columnTitles = res.columnTitles;
                self.webTitle = res.webTitle;
                self.showSocialMediaSection = res.showSocialMediaSection;
                self.showProfilePhoto = res.showProfilePhoto;
                self.webFormId = res.webFormId;
                self.filterId = res.listPageFilterId;
                self.showProfilePage = res.showProfilePage;
                self.totalPages = res.totalPages;
                self.documentFieldId=res.documentFieldId;
                self.showDocumentTab=res.showDocumentTab;
                self.documentTabLabel=res.documentTabLabel;
                self.allowDocumentDownload=res.allowDocumentDownload;
                self.count = res.count;

                console.log('web directory data',self.data);
                for(var i=0;i<self.tabs.length;i++) {
                    if(self.tabs[i].name == "Compact List") {
                        self.tabsBody.compactList.exists = true;
                        self.tabs[i].tabName = "tab1";
                    } else if(self.tabs[i].name == "List") {
                        self.tabsBody.list.exists = true;
                        self.tabs[i].tabName = "tab2";
                    } else if(self.tabs[i].name == "Tiles") {
                        self.tabsBody.tiles.exists = true;
                        self.tabs[i].tabName = "tab3";
                    } else if(self.tabs[i].name == "No Filter") {
                        self.tabsBody.noFilter.exists = true;
                        self.tabs[i].tabName = "tab4";
                    }
                }

                if(self.tabsBody.compactList.exists) {
                    self.tabsBody.compactList.visible = true;
                    self.tabsBody.list.visible = false;
                    self.tabsBody.tiles.visible = false;
                    self.tabsBody.noFilter.visible = false;
                } else if(self.tabsBody.list.exists) {
                    self.tabsBody.compactList.visible = false;
                    self.tabsBody.list.visible = true;
                    self.tabsBody.tiles.visible = false;
                    self.tabsBody.noFilter.visible = false;
                } else if(self.tabsBody.tiles.exists) {
                    self.tabsBody.compactList.visible = false;
                    self.tabsBody.list.visible = false;
                    self.tabsBody.tiles.visible = true;
                    self.tabsBody.noFilter.visible = false;
                } else if(self.tabsBody.noFilter.exists) {
                    self.tabsBody.compactList.visible = false;
                    self.tabsBody.list.visible = false;
                    self.tabsBody.tiles.visible = false;
                    self.tabsBody.noFilter.visible = true;
                }

                console.log(self.tabsBody);
            }

            if(self.activePage == 1) {
				if(self.count > self.pagination.pageSize) {
					self.pagination.from = 1;
					self.pagination.to = self.pagination.pageSize;
				} else {
					self.pagination.from = 1;
					self.pagination.to = self.count;
				}
			} else {
				self.pagination.from = self.pagination.pageSize * (self.activePage - 1) + 1;
				self.pagination.to = ((self.activePage - 1) * self.pagination.pageSize) + self.data.length;
			}

            self.pc = self.totalPages-3;
            self.pd = self.totalPages;

			self.generatePages();

            var coreDynamicFilterObj = {
                container: self.container,
                parent: self,
                filterId: parseInt(self.filterId)
            };
    
            console.log( "coreDynamicFilterObj : ",coreDynamicFilterObj );
            self.childViews = {
                'DynamicFilter.view': function() {
                    return new CoreDynamicFilterView(coreDynamicFilterObj);
                },
            };

            self.isLoading = false;
            self.render();

            self.refreshTabs();
            self.$("#"+self.activeTab).trigger("click");
        });
    },

    WebDirectoryListView.prototype.generatePages = function() {
		this.pages = [];

        if(this.totalPages > 10) {
            for(var i=1;i<=3;i++) {
                if(i == this.activePage) {
                    this.pages.push({
                        isActive: true,
                        isFiller: false,
                        pageNumber: i
                    });
                } else {
                    this.pages.push({
                        isActive: false,
                        isFiller: false,
                        pageNumber: i
                    });
                }
            }
            
            this.pages.push({
                isActive: false,
                isFiller: true,
                pageNumber: i
            });

            for(var i=this.totalPages-3;i<=this.totalPages;i++) {
                if(i == this.activePage) {
                    this.pages.push({
                        isActive: true,
                        isFiller: false,
                        pageNumber: i
                    });
                } else {
                    this.pages.push({
                        isActive: false,
                        isFiller: false,
                        pageNumber: i
                    });
                }
            }
        } else {
            for(var i=1;i<=this.totalPages;i++) {
                if(i == this.activePage) {
                    this.pages.push({
                        isActive: true,
                        pageNumber: i
                    });
                } else {
                    this.pages.push({
                        isActive: false,
                        pageNumber: i
                    });
                }
            }
        }
	}

	WebDirectoryListView.prototype.gotoPage = function(e) {
        this.activePage = parseInt(this.$("#" + e.currentTarget.id).attr("data-index"))
		
        console.log(this.pagination);
        this.pagination.index = this.activePage - 1;
        console.log(this.pagination);

        this.getData();
	}

	WebDirectoryListView.prototype.gotoNextPage = function(e) {
		if(this.activePage < this.totalPages) {
			this.pagination.index = this.activePage++;
            console.log(this.pagination);
			
            this.getData();
		} 
	}

	WebDirectoryListView.prototype.gotoPrevPage = function(e) {
		if(this.activePage > 1) {
			this.activePage--;
			this.pagination.index = this.activePage - 1;
			
            this.getData();
		} 
	}

    WebDirectoryListView.prototype.refreshTabs = function() {
        var self = this;
        if(self.tabsBody.compactList.visible) {
            self.$("#tab1-body").show();
        } else {
            self.$("#tab1-body").hide();        
        }

        if(self.tabsBody.list.visible) {
            self.$("#tab2-body").show();
        } else {
            self.$("#tab2-body").hide();        
        }

        if(self.tabsBody.tiles.visible) {
            self.$("#tab3-body").show();
        } else {
            self.$("#tab3-body").hide();        
        }

        if(self.tabsBody.noFilter.visible) {
            self.$("#tab4-body").show();
            self.$(".hide-filters").hide();
            self.$(".web-results").find(".webdirectory-results").addClass("full-width");
        } else {
            self.$("#tab4-body").hide();   
            self.$(".hide-filters").show();
            self.$(".web-results").find(".webdirectory-results").removeClass("full-width");     
        }
    }

    WebDirectoryListView.prototype.profileTab = function(e) {
        this.$(".hide-filters").hide();
    },

    WebDirectoryListView.prototype.listTabsClick = function(e) {
        this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
        this.$(e.currentTarget).parent(".tab-header").find(".tabs div").remove();
        this.$(e.currentTarget).append("<div></div>");
        this.$(e.currentTarget).addClass("active");

        this.$("#tab1-body").hide();
        this.$("#tab2-body").hide();
        this.$("#tab3-body").hide();
        this.$("#tab4-body").hide();

        var clickedtab = this.$(e.currentTarget).attr('tab-name');
        
        this.activeTab = e.currentTarget.id;

        console.log(clickedtab);

        this.$("." + clickedtab).show();

        if(clickedtab == "tab4") {
            this.$(".hide-filters").hide();
            this.$(".web-results").find(".webdirectory-results").addClass("full-width");
        } else {
            this.$(".hide-filters").show();
            this.$(".web-results").find(".webdirectory-results").removeClass("full-width");
        }
    }

    WebDirectoryListView.prototype.getContext = function () {
        return {
            pagination: this.pagination,
            pages: this.pages,
            count: this.count,
            activePage: this.activePage,
            isLoading: this.isLoading,
            defaultBg: this.defaultBg,
            currentUserDP: this.currentUserDP,
            currentUserName: this.currentUserName,
            tabs: this.tabs,
            tabsBody: this.tabsBody,
            data: this.data,
            columnTitles: this.columnTitles,
            matrixData: this.matrixData,
            webTitle: this.webTitle,
            icons: this.icons,
            showSocialMediaSection: this.showSocialMediaSection,
            showProfilePhoto: this.showProfilePhoto,
            currentSocialMediaItems: this.currentSocialMediaItems,
            currentTabView: this.currentTabView,
            showDocumentTab:this.showDocumentTab,
            documentTabLabel:this.documentTabLabel
            }
    }

    return WebDirectoryListView;
});

define('Saralux.Core.WebDirectory.View',	[
	'saralux_core_webdirectory.tpl',

    'Saralux.Core.WebDirectory.SS2Model',

    'Saralux.Core.WebDirectory.List.View',
	
	'PageType.Base.View',
    'Utils',
], function (
	saralux_core_webdirectory_tpl,

    WebDirectorySS2Model,

    WebDirectoryListView,
	
	PageTypeBaseView,
    Utils,
) {
    'use strict';

    return PageTypeBaseView.PageTypeBaseView.extend({

        template: saralux_core_webdirectory_tpl,

        initialize: function(options) {
            var self = this;
        },

        beforeShowContent: function beforeShowContent() {
			var self = this;
			this.container = this.options.container;
            this.webDirectoryId = parseInt(this.options.routerArguments[0]);			

            this.childViews = {
                'WebDirectory.List.View': function() {
                    return new WebDirectoryListView({
                        container: this.container,
                        parent: this.parent,
                        webDirectoryId: this.webDirectoryId
                    });
                }
            }

			return jQuery.Deferred().resolve();
		},

        listTabsClick: function listTabsClick(e) {
            this.$(e.currentTarget).parent(".tab-header").find(".tabs").removeClass("active");
            this.$(e.currentTarget).parent(".tab-header").find(".tabs div").remove();
            this.$(e.currentTarget).append("<div></div>");
            this.$(e.currentTarget).addClass("active");
    
            this.$("#tab1-body").hide();
            this.$("#tab2-body").hide();
            this.$("#tab3-body").hide();
            this.$("#tab4-body").hide();
    
            var clickedtab = this.$(e.currentTarget).attr('tab-name');
            
            this.$("." + clickedtab).show();
        },

        getContext: function () {
            return {
                defaultBg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/img-placeholder-person.png')),
                tabs: this.tabs,
                icons: this.icons
            }
        }

    });
});

define("Saralux.Core.WebForms.General", ['Backbone'], function(Backbone) {
    
    "use strict";

    function validateFields(context) {
        //////////console.log("context: " + context);
        //////////console.log(context.allFields.length);

        var isDataValid = true;
        var validationFailedIds = [];

        for(var i=0;i<context.allFields.length;i++) {
            var currentField = context.allFields[i];
            if(currentField.isDropDown && !currentField.isMultiSelect) {
                context.$('#'+currentField.fieldId+"-select-searchable").siblings("p").removeClass("err");
                context.$('#'+currentField.fieldId+"-select-searchable").siblings("p").html("This Field is required");
            } else if(currentField.isDocument) {
                console.log(context.$('#'+currentField.fieldId+"-err-p"));
                context.$('#'+currentField.fieldId+"-err-p").html("This Field is required");
                context.$('#'+currentField.fieldId+"-err-p").removeClass("err");
            } else {
                if((""+currentField.fieldId).length > 0) {
                    context.$('#'+currentField.fieldId).siblings("p").removeClass("err");
                    context.$('#'+currentField.fieldId).siblings("p").html("This Field is required");
                } else {
                    context.$('#'+currentField.entityFieldId).siblings("p").removeClass("err");
                    context.$('#'+currentField.entityFieldId).siblings("p").html("This Field is required");
                }
            }
        }

        for(var i=0;i<context.allFields.length;i++) {
            var currentField = context.allFields[i];

            if((""+currentField.fieldId).length == 0) {
                currentField.fieldId = currentField.entityFieldId;
            }
            
            if(currentField.isMandatory && currentField.isDocument) {
                //console.log("Is Mandatory: " + currentField.fieldId);
                //console.log("Current field: ", currentField);
                var value = context.$('#'+currentField.fieldId+"-upload-document").val();

                if(value == null || (""+value).length == 0) {
                    value = currentField.value;
                }

                console.log("value: ", value);

                if(value == null || (""+value).length == 0) {
                    context.$('#'+currentField.fieldId+"-err-p").addClass("err");
                    isDataValid = false;
                    validationFailedIds.push(currentField.fieldId);
                    //console.log("Length validation failing...");
                }
            } else if(currentField.isMandatory && context.$('#'+currentField.fieldId).is(":visible")) {
                //console.log("Is Mandatory: " + currentField.fieldId);
                //console.log("Current field: ", currentField);
                if(currentField.isChoiceField) {
                    if(!(context.$('#'+currentField.fieldId).is(":checked"))) {
                        context.$('#'+currentField.fieldId).siblings("p").addClass("err");
                        isDataValid = false;
                        validationFailedIds.push(currentField.fieldId);
                    } else {
                        context.$('#'+currentField.fieldId).siblings("p").removeClass("err");
                    }
                } else if(currentField.isDropDown && !currentField.isMultiSelect) {
                    ////console.log("Is dropdown");
                    
                    var countryCode = context.$('#'+currentField.fieldId).attr('ref-country-code');
                    var value = null;
                    
                    var textValue = ""+context.$('#'+currentField.fieldId).val();
                    var textValueId = null;
                    
                    if(currentField.entityFieldId == "state") {
                        ////////console.log(context.allStatesWithId);    
                    }

                    ////console.log("textValue", textValue);

                    if(textValue.length > 0) {
                        var canContinue = false;

                        if(currentField.entityFieldId == "state") {
                            for(var x=0;x<context.allStatesWithId.length;x++) {
                                if(textValue == context.allStatesWithId[x].name) {
                                    canContinue = true;
                                    textValueId = context.allStatesWithId[x].id;
                                    countryCode = context.getStateCode(textValue);
                                    break;
                                }
                            }
                        } else {
                            ////console.log("currentField.values", currentField.values);

                            if(Array.isArray(currentField.values) && currentField.values.length > 0) {
                                if(currentField.values.length == 1 && currentField.values[0].text == currentField.emptyValue) {
                                    if((""+textValue).length > 0 && context.$('#'+currentField.fieldId).attr('selected-id') != null && context.$('#'+currentField.fieldId).attr('selected-id') != undefined && (""+context.$('#'+currentField.fieldId).attr('selected-id')).length > 0) {
                                        canContinue = true;                         
                                        textValueId = context.$('#'+currentField.fieldId).attr('selected-id');           
                                    }
                                } else {
                                    for(var x=0;x<currentField.values.length;x++) {
                                        if(textValue == currentField.values[x].text) {
                                            canContinue = true;
                                            textValueId = currentField.values[x].id;
                                            break;
                                        }
                                    }
                                }
                            } else if(Array.isArray(currentField.values) && currentField.values.length == 0 && currentField.dropdownDynamicMode) {
                                if((""+textValue).length > 0 && context.$('#'+currentField.fieldId).attr('selected-id') != null && context.$('#'+currentField.fieldId).attr('selected-id') != undefined && (""+context.$('#'+currentField.fieldId).attr('selected-id')).length > 0) {
                                    canContinue = true;                         
                                    textValueId = context.$('#'+currentField.fieldId).attr('selected-id');           
                                }
                            }
                        }

                        ////console.log(currentField.fieldId, canContinue);

                        if(canContinue) {
                            value = textValueId;
                            
                            context.$('#'+currentField.fieldId).attr("selected-id", value);   

                            if(countryCode.length == 0) {
                                value = context.$('#'+currentField.fieldId).attr("selected-id");
                                if(value != textValueId) {
                                    value = textValueId;             
                                }
                            } else {
                                context.$('#'+currentField.fieldId).attr("ref-country-code", countryCode);
                            }
                            
                            //////console.log("Value: " + value);
                            //////console.log("Value.length: " + value.length);
                        }
                    }

                    if(value == null || (""+value).length == 0) {
                        context.$('#'+currentField.fieldId+"-select-searchable").siblings("p").addClass("err");
                        isDataValid = false;
                        validationFailedIds.push(currentField.fieldId);
                        ////////console.log("validationFailedIds: " + validationFailedIds);
                    } else {
                        context.$('#'+currentField.fieldId+"-select-searchable").siblings("p").removeClass("err");
                    }
                } else {
                    //console.log("Else case: " + currentField.fieldId);
                    var value = context.$('#'+currentField.fieldId).val();
                    //console.log("currentField.fieldId", currentField.fieldId);
                    //console.log("value", value);

                    if(value == null || value.length == 0) {
                        context.$('#'+currentField.fieldId).siblings("p").addClass("err");
                        isDataValid = false;
                        validationFailedIds.push(currentField.fieldId);
                        //console.log("Length validation failing...");
                    } else if(currentField.maxLength.length > 0 || currentField.minLength.length > 0) {
                        if(currentField.maxLength.length > 0 && currentField.minLength.length > 0) {
                            if(value.length < currentField.minLength || value.length > currentField.maxLength) {
                                context.$('#'+currentField.fieldId).siblings("p").addClass("err");
                                context.$('#'+currentField.fieldId).siblings("p").html("Invalid length");
                                isDataValid = false;
                                validationFailedIds.push(currentField.fieldId);
                                //console.log("Max & Min length failing...");
                            } else {
                                context.$('#'+currentField.fieldId).siblings("p").removeClass("err");
                                context.$('#'+currentField.fieldId).siblings("p").html("This Field is required");
                                //console.log("Removing err class for: " + currentField.fieldId);        
                            }  
                        } else if(currentField.maxLength.length > 0) {
                            if(value.length < currentField.minLength) {
                                context.$('#'+currentField.fieldId).siblings("p").addClass("err");
                                context.$('#'+currentField.fieldId).siblings("p").html("Invalid length");
                                isDataValid = false;
                                validationFailedIds.push(currentField.fieldId);
                                //console.log("Max length failing...");
                            } else {
                                context.$('#'+currentField.fieldId).siblings("p").removeClass("err");
                                context.$('#'+currentField.fieldId).siblings("p").html("This Field is required");
                                //console.log("Removing err class for: " + currentField.fieldId);        
                            }
                        } else {
                            if(value.length < currentField.minLength) {
                                context.$('#'+currentField.fieldId).siblings("p").addClass("err");
                                context.$('#'+currentField.fieldId).siblings("p").html("Invalid length");
                                isDataValid = false;
                                validationFailedIds.push(currentField.fieldId);
                                //console.log("Min length failing...");
                            } else {
                                context.$('#'+currentField.fieldId).siblings("p").removeClass("err");
                                context.$('#'+currentField.fieldId).siblings("p").html("This Field is required");
                                //console.log("Removing err class for: " + currentField.fieldId);        
                            }
                        }
                    } else if (currentField.type == 'url') {
                        if (value.indexOf(' ') != -1) {
                            context.$('#'+currentField.fieldId).siblings("p").html("Please remove the empty space in the URL");
                            context.$('#'+currentField.fieldId).siblings("p").addClass("err");
                            isDataValid = false;
                            validationFailedIds.push(currentField.fieldId);
                        } else if ( (value.indexOf('http://') != 0 && value.indexOf('https://') != 0)
                            || (value.indexOf('http://') == 0 && value.length == 7)
                            || (value.indexOf('https://') == 0 && value.length == 8) ) {
                            context.$('#'+currentField.fieldId).siblings("p").html("Please enter a valid URL (Example: https://www.abc.com)");
                            context.$('#'+currentField.fieldId).siblings("p").addClass("err");
                            isDataValid = false;
                            validationFailedIds.push(currentField.fieldId);
                        }
                    } else {
                        context.$('#'+currentField.fieldId).siblings("p").removeClass("err");
                        context.$('#'+currentField.fieldId).siblings("p").html("This Field is required");
                        //console.log("Removing err class for: " + currentField.fieldId);
                    }
                }
            }
        }

        //////////console.log("Is Data Valid: " + isDataValid);
        return {
            isDataValid: isDataValid,
            validationFailedIds: validationFailedIds
        };
    }

    function validateLoginFields(context) {
        var isDataValid = true;

        var password = context.$("#password").val();
        var confirmPassword = context.$("#confirm-password").val();

        //////////console.log("password: " + password);
        //////////console.log("confirmPassword: " + confirmPassword);
        
        if(password) {
            if(password.length == 0) {
                isDataValid = false;
                context.$('#password').siblings("p").addClass("err");
                context.$('#confirm-password').siblings("p").removeClass("err");
            } else if(password != confirmPassword) {
                isDataValid = false;
                context.$('#confirm-password').siblings("p").addClass("err");
            } else {
                context.$('#password').siblings("p").removeClass("err");
                context.$('#confirm-password').siblings("p").removeClass("err");
            }
        } else {
            isDataValid = false;
            context.$('#password').siblings("p").addClass("err");
            context.$('#confirm-password').siblings("p").removeClass("err");
        }
    
        //////////console.log("isDataValid: " + isDataValid);

        return isDataValid;
    }

    function getFormData(context, isValidationRequired, additionalValidations) {
        try {
            //////////console.log(context.allFields.length);
            //context not getting data
            var response = {};
            var validationResponse = true;
            var loginFieldsValidationResponse = true;
            var additionalValidationsResponse = true;
            var validationFailedIds = [];
            
            if(isValidationRequired) {
                response = validateFields(context);
                validationResponse = response.isDataValid;
                validationFailedIds = validationFailedIds.concat(response.validationFailedIds);
            }

            //console.log("validationResponse: ", response);

            if(!context.isLoggedIn && context.requiredLoginBox) {
                loginFieldsValidationResponse = validateLoginFields(context);
            }

            if (additionalValidations && additionalValidations.urlValidation) {
                for (var i = 0; i < context.allFields.length; i++) {
                    var currentField = context.allFields[i];

                    if (currentField.type == 'url'){
                        var currentFieldValue = context.$('#'+currentField.fieldId).val();
                        if (currentFieldValue.indexOf(' ') != -1) {
                            context.$('#' + currentField.fieldId).siblings("p").html("Please remove the empty space in the URL");
                            context.$('#' + currentField.fieldId).siblings("p").addClass("err");
                            additionalValidationsResponse = false;
                            validationFailedIds.push(currentField.fieldId);
                        } else if ( (currentFieldValue && currentFieldValue.indexOf('http://') != 0 && currentFieldValue.indexOf('https://') != 0)
                            || (currentFieldValue && currentFieldValue.indexOf('http://') == 0 && currentFieldValue.length == 7)
                            || (currentFieldValue && currentFieldValue.indexOf('https://') == 0 && currentFieldValue.length == 8) ) {
                            context.$('#' + currentField.fieldId).siblings("p").html("Please enter a valid URL (Example: https://www.abc.com)");
                            context.$('#' + currentField.fieldId).siblings("p").addClass("err");
                            additionalValidationsResponse = false;
                            validationFailedIds.push(currentField.fieldId);
                        } else {
                            context.$('#'+currentField.fieldId).siblings("p").removeClass("err");
                            context.$('#'+currentField.fieldId).siblings("p").html("This Field is required");
                        }
                    }
                }
            }
            
            var fields = [];

            //////////console.log("loginFieldsValidationResponse: " + loginFieldsValidationResponse);
            ////////console.log('get Web Form Data:-',context.allFields);//hidden field value not present here
            for(var i=0;i<context.allFields.length;i++) {
                if(context.allFields[i].isChoiceField) {
                    context.allFields[i].value = context.$('#'+context.allFields[i].fieldId).is(":checked");
                } else if(context.allFields[i].isDropDown && !context.allFields[i].isMultiSelect) {
                    if(context.allFields[i].entityFieldId == "state" || context.allFields[i].entityFieldId == "country" ||
                    context.allFields[i].entityFieldId == "altstate" || context.allFields[i].entityFieldId == "altcountry") {
                        context.allFields[i].value = context.$("#"+context.allFields[i].fieldId).attr('selected-id');
                        context.allFields[i].code = context.$("#"+context.allFields[i].fieldId).attr('ref-country-code');
                        context.allFields[i].text = context.$("#"+context.allFields[i].fieldId).val();
                    } else {
                        var countryCode = context.$("#"+context.allFields[i].fieldId).attr('ref-country-code');

                        if(countryCode && countryCode.length > 0) {
                            context.allFields[i].value = countryCode;
                        } else {
                            context.allFields[i].value = context.$("#"+context.allFields[i].fieldId).attr('selected-id');
                        }
                    }
                } else {
                    if(!context.allFields[i].isDocument && (""+context.allFields[i].fieldId).length > 0) {
                        context.allFields[i].value = context.$("#"+context.allFields[i].fieldId).val();
                    }
                }

                fields.push({
                    id: context.allFields[i].fieldId,
                    value: context.allFields[i].value,
                    code: context.allFields[i].code,
                    type: context.allFields[i].type,
                    text: context.allFields[i].text,
                    isDocument: context.allFields[i].isDocument,
                    documentTransportTo: context.allFields[i].documentTransportTo,
                    setValue: true,
                    entityFieldId: context.allFields[i].entityFieldId,
                    updateEntityField: context.allFields[i].updateEntityField,
                    subSectionText: context.allFields[i].subSectionText,
                    sectionId: context.allFields[i].sectionId
                });
            }

            ////////console.log("get form dataLoop ends...",fields);

            if(!context.isLoggedIn) {
                fields.push({
                    id: "email",
                    value: context.$("#email").val(),
                    type: "",
                    setValue: true,
                    entityFieldId: "email",
                    updateEntityField: true,
                    subSectionText: "",
                    sectionId: null,
                    documentTransportTo: null
                });

                fields.push({
                    id: "password",
                    value: context.$("#password").val(),
                    type: "",
                    setValue: true,
                    entityFieldId: "",
                    updateEntityField: false,
                    subSectionText: "",
                    sectionId: null,
                    documentTransportTo: null
                });
            }

            return {
                hasError: false,
                errorMessage: '',
                recordType: context.recordType,
                fields: fields,
                loginFieldsValidationStatus: loginFieldsValidationResponse,
                otherFieldsValidationStatus: validationResponse,
                additionalValidationsResponse: additionalValidationsResponse,
                validationFailedIds: validationFailedIds
            };   
        } catch (error) {
            //////////console.log("Error: " + error);
            return {
                hasError: true,
                errorMessage: "Error: " + error,
                recordType: null,
                fields: [],
                loginFieldsValidationResponse: false,
                otherFieldsValidationResponse: false,
                additionalValidationsResponse: false,
                validationFailedIds: []
            };
        }
    }

    return {
        getFormData: getFormData
    }
});

// Model.js
// -----------------------
// @module Case
define("Saralux.Core.WebForms.SS2Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/WebForms/SuiteScript2/WebForms.Service.ss"
            ),
            true
        )
    });
});


define('Saralux.Core.WebForms',   [
	'Saralux.Core.WebForms.Demo.View',

	'Saralux.Core.ExternalLibraries.CryptoJS',
],   function (
	WebFormsDemoView,

	CryptoJS
) {
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try {
				var pageType = container.getComponent('PageType');
				this.registerPublicPages(pageType);
			} catch (e) {
				console.error(
					'ERROR: Saralux.Core.WebForms',
					e.toString()
				);
			}
		},

		registerPublicPages: function registerPublicPages(pageType) {
			pageType.registerPageType({
				name: 'WebFormsDemoView',
				view: WebFormsDemoView,
				routes: ['web-forms-demo']
			});
		}
	};
});


define('Saralux.Core.WebForms.Demo.View',	[
	'saralux_core_webforms_demo.tpl',

    'Saralux.Core.WebForms.SS2Model',

    'Saralux.Core.WebForms.View',
	
	'PageType.Base.View',
], function (
	saralux_core_webforms_demo_tpl,

    WebFormsSS2Model,

    WebFormsView,
	
	PageTypeBaseView
) {
    'use strict';

    return PageTypeBaseView.PageTypeBaseView.extend({

        template: saralux_core_webforms_demo_tpl,

        initialize: function(options) {
            this.options = options;

            this.model = new WebFormsSS2Model();
            this.data = null;
        },

        beforeShowContent: function beforeShowContent() {
            this.container = this.options.container;

            this.childViews = {
                'web-form': function() {
                    return new WebFormsView({
                        container: this.container
                    });
                }
            }

            return jQuery.Deferred().resolve();
        },

        getContext: function () {
            return {
                
            }
        }

    });
});

define('Saralux.Core.WebForms.View',	[
	'saralux_core_webforms.tpl',

    'Saralux.Core.WebForms.SS2Model',
    'Saralux.Core.CommonLibraries.General',
    'Saralux.Core.CommonLibraries.Order.SS2Model',
	
    'Saralux.Core.CommonLibraries.CAPI.Model',

	'SCView',
    'Utils'
], function (
	saralux_core_webforms_tpl,

    WebFormsSS2Model,
    CoreCLGeneral,
    CoreCLOrderSS2Model,

    CLCoreCAPIModel,
	
	SCViewModule,
    Utils
) {
    'use strict';

    var SCView = SCViewModule.SCView;

    function WebFormsView(options) {
		SCView.call(this, options);
		jQuery(window).scrollTop(0);
		var self = this;

        //////////console.log("Web form options...");
        //////////console.log(options);

        this.hasApplicationData = false;
        this.applicationData = null;
        if(options.hasApplicationData) {
            this.hasApplicationData = options.hasApplicationData;
            this.applicationData = options.applicationData;
        }
        
        //////console.log("application data", this.applicationData);
        
        this.webProcessFlowId = null;
        this.webFormId = null;

        if(options.webProcessFlowId) {
            this.webProcessFlowId = options.webProcessFlowId;
        } else if(options.webFormId) {
            this.webFormId = options.webFormId;
        }

        this.firstName = options.customerObject.firstName;
        this.lastName = options.customerObject.lastName;
        this.email = options.customerObject.email;
        this.billingAddress = options.customerObject.billingAddress;
        this.additionalFields = options.additionalFields;
        this.orderSource = options.orderSource;
        this.transactionType = options.transactionType;
        this.customerId = options.customerObject.customerId;
        //for filter default
        this.filterData = options.filterData;
        this.customerAddresses = [];
        //////////console.log('this.filterData',this.filterData);
        //////////console.log('Webform View:-',options);
        if(this.customerId == null || this.customerId == undefined) {
            this.customerId = options.customerId;
        }
        
        //////////console.log("Web Form: Customer ID: " + this.customerId);

        this.isLoggedIn = options.isLoggedIn;
        this.requiredLoginBox = options.requiredLoginBox;
        this.recordId = options.recordId;
        
        this.isReadOnly = false;

        if(options.isReadOnly) {
            this.isReadOnly = options.isReadOnly;
        }
        
        this.hiddenSubSections = [];

        this.draftStatus = options.draftStatus;
        this.submissionStatus = options.submissionStatus;

        this.parent = options.parent;

        this.template = saralux_core_webforms_tpl;
        
		// You can access the container object like this:
        // It has to be passed on to this view when it is created
        // or by the parent view (if any)
        this.container = options.container;

        // You can access components of the extensibility API using the container obj
        this.environment_component = this.container.getComponent('Environment');
        var subsidiaries = this.environment_component.getSiteSetting('subsidiaries');
		this.defaultSubsidiary = CoreCLGeneral.getDefaultSubsidiary(subsidiaries);

        // Declare child events (if any):
        /* this.childViews = {
            'ChildView.One': function() {
                return new ChildViewOne({
                    someVar: true
                });
            }
        } */

        this.model = new WebFormsSS2Model();
        this.orderModel = new CoreCLOrderSS2Model();
        this.CAPIModel = new CLCoreCAPIModel();

        this.completedSubSections = [];

        this.filteredFieldIds = [];
        this.sections = [];
        this.allFields = [];
        this.recordType = null;
        this.defaultCountryCode = null;
        this.defaultCountryText = null;

        this.totalColumns = 3
        this.isThreeCols = true;
        this.processFlag = false;

        this.expressionEvaluated = false;

        this.isLoading = true;
        
        this.context = null;
        this.parentFieldRefId = null;

        this.countries = [];
        this.allStates = [];
        this.allStatesWithId = [];

        this.offset = 3;

        this.dropdownToggle = false;

        var self = this;

        if(options.addressRequired == undefined || options.addressRequired == true) {
            this.CAPIModel.fetch().done(function(response) {
                self.countries = response.countries;
                self.allStates = response.states;
                
                self.getData().then(() => {
                    self.prepopulateFormValues();
                });
            });
        } else {
            self.getData().then(() => {
                self.prepopulateFormValues();
            });
        }
    }

    WebFormsView.prototype = Object.create(SCView.prototype);
    WebFormsView.prototype.constructor = WebFormsView;

    WebFormsView.prototype.getData = function () {
        var self = this;

        var data = {
            action: "get_webform_ui_data",
            webProcessFlowId: this.webProcessFlowId,
            webFormId: this.webFormId,
            isLoggedIn: this.isLoggedIn,
            customerId: this.customerId,
            requiredLoginBox: this.requiredLoginBox
        }

        //////////console.log({data});

        return this.model.save(data).then(function (res) {
            //////////console.log("get_webform_ui_data ");
            //////////console.log({res});//hidden field a data coming default by login
            if(!res.hasError) {
                self.customerAddresses = res.customerAddresses;
                self.offset = res.offset;
                self.allStatesWithId = res.allStates;
                self.sections = res.sections;
                self.allFields = res.allFields;
                self.recordType = res.recordType;
                self.defaultCountryCode = res.defaultCountryCode;
                self.defaultCountryText = res.defaultCountryText;
            }
            
            for(var i=0;i<self.sections.length;i++) {
                var currentSection = self.sections[i];

                if(currentSection.isDocumentSection && self.isReadOnly) {
                    currentSection['hideSection'] = true;
                } else {
                    currentSection['hideSection'] = false;
                }

                if(currentSection.hasSubSections) {
                    for(var j=0;j<currentSection.subSections.length;j++) {
                        var currentSubSection = currentSection.subSections[j];

                        for(var k=0;k<currentSubSection.fields.length;k++) {
                            //Prefil application data //key value pair 
                            if(self.hasApplicationData) {
                                var value = self.applicationData[self.sections[i].subSections[j].fields[k].fieldId];
            
                                if(isNaN(value)) {
                                    if(self.sections[i].subSections[j].fields[k].type && self.sections[i].subSections[j].fields[k].type == "multiselect") {
                                        //////console.log({value});
                                        self.sections[i].subSections[j].fields[k].value = value;

                                        var tokens = (""+value.text).split(",");

                                        for(var m=0;m<self.sections[i].subSections[j].fields[k].values.length;m++) {
                                            self.sections[i].subSections[j].fields[k].values[m]['selected'] = false;
                                        }

                                        for(var n=0;n<tokens.length;n++) {
                                            var receivedValue = tokens[n];

                                            if(receivedValue.indexOf("-") != -1) {
                                                receivedValue = receivedValue.replace("-", ",");
                                            }
                                        
                                            for(var m=0;m<self.sections[i].subSections[j].fields[k].values.length;m++) {
                                                var valueToCompare = self.sections[i].subSections[j].fields[k].values[m].text;

                                                if((""+receivedValue).trim() == (""+valueToCompare).trim()) {
                                                    self.sections[i].subSections[j].fields[k].values[m].selected = true;
                                                }
                                            }
                                        }
                                    } else {
                                        var parsedDate = Date.parse(value);

                                        if(isNaN(parsedDate)) {
                                            self.sections[i].subSections[j].fields[k].value = self.applicationData[self.sections[i].subSections[j].fields[k].fieldId]; 
                                        } else {
                                            self.sections[i].subSections[j].fields[k].value = value;
                                        }
                                    }
                                } else {
                                    self.sections[i].subSections[j].fields[k].value = self.applicationData[self.sections[i].subSections[j].fields[k].fieldId]; 
                                }
                            }

                            if(self.sections[i].subSections[j].fields[k].entityFieldId == "country") {
                                for(var x=0;x<self.sections[i].subSections[j].fields[k].values.length;x++) {
                                    for(var y=0;y<self.countries.length;y++) {
                                        if(self.countries[y].name == self.sections[i].subSections[j].fields[k].values[x].text) {
                                            self.sections[i].subSections[j].fields[k].values[x].countrycode = self.countries[y].code;
                                            //////////////////console.log(self.sections[i].subSections[j].fields[k].values[x].countrycode);
                                            break;
                                        }

                                        // if(self.countries[y].name == self.sections[i].subSections[j].fields[k].values[x].text) {
                                        //     self.sections[i].subSections[j].fields[k].values[x].countrycode = self.countries[y].code;
                                        //     break;
                                        // }
                                    }
                                }
                            }

                            if(self.sections[i].subSections[j].fields[k].entityFieldId == "state") {
                                var value = null;

                                if(self.hasApplicationData) {
                                    value = self.applicationData[self.sections[i].subSections[j].fields[k].fieldId];
                                }

                                if(value != null && value != undefined && (""+value).length > 0) {
                                    self.sections[i].subSections[j].fields[k].value = value;
                                }
                                ////////////////console.log("state", self.sections[i].subSections[j].fields[k].value);
                            }

                            if(self.sections[i].subSections[j].fields[k].filterFieldId && self.sections[i].subSections[j].fields[k].filterFieldId.length > 0) {
                                self.sections[i].subSections[j].fields[k].values = [{
                                    id: "",
                                    text: ""
                                }];

                                if(self.filteredFieldIds.indexOf(self.sections[i].subSections[j].fields[k].filterFieldId) == -1) {
                                    self.filteredFieldIds.push(self.sections[i].subSections[j].fields[k].filterFieldId);
                                }
                            }
                        }
                    }
                } else {
                    
                    for(var j=0;j<currentSection.fields.length;j++) {
                        //Temporary fix to hide document upload section for a read only webform
                        if(self.isReadOnly && self.sections[i].fields[j].isDocument) {
                            self.sections[i].hasFields = false;
                        }
                        //Temporary fix to hide document upload section for a read only webform
                        //Prefil application data
                        if(self.hasApplicationData) {
                            var value = self.applicationData[self.sections[i].fields[j].fieldId];

                            //////////console.log(value);

                            if(value != null && value != undefined && (""+value).length > 0) {
                                if(isNaN(value)) {
                                    //////////console.log("Not a number");
                                    if(self.sections[i].fields[j].type == "multiselect") {// add a validation here
                                        //////////console.log("Multiselect");
                                        var tokens = (""+value.text).split(",");
    
                                        for(var m=0;m<self.sections[i].fields[j].values.length;m++) {
                                            self.sections[i].fields[j].values[m]['selected'] = false;
                                        }
    
                                        for(var n=0;n<tokens.length;n++) {
                                            var receivedValue = tokens[n];
                                            
                                            for(var m=0;m<self.sections[i].fields[j].values.length;m++) {
                                                var valueToCompare = self.sections[i].fields[j].values[m].text;
    
                                                if(receivedValue == valueToCompare) {
                                                    self.sections[i].fields[j].values[m].selected = true;
                                                }
                                            }
                                        }
                                    } else {
                                        //////////console.log("Else");
                                        var parsedDate = Date.parse(value);
    
                                        if(isNaN(parsedDate)) {
                                            //////////console.log("parsedDate if");
                                            self.sections[i].fields[j].value = self.applicationData[self.sections[i].fields[j].fieldId]; 
                                        } else {
                                            //////////console.log("parsedDate else");
                                            self.sections[i].fields[j].value = value; 
                                        }
                                    }
                                } else {
                                    //////////console.log("Number");
                                    self.sections[i].fields[j].value = self.applicationData[self.sections[i].fields[j].fieldId]; 
                                }
                            }
                            
                        }

                        if(self.sections[i].fields[j].entityFieldId == "country") {
                            for(var x=0;x<self.sections[i].fields[j].values.length;x++) {
                                for(var y=0;y<self.countries.length;y++) {
                                    if(self.countries[y].name == self.sections[i].fields[j].value) {
                                        self.sections[i].fields[j].countrycode = self.countries[y].code;
                                    }

                                    if(self.countries[y].name == self.sections[i].fields[j].values[x].text) {
                                        self.sections[i].fields[j].values[x].countrycode = self.countries[y].code;
                                        break;
                                    }
                                }
                            }
                        }

                        if(self.sections[i].fields[j].entityFieldId == "state") {
                            var value = null;

                            if(self.hasApplicationData) {
                                value = self.applicationData[self.sections[i].fields[j].fieldId];
                            }

                            if(value != null && value != undefined && (""+value).length > 0) {
                                self.sections[i].fields[j].value = value;
                            }
                        }

                        if(self.sections[i].fields[j].filterFieldId && self.sections[i].fields[j].filterFieldId.length > 0) {
                            self.sections[i].fields[j].values = [{
                                id: "",
                                text: ""
                            }];

                            if(self.filteredFieldIds.indexOf(self.sections[i].fields[j].filterFieldId) == -1) {
                                self.filteredFieldIds.push(self.sections[i].fields[j].filterFieldId);
                            }
                        }
                    }
                }
            }
            
            self.isLoading = false;
            self.render();

            //////////console.log(self.sections);

            $('.searchable ul li').on('click', function (e) {
                e.stopImmediatePropagation();
                self.dropdownToggle = false;
                ////console.log("1st", $(this).html());
                self.parentFieldRefId = $(this).attr("ref-id");

                ////console.log("self.parentFieldRefId: " + self.parentFieldRefId);

                var inputObject = $(this).closest(".searchable").find("input");

                if($(this).attr("state-id")) {
                    inputObject.attr('selected-id', $(this).attr("state-id"));
                } else {
                    inputObject.attr('selected-id', $(this).attr("ref-id"));
                }

                inputObject.attr('ref-country-code', $(this).attr("ref-country-code"));
                inputObject.val($(this).html()).blur();
                inputObject.trigger("change");
            });

            self.restoreFieldVisiblity();
            self.hideAllConditionalSubsections();
            self.hideAllConditionalFields();
            self.postDatafetchActions();
        });
    }

    WebFormsView.prototype.postDatafetchActions = function() {
        var self = this;

        for(var i=0;i<self.allFields.length;i++) {
            //Dropdown Dynamic Mode
            if(self.allFields[i].dropdownDynamicMode) {
                var timeout = null;
                $("#"+self.allFields[i].fieldId).keyup({i: i, fieldId: self.allFields[i].fieldId, values: self.allFields[i].values, emptyValue: self.allFields[i].emptyValue}, function(e) {
                    var searchText = $(this).val();

                    // Clear the timeout if it has already been set.
                    // This will prevent the previous task from executing
                    // if it has been less than <MILLISECONDS>
                    clearTimeout(timeout);
                    
                    if(searchText.length > 0) {
                        timeout = setTimeout(function () {
                            var data = {
                                action: "get_webform_search_data",
                                searchText: searchText,
                                type: self.allFields[e.data.i].dropdownFieldType
                            };

                            //////////////////console.log(data);

                            self.model.save(data).then(function (res) {
                                if(!res.hasError) {
                                    if(res.data.length > 0) {
                                        var values = "";

                                        for(var j=0;j<res.data.length;j++) {
                                            values += "<li ref-id="+res.data[j].id+">"+res.data[j].text+"</li>";
                                        }
                                        ////////////////////console.log(values);
                                        $("#" + self.allFields[e.data.i].fieldId + "-ul").html(values);
                                        self.allFields[e.data.i].values = res.data;

                                        $('#' + self.allFields[e.data.i].fieldId).tooltip("hide");
                                    } else {
                                        $("#" + self.allFields[e.data.i].fieldId + "-ul").html("");
                                        self.allFields[e.data.i].values = [];

                                        var spaceAvailableOnLeft = $('#' + self.allFields[e.data.i].fieldId).offset().left;
                                        if (spaceAvailableOnLeft > 500) {
                                            $('#' + self.allFields[e.data.i].fieldId).data('bs.tooltip').options.placement = 'left';
                                        } else {
                                            $('#' + self.allFields[e.data.i].fieldId).data('bs.tooltip').options.placement = 'right';
                                        }
                                        $('#' + self.allFields[e.data.i].fieldId).tooltip("show");
                                        setTimeout(function(){
                                            $('#' + self.allFields[e.data.i].fieldId).tooltip("hide");
                                        }, 5000);
                                    }

                                    $("#" + self.allFields[e.data.i].fieldId + "-ul").append("<li ref-id=''>"+e.data.emptyValue+"</li>");
                                    
                                    setTimeout(function() {
                                        self.$('.searchable ul li').on('click', function () {
                                            self.dropdownToggle = false;
                                            ////console.log("5th", $(this).html());
                                            self.parentFieldRefId = $(this).attr("ref-id");
                            
                                            ////console.log("self.parentFieldRefId: " + self.parentFieldRefId);
                            
                                            var inputObject = $(this).closest(".searchable").find("input");
                            
                                            if($(this).attr("state-id")) {
                                                inputObject.attr('selected-id', $(this).attr("state-id"));
                                            } else {
                                                inputObject.attr('selected-id', $(this).attr("ref-id"));
                                            }
                            
                                            inputObject.attr('ref-country-code', $(this).attr("ref-country-code"));
                                            inputObject.val($(this).html()).blur();
                                            inputObject.trigger("change");
                                        });
                                    }, 200);
                                }
                            });
                        }, 800);
                    } else {
                        var values = "<li ref-id=''>"+e.data.emptyValue+"</li>";
                        ////////////////////console.log(values);
                        $("#" + self.allFields[e.data.i].fieldId + "-ul").html(values);
                        self.allFields[e.data.i].values = [];

                        setTimeout(function() {
                            self.$('.searchable ul li').off('click').on('click', function () {
                                self.dropdownToggle = false;
                                ////console.log("4th");
                                self.parentFieldRefId = $(this).attr("ref-id");
                
                                ////console.log("self.parentFieldRefId: " + self.parentFieldRefId);
                
                                var inputObject = $(this).closest(".searchable").find("input");
                                inputObject.val($(this).text()).blur();
                                inputObject.attr('selected-id', $(this).attr("ref-id"));
                                inputObject.attr('ref-country-code', $(this).attr("ref-country-code"));
                                inputObject.trigger("change");
                            });
                        }, 200);
                    }
                });
            }

            //Checkbox Dependant Mandatory Fields (WO Expressions)
            if(self.allFields[i].isChoiceField) {
                var fieldId = self.allFields[i].fieldId;

                $("#"+self.allFields[i].fieldId).click({"fieldId": fieldId}, function(e) {
                    self.updateFieldMandatoryState({
                        fieldId: e.data.fieldId,
                        state: $(this).is(":checked")
                    });

                    self.updateSubsectionVisiblity({
                        fieldId: e.data.fieldId,
                        state: $(this).is(":checked")
                    });

                    self.updateFieldVisiblity({
                        fieldId: e.data.fieldId,
                        state: $(this).is(":checked")
                    });
                });

                if(self.hasApplicationData || self.allFields[i].value) {
                    var value = null;

                    if(self.hasApplicationData) {
                        value = self.applicationData[fieldId];
                    } else {
                        value = self.allFields[i].value;
                    }
                    
                    if(value != null && value != undefined && (""+value).length > 0) {
                        self.allFields[i].value = value;

                        self.updateFieldMandatoryState({
                            fieldId: fieldId,
                            state: value
                        });

                        self.updateSubsectionVisiblity({
                            fieldId: fieldId,
                            state: value
                        });

                        self.updateFieldVisiblity({
                            fieldId: fieldId,
                            state: value
                        });
                    }
                }
            }

            //cascading dropdowns
            if(!self.allFields[i].dropdownDynamicMode && self.filteredFieldIds.indexOf(self.allFields[i].fieldId) !== -1) {
                var parentFieldId = self.allFields[i].fieldId;
                var entityFieldId = self.allFields[i].entityFieldId;

                if(self.allFields[i].hidden) {
                    ////////////////////console.log("Is hidden...");
                    ////////////////////console.log(parentFieldId);
                    ////////////////////console.log(self.parent.parentId);

                    self.fillDropdown({
                        parentFieldId: parentFieldId,
                        parentRef: self.parent.parentId 
                    })
                } else {
                    $("#"+parentFieldId).keyup(function(e) {    
                        self.filterFunction(this, e);
                    });

                    $("#"+parentFieldId).change({parentFieldId: parentFieldId, entityFieldId: entityFieldId}, function(e) {
                        var parentFieldRefId = self.parentFieldRefId;

                        if(e.data.entityFieldId == "country" || e.data.entityFieldId == "altcountry") {
                            parentFieldRefId = $(this).attr('ref-country-code');
                        }
                        ////console.log("parentFieldRefId: " + parentFieldRefId);
                        
                        self.fillDropdown({
                            parentFieldId: e.data.parentFieldId,
                            parentRef: parentFieldRefId 
                        })
                    });
                }
            } else if(!self.allFields[i].dropdownDynamicMode && self.allFields[i].isDropDown) {
                var parentFieldId = self.allFields[i].fieldId;
                
                $("#"+parentFieldId).keyup(function(e) {
                    self.filterFunction(this, e);
                });
            }

            if(self.allFields[i].isMultiSelect) {
                $("#" + self.allFields[i].fieldId).click(function() {
                    if ($("#" + self.allFields[i].fieldId + " option:selected").length > 3) {
                        $(this).removeAttr("selected");
                    }
                });
            }

            //expressions
            //check if the current field id is used on a subsection for displayIfTrue/displayIfFalse & expressions are set on the subsection
            var hasExpressionResponse = self.checkIfSubsectionHasExpression(self.allFields[i].fieldId);

            if(hasExpressionResponse.hasExpression) {
                var fieldId = self.allFields[i].fieldId;
                //console.log("fieldId", fieldId);

                var value = null;

                if(self.hasApplicationData) {
                    value = self.applicationData[self.allFields[i].fieldId];
                } else if(self.allFields[i].value) {
                    value = self.allFields[i].value;
                }

                //console.log("value", value);

                // if(value != null && value != undefined && (""+value).length > 0) {
                //     self.updateSubsectionVisiblity({
                //         fieldId: fieldId,
                //         value: (value instanceof Object)?value.text:value
                //     });
                // } else {
                //     self.updateSubsectionVisiblity({
                //         fieldId: fieldId,
                //         value: ""
                //     });
                // }

                $("#" + self.allFields[i].fieldId).change({"fieldId": fieldId}, function(e) {
                    //console.log("Change triggered...");
                    self.updateSubsectionWithExprVisiblity({
                        fieldId: e.data.fieldId,
                        value: $(this).val()
                    });
                });

                if(self.isReadOnly && value != null && value != undefined && (""+value).length > 0) {
                    //console.log("Entered if");
                    self.updateSubsectionWithExprVisiblity({
                        fieldId: self.allFields[i].fieldId,
                        value: (value instanceof Object)?value.text:value
                    });
                }
            }

            if(self.allFields[i].expressionOperator.length > 0 && self.allFields[i].expressionValue) {
                var rightOperand = self.allFields[i].expressionValue;
                var operator = self.allFields[i].expressionOperator;
                var fieldId = self.allFields[i].fieldId;
            
                $("#" + self.allFields[i].fieldId).change({"rightOperand": rightOperand, "operator": operator, "fieldId": fieldId}, function(e) {
                    var value = null;

                    if($(this).is('select')) {
                        value = $(this).find('option:selected').text();
                    } else {
                        value = $(this).val();
                    }

                    // ////////console.log(value);

                    if(value && value.length > 0) {
                        var expressionResponse = self.evaluateExpression({
                            leftOperand: value,
                            rightOperand: e.data.rightOperand,
                            operator: e.data.operator
                        });

                        // ////////console.log({expressionResponse})

                        self.updateFieldMandatoryState({
                            fieldId: e.data.fieldId,
                            state: expressionResponse
                        });

                        self.updateSubsectionVisiblity({
                            fieldId: e.data.fieldId,
                            state: expressionResponse
                        });

                        self.updateFieldVisiblity({
                            fieldId: e.data.fieldId,
                            state: expressionResponse
                        });
                    } else {
                        self.updateFieldMandatoryState({
                            fieldId: e.data.fieldId,
                            state: false
                        });

                        self.hideConditionalField({
                            fieldId: e.data.fieldId
                        });

                        self.hideConditionalSubsection({
                            fieldId: e.data.fieldId
                        });
                    }
                });

                var value = null;
        
                if(self.hasApplicationData) {
                    value = self.applicationData[self.allFields[i].fieldId];
                } else if(self.allFields[i].value) {
                    value = self.allFields[i].value;
                }

                if(value != null && value != undefined && (""+value).length > 0) {
                    if(self.isReadOnly) {
                        var data = {
                            leftOperand: value,
                            rightOperand: self.allFields[i].expressionValue,
                            operator: self.allFields[i].expressionOperator
                        };

                        var expressionResponse = self.evaluateExpression(data);

                        self.updateFieldMandatoryState({
                            fieldId: self.allFields[i].fieldId,
                            state: expressionResponse
                        });

                        self.updateSubsectionVisiblity({
                            fieldId: self.allFields[i].fieldId,
                            state: expressionResponse
                        });

                        self.updateFieldVisiblity({
                            fieldId: self.allFields[i].fieldId,
                            state: expressionResponse
                        });
                    } else {
                        $("#" + self.allFields[i].fieldId).trigger("change");
                    }
                } 
                // else if(self.allFields[i].emptyValue != null && self.allFields[i].emptyValue != undefined && (""+self.allFields[i].emptyValue).length > 0) {
                //     $("#" + self.allFields[i].fieldId).val(self.allFields[i].emptyValue);
                //     $("#" + self.allFields[i].fieldId).trigger("change");
                // }
            }
        }

        for(var i=0;i<self.sections.length;i++) {
            var currentSection = self.sections[i];

            if(currentSection.hasSubSections) {
                for(var j=0;j<currentSection.subSections.length;j++) {
                    var currentSubSection = currentSection.subSections[j];

                    if(currentSubSection.displayIfTrueFieldId && currentSubSection.displayIfTrueFieldId.length > 0) {
                        if($("#"+currentSubSection.displayIfTrueFieldId).is('checkbox')) {
                            if($("#"+currentSubSection.displayIfTrueFieldId).is(":checked")) {
                                self.hiddenSubSections.splice(self.hiddenSubSections.indexOf(currentSubSection.id), 1);
                                $("#" + currentSubSection.displayIfTrueFieldId + "-subsection-" + currentSubSection.id).show();
                            } else {
                                self.hiddenSubSections.push(currentSubSection.id);
                                $("#" + currentSubSection.displayIfTrueFieldId + "-subsection-" + currentSubSection.id).hide();
                            }

                            $("#"+currentSubSection.displayIfTrueFieldId).click({"fieldId":currentSubSection.displayIfTrueFieldId, "subSectionId":currentSubSection.id}, function(e) {
                                if($(this).is(":checked")) {
                                    self.hiddenSubSections.splice(self.hiddenSubSections.indexOf(e.data.subSectionId), 1);
                                    $("#" + e.data.fieldId + "-subsection-" + e.data.subSectionId).show();
                                } else {
                                    self.hiddenSubSections.push(e.data.subSectionId);
                                    $("#" + e.data.fieldId + "-subsection-" + e.data.subSectionId).hide();
                                }
                                self.updateHiddenSectionFields();
                            });
                        }
                    }

                    for(var k=0;k<currentSubSection.fields.length;k++) {
                        //Prefil application data
                        if(self.hasApplicationData) {
                            if(self.sections[i].subSections[j].fields[k].isDropDown && !self.sections[i].subSections[j].fields[k].isMultiSelect) {
                                var value = self.applicationData[self.sections[i].subSections[j].fields[k].fieldId];
                                for(var x=0;x<self.sections[i].subSections[j].fields[k].values.length;x++) {
                                    if(self.sections[i].subSections[j].fields[k].values[x].text == value) {
                                        $("#" + self.sections[i].subSections[j].fields[k].fieldId).attr('selected-id', self.sections[i].subSections[j].fields[k].values[x].id);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    WebFormsView.prototype.getFormattedDate = function(date) {
        var month = date.getMonth();
        if(month < 10) {
            month = "0" + month;
        }
        return date.getFullYear() + "-" + month + "-" + date.getDate()
    }

    WebFormsView.prototype.checkIfSubsectionHasExpression = function(fieldId) {
        var self = this;

        var operator = [];
        var rightOperand = [];
        var hasExpression = false;

        for(var i=0;i<self.sections.length;i++) {
            if(self.sections[i].hasSubSections) {
                for(var j=0;j<self.sections[i].subSections.length;j++) {
                    if((self.sections[i].subSections[j].displayIfTrueFieldId == fieldId) && (self.sections[i].subSections[j].expressionOperator.length > 0)) {
                        hasExpression = true;
                        operator.push(self.sections[i].subSections[j].expressionOperator);
                        rightOperand.push(self.sections[i].subSections[j].expressionValue);
                    }
                }
            }
        }

        return {
            hasExpression: hasExpression,
            rightOperand: rightOperand,
            operator: operator
        }
    }

    WebFormsView.prototype.filterFunction = function(that, event) {
        let container, input, filter, li, input_val;
        container = $(that).closest(".searchable");
        input_val = container.find("input").val();
        if(input_val) {
            input_val = (""+input_val).toUpperCase();
        }
    
        if (["ArrowDown", "ArrowUp", "Enter"].indexOf(event.key) != -1) {
            this.keyControl(event, container)
        } else {
            li = container.find("ul li");
            li.each(function (i, obj) {
                if ($(this).text().toUpperCase().indexOf(input_val) > -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
    
            container.find("ul li").removeClass("selected");
            setTimeout(function () {
                container.find("ul li:visible").first().addClass("selected");
            }, 100)
        }
    }
    
    WebFormsView.prototype.keyControl = function(e, container) {
        if (e.key == "ArrowDown") {
            if (container.find("ul li").hasClass("selected")) {
                if (container.find("ul li:visible").index(container.find("ul li.selected")) + 1 < container.find("ul li:visible").length) {
                    container.find("ul li.selected").removeClass("selected").nextAll().not('[style*="display: none"]').first().addClass("selected");
                }
            } else {
                container.find("ul li:first-child").addClass("selected");
            }
        } else if (e.key == "ArrowUp") {
            if (container.find("ul li:visible").index(container.find("ul li.selected")) > 0) {
                container.find("ul li.selected").removeClass("selected").prevAll().not('[style*="display: none"]').first().addClass("selected");
            }
        } else if (e.key == "Enter") {
            container.find("input").val(container.find("ul li.selected").text()).blur();
            //onSelect(container.find("ul li.selected").text())

            //set the dropdown attributes on keyboard enter
            this.dropdownToggle = false;
            ////console.log("keyboard event");
            this.parentFieldRefId = $(container.find("ul li.selected")[0]).attr("ref-id");
            ////console.log(this.parentFieldRefId);

            var inputObject = $(container.find("ul li.selected")[0]).closest(".searchable").find("input");
            
            if($(container.find("ul li.selected")[0]).attr("state-id")) {
                inputObject.attr('selected-id', $(container.find("ul li.selected")[0]).attr("state-id"));
            } else {
                inputObject.attr('selected-id', $(container.find("ul li.selected")[0]).attr("ref-id"));
            }

            inputObject.attr('ref-country-code', $(container.find("ul li.selected")[0]).attr("ref-country-code"));
            inputObject.val($(container.find("ul li.selected")[0]).html()).blur();
            inputObject.trigger("change");
        }
    }

    WebFormsView.prototype.evaluateDateComparison = function(options) {
        var leftOperandDateValue = new Date(options.leftOperand);;
        var rightOperandDateValue = null;

        if(options.rightOperand == "{today}") {
            rightOperandDateValue = new Date();
        } else {
            rightOperandDateValue = new Date(options.rightOperand);
        }

        leftOperandDateValue.setHours(0,0,0,0);
        rightOperandDateValue.setHours(0,0,0,0);
        
        switch(options.operator) {
            case "&lt;=": return leftOperandDateValue <= rightOperandDateValue;
            case "&gt;=": return leftOperandDateValue >= rightOperandDateValue;
            case "&lt;": return leftOperandDateValue < rightOperandDateValue;
            case "&gt;": return leftOperandDateValue > rightOperandDateValue;
            case "=": return leftOperandDateValue.getTime() == rightOperandDateValue.getTime();
        }
    }

    WebFormsView.prototype.evaluateExpression = function(options) {
        //////////////console.log({options});
        switch(options.operator) {
            case "startswith":
                var string1 = options.leftOperand + "";
                var string2 = options.rightOperand + "";
                return string1.startsWith(string2);
            case "endswith":
                var string1 = options.leftOperand + "";
                var string2 = options.rightOperand + "";
                return string1.endsWith(string2);
            case "contains":
                var string1 = options.leftOperand + "";
                var string2 = options.rightOperand + "";
                return string1.includes(string2);
            case "&gt;":
                if(isNaN(options.rightOperand)) {//means it can be date value
                    if(Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand > options.rightOperand;     
                    }
                } else {
                    return options.leftOperand > options.rightOperand; 
                }
            case "&lt;": 
                if(isNaN(options.rightOperand)) {//means it can be date value
                    if(Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand < options.rightOperand;     
                    }
                } else {
                    return options.leftOperand < options.rightOperand; 
                }
            case "&gt;=": 
                if(isNaN(options.rightOperand)) {//means it can be date value
                    if(Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand >= options.rightOperand; 
                    }
                } else {
                    return options.leftOperand >= options.rightOperand; 
                }
            case "&lt;=": 
                if(isNaN(options.rightOperand)) {//means it is a date value
                    if(Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand <= options.rightOperand; 
                    }
                } else {
                    return options.leftOperand <= options.rightOperand; 
                }
            case "=": 
                if(isNaN(options.rightOperand)) {//means it is a date value
                    if(Date.parse(options.rightOperand) || options.rightOperand == "{today}") {
                        return this.evaluateDateComparison(options);
                    } else {
                        return options.leftOperand == options.rightOperand;     
                    }
                } else {
                    return options.leftOperand == options.rightOperand; 
                }
            case "anyof":
                if(options.rightOperand.length > 0) {
                    var tokens = options.rightOperand.split(","); 
                    
                    if(tokens.indexOf(options.leftOperand) !== -1) {
                        return true; 
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            case "noneof":
                if(options.rightOperand.length > 0) {
                    var tokens = options.rightOperand.split(","); 
                    
                    if(tokens.indexOf(options.leftOperand) !== -1) {
                        return false; 
                    } else {
                        return true;
                    }
                } else {
                    return false;
                }
            default: return false;
        }
    }

    WebFormsView.prototype.getStateId = function(stateName) {
        var stateId = null;

        for(var z=0;z<this.allStatesWithId.length;z++) {
            if(this.allStatesWithId[z].name == stateName) {
                stateId = this.allStatesWithId[z].id;
                break;
            }
        }

        //////////////////console.log({stateId});

        return stateId;
    }

    WebFormsView.prototype.getCountryId = function(countryName) {
        var countryId = null;

        for(var z=0;z<this.allFields.length;z++) {
            if(this.allFields[z].entityFieldId == "country") {
                for(var x=0;x<this.allFields[z].values.length;x++) {
                    if(this.allFields[z].values[x].text == countryName) {
                        countryId = this.allFields[z].values[x].id;
                        break;
                    }
                }
            }
        }

        //////////////console.log({countryId});

        return countryId;
    }

    WebFormsView.prototype.getCountryCode = function(countryName) {
        var countryCode = null;

        for(var z=0;z<this.countries.length;z++) {
            if(this.countries[z].name == countryName) {
                countryCode = this.countries[z].code;
                break;
            }
        }

        return countryCode;
    }

    WebFormsView.prototype.getStateCode = function(stateName) {
        var stateCode = null;

        for(var j=0;j<this.allStates.length;j++) {
            for(var k=0;k<this.allStates[j].states.length;k++) {
                if(this.allStates[j].states[k].name == stateName) {
                    stateCode = this.allStates[j].states[k].code;
                    break;
                }
            }
        }

        return stateCode;
    }

    WebFormsView.prototype.fillDropdown = function(options) {
        var self = this;

        setTimeout(function() {
            for(var i=0;i<self.allFields.length;i++) {
                if(self.allFields[i].filterFieldId == options.parentFieldId) {
                    ////console.log("Condition matched...");
                    if(self.allFields[i].entityFieldId == "state" || self.allFields[i].entityFieldId == "altstate") {
                        ////console.log("adding value for state. parentRef = ", options.parentRef);
                        var values = "<li></li>";

                        for(var j=0;j<self.allStates.length;j++) {
                            if(self.allStates[j].countrycode == options.parentRef) {
                                self.allFields[i].values = self.allStates[j].states;

                                for(var k=0;k<self.allStates[j].states.length;k++) {
                                    values += "<li state-id="+self.getStateId(self.allStates[j].states[k].name)+" ref-country-code="+self.allStates[j].states[k].code+" ref-id="+self.allStates[j].states[k].code+">"+self.allStates[j].states[k].name+"</li>";
                                }
                                break;
                            }
                        }

                        $("#" + self.allFields[i].fieldId + "-ul").html(values);
                        
                        var value = null;
                        if(self.hasApplicationData) {
                            value = self.applicationData[self.allFields[i].fieldId];
                        }

                        ////////////////console.log({value});
                        
                        if(value != null && value != undefined && (""+value).length > 0) {
                            //////////////////console.log("1st If");
                            if(value instanceof Object) {
                                //////////////////console.log("2nd If");
                                $("#" + self.allFields[i].fieldId).val(value.text);     
                                $("#" + self.allFields[i].fieldId).attr("selected-id", value.id);     
                                $("#" + self.allFields[i].fieldId).attr("ref-country-code", self.getStateCode(value.text));     
                            } else {
                                //////////////////console.log("2nd Else");
                                $("#" + self.allFields[i].fieldId).val(value);     
                                $("#" + self.allFields[i].fieldId).attr("selected-id", value);     
                            }
                        } else {
                            //////////////////console.log("1st Else");
                            $("#" + self.allFields[i].fieldId).val(""); 
                            $("#" + self.allFields[i].fieldId).attr("selected-id", "");     
                        }
                    } else if(self.allFields[i].isMultiSelect) {
                        var values = "<option value='0'></option>";
                        for(var j=0;j<self.allFields[i].values.length;j++) {
                            if(self.allFields[i].values[j].parentRef == options.parentRef) {
                                values += "<option value="+self.allFields[i].values[j].id+">" + self.allFields[i].values[j].text + "</option>";
                            }
                        }
                        $("#" + self.allFields[i].fieldId).html(values);
                    } else {
                        var values = "<li></li>";

                        for(var j=0;j<self.allFields[i].values.length;j++) {
                            if(self.allFields[i].values[j].parentRef == options.parentRef) {
                                values += "<li ref-id="+self.allFields[i].values[j].id+">"+self.allFields[i].values[j].text+"</li>";
                            }
                        }

                        $("#" + self.allFields[i].fieldId + "-ul").html(values);
                        
                        if(values != "<li></li>") {
                            ////////////////////console.log(values);
                            $("#" + self.allFields[i].fieldId).val("");
                        }
                    }
                }
            }

            $('.searchable ul li').off('click').on('click', function (e) {
                self.dropdownToggle = false;
                ////console.log("2nd", $(this).html());
                self.parentFieldRefId = $(this).attr("ref-id");

                ////console.log("self.parentFieldRefId", self.parentFieldRefId);
                var inputObject = $(this).closest(".searchable").find("input");
                
                if($(this).attr("state-id")) {
                    inputObject.attr('selected-id', $(this).attr("state-id"));
                } else {
                    inputObject.attr('selected-id', $(this).attr("ref-id"));
                }

                inputObject.attr('ref-country-code', $(this).attr("ref-country-code"));
                inputObject.val($(this).html()).blur();
                inputObject.trigger("change");
            });
        }, 200);
    }

    WebFormsView.prototype.updateSubsectionWithExprVisiblity = function(options) {
        var self = this;
        
        if(options.fieldId == "custrecord_slxs_sap_additnl_universities") {
            ////////console.log({options});
        }

        for(var i=0;i<self.sections.length;i++) {
            if(self.sections[i].hasSubSections) {
                for(var j=0;j<self.sections[i].subSections.length;j++) {
                    if(self.sections[i].subSections[j].displayIfTrueFieldId == options.fieldId) {
                        var rightOperand = self.sections[i].subSections[j].expressionValue;
                        var operator = self.sections[i].subSections[j].expressionOperator;

                        var params = {
                            leftOperand: options.value,
                            rightOperand: rightOperand,
                            operator: operator
                        };

                        var expressionResponse = self.evaluateExpression(params);

                        if(options.fieldId == "custrecord_slxs_sap_additnl_universities") {
                            ////////console.log("params", params);
                            ////////console.log("expressionResponse", expressionResponse);
                        }
                        
                        if(expressionResponse) {
                            $("#" + options.fieldId + "-subsection-" + self.sections[i].subSections[j].id).show();
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: true
                            });
                        } else {
                            $("#" + options.fieldId + "-subsection-" + self.sections[i].subSections[j].id).hide();
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: false
                            });

                            try {
                                for(var k=0;self.sections[i].subSections[j].fields && k<self.sections[i].subSections[j].fields.length;k++) {
                                    var currentField = self.sections[i].subSections[j].fields[k];
                                    self.$("#" + currentField.fieldId).val("");
                                    self.$("#" + currentField.fieldId).trigger("change");
                                }   
                            } catch (error) {
                                //////////////////console.log(error);
                            }
                        }
                    }
                }
            }
        }
    }

    WebFormsView.prototype.updateSubsectionRelatedMandatoryState = function(options) {
        
        var self = this;

        for(var i=0;i<self.sections.length;i++) {
            var currentSection = self.sections[i];

            if(currentSection.hasSubSections) {
                for(var j=0;j<currentSection.subSections.length;j++) {
                    if(self.sections[i].subSections[j].displayIfTrueFieldId == options.fieldId) {
                        if(options.state) {
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: true
                            });
                        } else {
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: false
                            });

                            try {
                                for(var k=0;self.sections[i].subSections[j].fields && k<self.sections[i].subSections[j].fields.length;k++) {
                                    var currentField = self.sections[i].subSections[j].fields[k];
                                    self.$("#" + currentField.fieldId).val("");
                                    self.$("#" + currentField.fieldId).trigger("change");
                                }   
                            } catch (error) {
                                //////////////////console.log(error);
                            }
                        }
                    }

                    if(self.sections[i].subSections[j].displayIfFalseFieldId == options.fieldId) {
                        if(options.state == false) {
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: true
                            });
                        } else {
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: false
                            });

                            try {
                                for(var k=0;self.sections[i].subSections[j].fields && k<self.sections[i].subSections[j].fields.length;k++) {
                                    var currentField = self.sections[i].subSections[j].fields[k];
                                    self.$("#" + currentField.fieldId).val("");
                                    self.$("#" + currentField.fieldId).trigger("change");
                                }   
                            } catch (error) {
                                //////////////////console.log(error);
                            }
                        }
                    }
                }
            }
        }
    }

    WebFormsView.prototype.updateSubsectionVisiblity = function(options) {
        
        var self = this;

        for(var i=0;i<self.sections.length;i++) {
            var currentSection = self.sections[i];

            if(currentSection.hasSubSections) {
                for(var j=0;j<currentSection.subSections.length;j++) {
                    if(self.sections[i].subSections[j].displayIfTrueFieldId == options.fieldId) {
                        if(options.state) {
                            $("#" + options.fieldId + "-subsection-" + self.sections[i].subSections[j].id).show();
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: true
                            });
                        } else {
                            $("#" + options.fieldId + "-subsection-" + self.sections[i].subSections[j].id).hide();
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: false
                            });

                            try {
                                for(var k=0;self.sections[i].subSections[j].fields && k<self.sections[i].subSections[j].fields.length;k++) {
                                    var currentField = self.sections[i].subSections[j].fields[k];
                                    self.$("#" + currentField.fieldId).val("");
                                    self.$("#" + currentField.fieldId).trigger("change");
                                }   
                            } catch (error) {
                                //////////////////console.log(error);
                            }
                        }
                    }

                    if(self.sections[i].subSections[j].displayIfFalseFieldId == options.fieldId) {
                        if(options.state == false) {
                            $("#" + options.fieldId + "-subsection-" + self.sections[i].subSections[j].id).show();
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: true
                            });
                        } else {
                            $("#" + options.fieldId + "-subsection-" + self.sections[i].subSections[j].id).hide();
                            this.updateFieldMandatoryStateOnSubsectionVisiblity({
                                sid: i,
                                ssid: j,
                                state: false
                            });

                            try {
                                for(var k=0;self.sections[i].subSections[j].fields && k<self.sections[i].subSections[j].fields.length;k++) {
                                    var currentField = self.sections[i].subSections[j].fields[k];
                                    self.$("#" + currentField.fieldId).val("");
                                    self.$("#" + currentField.fieldId).trigger("change");
                                }   
                            } catch (error) {
                                //////////////////console.log(error);
                            }
                        }
                    }
                }
            }
        }
    }

    WebFormsView.prototype.restoreFieldVisiblity = function(options) {
        for(var i=0;i<this.allFields.length;i++) {
            $("#" + this.allFields[i].fieldId + "-parent-div").show();
        }
    }

    WebFormsView.prototype.updateFieldVisiblity = function(options) {
        // //////////////////console.log("updateFieldVisiblity() Options: ");
        // //////////////////console.log({options});

        this.expressionEvaluated = false;
        
        for(var i=0;i<this.allFields.length;i++) {
            if(this.allFields[i].displayIfTrueFieldId == options.fieldId) {
                if(options.state) {
                    this.restoreOriginalFieldMandatoryState({ fieldId: this.allFields[i].fieldId });

                    $("#" + this.allFields[i].fieldId + "-parent-div").show();
                    if(this.allFields[i].isChoiceField) {
                        if(this.allFields[i].isMandatory) {
                            $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title+" *"); 
                        } else {
                            $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                        }
                    } else {
                        if(this.allFields[i].isMandatory) {
                            $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title+" *"); 
                        } else {
                            $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                        }
                    }
                } else {
                    this.allFields[i].isMandatory = false;

                    $("#" + this.allFields[i].fieldId + "-parent-div").hide();
                    
                    if(this.allFields[i].isChoiceField) {
                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                        
                        $("#"+this.allFields[i].fieldId).attr("checked", false);
                    } else {
                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                        
                        $("#"+this.allFields[i].fieldId).val("");
                        $("#"+this.allFields[i].fieldId).attr("ref-country-code", "");
                        $("#"+this.allFields[i].fieldId).attr("selected-id", "");
                    }
                }
            }

            if(this.allFields[i].displayIfFalseFieldId == options.fieldId) {
                if(!options.state) {
                    this.restoreOriginalFieldMandatoryState({ fieldId: this.allFields[i].fieldId });

                    $("#" + this.allFields[i].fieldId + "-parent-div").show();
                    if(this.allFields[i].isChoiceField) {
                        if(this.allFields[i].isMandatory) {
                            $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title+" *"); 
                        } else {
                            $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                        }
                    } else {
                        if(this.allFields[i].isMandatory) {
                            $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title+" *"); 
                        } else {
                            $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                        }
                    }
                } else {
                    this.allFields[i].isMandatory = false;
                    
                    $("#" + this.allFields[i].fieldId + "-parent-div").hide();

                    if(this.allFields[i].isChoiceField) {
                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                    } else {
                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                    }
                }
            }
        }
    }

    WebFormsView.prototype.hideConditionalField = function(options) {
        for(var i=0;i<this.allFields.length;i++) {
            if(this.allFields[i].displayIfTrueFieldId == options.fieldId) {
                $("#" + this.allFields[i].fieldId + "-parent-div").hide();
            }

            if(this.allFields[i].displayIfFalseFieldId == options.fieldId) {
                $("#" + this.allFields[i].fieldId + "-parent-div").hide();
            }
        }
    }

    WebFormsView.prototype.hideConditionalSubsection = function(options) {
        for(var i=0;i<this.sections.length;i++) {
            for(var j=0;j<this.sections[i].subSections.length;j++) {
                if(this.sections[i].subSections[j].displayIfTrueFieldId == options.fieldId) {
                    $("#" + this.sections[i].subSections[j].displayIfTrueFieldId + "-subsection-" + this.sections[i].subSections[j].id).hide();
                }

                if(this.sections[i].subSections[j].displayIfFalseFieldId == options.fieldId) {
                    $("#" + this.sections[i].subSections[j].displayIfFalseFieldId + "-subsection-" + this.sections[i].subSections[j].id).hide();
                }
            }
        }
    }

    WebFormsView.prototype.hideAllConditionalFields = function(options) {
        for(var i=0;i<this.allFields.length;i++) {
            var value = null;
            
            if((""+this.allFields[i].displayIfFalseFieldId).length > 0 || (""+this.allFields[i].displayIfTrueFieldId).length > 0) {
                this.allFields[i].isMandatory = false;
            }

            if(this.hasApplicationData) {
                value = this.applicationData[this.allFields[i].fieldId];
            }

            if(value == null || value == undefined || (""+value).length == 0) {
                if(this.allFields[i].displayIfTrueFieldId && this.allFields[i].displayIfTrueFieldId.length > 0) {
                    $("#" + this.allFields[i].fieldId + "-parent-div").hide();
                }
    
                if(this.allFields[i].displayIfFalseFieldId && this.allFields[i].displayIfFalseFieldId.length > 0) {
                    $("#" + this.allFields[i].fieldId + "-parent-div").hide();
                }
            }   
        }
    }

    WebFormsView.prototype.hideAllConditionalSubsections = function(options) {
        for(var i=0;i<this.sections.length;i++) {
            for(var j=0;j<this.sections[i].subSections.length;j++) {
                if(this.sections[i].subSections[j].displayIfTrueFieldId && this.sections[i].subSections[j].displayIfTrueFieldId.length > 0) {
                    $("#" + this.sections[i].subSections[j].displayIfTrueFieldId + "-subsection-" + this.sections[i].subSections[j].id).hide();
                    this.updateFieldMandatoryStateOnSubsectionVisiblity({
                        sid: i,
                        ssid: j,
                        state: false
                    });
                }

                if(this.sections[i].subSections[j].displayIfFalseFieldId && this.sections[i].subSections[j].displayIfFalseFieldId.length > 0) {
                    $("#" + this.sections[i].subSections[j].displayIfFalseFieldId + "-subsection-" + this.sections[i].subSections[j].id).hide();
                    this.updateFieldMandatoryStateOnSubsectionVisiblity({
                        sid: i,
                        ssid: j,
                        state: false
                    });
                }
            }
        }
    }

    WebFormsView.prototype.updateFieldMandatoryStateOnSubsectionVisiblity = function(options) {
        for(var j=0;j<this.sections[options.sid].subSections[options.ssid].fields.length;j++) {
            for(var i=0;i<this.allFields.length;i++) {
                if(this.allFields[i].fieldId == this.sections[options.sid].subSections[options.ssid].fields[j].fieldId) {
                    if(options.state && this.sections[options.sid].subSections[options.ssid].fields[j].isMandatory) {
                        this.allFields[i].isMandatory = true;
                    } else {
                        this.allFields[i].isMandatory = false;
                    }

                    if(this.allFields[i].fieldId == "custrecord_slxs_sap_additnl_universities") {
                        ////////console.log(this.allFields[i].fieldId, this.sections[options.sid].subSections[options.ssid].fields[j].isMandatory);
                    }

                    if(this.allFields[i].isChoiceField) {
                        if(this.allFields[i].isMandatory) {
                            $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title+" *"); 
                        } else {
                            $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                        }
                    } else {
                        if(this.allFields[i].isMandatory) {
                            ////////console.log("Adding * to label");
                            $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title+" *"); 
                        } else {
                            $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                        }
                    }
                }
            }
        }
    }

    WebFormsView.prototype.updateFieldMandatoryState = function(options) {
        for(var i=0;i<this.allFields.length;i++) {
            if(this.allFields[i].requiredIfTrueFieldId == options.fieldId) {
                if(options.state) {
                    this.allFields[i].isMandatory = true;
                    if(this.allFields[i].isChoiceField) {
                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title+" *"); 
                    } else {
                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title+" *"); 
                    }
                } else {
                    this.allFields[i].isMandatory = false;
                    if(this.allFields[i].isChoiceField) {
                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                    } else {
                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                    }
                }
            }

            if(this.allFields[i].requiredIfFalseFieldId == options.fieldId) {
                if(!options.state) {
                    this.allFields[i].isMandatory = true;
                    if(this.allFields[i].isChoiceField) {
                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title+" *"); 
                    } else {
                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title+" *"); 
                    }
                } else {
                    this.allFields[i].isMandatory = false;
                    if(this.allFields[i].isChoiceField) {
                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                    } else {
                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                    }
                }
            }
        }
    }

    WebFormsView.prototype.restoreOriginalFieldMandatoryState = function(options) {
        for(var i=0;i<this.allFields.length;i++) {
            if(this.allFields[i].fieldId == options.fieldId) {
                for(var j=0;j<this.sections.length;j++) {
                    for(var k=0;k<this.sections[j].subSections.length;k++) {
                        for(var x=0;x<this.sections[j].subSections[k].fields.length;x++) {
                            if(this.sections[j].subSections[k].fields[x].fieldId == this.allFields[i].fieldId) {
                                this.allFields[i].isMandatory = this.sections[j].subSections[k].fields[x].isMandatory;
    
                                if(this.allFields[i].isChoiceField) {
                                    if(this.allFields[i].isMandatory) {
                                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title+" *"); 
                                    } else {
                                        $("#"+this.allFields[i].fieldId+"-label-title").html(this.allFields[i].title); 
                                    }
                                } else {
                                    if(this.allFields[i].isMandatory) {
                                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title+" *"); 
                                    } else {
                                        $("#"+this.allFields[i].fieldId+"-label").html(this.allFields[i].title); 
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    WebFormsView.prototype.updateHiddenSectionFields = function() {
        this.restoreOriginalFieldMandatoryState();

        for(var i=0;i<this.allFields.length;i++) {
            for(var j=0;j<this.hiddenSubSections.length;j++) {
                if(this.allFields[i].subSectionId == this.hiddenSubSections[j]) {
                    this.allFields[i].isMandatory = false;
                }
            }
        }
    }

    WebFormsView.prototype.prepopulateFormValues = function() {
        var self = this;
        
        //////////////console.log(this.customerAddresses);

        //<input value="" ref-country-code="" selected-id="1">
        for(var i=0;i<this.allFields.length;i++) {
            if(this.allFields[i].hasDefaultValue) {
                try {
                    if(this.allFields[i].entityFieldId == "country") {
                        for(var y=0;y<this.countries.length;y++) {
                            if(this.countries[y].name == this.allFields[i].defaultValue) {
                                this.allFields[i].value = this.countries[y].code;
                                $("#" + this.allFields[i].fieldId).attr("ref-country-code", this.countries[y].code);
                                $("#" + this.allFields[i].fieldId).attr("selected-id", this.getCountryId(this.countries[y].name));
                                $("#" + this.allFields[i].fieldId).val(this.countries[y].name);
                                $("#" + this.allFields[i].fieldId).trigger("change");
                                
                                setTimeout(function(i, y) {
                                    $("#" + self.allFields[i].fieldId).attr("ref-country-code", self.countries[y].code);
                                    $("#" + self.allFields[i].fieldId).attr("selected-id", self.getCountryId(self.countries[y].name));
                                    $("#" + self.allFields[i].fieldId).val(self.countries[y].name);

                                    ////////////console.log($("#" + self.allFields[i].fieldId).attr("selected-id"));
                                }, 100, i, y);

                                break;
                            }
                        }
                    }   
                } catch (error) {
                    console.error("(prepopulateFormValues) parsing countries. Error: " + error);
                }
            }

            if(this.allFields[i].prepopulateEntityField) {
                if(this.allFields[i].subSectionText == "Present Address" || this.allFields[i].sectionText == "Present Address") {
                    for(var x=0;x<this.customerAddresses.length;x++) {
                        if(this.customerAddresses[x].addressType == 1) {
                            var addressObj = this.customerAddresses[x];

                            if(this.allFields[i].entityFieldId == "country") {
                                if(addressObj && addressObj.country) {
                                    this.allFields[i].value = addressObj.country;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.countryText);
                                    $("#" + this.allFields[i].fieldId).attr("ref-country-code", addressObj.country);
                                    $("#" + this.allFields[i].fieldId).attr("selected-id", addressObj.countryId);
                                    $("#" + this.allFields[i].fieldId).trigger("change");
                                    ////////////console.log("prepopulating present address");
                                    ////////////console.log($("#" + this.allFields[i].fieldId).attr("selected-id"));
                                }
                            } else if(this.allFields[i].entityFieldId == "addr1") {
                                if(addressObj && addressObj.addr1) {
                                    this.allFields[i].value = addressObj.addr1;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.addr1);
                                }
                            } else if(this.allFields[i].entityFieldId == "addr2") {
                                if(addressObj && addressObj.addr2) {
                                    this.allFields[i].value = addressObj.addr2;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.addr2);
                                }
                            } else if(this.allFields[i].entityFieldId == "city") {
                                if(addressObj && addressObj.city) {
                                    this.allFields[i].value = addressObj.city;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.city);
                                }
                            } else if(this.allFields[i].entityFieldId == "zip") {
                                if(addressObj && addressObj.zip) {
                                    this.allFields[i].value = addressObj.zip;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.zip);
                                }
                            }
                        }
                    }

                    for(var x=0;x<this.customerAddresses.length;x++) {
                        if(this.customerAddresses[x].addressType == 1) {
                            var addressObj = this.customerAddresses[x];

                            if(this.allFields[i].entityFieldId == "state") {
                                if(addressObj && addressObj.state) {
                                    this.allFields[i].value = addressObj.state;
                                    var self = this;

                                    setTimeout(function(self, addressObj, i) {
                                        $("#" + self.allFields[i].fieldId).val(addressObj.stateText);
                                        $("#" + self.allFields[i].fieldId).attr("ref-country-code", addressObj.state);
                                        $("#" + self.allFields[i].fieldId).attr("selected-id", self.getStateId(addressObj.stateText));
                                    }, 200, self, addressObj, i);

                                    break;
                                }
                            }
                        }
                    }
                } else if(this.allFields[i].subSectionText == "Permanent Address" || this.allFields[i].sectionText == "Permanent Address") {
                    for(var x=0;x<this.customerAddresses.length;x++) {
                        if(this.customerAddresses[x].addressType == 2) {
                            var addressObj = this.customerAddresses[x];

                            if(this.allFields[i].entityFieldId == "country") {
                                if(addressObj && addressObj.country) {
                                    this.allFields[i].value = addressObj.country;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.countryText);
                                    $("#" + this.allFields[i].fieldId).attr("ref-country-code", addressObj.country);
                                    $("#" + this.allFields[i].fieldId).attr("selected-id", addressObj.countryId);
                                    $("#" + this.allFields[i].fieldId).trigger("change");
                                    ////////////console.log("prepopulating permanent address");
                                    ////////////console.log($("#" + this.allFields[i].fieldId).attr("selected-id"));
                                }
                            } else if(this.allFields[i].entityFieldId == "addr1") {
                                if(addressObj && addressObj.addr1) {
                                    this.allFields[i].value = addressObj.addr1;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.addr1);
                                }
                            } else if(this.allFields[i].entityFieldId == "addr2") {
                                if(addressObj && addressObj.addr2) {
                                    this.allFields[i].value = addressObj.addr2;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.addr2);
                                }
                            } else if(this.allFields[i].entityFieldId == "city") {
                                if(addressObj && addressObj.city) {
                                    this.allFields[i].value = addressObj.city;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.city);
                                }
                            } else if(this.allFields[i].entityFieldId == "zip") {
                                if(addressObj && addressObj.zip) {
                                    this.allFields[i].value = addressObj.zip;
                                    $("#" + this.allFields[i].fieldId).val(addressObj.zip);
                                }
                            }
                        }
                    }

                    for(var x=0;x<this.customerAddresses.length;x++) {
                        if(this.customerAddresses[x].addressType == 2) {
                            var addressObj = this.customerAddresses[x];
                            //////////////////console.log({addressObj});

                            if(this.allFields[i].entityFieldId == "state") {
                                if(addressObj && addressObj.state) {
                                    this.allFields[i].value = addressObj.state;
                                    var self = this;

                                    setTimeout(function(self, addressObj, i) {
                                        $("#" + self.allFields[i].fieldId).val(addressObj.stateText);
                                        $("#" + self.allFields[i].fieldId).attr("ref-country-code", addressObj.state);
                                        $("#" + self.allFields[i].fieldId).attr("selected-id", self.getStateId(addressObj.stateText));
                                        //////////////console.log("State id", self.getStateId(addressObj.stateText));
                                        //////////////console.log("State selected id set.");
                                    }, 300, self, addressObj, i);

                                    break;
                                }
                            }
                        }
                    }
                }

                var value = this.allFields[i].value;

                if (this.allFields[i].isDocument) {
                    this.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.individual-file-box').find(".f-name").html(value.text);
                    this.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.individual-file-box').find(".f-size").html(value.size);

                    this.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.upload-image-box').css({'background-color':'#fff', 'border-style':'solid'});
                    this.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.uploaded-files-box').show();
                    this.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.upload-image').hide();
                }
                
                try {
                    if(isNaN(value)) {
                        if(this.allFields[i].type && this.allFields[i].type == "multiselect") {
                            for(var m=0;this.allFields[i].values && m<this.allFields[i].values.length;m++) {
                                this.allFields[i].values[m]['selected'] = false;
                            }
    
                            for(var n=0;this.allFields[i].value && n<this.allFields[i].value.length;n++) {
                                var receivedValue = this.allFields[i].value[n].value;
                            
                                for(var m=0;this.allFields[i].values && m<this.allFields[i].values.length;m++) {
                                    var valueToCompare = this.allFields[i].values[m].id;
    
                                    if(receivedValue == valueToCompare) {
                                        this.allFields[i].values[m].selected = true;
                                    }
                                }
                            }
                        }
                    }   
                } catch (error) {
                    console.error("(prepopulateFormValues) processing multiselect values. Error: " + error);
                }
            }

            if(this.hasApplicationData) {
                if(this.allFields[i].entityFieldId == "country") {
                    var value = null;

                    if(self.hasApplicationData) {
                        value = self.applicationData[this.allFields[i].fieldId];
                    } else {
                        value = self.allFields[i].value;
                    }
    
                    //////////////console.log("Country", value);
                    if(value != null && value != undefined && (""+value).length > 0) {
                        $("#" + this.allFields[i].fieldId).attr("ref-country-code", this.getCountryCode(value.text));
                        $("#" + this.allFields[i].fieldId).trigger("change");
                        ////////////console.log("setting application data");
                        ////////////console.log($("#" + this.allFields[i].fieldId).attr("selected-id"));
                    }
                } else if(this.allFields[i].isDocument && !this.isReadOnly) {
                    ////console.log("this.allFields[i].documentTransportTo", this.allFields[i].documentTransportTo);

                    if(this.allFields[i].documentTransportTo == "Customer") {
                        value = self.applicationData[this.allFields[i].entityFieldId];
                    } else {
                        value = self.applicationData[this.allFields[i].fieldId];
                    }    
                    
                    this.allFields[i].value = value;

                    ////console.log("value", value);

                    self.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.individual-file-box').find(".f-name").html(value.name);
                    self.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.individual-file-box').find(".f-size").html(value.size);

                    self.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.upload-image-box').css({'background-color':'#fff', 'border-style':'solid'});
                    self.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.uploaded-files-box').show();
                    self.$("#"+this.allFields[i].fieldId+"-upload-document").parent().find('.upload-image').hide();
                    
                }
            }

            if(this.allFields[i].entityFieldId == "firstname") {
                if(this.firstName && this.firstName.length > 0) {
                    this.allFields[i].value = this.firstName;
                    this.$("#" + this.allFields[i].fieldId).val(this.firstName);
                }
            }

            if(this.allFields[i].entityFieldId == "lastname") {
                if(this.lastName && this.lastName.length > 0) {
                    this.allFields[i].value = this.lastName;
                    this.$("#" + this.allFields[i].fieldId).val(this.lastName);
                }
            }

            var value = null;

            if(this.allFields[i].hasDefaultValue) {
                value = this.allFields[i].defaultValue;
            }
            
            if(this.hasApplicationData) {
                value = this.applicationData[this.allFields[i].fieldId];
            } 
            
            if(value == null || value == undefined || (""+value).length == 0) {
                value = this.allFields[i].value;
            }

            if(this.allFields[i].isDropDown && (value != null && value != undefined && (""+value).length > 0)) {
                ////////console.log(this.allFields[i], value);

                var id = null;

                if(this.allFields[i].entityFieldId != "country" && this.allFields[i].entityFieldId != "state") {
                    for(var x=0;x<this.allFields[i].values.length;x++) {
                        var compareTo = null;

                        if(value instanceof Object) {
                            compareTo = value.value;
                        } else {
                            compareTo = value;
                        }

                        if(this.allFields[i].values[x].text == compareTo) {
                            ////////console.log("Selected-id set.", this.allFields[i].values[x].id);
                            this.$("#"+this.allFields[i].fieldId).attr("selected-id", this.allFields[i].values[x].id);
                            this.$("#"+this.allFields[i].fieldId).val(this.allFields[i].values[x].text);
                            
                            setTimeout(function(i, x) {
                                self.$("#"+self.allFields[i].fieldId).trigger("change");
                                $("#" + self.allFields[i].fieldId).val(self.allFields[i].values[x].text);
                            }, 500, i, x);
                            break;
                        }
                    }
                }
            }
        }

        //////////////////console.log("Email: " + this.email);
        if(this.email && this.email.length > 0) {
            //////////////////console.log("Setting the email field...");


            if(this.isReadOnly) {
                $("#email").html(this.email);
            } else {
                $("#email").val(this.email);
                $("#email").prop('disabled', true);
            }
        }

        self.postDatafetchActions();
        //self.render();
    }

    WebFormsView.prototype.getEvents = function () {
        return {
            "click [data-action='show-hide-me']": "showHideMe",
            'focusout [data-focusout="password-focusout"]': 'passwordFocusout',
            'focusout [data-focusout="confirm-password-focusout"]': 'confirmPasswordFocusout',
            "focus [data-focus='searchable-input-focus']": "searchableInputFocus",
            "click [data-action='searchable-input-focus']": "toggleDropdown",

            'click [data-action="upload-click"]': 'uploadClick',
            'change [data-change="file-change"]': "fileChange",
            'click [data-action="remove-image-click"]': "removeImageClick",

            'focusout [data-focusout="m360-slxc-wf-validate-dropdown"]': "validateDropdown",
        };
	}

    WebFormsView.prototype.validateDropdown = function (e) {
        var fieldId = e.currentTarget.id;
        var value = this.$(e.currentTarget).val();
        
        if(value && (""+value).length > 0) {
            value = value.replace(/&amp;/g, "&");
        }
        
        var code = null;
        var entityFieldId = null;
        var field = null;
        
        for(var i=0;i<this.allFields.length;i++) {
            if(this.allFields[i].fieldId == fieldId) {
                field = this.allFields[i];
                break;
            }
        }
        
        if(field != null) {
            var contains = false;
            var selectedId = null;

            for(var i=0;i<field.values.length;i++) {
                var valueToCompare = field.values[i].text;
                entityFieldId = field.entityFieldId;
                
                if(entityFieldId == "state" || entityFieldId == "altstate") {
                    valueToCompare = field.values[i].name;
                }

                if((""+valueToCompare).toLowerCase() == (""+value).toLowerCase()) {
                    console.log(valueToCompare + "==" + value);

                    contains = true;
                    selectedId = field.values[i].id;
                    value = valueToCompare;
                    
                    if(entityFieldId == "state" || entityFieldId == "altstate") {
                        code = this.getStateCode(value);
                    } else if(entityFieldId == "country" || entityFieldId == "altcountry") {
                        code = this.getCountryCode(value);
                    }

                    break;
                }
            }

            if(!contains) {
                this.$(e.currentTarget).attr('selected-id', '');
                this.$(e.currentTarget).attr('ref-country-code', '');
                this.$(e.currentTarget).val('');
            } else {
                this.$(e.currentTarget).val(value);
                
                if(selectedId) {
                    this.$(e.currentTarget).attr('selected-id', selectedId);
                }
                
                if(entityFieldId == "state" || entityFieldId == "altstate" || entityFieldId == "country" || entityFieldId == "altcountry") {
                    this.$(e.currentTarget).attr('ref-country-code', code);
                }
            }
        }
    },

    WebFormsView.prototype.uploadClick = function (e) {
        this.$(e.currentTarget).siblings('input[type="file"]').trigger('click');
    },

    WebFormsView.prototype.readFileName = function(input,e) {
        if(input.files && input.files[0]) {
            var size = input.files[0].size;
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

            const i = Math.floor(Math.log(size) / Math.log(k));
            var image_size = (size / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];

            var tenMb = 10 * k;
            var kbSize = (size / k);
            kbSize = ((Math.round(kbSize * 100) / 100));

            if (input.files && input.files[0] && kbSize <= tenMb) {
                var self = this;
                var uploadedDoc = input.files[0];

                var reader = new FileReader();
                reader.onloadend = function() {
                    var k = parseInt(Math.floor(Math.log(uploadedDoc.size) / Math.log(1024)));
                    var size =  kbSize;
                    var name = uploadedDoc.name;
                    uploadedDoc = (reader.result).split('base64,')[1];
                    var fieldId = self.$("#"+e.currentTarget.id).attr("data-field-id");

                    ////////////console.log({fieldId});

                    for(var x=0;x<self.allFields.length;x++) {
                        if(self.allFields[x].fieldId == fieldId) {
                            self.allFields[x].value = {
                                uploadedDoc: uploadedDoc,
                                name: name,
                                size: size
                            };

                            ////////////console.log(self.allFields[x].value);
                            break;
                        }
                    }
                }

                reader.readAsDataURL(uploadedDoc);

                var image_name = input.files[0].name;

                ////////////console.log(image_name);
                ////////////console.log(e.currentTarget.id);
                
                this.$("#"+e.currentTarget.id).parent().find('.individual-file-box').find(".f-name").html(image_name);
                this.$("#"+e.currentTarget.id).parent().find('.individual-file-box').find(".f-size").html(image_size);

                this.$("#"+e.currentTarget.id).parent().find('.upload-image-box').css({'background-color':'#fff', 'border-style':'solid'});
                this.$("#"+e.currentTarget.id).parent().find('.uploaded-files-box').show();
                this.$("#"+e.currentTarget.id).parent().find('.upload-image').hide();
            }
        }
    },

    WebFormsView.prototype.removeImageClick = function (e) {
        var fieldId = this.$(e.currentTarget).attr("data-field-id");
        ////console.log("fieldId", fieldId);
        if(fieldId) {
            for(var i=0;i<this.allFields.length;i++) {
                if(this.allFields[i].fieldId == fieldId) {
                    ////console.log("this.allFields[i].value", this.allFields[i].value);
                    this.allFields[i].value = null;
                    ////console.log("this.allFields[i].value", this.allFields[i].value);
                    break;
                }
            }
        }

        this.$(e.currentTarget).parents(".upload-image-box").find(".change-image").val('');
        this.$(e.currentTarget).parents(".upload-image-box").css({'background-color':'#fafafa', 'border-style':'dashed'});
        this.$(e.currentTarget).parents(".upload-image-box").find('.uploaded-files-box').hide();
        this.$(e.currentTarget).parents(".upload-image-box").find('.upload-image').show();
    },

    WebFormsView.prototype.fileChange = function (e) {
        this.readFileName(e.target, e);
    },
	
    WebFormsView.prototype.toggleDropdown = function (e) {
        if(this.dropdownToggle) {
            this.$(e.currentTarget).removeClass("fa-angle-up");
            this.$(e.currentTarget).addClass("fa-angle-down");

            this.$(e.currentTarget).closest(".searchable").find("ul").hide();
            this.$(e.currentTarget).closest(".searchable").find("ul li").hide();
        } else {
            this.$(e.currentTarget).removeClass("fa-angle-down");
            this.$(e.currentTarget).addClass("fa-angle-up");

            this.$(e.currentTarget).closest(".searchable").find("ul").show();
            this.$(e.currentTarget).closest(".searchable").find("ul li").show();
        }

        this.dropdownToggle = !this.dropdownToggle;
    },

    WebFormsView.prototype.searchableInputFocus = function (e) {
        this.$(e.currentTarget).removeClass("fa-angle-down");
        this.$(e.currentTarget).addClass("fa-angle-up");

        this.$(e.currentTarget).closest(".searchable").find("ul").show();
        this.$(e.currentTarget).closest(".searchable").find("ul li").show();
    },

    WebFormsView.prototype.confirmPasswordFocusout = function (e) {
        this.$('#confirm-password').siblings("p").removeClass("err");
        if (this.$(e.currentTarget).val() == '' || this.$(e.currentTarget).val() != this.$("#password").val()) {
            this.$('#confirm-password').siblings("p").addClass("err");
        }
        else {
            this.$('#confirm-password').siblings("p").removeClass("err");
        }
    },

    WebFormsView.prototype.passwordFocusout = function (e) {
        this.$('#password').siblings("p").removeClass("err");
        if (this.$(e.currentTarget).val() == '') {
            this.$('#password').siblings("p").addClass("err");
        } else {
            var regex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,12}$/;

            if (!regex.test(this.$(e.currentTarget).val())) {					
                this.$('#password').siblings("p").addClass("err");
            } else {
                this.$('#password').siblings("p").removeClass("err");
            }
        }
    },

    WebFormsView.prototype.showHideMe = function (e) {
        if(this.$(e.currentTarget).hasClass('show-me')) {
            this.$(e.currentTarget).removeClass("show-me");
            this.$(e.currentTarget).addClass("hide-me");

            this.$(e.currentTarget).find("i").removeClass("fa-eye-slash");
            this.$(e.currentTarget).find("i").addClass("fa-eye");
            
            this.$(e.currentTarget).siblings("input").prop("type","text");
        }
        else{
            this.$(e.currentTarget).removeClass("hide-me");
            this.$(e.currentTarget).addClass("show-me");

            this.$(e.currentTarget).find("i").addClass("fa-eye-slash");
            this.$(e.currentTarget).find("i").removeClass("fa-eye");

            this.$(e.currentTarget).siblings("input").prop("type","password");
        }
    },

    WebFormsView.prototype.prepareSubSectionStatus = function() {
        this.completedSubSections = [];
        
        for(var i=0;i<this.sections.length;i++) {
            var currentSection = this.sections[i];

            if(currentSection.hasSubSections) {
                for(var j=0;j<currentSection.subSections.length;j++) {
                    var currentSubSection = currentSection.subSections[j];
            
                    var totalMandatoryFields = 0;
                    var totalFilledFields = 0;

                    for(var k=0;k<this.allFields.length;k++) {
                        if(this.allFields[k].subSectionId == currentSubSection.id) {
                            if(this.allFields[k].isMandatory) {
                                totalMandatoryFields++;
        
                                if(this.allFields[k].isChoiceField) {    
                                    if($('#'+this.allFields[k].fieldId).is(":checked")) {
                                        totalFilledFields++;
                                    } 
                                } else {
                                    var value = $('#'+this.allFields[k].fieldId).val();
                
                                    if(value != null && value.length > 0) {
                                        totalFilledFields++;
                                    }
                                }
                            }
                        }
                    }

                    if(totalMandatoryFields == totalFilledFields) {
                        this.completedSubSections.push(currentSubSection.id);
                    }
                }
            }
        }
    }

    WebFormsView.prototype.validateLoginFields = function() {
        var isDataValid = true;

        if(!this.isLoggedIn) {
            var password = $("#password").val();
            var confirmPassword = $("#confirm-password").val();
            if(password.length == 0) {
                isDataValid = false;
                $('#password').siblings("p").addClass("err");
                $('#confirm-password').siblings("p").removeClass("err");
            } else if(password != confirmPassword) {
                isDataValid = false;
                $('#password').siblings("p").addClass("err");
                $('#confirm-password').siblings("p").addClass("err");
            } else {
                $('#password').siblings("p").removeClass("err");
                $('#confirm-password').siblings("p").removeClass("err");
            }
        }

        return isDataValid;
    }

    WebFormsView.prototype.validateFields = function() {
        var isDataValid = true;

        for(var i=0;i<this.allFields.length;i++) {
            var currentField = this.allFields[i];
            $('#'+currentField.fieldId).siblings("p").html("This Field is required");
            
            if(currentField.isMandatory) {
                if(currentField.isChoiceField) {
                    if(!($('#'+currentField.fieldId).is(":checked"))) {
                        $('#'+currentField.fieldId).siblings("p").addClass("err");
                        isDataValid = false;
                    } else {
                        $('#'+currentField.fieldId).siblings("p").removeClass("err");
                    }
                } else {
                    var value = $('#'+currentField.fieldId).val();

                    if(value == null || value.length == 0) {
                        $('#'+currentField.fieldId).siblings("p").addClass("err");
                        isDataValid = false;
                    } else if(currentField.maxLength.length > 0 || currentField.minLength.length > 0) {
                        if(currentField.maxLength.length > 0 && currentField.minLength.length > 0) {
                            if(value.length < currentField.minLength || value.length > currentField.maxLength) {
                                $('#'+currentField.fieldId).siblings("p").addClass("err");
                                $('#'+currentField.fieldId).siblings("p").html("Invalid length");
                                isDataValid = false;
                            }    
                        } else if(currentField.maxLength.length > 0) {
                            if(value.length < currentField.minLength) {
                                $('#'+currentField.fieldId).siblings("p").addClass("err");
                                $('#'+currentField.fieldId).siblings("p").html("Invalid length");
                                isDataValid = false;
                            }
                        } else {
                            if(value.length > currentField.maxLength) {
                                $('#'+currentField.fieldId).siblings("p").addClass("err");
                                $('#'+currentField.fieldId).siblings("p").html("Invalid length");
                                isDataValid = false;
                            }
                        }
                    } else {
                        $('#'+currentField.fieldId).siblings("p").removeClass("err");
                        $('#'+currentField.fieldId).siblings("p").html("This Field is required");
                    }
                }
            }
        }
        return isDataValid;
    }

    WebFormsView.prototype.getContext = function () {
        return {
            isLoading: this.isLoading,
            isReadOnly: this.isReadOnly,

            isLoggedIn: this.isLoggedIn,
            requiredLoginBox: this.requiredLoginBox,

            totalColumns: this.totalColumns,
            sections: this.sections,
            isThreeCols: this.isThreeCols,

            icons: {
                icnRemoveDoc: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/icn-remove-md.png')),
                icnDocUploaded: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/group-3.png')),
                icnUploadLg: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/icons-set-4/img-upload.png')),
            }
						
        }
    }

    return WebFormsView;
});


define("Saralux.Core.CoreFunctionality", [
	"Saralux.Core.MyPortal",
	"Saralux.Core.PublicationSubscription",
	//"Saralux.Core.Teams",
	"Saralux.Core.Surveys",
	"Saralux.Core.Tests",
	"Saralux.Core.Sponsorship",
	"Saralux.Core.AttemptTest",
	"Saralux.Core.WebDirectory",
	"Saralux.Core.AffiliateDirectory",

	"Saralux.Core.Cart",
	"Saralux.Core.Checkout",
	"Saralux.Core.WebForms",
	"Saralux.Core.SSO",

	"Saralux.Core.DashboardSV",
	"Saralux.Core.OrdersSV",
	"Saralux.Core.PaymentDueSV",
	"Saralux.Core.PaymentDueSVNew",
	"Saralux.Core.TasksSV",
	//"Saralux.Core.PoliciesSV", Archived
	"Saralux.Core.MyPublicationsSV",
	"Saralux.Core.ReportsSV",
	"Saralux.Core.ChaptersSV",
	"Saralux.Core.SurveysSV",
	"Saralux.Core.TestsSV",
	"Saralux.Core.MyTestsSV",
	"Saralux.Core.ManageSponsorshipSV",
	"Saralux.Core.CommunitiesSV",
	"Saralux.Core.MediaSeriesSV",

	"Saralux.Core.CommonLibraries.Utilities.Model",
	"Saralux.Core.CommonLibraries.CAPI.Model",
	'Saralux.Core.CommonLibraries.General',

	"CoreFunctionality.HandlebarsHelpers",

	"Utils",
	"jQuery",
], function (
	SaraluxCoreMyPortal,
	SaraluxCorePublicationSubscription,
	//SaraluxCoreTeams,
	SaraluxCoreSurveys,
	SaraluxCoreTests,
	SaraluxCoreSponsorship,
	SaraluxCoreAttemptTest,
	SaraluxCoreWebDirectory,
	SaraluxCoreAffiliateDirectory,

	SaraluxCoreCart,
	SaraluxCoreCheckout,
	SaraluxCoreWebForms,
	SaraluxCoreSSO,

	SaraluxCoreDashboardSV,
	SaraluxCoreOrdersSV,
	SaraluxCorePaymentDueSV,
	SaraluxCorePaymentDueSVNew,
	SaraluxCoreTasksSV,
	//SaraluxCorePoliciesSV,
	SaraluxCoreMyPublicationsSV,
	
	SaraluxCoreReportsSV,
	SaraluxCoreChaptersSV,
	SaraluxCoreSurveysSV,
	SaraluxCoreTestsSV,
	SaraluxCoreMyTestsSV,
	SaraluxCoreManageSponsorshipSV,
	SaraluxCoreCommunitiesSV,
	SaraluxCoreMediaSeriesSV,

	CoreCLUtilitiesModel,
	CoreCLCAPIModel,
	CoreCLGeneral,

	CoreFunctionalityHandlebarsHelpers,

	Utils,
	jQuery
) {
	"use strict";

	return {
		mountToApp: function mountToApp(container) {
			try {
				var environment_component = container.getComponent('Environment');

				var isLicenseValid = CoreCLGeneral.isLicenseValid("core", environment_component);

				if(isLicenseValid) {
					var Layout = container.getComponent("Layout");
					var PLP = container.getComponent("PLP");
					var Environment = container.getComponent("Environment");

					if (Environment) {
						this.coreCLUtils = CoreCLUtilitiesModel.getInstance();
						this.coreCLUtils.set("environment_component", Environment);
					}

					// PDP enhancement for displaying stock information
					if (Layout) {
						this.setupPDPEnhancement(Layout, PLP);
					}

					// jQuery custom extensions
					this.setupJQueryExtensions();

					// (TO-DO) "Shipping address required" issue solution:
					// this.copyShippingAddressOnCheckout(container);

					// (ON-HOLD) To hide the Invoice option from Checkout flow:
					// this.hideInvoiceOption(container);

					if(Utils.isInCheckout()) {
						var autoRedirectKeyword = environment_component.getConfig('CPRAutoRedirectKeyword');
						if(autoRedirectKeyword) {
							var redirectPath = this.getRedirectPath(autoRedirectKeyword);
							if(redirectPath) {
								CoreCLGeneral.setCookie('M360AutoRedirect', redirectPath, 30);
							} else {
								var autoRedirectPath = CoreCLGeneral.getCookie('M360AutoRedirect');
								if(autoRedirectPath) {
									CoreCLGeneral.deleteCookie("M360AutoRedirect");
									var rtcLink = environment_component.getConfig("CPRRedirectLink"); // Redirect automatically to Community Page
									window.location.href = rtcLink;
								}
							}
						}
					}

					// Register custom Handlebars helpers
					CoreFunctionalityHandlebarsHelpers.registerCustomHandlebarsHelpers();

					// Public Modules
					SaraluxCoreMyPortal.mountToApp(container);
					SaraluxCorePublicationSubscription.mountToApp(container);
					
					//SaraluxCoreTeams.mountToApp(container); Archived
					SaraluxCoreSurveys.mountToApp(container);
					SaraluxCoreTests.mountToApp(container);
					SaraluxCoreSponsorship.mountToApp(container);
					SaraluxCoreAttemptTest.mountToApp(container);
					SaraluxCoreWebDirectory.mountToApp(container);
					SaraluxCoreAffiliateDirectory.mountToApp(container);;
					
					SaraluxCoreCart.mountToApp(container);
					SaraluxCoreCheckout.mountToApp(container);
					SaraluxCoreWebForms.mountToApp(container);
					SaraluxCoreSSO.mountToApp(container);

					// My Portal Modules
					SaraluxCoreDashboardSV.mountToApp(container);
					SaraluxCoreOrdersSV.mountToApp(container);
					SaraluxCorePaymentDueSV.mountToApp(container);
					//SaraluxCorePaymentDueSVNew.mountToApp(container);
					SaraluxCoreTasksSV.mountToApp(container);
					//SaraluxCorePoliciesSV.mountToApp(container);
					SaraluxCoreMyPublicationsSV.mountToApp(container);
					
					SaraluxCoreReportsSV.mountToApp(container);
					SaraluxCoreChaptersSV.mountToApp(container);
					SaraluxCoreSurveysSV.mountToApp(container);
					SaraluxCoreTestsSV.mountToApp(container);
					SaraluxCoreMyTestsSV.mountToApp(container);
					SaraluxCoreManageSponsorshipSV.mountToApp(container);
					SaraluxCoreCommunitiesSV.mountToApp(container);
					SaraluxCoreMediaSeriesSV.mountToApp(container);
				}
			} catch (e) {
				console.error("Error: Saralux.Core.CoreFunctionality", e.toString());
			}
		},

		setupPDPEnhancement: function setupPDPEnhancement(Layout, PLP) {
			// Adding stock information to Facets.ItemCell.View which will be consumed by the theme...
			// ...to display stock status
			Layout.addToViewContextDefinition(
				"Facets.ItemCell.View",
				"isInStock",
				"boolean",
				function (context) {
					// Create a copy of the model so that it's easy to query the current item's data from it
					var model = _.find(PLP.getItemsInfo(), function (item) {
						return item.internalid == context.itemId;
					});

					if (model) {
						return model.isinstock;
					} else {
						return false;
					}
				}
			);
		},

		setupJQueryExtensions: function setupJQueryExtensions() {
			// 1. Case Insensitive version of oob "contains" expression:-
			jQuery.expr[":"].icontains = function (a, i, m) {
				return jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
			};
		},

		// TO-DO
		copyShippingAddressOnCheckout: function copyShippingAddressOnCheckout(
			container
		) {
			var Checkout = container.getComponent("Checkout");
			if (Checkout) {
				console.log("event handler added");
				Checkout.on("afterShowContent", function () {
					Checkout.getCurrentStep().then(function (step) {
						console.log("step", step);
						if (step.step_group_name == "Review") {
							var CAPIModel = new CoreCLCAPIModel();
							CAPIModel.save({
								action: "COPY_ADDRESS",
							}).done(function (res) {
								console.log("res", res);
							});
						}
					});
				});
			}
		},

		// ON-HOLD
		hideInvoiceOption: function hideInvoiceOption(container) {
			// var Checkout = container.getComponent('Checkout');
			// if(Checkout) {
			/* Checkout.on("afterShowContent", function() {
					jQuery(".order-wizard-paymentmethod-selector-module-button-group").on('click', function() {
						jQuery(".order-wizard-paymentmethod-selector-module-button").each(function() {
							if(jQuery(this).attr('value') == 'invoice') {
								jQuery(this).remove();
							}
						});
					});
					jQuery(".order-wizard-paymentmethod-selector-module-button").each(function() {
						if(jQuery(this).attr('value') == 'creditcard') {
							jQuery(this).click();
						}
					});
					jQuery(".order-wizard-paymentmethod-selector-module-button").each(function() {
						if(jQuery(this).attr('value') == 'invoice') {
							jQuery(this).remove();
						}
					});
				}); */
			/* Checkout.on("beforeSetCurrentStep", function() {
					try {
						Checkout.addToViewContextDefinition('OrderWizard.Module.PaymentMethod.Selector', 'activeModules', 'array', function(context) {
							var newActiveModules = [];
		
							for(var i = 0; i < context.activeModules.length; i++) {
								if(context.activeModules[i].type == "invoice") {
									continue;
								} else {
									newActiveModules.push(context.activeModules[i]);
								}
							}
		
							context.newLength = newActiveModules.length;
		
							return newActiveModules;
						});
						Checkout.addToViewContextDefinition('OrderWizard.Module.PaymentMethod.Selector', 'activeModulesLengthGreaterThan1', 'number', function(context) {
							return context.newLength;
						});
					} catch (e) {
						console.error('error', e.toString());
						return;
					}
				}); */
			// }
		},

		getRedirectPath: function getRedirectPath(autoRedirectKeyword) {
			var redirectParam = "redirect";

			var sPageURL = window.location.search.substring(1),
				sURLVariables = sPageURL.split('&'),
				sParameterName,
				i;

			if(sPageURL.indexOf(autoRedirectKeyword) != -1) {
				for (i = 0; i < sURLVariables.length; i++) {
					sParameterName = sURLVariables[i].split('=');
	
					if (sParameterName[0] === redirectParam) {
						return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
					}
				}
			}
		}
	};
});


};

extensions['Saralux.M360_USKidsGolf_Extension.1.0.0'] = function(){

function getExtensionAssetsPath(asset){
return 'extensions/Saralux/M360_USKidsGolf_Extension/1.0.0/' + asset;
};

define('Saralux.USKidsGolfExtension.CustomRegistrationFields.View'
, [
    'SCView'
  , 'saralux_uskidsgolfextension_customregistrationfields.tpl'
  ]
,  function
    (
    SCViewModule
  , saralux_uskidsgolfextension_customregistrationfields
  )
{
  'use strict';

  var SCView = SCViewModule.SCView;

  function CustomRegistrationFieldsView (options) {
    SCView.call(this, options);

    this.model = options.model;

    this.template = saralux_uskidsgolfextension_customregistrationfields;
}

CustomRegistrationFieldsView.prototype = Object.create(SCView.prototype);
CustomRegistrationFieldsView.prototype.constructor = CustomRegistrationFieldsView;


CustomRegistrationFieldsView.prototype.getContext = function () {
  return {
      model: this.model
     // typeOptions: ExampleUserPreferencesHelper.getTypeOptions()
  }
}

return CustomRegistrationFieldsView


  
  
});


define(
	'Saralux.USKidsGolfExtension.CustomRegistrationFields'
,   [
		'Saralux.USKidsGolfExtension.CustomRegistrationFields.View'
	]
,   function (
		CustomRegistrationFieldsView
	)
{
	'use strict';

	return  {
		mountToApp: function mountToApp (container) {
			try{
			  var LoginRegisterPage = container.getComponent('LoginRegisterPage');
	  
			  if (LoginRegisterPage)
			  {
				LoginRegisterPage.addChildView('Register.CustomFields', function ()
				{
				  return new CustomRegistrationFieldsView
				  ({
					LoginRegisterPage: LoginRegisterPage
				  })
				});
	  
				
			  }
	  
	  
	  
	  
			}catch(e){
			  console.error('ERROR: RegistrationFields.LoginRegister.checkout', e.toString());
			}
	  
		   
	  
		  }
	};
});


};

extensions['ACS.ReCaptcha.4.2.2'] = function(){

function getExtensionAssetsPath(asset){
return 'extensions/ACS/ReCaptcha/4.2.2/' + asset;
};

define('ACS.ReCaptcha.Checkout.OrderWizard.Module', [
    'ReCaptcha',
    'jQuery',
    'ACS.ReCaptcha.Terms.View',
    'Wizard.Module',
    'underscore',
    'acs_recaptcha_checkout_order_wizard_module.tpl'
], function ACSReCaptchaCheckoutOrderWizardModule(
    ReCaptcha,
    jQuery,
    TermsView,
    WizardModule,
    _,
    acsRecaptchaCheckoutOrderWizardModuleTpl
) {
    'use strict';

    var Module = WizardModule.extend({
        template: acsRecaptchaCheckoutOrderWizardModuleTpl,
        childViews: {
            'ACS.OrderSubmit.TermsPlaceholder': function renderChildView() {
                return new TermsView({ mode: 'ordersubmit' });
            }
        },
        deferredInitialization: function deferredInitialization() {
            var self = this;
            this.recaptcha = new ReCaptcha({
                configKey: 'o'
            });
            self.cart.on('beforeSubmit', function beforeSubmitHandler() {
                var promise = jQuery.Deferred();
                // There are 2 order submit buttons.
                // Without this, in mobile, recaptcha shows funky when you click
                // on the button that is not inside the summary
                jQuery(document).on(
                    'focusin.acsrecaptchacheckout',
                    'iframe[src*="recaptcha"]',
                    function onFocusInOfRecaptcha(event) {
                        jQuery('html, body').animate({
                            scrollTop: jQuery(event.currentTarget).offset().top }, 500);
                    }
                );
                self.recaptcha.validate(
                    function onValidatedCaptcha(val) {
                        jQuery(document).off('.acsrecaptchacheckout');
                        self.$('[name="custbody_acs_wr_rc_response"]')
                            .val(val)
                            .trigger('change');
                        _.defer(function finalRender() {
                            promise.resolve();
                        });
                    },
                    function onError(e) {
                        jQuery(document).off('.acsrecaptchacheckout');
                        promise.reject(e);
                        _.defer(function onRecaptchaErrorScrollToMessage() {
                            jQuery('html, body').animate({
                                scrollTop: jQuery('[data-type="alert-placeholder-step"]').offset().top - 50 }, 500);
                        });
                    }
                );
                return promise;
            });
            this.checkout.on('afterShowContent', function afterShowContent() {
                jQuery.when(
                    self.checkout.getCurrentStep(),
                    self.recaptcha.getSetupPromise()
                ).then(function onStep(step) {
                    if (step.url === 'review') {
                        self.recaptcha.attachTo(self.$('#acs-recaptcha-checkout-placeholder')[0]);
                    }
                });
            });
        }
    });
    var originalRender = Module.prototype.render;

    Module.prototype.render = function render() {
        var self = this;
        var originalArgs = arguments;
        if (!this.recaptcha) {
            this.deferredInitialization();
        }
        originalRender.apply(self, originalArgs);
    };
    return Module;
});


define('ACS.ReCaptcha.GuestCheckoutHook', [
    'ReCaptcha',
    'jQuery',
    'underscore'
], function ACSReCaptchaGuestCheckoutHook(
    Recaptcha,
    jQuery,
    _
) {
    'use strict';

    return {
        mountToApp: function mountToApp(application) {
            var layout = application.getComponent('Layout');
            var recaptcha = new Recaptcha({
                configKey: 'g'
            });

            layout.on('afterShowContent', function afterShowContent(viewName) {
                var $form;
                var isCallReady = false;
                var $placeholder;
                var $neighbor;
                if (viewName !== 'LoginRegister.View') {
                    return;
                }
                _.defer(function deferShowContent() {
                    $placeholder = jQuery('<div class="login-register-checkout-as-guest-form-recaptcha-placeholder"></div>');
                    $neighbor = jQuery('.login-register-checkout-as-guest-form-messages');
                    $placeholder.insertAfter($neighbor);

                    recaptcha.attachTo($placeholder[0]);
                    $form = jQuery('.login-register-checkout-as-guest-form');

                    // No "beforeGuestCheckout" event - so using jQuery to hook instead
                    $form.submit(function wrapWithRecaptcha() {
                        if (isCallReady === true) {
                            return true;
                        }
                        recaptcha.validate(
                            function onValidatedCaptcha() {
                                isCallReady = true;
                                $form.submit();
                                isCallReady = false;
                            },
                            function onReCaptchaAbort(e) {
                                console.error(e);
                            }
                        );
                        return false;
                    });
                });
            });
        }
    };
});


define('ACS.ReCaptcha.LoginHook', [
    'ReCaptcha',
    'Backbone',
    'jQuery',
    'underscore'
], function ACSReCaptchaLoginHook(
    Recaptcha,
    Backbone,
    jQuery,
    _
) {
    'use strict';

    return {
        mountToApp: function mountToApp(application) {
            var loginRegisterComponent = application.getComponent('LoginRegisterPage');
            var layout = application.getComponent('Layout');
            var recaptcha = new Recaptcha({
                configKey: 'l'
            });

            layout.on('afterShowContent', function afterShowContent(viewName) {
                _.defer(function deferedShowContent() {
                    var $placeholder;
                    var $neighbor;
                    if (viewName !== 'LoginRegister.View') {
                        return;
                    }

                    $placeholder = jQuery('<div class="login-register-login-recaptcha"></div>');
                    $neighbor = jQuery('.login-register-login-form-messages');
                    $placeholder.insertAfter($neighbor);
                    recaptcha.attachTo($placeholder[0]);
                    loginRegisterComponent.on('beforeLogin', function beforeRegistration() {
                        var promise = jQuery.Deferred();
                        recaptcha.validate(function onSuccess() {
                            promise.resolve();
                        }, function onError(e) {
                            console.log(e);
                            promise.reject(e);
                        });
                        return promise;
                    });
                });
            });
        }
    };
});


define('ACS.ReCaptcha.OrderSubmitHook', [
    'ACS.ReCaptcha.Checkout.OrderWizard.Module'
], function ACSReCaptchaOrderSubmitHook(
    Module
) {
    'use strict';

    return {
        mountToApp: function mountToApp(application) {
            var checkout = application.getComponent('Checkout');
            checkout.addModuleToStep({
                step_url: 'review',
                module: {
                    id: 'acscaptcharesponse',
                    index: 99,
                    classname: 'ACS.ReCaptcha.Checkout.OrderWizard.Module',
                    options: {
                        container: '#wizard-step-content-right'
                    }
                }
            });
            Module.prototype.cart = application.getComponent('Cart');
            Module.prototype.checkout = checkout;
        }
    };
});


define('ACS.ReCaptcha.RegistrationHook', [
    'ReCaptcha',
    'Backbone',
    'jQuery',
    'underscore'
], function ACSReCaptchaRegistrationHook(
    Recaptcha,
    Backbone,
    jQuery,
    _
) {
    'use strict';

    return {
        mountToApp: function mountToApp(application) {
            var registerPage = application.getComponent('LoginRegisterPage');
            var layout = application.getComponent('Layout');
            var recaptcha = new Recaptcha({
                configKey: 'r'
            });

            layout.addChildView('Register.CustomFields', function captchaPlaceHolderView() {
                var View = Backbone.View.extend({
                    template: function template() {
                        return '<div data-id="Register-Recaptcha-Placeholder"></div>';
                    }
                });
                return new View();
            });

            layout.on('afterShowContent', function afterShowContent(viewName) {
                var $bestPlaceholder;
                var $finalPlaceholder;
                var $element;
                var $neighbor;
                if (viewName !== 'LoginRegister.View') {
                    return;
                }

                _.defer(function() {
                    /*
                   It's desired to hook onto Register.CustomFields child view.
                   However, not all themes have it, hence the workaround
                   of looking at the form validation placeholder otherwise
                    */
                    $bestPlaceholder = jQuery('[data-id="Register-Recaptcha-Placeholder"]');
                    if ($bestPlaceholder.length !== 0) {
                        $finalPlaceholder = $bestPlaceholder;
                    } else {
                        $element = jQuery('<div data-id="Register-Recaptcha-Placeholder"></div>');
                        $neighbor = jQuery('.login-register-register-form-messages');
                        $element.insertAfter($neighbor);
                        $finalPlaceholder = $element;
                    }

                    recaptcha.attachTo($finalPlaceholder[0]);
                });

            });

            registerPage.on('beforeRegister', function beforeRegistration() {
                var promise = jQuery.Deferred();
                recaptcha.validate(
                    function onSuccess() {
                        promise.resolve();
                    },
                    function onError(e) {
                        console.log(e);
                        promise.reject(e);
                    }
                );
                return promise;
            });
        }
    };
});


define('ACS.ReCaptcha.Terms.View', [
    'ReCaptcha.Adapter',
    'Backbone',
    'underscore',
    'acs_recaptcha_terms.tpl'
], function ACSReCaptchaTermsView(
    Adapter,
    Backbone,
    _,
    acsRecaptchaTermsTpl
) {
    'use strict';

    return Backbone.View.extend({
        template: acsRecaptchaTermsTpl,
        initialize: function initialize() {
            var self = this;
            Adapter.initializedPromise.then(function afterRecaptchaInit() {
                self.configuration = Adapter.configuration;
                self.render();
            });
        },
        getContext: function getContext() {
            var key = "This site is protected by reCAPTCHA and the Google <a target=\"_blank\" href=\"$(0)\">Privacy Policy</a> and <a target=\"_blank\" href=\"$(1)\">Terms of Service</a> apply.";
            var environmentComponent = this.application.getComponent('Environment');
            var session = environmentComponent.getSession();
            var sessionLocale = session && session.language && session.language.locale;
            var translations = environmentComponent.getConfig('extraTranslations');
            var extraTranslation = _.findWhere(translations, { key: key });
            var finalText = (extraTranslation && extraTranslation[sessionLocale]);
            if (!finalText || finalText === '') {
                finalText = key;
            }
            return {
                isEnabled:
                    this.configuration &&
                    this.configuration.get('enabled') &&
                    this.configuration.get('useCustomTpl'),
                mode: this.options.mode,
                privacyText: finalText,
                privacyLink: 'https://policies.google.com/privacy',
                termsLink: 'https://policies.google.com/terms'
            };
        }
    });
});


define('ACS.ReCaptcha.TermsAndConditionsHook', [
    'jQuery',
    'ACS.ReCaptcha.Terms.View',
    'ReCaptcha.Adapter'
], function ACSReCaptchaTermsAndConditionsHook(
    jQuery,
    TermsView,
    ReCaptchaAdapter
) {
    return {
        mountToApp: function mountToApp(application) {
            var initializePromise = ReCaptchaAdapter.initializedPromise;
            var layout = application.getComponent('Layout');

            // Terms & conditions in login/register
            layout.on('afterShowContent', function afterShowContent(viewName) {
                initializePromise.then(function afterRecaptchaInit() {
                    var config = ReCaptchaAdapter.configuration;
                    if (
                        // show only if at least one of the three registration/login/gc page widgets is enabled
                        (config.isEnabled('r') || config.isEnabled('l') || config.isEnabled('g')) &&
                        config.get('useCustomTpl')
                    ) {
                        if (viewName !== 'LoginRegister.View') {
                            return;
                        }

                        jQuery('.login-register').append(new TermsView({
                            mode: 'loginregister'
                        }).render().$el);
                    }
                });
            });
        }
    };
});


define('ReCaptcha.Adapter', [
    'ReCaptcha.Configuration.Model',
    'jQuery',
    'underscore',
    'Utils'
], function ReCaptchaAdapter(
    ConfigurationModel,
    jQuery,
    _,
    Utils
) {
    'use strict';

    var recaptchaAPI = {};
    var recaptchaIds = {};
    var captchaStatus = {};
    var registeredCallbacks = {};
    var registeredErrorCallbacks = {};
    var activeId;

    return {
        configuration: null,
        configurationPromise: jQuery.Deferred(),
        initializedPromise: jQuery.Deferred(),
        initialized: false,
        getThirdPartyScriptURL: function getThirdPartyScriptURL() {
            return this.configuration.get('jsAPI')
                .replace('{{CALLBACK}}', '__callbackFromRecaptchaACS');
        },
        loadScript: function loadScript() {
            var self = this;
            // eslint-disable-next-line no-underscore-dangle
            window.__callbackFromRecaptchaACS = function __callbackFromRecaptchaACS() {
                recaptchaAPI = window.grecaptcha;
                self.initializedPromise.resolve();
            };
            jQuery.getScript(this.getThirdPartyScriptURL());
            return this.initializedPromise;
        },
        initialize: function initialize() {
            var self = this;
            if (!this.initialized) {
                this.initialized = true;
                this.configuration = new ConfigurationModel();
                this.configuration.fetch().then(function onFetch() {
                    if (self.configuration.get('enabled')) {
                        self.loadScript();
                    }
                    self.configurationPromise.resolve();
                    if (!self.configuration.get('enabled')) {
                        self.initializedPromise.resolve();
                    }
                });
            }
            this.boundCancelationEventHandler = _.bind(this.cancelationEventHandler, this);
        },
        installInstance: function installInstance(id, containerElement) {
            var self = this;
            var lastId = recaptchaIds[id];
            var callBackFn;

            if (!jQuery.contains(window.document, containerElement)) {
                return; // if element is not in DOM, then we don't append recaptcha
            }

            /* instead of actually setting the real final callback to recaptcha
            we register a proxy callback. This allows for more flexibility over how to register captchas
            and when to trigger the validation.
             */
            callBackFn = function fnCallback(recaptchaKey) {
                captchaStatus[id] = 'solved';

                if (self.configuration.get('enabled')) {
                    self.deRegisterCancelationListener();
                }

                if (typeof registeredCallbacks[id] === 'function') {
                    try {
                        registeredCallbacks[id](recaptchaKey);
                    } catch (e) {
                        console.error(e);
                    }
                }

                registeredErrorCallbacks[id] = null;
                registeredCallbacks[id] = null;
            };
            self.initializedPromise.then(function onConfigReady() {
                if (!self.configuration.isEnabled(id)) {
                    return;
                }

                if (lastId !== undefined) {
                    recaptchaAPI.reset(lastId);
                }

                recaptchaIds[id] = recaptchaAPI.render(
                    containerElement,
                    {
                        sitekey: self.configuration.get('siteKey'),
                        badge: 'bottomright',
                        size: 'invisible', // ,
                        callback: callBackFn,
                        'expired-callback': function expiredcallback() {
                            self.cancelationHandler(id);
                        },
                        'error-callback': function errorcallback() {
                            self.cancelationHandler(id);
                        }
                    }
                );

            });
        },
        validate: function validate(id, callbackFn, errorCallbackFn) {
            var self = this;
            var recaptchaToValidate = recaptchaIds[id];
            registeredCallbacks[id] = callbackFn;
            registeredErrorCallbacks[id] = errorCallbackFn;

            self.initializedPromise.then(function onConfigReady() {
                if (!self.configuration.isEnabled(id)) {
                    if (typeof registeredCallbacks[id] === 'function') {
                        try {
                            registeredCallbacks[id]('notEnabled');
                        } catch (e) {
                            console.error(e);
                        }
                    }
                } else {
                    if (captchaStatus[id] === 'solved') {
                        recaptchaAPI.reset(recaptchaToValidate);
                    }

                    activeId = id;
                    _.defer(function() {
                        self.registerCancelationListener();
                    })
                    recaptchaAPI.execute(recaptchaIds[id]);
                }
            });
        },
        registerCancelationListener: function registerCancelationListener() {
            jQuery(document)
                .on('click.acsrecaptcha', this.boundCancelationEventHandler)
                .on('focusout.acsrecaptcha', 'iframe[src*="recaptcha"]', this.boundCancelationEventHandler);
        },
        deRegisterCancelationListener: function deRegisterCancelationListener() {
            jQuery(document)
                .off('.acsrecaptcha');
        },
        cancelationEventHandler: function cancelationEventHandler() {
            this.cancelationHandler(activeId);
        },
        cancelationHandler: function cancelationHandler(id) {
            var cancelationCallback = registeredErrorCallbacks[id];
            this.deRegisterCancelationListener();
            if (id) {
                registeredErrorCallbacks[id] = null;
                registeredCallbacks[id] = null;
            }
            if (typeof cancelationCallback === 'function') {
                try {
                    cancelationCallback({
                        errorCode: 'ERR_RECAPTCHA',
                        errorMessage: Utils.translate('Please Complete ReCaptcha')
                    });
                } catch (e) {
                    console.error(e);
                }
            }
        }
    };
});


/* global getExtensionAssetsPath:false */
define('ReCaptcha.Configuration.Model', [
    'Backbone', // To keep compatibility Aconcagua-onwards
    'Utils'
], function ReCaptchaConfigurationModel(
    Backbone,
    Utils
) {
    return Backbone.Model.extend({
        urlRoot: Utils.getAbsoluteUrl(getExtensionAssetsPath('services/ReCaptcha.Configuration.Service.ss')),
        isEnabled: function isEnabled(section) {
            return this.get('enabled') && this.get(section);
        }
    });
});


define('ReCaptcha', [
    'ReCaptcha.Adapter',
    'underscore'
], function ReCaptchaDef(
    Adapter,
    _
) {
    /*
    Recaptcha class to be instanciated by different widgets
    Interfaces with the actual Recaptcha adapter.
     */
    var ReCaptcha = function ReCaptcha(settings) {
        this.settings = settings;
        Adapter.initialize();
    };

    _.extend(ReCaptcha.prototype, {
        attachTo: function attachTo(selector) {
            Adapter.installInstance(this.settings.configKey, selector);
        },
        validate: function validate(successCallbackFn, errorCallbackFn) {
            Adapter.validate(this.settings.configKey, successCallbackFn, errorCallbackFn);
        },
        getSetupPromise: function getSetupPromise() {
            return Adapter.initializedPromise;
        },
        getConfig: function getConfig() {
            return Adapter.configuration;
        }
    });

    return ReCaptcha;
});


define('ACS.ReCaptcha.EntryPoint', [
    'ACS.ReCaptcha.Terms.View',
    'ACS.ReCaptcha.TermsAndConditionsHook',
    'ACS.ReCaptcha.GuestCheckoutHook',
    'ACS.ReCaptcha.LoginHook',
    'ACS.ReCaptcha.OrderSubmitHook',
    'ACS.ReCaptcha.RegistrationHook'
], function ACSReCaptchaEntryPoint(
    TermsView,
    TermsAndConditions,
    GuestCheckout,
    Login,
    OrderSubmit,
    Registration
) {
    'use strict';

    return {
        mountToApp: function mountToApp(application) {
            // The 3 Account session actions:
            GuestCheckout.mountToApp(application);
            Login.mountToApp(application);
            Registration.mountToApp(application);

            // Terms and conditions handling for Register/login page
            TermsAndConditions.mountToApp(application);

            // Checkout
            OrderSubmit.mountToApp(application);

            TermsView.prototype.application = application;
        }
    };
});


};

try{
	extensions['Saralux.M360_SLXC_Core.2.7.7']();
	SC.addExtensionModule('Saralux.Core.CoreFunctionality');
}
catch(error)
{
	console.error(error)
}

try{
	extensions['Saralux.M360_USKidsGolf_Extension.1.0.0']();
	SC.addExtensionModule('Saralux.USKidsGolfExtension.CustomRegistrationFields');
}
catch(error)
{
	console.error(error)
}

try{
	extensions['ACS.ReCaptcha.4.2.2']();
	SC.addExtensionModule('ACS.ReCaptcha.EntryPoint');
}
catch(error)
{
	console.error(error)
}


SC.ENVIRONMENT.EXTENSIONS_JS_MODULE_NAMES = ["Saralux.Core.AffiliateDirectory.SS2Model","Saralux.Core.AffiliateDirectory.View","Saralux.Core.AffiliateDirectory","Saralux.Core.AttemptTest.SS2Model","Saralux.Core.AttemptTest.View","Saralux.Core.AttemptTest","Saralux.Core.AttemptTestSV.Details.View","Saralux.Core.AttemptTestSV.Question.ImageChoice.View","Saralux.Core.AttemptTestSV.Question.LongText.View","Saralux.Core.AttemptTestSV.Question.MultipleChoice.View","Saralux.Core.AttemptTestSV.Question.ShortText.View","Saralux.Core.AttemptTestSV.Question.YesNo.View","Saralux.Core.AttemptTestSV.StartTest.View","Saralux.Core.AttemptTestSV.View","Saralux.Core.AttemptTestSV","Saralux.Core.Cart.Content.View","Saralux.Core.Cart.Context.Model","Saralux.Core.Cart.Lines.Content.View","Saralux.Core.Cart.MiniCart.Content.View","Saralux.Core.Cart.SS2Model","Saralux.Core.Cart","Saralux.Core.ChaptersSV.Chapter.Accouncements.View","Saralux.Core.ChaptersSV.Chapter.Discussion.View","Saralux.Core.ChaptersSV.Chapter.Events.View","Saralux.Core.ChaptersSV.Chapter.Meetings.View","Saralux.Core.ChaptersSV.Chapter.Members.View","Saralux.Core.ChaptersSV.Chapter.Messages.View","Saralux.Core.ChaptersSV.Chapter.View","Saralux.Core.ChaptersSV.SS2Model","Saralux.Core.ChaptersSV","Saralux.Core.Checkout.Context.Model","Saralux.Core.Checkout.Module.BillingAddress.View","Saralux.Core.Checkout.Module.Cart.View","Saralux.Core.Checkout.Module.Empty.View","Saralux.Core.Checkout.Module.OrderReview.View","Saralux.Core.Checkout.Module.PaymentMethod.CC.View","Saralux.Core.Checkout.Module.PaymentMethod.GC.View","Saralux.Core.Checkout.Module.PaymentMethod.View","Saralux.Core.Checkout.Module.ShippingAddress.View","Saralux.Core.Checkout.Module.ShippingMethod.View","Saralux.Core.Checkout.SS2Model","Saralux.Core.Checkout.View","Saralux.Core.Checkout","Saralux.Core.CommonLibraries.CAPI.Model","Saralux.Core.CommonLibraries.Cart","Saralux.Core.CommonLibraries.General","Saralux.Core.CommonLibraries.Order.SS2Model","Saralux.Core.CommonLibraries.Utilities.Model","Saralux.Core.CommonLibraries.Base64","Saralux.Core.CommunitiesSV.RedirectToCommunity.View","Saralux.Core.CommunitiesSV","CoreFunctionality.HandlebarsHelpers","Saralux.Core.CoreFunctionality.SampleModel.SS2Model","CoreFunctionality.SamplePageType.View","Saralux.Core.SampleView.View",null,"Saralux.Core.CoreFunctionality","Saralux.Core.DashboardModulesSV.UserSettings.MainProfile.View","Saralux.Core.DashboardModulesSV.SS2Model","Saralux.Core.DashboardModulesSV.UserSettings.Addresses.View","Saralux.Core.DashboardModulesSV.UserSettings.BankInformation.View","Saralux.Core.DashboardModulesSV.UserSettings.CustomProfile.View","Saralux.Core.DashboardModulesSV.UserSettings.Notifications.View","Saralux.Core.DashboardModulesSV.UserSettings.PaymentMethods.View","Saralux.Core.DashboardModulesSV.UserSettings.UpdatePassword.View","Saralux.Core.DashboardModulesSV.UserSettings.View","Saralux.Core.DashboardSV.Model","Saralux.Core.DashboardSV.View","Saralux.Core.DashboardSV","Saralux.Core.DynamicFilter.View","Saralux.Core.DynamicFilter.SS2Model","Saralux.M360_SLXC_Core.DynamicFilter","Saralux.Core.ExternalLibraries.CryptoJS411","Saralux.Core.ExternalLibraries.CryptoJS","Saralux.Core.ExternalLibraries.MomentJS","Saralux.Core.ExternalLibraries.OwlCarousel","Saralux.Core.ExternalLibraries.VimeoPlayer","Saralux.Core.Forms.Address.View","Saralux.Core.Forms.CreditCard.View","Saralux.Core.Forms","Saralux.Core.InvitePeopleSV.SS2Model","Saralux.Core.InvitePeopleSV.View","Saralux.Core.ManageSponsorshipSV.Advertisement.View","Saralux.Core.ManageSponsorshipSV.Benefits.One.Time.Item.Discount.View","Saralux.Core.ManageSponsorshipSV.Benefits.View","Saralux.Core.ManageSponsorshipSV.Details.View","Saralux.Core.ManageSponsorshipSV.Edit.Profile.View","Saralux.Core.ManageSponsorshipSV.List.Active.View","Saralux.Core.ManageSponsorshipSV.List.Archive.View","Saralux.Core.ManageSponsorshipSV.List.View","Saralux.Core.ManageSponsorshipSV.SS2Model","Saralux.Core.ManageSponsorshipSV.View","Saralux.Core.ManageSponsorshipSV","Saralux.Core.MediaSeriesSV.Detail.View","Saralux.Core.MediaSeriesSV.List.View","Saralux.Core.MediaSeriesSV.View","Saralux.Core.MediaSeriesSV.SS2Model","Saralux.Core.MediaSeriesSV","Saralux.Core.MyPortal.Context.Model","Saralux.Core.MyPortal.Model","Saralux.Core.MyPortal.View","Saralux.Core.MyPortal","Saralux.Core.MyPublicationsSV.Details.View","Saralux.Core.MyPublicationsSV.List.View","Saralux.Core.MyPublicationsSV.SS2Model","Saralux.Core.MyPublicationsSV.SinglePublication.View","Saralux.Core.MyPublicationsSV.View","Saralux.Core.MyPublicationsSV","Saralux.Core.MyTestsSV.View","Saralux.Core.MyTestsSV","Saralux.Core.OrdersSV.View","Saralux.Core.OrdersSV","Saralux.Core.PaymentDueSV.Checkout.View","Saralux.Core.PaymentDueSV.Model","Saralux.Core.PaymentDueSV.View","Saralux.Core.PaymentDueSV.SS2Model","Saralux.Core.PaymentDueSV","Saralux.Core.PaymentDueSVNew.Checkout.View","Saralux.Core.PaymentDueSVNew.View","Saralux.Core.PaymentDueSVNew.SS2Model","Saralux.Core.PaymentDueSVNew","Saralux.Core.PublicationSubscription.Checkout.View","Saralux.Core.PublicationSubscription.Details.View","Saralux.Core.PublicationSubscription.List.View","Saralux.Core.PublicationSubscription.SS2Model","Saralux.Core.PublicationSubscription","Saralux.Core.ReportsSV.Details.View","Saralux.Core.ReportsSV.List.View","Saralux.Core.ReportsSV.SS2Model","Saralux.Core.ReportsSV.View","Saralux.Core.ReportsSV","Saralux.Core.SSO.SS2Model","Saralux.Core.SSO.View","Saralux.Core.SSO","Saralux.Core.Sponsorship","Saralux.Core.Sponsorship.Checkout.View","Saralux.Core.Sponsorship.Details.View","Saralux.Core.Sponsorship.List.View","Saralux.Core.Sponsorship.Our.Sponsors.View","Saralux.Core.Sponsorship.SS2Model","Saralux.Core.Sponsorship.Sponsor.Profile.Details.View","Saralux.Core.SponsorshipTabs.Model","Saralux.Core.SponsorshipTabs","Saralux.Core.SponsorshipTabs.Confirmation.View","Saralux.Core.SponsorshipTabs.Organization.View","Saralux.Core.SponsorshipTabs.OrganizationAddress.View","Saralux.Core.SponsorshipTabs.Profile.View","Saralux.Core.SponsorshipTabs.View","Saralux.Core.Surveys","Saralux.Core.Surveys.SS2Model","Saralux.Core.Surveys.View","Saralux.Core.SurveysSV","Saralux.Core.SurveysSV.ConfigureSurvey.View","Saralux.Core.SurveysSV.CreateSurvey.View","Saralux.Core.SurveysSV.List.View","Saralux.Core.SurveysSV.Question.ImageChoice.View","Saralux.Core.SurveysSV.Question.Long.View","Saralux.Core.SurveysSV.Question.MultipleChoice.View","Saralux.Core.SurveysSV.Question.OpinionScale.View","Saralux.Core.SurveysSV.Question.RatingScale.View","Saralux.Core.SurveysSV.Question.Short.View","Saralux.Core.SurveysSV.Question.StarRating.View","Saralux.Core.SurveysSV.Question.YesNo.View","Saralux.Core.SurveysSV.SS2Model","Saralux.Core.SurveysSV.View","Saralux.Core.TasksModuleSV.BankInformation.View","Saralux.Core.TasksModuleSV.LaunchTest.View","Saralux.Core.TasksModuleSV.SS2Model","Saralux.Core.TasksModuleSV.SignDocument.View","Saralux.Core.TasksModuleSV.UpdateExternalTest.View","Saralux.Core.TasksModuleSV.UploadDocument.View","Saralux.Core.TasksModuleSV.UploadResumeOrTrasncript.View","Saralux.Core.TasksSV","Saralux.Core.TasksSV.Add.View","Saralux.Core.TasksSV.Detail.View","Saralux.Core.TasksSV.Init.Model","Saralux.Core.TasksSV.List.View","Saralux.Core.TasksSV.Model","Saralux.Core.TasksSV.View","Saralux.Core.Tests","Saralux.Core.Tests.List.View","Saralux.Core.TestsSV.SS2Model","Saralux.Core.TestsSV","Saralux.Core.TestsSV.Tests.Details.View","Saralux.Core.TestsSV.Tests.EditTest.View","Saralux.Core.TestsSV.Tests.ImageChoice.Question.View","Saralux.Core.TestsSV.Tests.List.View","Saralux.Core.TestsSV.Tests.Long.Question.View","Saralux.Core.TestsSV.Tests.MultipleChoice.Question.View","Saralux.Core.TestsSV.Tests.NewTest.View","Saralux.Core.TestsSV.Tests.Short.Question.View","Saralux.Core.TestsSV.Tests.Submission.View","Saralux.Core.TestsSV.Tests.ValidateQuestion","Saralux.Core.TestsSV.Tests.View","Saralux.Core.TestsSV.Tests.YesNo.Question.View","Saralux.Core.WebDirectory.SS2Model","Saralux.Core.WebDirectory","Saralux.Core.WebDirectory.List.View","Saralux.Core.WebDirectory.View","Saralux.Core.WebForms.General","Saralux.Core.WebForms.SS2Model","Saralux.Core.WebForms","Saralux.Core.WebForms.Demo.View","Saralux.Core.WebForms.View","Saralux.USKidsGolfExtension.CustomRegistrationFields.View","Saralux.USKidsGolfExtension.CustomRegistrationFields","ACS.ReCaptcha.Checkout.OrderWizard.Module","ACS.ReCaptcha.EntryPoint","ACS.ReCaptcha.GuestCheckoutHook","ACS.ReCaptcha.LoginHook","ACS.ReCaptcha.OrderSubmitHook","ACS.ReCaptcha.RegistrationHook","ACS.ReCaptcha.Terms.View","ACS.ReCaptcha.TermsAndConditionsHook","ReCaptcha.Adapter","ReCaptcha.Configuration.Model","ReCaptcha"];
